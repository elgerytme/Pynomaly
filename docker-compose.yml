version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pynomaly-postgres
    environment:
      POSTGRES_DB: pynomaly
      POSTGRES_USER: pynomaly_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-pynomaly_pass}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - pynomaly-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pynomaly_user -d pynomaly"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: pynomaly-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_pass} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - pynomaly-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # InfluxDB Time Series Database
  influxdb:
    image: influxdb:2.7-alpine
    container_name: pynomaly-influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD:-influx_pass}
      DOCKER_INFLUXDB_INIT_ORG: pynomaly
      DOCKER_INFLUXDB_INIT_BUCKET: metrics
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN:-influx_token}
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    ports:
      - "8086:8086"
    networks:
      - pynomaly-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Pynomaly API
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    container_name: pynomaly-api
    environment:
      # Database
      DATABASE_URL: postgresql://pynomaly_user:${POSTGRES_PASSWORD:-pynomaly_pass}@postgres:5432/pynomaly
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_pass}@redis:6379/0
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN:-influx_token}
      INFLUXDB_ORG: pynomaly
      INFLUXDB_BUCKET: metrics
      
      # Security
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-super-secret-jwt-key}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-encryption-key}
      
      # Application
      PYNOMALY_ENV: production
      PYNOMALY_LOG_LEVEL: ${LOG_LEVEL:-INFO}
      PYNOMALY_DEBUG: false
      
      # API Configuration
      API_HOST: 0.0.0.0
      API_PORT: 8000
      API_WORKERS: 4
      API_MAX_REQUESTS: 1000
      API_MAX_REQUESTS_JITTER: 50
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
      
      # Rate Limiting
      RATE_LIMIT_REQUESTS: 100
      RATE_LIMIT_PERIOD: 60
      
      # Monitoring
      ENABLE_METRICS: true
      METRICS_PORT: 9090
      
    ports:
      - "8000:8000"
      - "9090:9090"  # Metrics endpoint
    networks:
      - pynomaly-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: pynomaly-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - pynomaly-network
    restart: unless-stopped

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: pynomaly-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - pynomaly-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: pynomaly-nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - pynomaly-network
    depends_on:
      - api
    restart: unless-stopped

  # MinIO Object Storage (for model artifacts)
  minio:
    image: minio/minio:latest
    container_name: pynomaly-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - pynomaly-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

networks:
  pynomaly-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local