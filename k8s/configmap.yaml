apiVersion: v1
kind: ConfigMap
metadata:
  name: pynomaly-config
  namespace: pynomaly
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/component: configuration
data:
  # Application Configuration
  LOG_LEVEL: "INFO"
  PYNOMALY_ENV: "production"
  CORS_ORIGINS: "*"
  
  # Feature Flags
  ENABLE_AUTHENTICATION: "true"
  ENABLE_RATE_LIMITING: "true"
  ENABLE_MONITORING: "true"
  
  # Performance Configuration
  MAX_WORKERS: "4"
  MAX_CONNECTIONS: "100"
  CACHE_TTL_SECONDS: "3600"
  
  # Database Configuration
  POSTGRES_HOST: "postgres-service"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "pynomaly"
  POSTGRES_USER: "pynomaly"
  
  # Redis Configuration
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  
  # InfluxDB Configuration
  INFLUXDB_HOST: "influxdb-service"
  INFLUXDB_PORT: "8086"
  INFLUXDB_ORG: "pynomaly"
  INFLUXDB_BUCKET: "metrics"
  
  # JWT Configuration
  JWT_ALGORITHM: "HS256"
  JWT_EXPIRATION_HOURS: "24"
  
  # Monitoring Configuration
  PROMETHEUS_HOST: "prometheus-service"
  PROMETHEUS_PORT: "9090"
  
  # Application Specific
  API_PREFIX: "/api/v1"
  DOCS_URL: "/docs"
  HEALTH_CHECK_PATH: "/health"
  
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: pynomaly
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/component: nginx
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }
    
    http {
        upstream pynomaly_api {
            server api-service:8000;
        }
        
        server {
            listen 80;
            server_name localhost;
            
            # Security headers
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
            
            # API proxy
            location /api/ {
                proxy_pass http://pynomaly_api;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # Timeouts
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
            }
            
            # Health check
            location /health {
                proxy_pass http://pynomaly_api/health;
                proxy_set_header Host $host;
                access_log off;
            }
            
            # Documentation
            location /docs {
                proxy_pass http://pynomaly_api/docs;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
            }
            
            # Root redirect
            location / {
                return 301 /docs;
            }
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: pynomaly
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/component: prometheus
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    scrape_configs:
      - job_name: 'pynomaly-api'
        static_configs:
          - targets: ['api-service:8000']
        metrics_path: '/metrics'
        scrape_interval: 5s
        
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - pynomaly
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
            
      - job_name: 'kubernetes-services'
        kubernetes_sd_configs:
          - role: service
            namespaces:
              names:
                - pynomaly
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)