apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pynomaly-prod-ingress
  namespace: pynomaly-prod
  labels:
    app: pynomaly
    component: ingress
    environment: production
  annotations:
    # NGINX Ingress Controller
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    
    # SSL/TLS Configuration
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384"
    nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true"
    
    # Security Headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; media-src 'self'; object-src 'none'; child-src 'none'; worker-src 'none'; frame-ancestors 'none'; form-action 'self'; base-uri 'self';";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Permissions-Policy: geolocation=(), microphone=(), camera=()";
    
    # Rate Limiting
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-status-code: "429"
    
    # Connection Limits
    nginx.ingress.kubernetes.io/limit-connections: "100"
    nginx.ingress.kubernetes.io/limit-rps: "100"
    
    # Performance Optimizations
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-next-upstream: "error timeout invalid_header http_502 http_503 http_504"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    nginx.ingress.kubernetes.io/client-body-buffer-size: "16k"
    nginx.ingress.kubernetes.io/client-header-buffer-size: "16k"
    nginx.ingress.kubernetes.io/large-client-header-buffers: "4 16k"
    
    # Compression
    nginx.ingress.kubernetes.io/enable-compression: "true"
    nginx.ingress.kubernetes.io/compression-level: "6"
    nginx.ingress.kubernetes.io/gzip-types: "text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json"
    
    # CORS Configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://pynomaly.com,https://app.pynomaly.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS, HEAD, PATCH"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,X-API-Key,X-Correlation-ID"
    nginx.ingress.kubernetes.io/cors-expose-headers: "X-API-Version,X-RateLimit-Limit,X-RateLimit-Remaining,X-RateLimit-Reset"
    nginx.ingress.kubernetes.io/cors-max-age: "86400"
    
    # Health Check
    nginx.ingress.kubernetes.io/health-check-path: "/health"
    nginx.ingress.kubernetes.io/health-check-interval: "30s"
    nginx.ingress.kubernetes.io/health-check-timeout: "5s"
    
    # Load Balancing
    nginx.ingress.kubernetes.io/load-balance: "round_robin"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    
    # Monitoring
    nginx.ingress.kubernetes.io/enable-access-log: "true"
    nginx.ingress.kubernetes.io/access-log-path: "/var/log/nginx/access.log"
    nginx.ingress.kubernetes.io/error-log-path: "/var/log/nginx/error.log"
    
    # Custom Error Pages
    nginx.ingress.kubernetes.io/custom-http-errors: "400,401,403,404,405,408,413,414,429,500,502,503,504"
    nginx.ingress.kubernetes.io/default-backend: "pynomaly-prod-error-backend"
    
spec:
  tls:
  - hosts:
    - pynomaly.com
    - www.pynomaly.com
    - api.pynomaly.com
    - app.pynomaly.com
    secretName: pynomaly-prod-tls
  rules:
  - host: pynomaly.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pynomaly-prod-service
            port:
              number: 8000
  - host: www.pynomaly.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pynomaly-prod-service
            port:
              number: 8000
  - host: api.pynomaly.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pynomaly-prod-service
            port:
              number: 8000
  - host: app.pynomaly.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pynomaly-prod-service
            port:
              number: 8000

---
apiVersion: v1
kind: Service
metadata:
  name: pynomaly-prod-error-backend
  namespace: pynomaly-prod
  labels:
    app: pynomaly
    component: error-backend
    environment: production
spec:
  selector:
    app: pynomaly-error-backend
    component: error-backend
    environment: production
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pynomaly-prod-error-backend
  namespace: pynomaly-prod
  labels:
    app: pynomaly-error-backend
    component: error-backend
    environment: production
spec:
  replicas: 2
  selector:
    matchLabels:
      app: pynomaly-error-backend
      component: error-backend
      environment: production
  template:
    metadata:
      labels:
        app: pynomaly-error-backend
        component: error-backend
        environment: production
    spec:
      containers:
      - name: error-backend
        image: nginx:alpine
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
          limits:
            memory: "64Mi"
            cpu: "100m"
        volumeMounts:
        - name: error-pages
          mountPath: /usr/share/nginx/html
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
        securityContext:
          runAsNonRoot: true
          runAsUser: 101
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
      volumes:
      - name: error-pages
        configMap:
          name: error-pages-config
      - name: nginx-config
        configMap:
          name: error-backend-nginx-config
      securityContext:
        fsGroup: 101

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: error-pages-config
  namespace: pynomaly-prod
  labels:
    app: pynomaly-error-backend
    component: error-backend
    environment: production
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Service Unavailable</title>
        <style>
            body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
            h1 { color: #333; }
            .error-code { font-size: 72px; color: #e74c3c; }
            .message { font-size: 18px; color: #666; margin: 20px 0; }
            .logo { width: 200px; margin: 20px auto; }
        </style>
    </head>
    <body>
        <div class="logo">
            <h2>Pynomaly</h2>
        </div>
        <div class="error-code">503</div>
        <h1>Service Temporarily Unavailable</h1>
        <p class="message">We're performing maintenance. Please try again in a few minutes.</p>
        <p class="message">If the problem persists, please contact support at support@pynomaly.com</p>
    </body>
    </html>
  400.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Bad Request</title>
        <style>
            body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
            h1 { color: #333; }
            .error-code { font-size: 72px; color: #e74c3c; }
            .message { font-size: 18px; color: #666; margin: 20px 0; }
        </style>
    </head>
    <body>
        <div class="error-code">400</div>
        <h1>Bad Request</h1>
        <p class="message">The request could not be understood by the server.</p>
    </body>
    </html>
  404.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Page Not Found</title>
        <style>
            body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
            h1 { color: #333; }
            .error-code { font-size: 72px; color: #e74c3c; }
            .message { font-size: 18px; color: #666; margin: 20px 0; }
        </style>
    </head>
    <body>
        <div class="error-code">404</div>
        <h1>Page Not Found</h1>
        <p class="message">The requested page could not be found.</p>
    </body>
    </html>
  500.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Internal Server Error</title>
        <style>
            body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
            h1 { color: #333; }
            .error-code { font-size: 72px; color: #e74c3c; }
            .message { font-size: 18px; color: #666; margin: 20px 0; }
        </style>
    </head>
    <body>
        <div class="error-code">500</div>
        <h1>Internal Server Error</h1>
        <p class="message">Something went wrong on our end. Please try again later.</p>
    </body>
    </html>

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: error-backend-nginx-config
  namespace: pynomaly-prod
  labels:
    app: pynomaly-error-backend
    component: error-backend
    environment: production
data:
  default.conf: |
    server {
        listen 8080;
        server_name _;
        
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }
        
        location /400 {
            root /usr/share/nginx/html;
            try_files /400.html =404;
        }
        
        location /404 {
            root /usr/share/nginx/html;
            try_files /404.html =404;
        }
        
        location /500 {
            root /usr/share/nginx/html;
            try_files /500.html =404;
        }
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: pynomaly-prod-tls
  namespace: pynomaly-prod
  labels:
    app: pynomaly
    component: tls
    environment: production
spec:
  secretName: pynomaly-prod-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  commonName: pynomaly.com
  dnsNames:
  - pynomaly.com
  - www.pynomaly.com
  - api.pynomaly.com
  - app.pynomaly.com
  duration: 2160h # 90 days
  renewBefore: 360h # 15 days

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: pynomaly-prod-network-policy
  namespace: pynomaly-prod
  labels:
    app: pynomaly
    component: network-policy
    environment: production
spec:
  podSelector:
    matchLabels:
      app: pynomaly
      environment: production
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
          environment: production
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
          environment: production
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app: mongodb
          environment: production
    ports:
    - protocol: TCP
      port: 27017
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80