[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "my-project"
description = "A comprehensive monorepo project"
version = "0.1.0"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "fastapi>=0.104.0",
    "typer>=0.9.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "uvicorn[standard]>=0.23.0",
    "dependency-injector>=4.41.0",
    "structlog>=23.0.0",
    "rich>=13.0.0",
    "httpx>=0.25.0",
    "aiofiles>=23.0.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "prometheus-client>=0.17.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-instrumentation-fastapi>=0.41b0",
    "redis>=5.0.0",
]

[project.optional-dependencies]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "pytest-timeout>=2.1.0",
    "hypothesis>=6.82.0",
    "factory-boy>=3.3.0",
    "freezegun>=1.2.0",
    "respx>=0.20.0",
    "testcontainers>=3.7.0",
]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pytest-mutagen>=1.3.0",
    "vulture>=2.9.0",
    "radon>=6.0.0",
    "xenon>=0.9.0",
    "interrogate>=1.5.0",
    "pip-audit>=2.6.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocstrings[python]>=0.22.0",
]
monitoring = [
    "prometheus-client>=0.17.0",
    "opentelemetry-exporter-prometheus>=1.12.0",
    "opentelemetry-exporter-jaeger>=1.20.0",
    "grafana-client>=3.5.0",
]
enterprise = [
    "celery>=5.3.0",
    "flower>=2.0.0",
    "kubernetes>=27.2.0",
    "docker>=6.1.0",
    "boto3>=1.28.0",
    "azure-storage-blob>=12.17.0",
    "google-cloud-storage>=2.10.0",
]

[project.urls]
Homepage = "https://github.com/username/my-project"
Documentation = "https://my-project.readthedocs.io/"
Repository = "https://github.com/username/my-project"
Issues = "https://github.com/username/my-project/issues"
Changelog = "https://github.com/username/my-project/blob/main/CHANGELOG.md"

[project.scripts]
my-project = "packages.cli.app:main"
my-project-api = "packages.api.app:main"

[tool.hatch.version]
path = "src/packages/core/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/packages"]

[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
    "pytest-mock",
    "ruff",
    "mypy",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=src/packages --cov-report=term-missing --cov-report=html {args:tests}"
lint = "ruff check {args:src tests}"
format = "ruff format {args:src tests}"
typecheck = "mypy {args:src}"
quality = ["lint", "format", "typecheck"]
all = ["quality", "test-cov"]

[tool.hatch.envs.docs]
dependencies = [
    "mkdocs",
    "mkdocs-material",
    "mkdocs-mermaid2-plugin",
    "mkdocstrings[python]",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build"
serve = "mkdocs serve"
deploy = "mkdocs gh-deploy"

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
    "A",  # flake8-builtins
    "T20", # flake8-print
    "PT", # flake8-pytest-style
    "Q",  # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "ERA", # eradicate
    "PL", # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "PERF", # perflint
    "FURB", # refurb
    "LOG", # flake8-logging
    "G", # flake8-logging-format
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR2004", # magic value
    "TRY003", # avoid specifying long messages outside the exception class
    "FLY002", # consider f-string instead of string concatenation
]

[tool.ruff.per-file-ignores]
"tests/*" = ["ARG", "PLR2004", "S101", "TRY301"]
"scripts/*" = ["T20"]

[tool.ruff.isort]
known-first-party = ["packages"]
split-on-trailing-comma = true

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
implicit_reexport = false
strict_equality = true
extra_checks = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.4"
testpaths = ["tests", "src/integration_tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src/packages",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--timeout=300",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "smoke: marks tests as smoke tests",
    "performance: marks tests as performance tests",
    "security: marks tests as security tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src/packages"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
    "TYPE_CHECKING",
]

[tool.bandit]
exclude_dirs = ["tests", "env", "venv", ".venv", "build", "dist"]
skips = ["B101", "B601"]

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = false
ignore-nested-classes = false
ignore-setters = false
fail-under = 80
exclude = ["setup.py", "docs", "build", "tests"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 0
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false

[tool.vulture]
exclude = ["tests/", "docs/", "build/", "dist/"]
ignore_decorators = ["@app.route", "@require_*"]
ignore_names = ["_*", "setUp", "tearDown"]
make_whitelist = true
min_confidence = 60
paths = ["src/packages"]
sort_by_size = true
verbose = false