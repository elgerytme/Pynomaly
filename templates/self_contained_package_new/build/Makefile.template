# {package_name} - Self-Contained Package Makefile
# ================================================
# Complete build, test, and deployment automation

# Package configuration
PACKAGE_NAME := {package_name}
VERSION := $(shell python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
PYTHON := python
PIP := pip
DOCKER_IMAGE := $(PACKAGE_NAME):$(VERSION)
DOCKER_REGISTRY := {docker_registry}

# Directories - Updated for new structure
SRC_DIR := src
TEST_DIR := tests
DOCS_DIR := docs
REPORTS_DIR := reports
BUILD_DIR := build
DEPLOY_DIR := deploy
DOCKER_DIR := deploy/docker
K8S_DIR := deploy/k8s
MONITORING_DIR := deploy/monitoring
CONFIG_DIR := config
SCRIPTS_DIR := scripts

# Colors for output
BLUE := \033[0;34m
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m # No Color

.PHONY: help
help: ## Show this help message
	@echo "$(BLUE){package_name} - Self-Contained Package$(NC)"
	@echo "========================================"
	@echo ""
	@echo "$(GREEN)Available targets:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(BLUE)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# =============================================================================
# Development Environment
# =============================================================================

.PHONY: install install-dev install-all
install: ## Install package dependencies
	@echo "$(BLUE)Installing package dependencies...$(NC)"
	$(PIP) install -e .

install-dev: ## Install development dependencies
	@echo "$(BLUE)Installing development dependencies...$(NC)"
	$(PIP) install -e ".[dev]"
	pre-commit install

install-all: ## Install all dependencies
	@echo "$(BLUE)Installing all dependencies...$(NC)"
	$(PIP) install -e ".[all]"
	pre-commit install

.PHONY: setup setup-dev setup-prod
setup: install ## Setup basic development environment
	@echo "$(GREEN)✅ Basic environment setup complete$(NC)"

setup-dev: install-dev ## Setup complete development environment
	@echo "$(BLUE)Setting up development environment...$(NC)"
	mkdir -p $(REPORTS_DIR)
	mkdir -p logs
	@echo "$(GREEN)✅ Development environment setup complete$(NC)"

setup-prod: install ## Setup production environment
	@echo "$(BLUE)Setting up production environment...$(NC)"
	mkdir -p logs
	mkdir -p data
	@echo "$(GREEN)✅ Production environment setup complete$(NC)"

# =============================================================================
# Code Quality
# =============================================================================

.PHONY: format lint type-check security-check quality-check
format: ## Format code using black and isort
	@echo "$(BLUE)Formatting code...$(NC)"
	black $(SRC_DIR) $(TEST_DIR)
	isort $(SRC_DIR) $(TEST_DIR)

lint: ## Run linting with ruff
	@echo "$(BLUE)Running linter...$(NC)"
	ruff check $(SRC_DIR) $(TEST_DIR)

type-check: ## Run type checking with mypy
	@echo "$(BLUE)Running type checker...$(NC)"
	mypy $(SRC_DIR)

security-check: ## Run security checks
	@echo "$(BLUE)Running security checks...$(NC)"
	bandit -r $(SRC_DIR)
	safety check
	pip-audit

quality-check: lint type-check security-check ## Run all quality checks
	@echo "$(GREEN)✅ All quality checks passed$(NC)"

# =============================================================================
# Testing
# =============================================================================

.PHONY: test test-unit test-integration test-e2e test-performance test-security test-all
test: test-unit ## Run unit tests
	@echo "$(GREEN)✅ Unit tests completed$(NC)"

test-unit: ## Run unit tests
	@echo "$(BLUE)Running unit tests...$(NC)"
	pytest tests/unit -v --tb=short

test-integration: ## Run integration tests
	@echo "$(BLUE)Running integration tests...$(NC)"
	pytest tests/integration -v --tb=short

test-e2e: ## Run end-to-end tests
	@echo "$(BLUE)Running end-to-end tests...$(NC)"
	pytest tests/e2e -v --tb=short

test-performance: ## Run performance tests
	@echo "$(BLUE)Running performance tests...$(NC)"
	pytest tests/performance -v --tb=short --benchmark-only

test-security: ## Run security tests
	@echo "$(BLUE)Running security tests...$(NC)"
	pytest tests/security -v --tb=short

test-all: ## Run all tests
	@echo "$(BLUE)Running all tests...$(NC)"
	pytest tests/ -v --tb=short
	@echo "$(GREEN)✅ All tests completed$(NC)"

.PHONY: test-coverage coverage-report
test-coverage: ## Run tests with coverage
	@echo "$(BLUE)Running tests with coverage...$(NC)"
	pytest tests/ --cov --cov-report=html --cov-report=term-missing

coverage-report: test-coverage ## Generate coverage report
	@echo "$(BLUE)Coverage report generated at: $(REPORTS_DIR)/coverage/index.html$(NC)"
	@echo "$(BLUE)Opening coverage report...$(NC)"
	python -m webbrowser $(REPORTS_DIR)/coverage/index.html

# =============================================================================
# Build & Package
# =============================================================================

.PHONY: build clean clean-build clean-pyc build-wheel build-docker
clean: clean-build clean-pyc ## Clean all build artifacts
	@echo "$(GREEN)✅ Cleaned all artifacts$(NC)"

clean-build: ## Clean build artifacts
	@echo "$(BLUE)Cleaning build artifacts...$(NC)"
	rm -fr build/
	rm -fr dist/
	rm -fr *.egg-info

clean-pyc: ## Clean Python file artifacts
	@echo "$(BLUE)Cleaning Python artifacts...$(NC)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete

build: clean ## Build package
	@echo "$(BLUE)Building package...$(NC)"
	$(PYTHON) -m build

build-wheel: clean ## Build wheel package
	@echo "$(BLUE)Building wheel...$(NC)"
	$(PYTHON) -m build --wheel

build-docker: ## Build Docker image
	@echo "$(BLUE)Building Docker image: $(DOCKER_IMAGE)$(NC)"
	docker build -t $(DOCKER_IMAGE) -f docker/Dockerfile .
	docker tag $(DOCKER_IMAGE) $(PACKAGE_NAME):latest

# =============================================================================
# Documentation
# =============================================================================

.PHONY: docs docs-serve docs-build docs-deploy
docs-serve: ## Serve documentation locally
	@echo "$(BLUE)Serving documentation at http://localhost:8000$(NC)"
	mkdocs serve

docs-build: ## Build documentation
	@echo "$(BLUE)Building documentation...$(NC)"
	mkdocs build

docs-deploy: docs-build ## Deploy documentation
	@echo "$(BLUE)Deploying documentation...$(NC)"
	mkdocs gh-deploy --force

# =============================================================================
# Local Development
# =============================================================================

.PHONY: dev-up dev-down dev-logs dev-shell dev-db-up dev-db-down
dev-up: ## Start development environment
	@echo "$(BLUE)Starting development environment...$(NC)"
	docker-compose -f docker-compose.yml up -d
	@echo "$(GREEN)✅ Development environment started$(NC)"

dev-down: ## Stop development environment
	@echo "$(BLUE)Stopping development environment...$(NC)"
	docker-compose -f docker-compose.yml down

dev-logs: ## Show development logs
	docker-compose -f docker-compose.yml logs -f

dev-shell: ## Get shell in development container
	docker-compose -f docker-compose.yml exec $(PACKAGE_NAME) /bin/bash

dev-db-up: ## Start development database
	@echo "$(BLUE)Starting development database...$(NC)"
	docker-compose -f docker-compose.yml up -d db

dev-db-down: ## Stop development database
	@echo "$(BLUE)Stopping development database...$(NC)"
	docker-compose -f docker-compose.yml stop db

# =============================================================================
# Production Deployment
# =============================================================================

.PHONY: deploy deploy-staging deploy-prod deploy-k8s health-check
deploy: deploy-staging ## Deploy to staging environment

deploy-staging: build-docker ## Deploy to staging
	@echo "$(BLUE)Deploying to staging...$(NC)"
	docker tag $(DOCKER_IMAGE) $(DOCKER_REGISTRY)/$(PACKAGE_NAME):staging-$(VERSION)
	docker push $(DOCKER_REGISTRY)/$(PACKAGE_NAME):staging-$(VERSION)
	kubectl apply -f k8s/staging/

deploy-prod: build-docker ## Deploy to production
	@echo "$(YELLOW)Deploying to production...$(NC)"
	@echo "$(RED)⚠️  This will deploy to production. Continue? [y/N]$(NC)" && read ans && [ $${ans:-N} = y ]
	docker tag $(DOCKER_IMAGE) $(DOCKER_REGISTRY)/$(PACKAGE_NAME):$(VERSION)
	docker push $(DOCKER_REGISTRY)/$(PACKAGE_NAME):$(VERSION)
	kubectl apply -f k8s/production/

deploy-k8s: ## Deploy to Kubernetes
	@echo "$(BLUE)Deploying to Kubernetes...$(NC)"
	kubectl apply -f k8s/

health-check: ## Check application health
	@echo "$(BLUE)Checking application health...$(NC)"
	./scripts/health-check.sh

# =============================================================================
# Database Management
# =============================================================================

.PHONY: db-migrate db-upgrade db-downgrade db-reset db-seed
db-migrate: ## Create database migration
	@echo "$(BLUE)Creating database migration...$(NC)"
	alembic revision --autogenerate

db-upgrade: ## Upgrade database
	@echo "$(BLUE)Upgrading database...$(NC)"
	alembic upgrade head

db-downgrade: ## Downgrade database
	@echo "$(BLUE)Downgrading database...$(NC)"
	alembic downgrade -1

db-reset: ## Reset database
	@echo "$(YELLOW)Resetting database...$(NC)"
	@echo "$(RED)⚠️  This will delete all data. Continue? [y/N]$(NC)" && read ans && [ $${ans:-N} = y ]
	alembic downgrade base
	alembic upgrade head

db-seed: ## Seed database with test data
	@echo "$(BLUE)Seeding database...$(NC)"
	python scripts/seed-database.py

# =============================================================================
# Monitoring & Maintenance
# =============================================================================

.PHONY: logs monitor profile benchmark security-scan
logs: ## Show application logs
	docker-compose logs -f $(PACKAGE_NAME)

monitor: ## Start monitoring dashboard
	@echo "$(BLUE)Starting monitoring dashboard...$(NC)"
	docker-compose -f docker-compose.monitoring.yml up -d

profile: ## Run performance profiling
	@echo "$(BLUE)Running performance profiling...$(NC)"
	py-spy record -o $(REPORTS_DIR)/profile.svg -- python -m $(PACKAGE_NAME)

benchmark: ## Run benchmarks
	@echo "$(BLUE)Running benchmarks...$(NC)"
	pytest tests/performance/ --benchmark-only --benchmark-sort=mean

security-scan: ## Run comprehensive security scan
	@echo "$(BLUE)Running security scan...$(NC)"
	docker run --rm -v $(PWD):/app securecodewarrior/docker-security-scan /app

# =============================================================================
# Release Management
# =============================================================================

.PHONY: release release-patch release-minor release-major version
version: ## Show current version
	@echo "$(BLUE)Current version: $(VERSION)$(NC)"

release-patch: ## Release patch version
	@echo "$(BLUE)Releasing patch version...$(NC)"
	bumpversion patch
	git push origin main --tags

release-minor: ## Release minor version
	@echo "$(BLUE)Releasing minor version...$(NC)"
	bumpversion minor
	git push origin main --tags

release-major: ## Release major version
	@echo "$(BLUE)Releasing major version...$(NC)"
	bumpversion major
	git push origin main --tags

release: ## Create release (interactive)
	@echo "$(BLUE)Creating release...$(NC)"
	@echo "Select version type:"
	@echo "  1) Patch ($(shell bumpversion --dry-run patch --list | grep new_version | sed 's/new_version=//'))"
	@echo "  2) Minor ($(shell bumpversion --dry-run minor --list | grep new_version | sed 's/new_version=//'))"
	@echo "  3) Major ($(shell bumpversion --dry-run major --list | grep new_version | sed 's/new_version=//'))"
	@read -p "Enter choice [1]: " choice; \
	case $$choice in \
		2) make release-minor ;; \
		3) make release-major ;; \
		*) make release-patch ;; \
	esac

# =============================================================================
# Utility Commands
# =============================================================================

.PHONY: requirements freeze-requirements check-dependencies update-dependencies
requirements: ## Generate requirements.txt from pyproject.toml
	@echo "$(BLUE)Generating requirements.txt...$(NC)"
	pip-compile pyproject.toml

freeze-requirements: ## Freeze current requirements
	@echo "$(BLUE)Freezing requirements...$(NC)"
	pip freeze > requirements.txt

check-dependencies: ## Check for dependency vulnerabilities
	@echo "$(BLUE)Checking dependencies...$(NC)"
	safety check
	pip-audit

update-dependencies: ## Update dependencies
	@echo "$(BLUE)Updating dependencies...$(NC)"
	pip install --upgrade pip
	pip-compile --upgrade pyproject.toml

.PHONY: info status env
info: ## Show package information
	@echo "$(BLUE){package_name} Package Information$(NC)"
	@echo "================================="
	@echo "Package: $(PACKAGE_NAME)"
	@echo "Version: $(VERSION)"
	@echo "Python: $(shell python --version)"
	@echo "Docker Image: $(DOCKER_IMAGE)"

status: ## Show package status
	@echo "$(BLUE)Package Status$(NC)"
	@echo "=============="
	@echo "Git branch: $(shell git branch --show-current)"
	@echo "Git commit: $(shell git rev-parse --short HEAD)"
	@echo "Modified files: $(shell git status --porcelain | wc -l)"
	@echo "Docker images: $(shell docker images | grep $(PACKAGE_NAME) | wc -l)"

env: ## Show environment information
	@echo "$(BLUE)Environment Information$(NC)"
	@echo "======================="
	@env | grep -E "(PYTHON|PIP|DOCKER|K8S|AWS|GCP|AZURE)" | sort

# Default target
.DEFAULT_GOAL := help