# {package_name} - Self-Contained Package Development Environment
# ============================================================
# Complete local development environment with all dependencies

version: '3.8'

services:
  # Main application service
  {package_name}:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: development
      args:
        PACKAGE_NAME: {package_name}
        PACKAGE_VERSION: 0.1.0
        BUILD_DATE: ${{DATE}}
        VCS_REF: ${{GIT_COMMIT}}
    container_name: {package_name}_app
    ports:
      - "8000:8000"  # Main application port
      - "8080:8080"  # Health/admin port
      - "5678:5678"  # Debugger port
    volumes:
      - ./src:/app/src:ro
      - ./config:/app/config:ro
      - ./data:/app/data
      - ./logs:/app/logs
      - /tmp/{package_name}:/tmp
    environment:
      # Application configuration
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - RELOAD=true
      
      # Database configuration
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/{package_name}_dev
      - REDIS_URL=redis://redis:6379/0
      
      # Service discovery
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - ELASTICSEARCH_HOST=elasticsearch
      
      # Monitoring
      - PROMETHEUS_HOST=prometheus
      - GRAFANA_HOST=grafana
      
      # Security
      - SECRET_KEY=dev-secret-key-change-in-production
      - JWT_SECRET=dev-jwt-secret-change-in-production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - {package_name}_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "./scripts/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: {package_name}_postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      - POSTGRES_DB={package_name}_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    networks:
      - {package_name}_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d {package_name}_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: {package_name}_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - {package_name}_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Elasticsearch (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: {package_name}_elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    networks:
      - {package_name}_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: {package_name}_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules/:/etc/prometheus/rules/:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - {package_name}_network
    restart: unless-stopped

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: {package_name}_grafana
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - {package_name}_network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Jaeger tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: {package_name}_jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - {package_name}_network
    restart: unless-stopped

  # Message queue (RabbitMQ)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: {package_name}_rabbitmq
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=password
    networks:
      - {package_name}_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: {package_name}_minio
    ports:
      - "9000:9000"   # API port
      - "9001:9001"   # Console port
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    command: server /data --console-address ":9001"
    networks:
      - {package_name}_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: {package_name}_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl/:/etc/nginx/ssl/:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - {package_name}
    networks:
      - {package_name}_network
    restart: unless-stopped

  # Test runner service
  tests:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: testing
    container_name: {package_name}_tests
    volumes:
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
      - ./reports:/app/reports
    environment:
      - ENVIRONMENT=test
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/{package_name}_test
      - REDIS_URL=redis://redis:6379/1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - {package_name}_network
    profiles:
      - testing

  # Security scanner
  security:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: security
    container_name: {package_name}_security
    volumes:
      - ./reports:/app/reports
    profiles:
      - security

  # Performance testing
  performance:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: performance
    container_name: {package_name}_performance
    ports:
      - "8089:8089"  # Locust web UI
    volumes:
      - ./tests/performance:/app/tests/performance:ro
      - ./reports:/app/reports
    depends_on:
      - {package_name}
    networks:
      - {package_name}_network
    profiles:
      - performance

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  rabbitmq_data:
    driver: local
  minio_data:
    driver: local
  nginx_logs:
    driver: local

# Networks
networks:
  {package_name}_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16