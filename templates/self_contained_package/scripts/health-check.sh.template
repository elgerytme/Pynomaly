#!/bin/bash
# {package_name} - Health Check Script
# ==================================
# Comprehensive health check for self-contained package

set -euo pipefail

# Configuration
HEALTH_ENDPOINT="http://localhost:8081/health"
READY_ENDPOINT="http://localhost:8081/ready"
LIVE_ENDPOINT="http://localhost:8081/live"
STARTUP_ENDPOINT="http://localhost:8081/startup"
METRICS_ENDPOINT="http://localhost:8080/metrics"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {{
    echo -e "${{BLUE}}[$(date +'%Y-%m-%d %H:%M:%S')]${{NC}} $1"
}}

error() {{
    echo -e "${{RED}}[ERROR]${{NC}} $1" >&2
}}

warn() {{
    echo -e "${{YELLOW}}[WARN]${{NC}} $1"
}}

success() {{
    echo -e "${{GREEN}}[SUCCESS]${{NC}} $1"
}}

# Check if curl is available
if ! command -v curl &> /dev/null; then
    error "curl is not available. Please install curl."
    exit 1
fi

# Function to check HTTP endpoint
check_endpoint() {{
    local name="$1"
    local url="$2"
    local expected_status="$3"
    local timeout="$4"
    
    log "Checking $name at $url"
    
    local response
    local status_code
    
    if response=$(curl -s -w "%{{http_code}}" -m "$timeout" "$url" 2>/dev/null); then
        status_code="${{response: -3}}"
        body="${{response%???}}"
        
        if [[ "$status_code" == "$expected_status" ]]; then
            success "$name check passed (HTTP $status_code)"
            return 0
        else
            error "$name check failed - Expected HTTP $expected_status, got HTTP $status_code"
            if [[ -n "$body" ]]; then
                echo "Response body: $body"
            fi
            return 1
        fi
    else
        error "$name check failed - Could not reach endpoint"
        return 1
    fi
}}

# Function to check database connectivity
check_database() {{
    log "Checking database connectivity"
    
    local db_check_cmd
    if [[ -n "${{DATABASE_URL:-}}" ]]; then
        # Extract database type from URL
        if [[ "$DATABASE_URL" == postgresql* ]]; then
            # PostgreSQL check
            if command -v pg_isready &> /dev/null; then
                if pg_isready -d "$DATABASE_URL" -t 10; then
                    success "Database connectivity check passed"
                    return 0
                else
                    error "Database connectivity check failed"
                    return 1
                fi
            else
                warn "pg_isready not available, skipping database check"
                return 0
            fi
        else
            warn "Unsupported database type, skipping connectivity check"
            return 0
        fi
    else
        warn "DATABASE_URL not set, skipping database check"
        return 0
    fi
}}

# Function to check Redis connectivity
check_redis() {{
    log "Checking Redis connectivity"
    
    if [[ -n "${{REDIS_URL:-}}" ]]; then
        if command -v redis-cli &> /dev/null; then
            local redis_host
            local redis_port
            
            # Parse Redis URL (simplified)
            if [[ "$REDIS_URL" =~ redis://([^:]+):([0-9]+) ]]; then
                redis_host="${{BASH_REMATCH[1]}}"
                redis_port="${{BASH_REMATCH[2]}}"
                
                if redis-cli -h "$redis_host" -p "$redis_port" ping | grep -q "PONG"; then
                    success "Redis connectivity check passed"
                    return 0
                else
                    error "Redis connectivity check failed"
                    return 1
                fi
            else
                warn "Could not parse Redis URL, skipping connectivity check"
                return 0
            fi
        else
            warn "redis-cli not available, skipping Redis check"
            return 0
        fi
    else
        warn "REDIS_URL not set, skipping Redis check"
        return 0
    fi
}}

# Function to check disk space
check_disk_space() {{
    log "Checking disk space"
    
    local usage
    usage=$(df -h /app 2>/dev/null | awk 'NR==2 {{print $5}}' | sed 's/%//')
    
    if [[ -n "$usage" ]]; then
        if [[ "$usage" -lt 90 ]]; then
            success "Disk space check passed ($usage% used)"
            return 0
        else
            warn "Disk space usage is high: $usage%"
            return 1
        fi
    else
        warn "Could not check disk space"
        return 0
    fi
}}

# Function to check memory usage
check_memory() {{
    log "Checking memory usage"
    
    if [[ -f /proc/meminfo ]]; then
        local mem_total
        local mem_available
        local mem_usage
        
        mem_total=$(grep MemTotal /proc/meminfo | awk '{{print $2}}')
        mem_available=$(grep MemAvailable /proc/meminfo | awk '{{print $2}}')
        
        if [[ -n "$mem_total" && -n "$mem_available" ]]; then
            mem_usage=$(( (mem_total - mem_available) * 100 / mem_total ))
            
            if [[ "$mem_usage" -lt 90 ]]; then
                success "Memory usage check passed ($mem_usage% used)"
                return 0
            else
                warn "Memory usage is high: $mem_usage%"
                return 1
            fi
        fi
    fi
    
    warn "Could not check memory usage"
    return 0
}}

# Function to check process status
check_process() {{
    log "Checking {package_name} process"
    
    if pgrep -f "{package_name}" > /dev/null; then
        success "Process check passed"
        return 0
    else
        error "Process check failed - {package_name} process not found"
        return 1
    fi
}}

# Function to check configuration files
check_config() {{
    log "Checking configuration files"
    
    local config_dir="/app/config"
    local required_files=("app.yml" "logging.yml")
    local failed=0
    
    for file in "${{required_files[@]}}"; do
        if [[ -f "$config_dir/$file" ]]; then
            success "Configuration file $file found"
        else
            error "Configuration file $file not found"
            failed=1
        fi
    done
    
    return $failed
}}

# Function to check log files
check_logs() {{
    log "Checking log files"
    
    local log_dir="/app/logs"
    
    if [[ -d "$log_dir" ]]; then
        if [[ -w "$log_dir" ]]; then
            success "Log directory is writable"
            return 0
        else
            error "Log directory is not writable"
            return 1
        fi
    else
        error "Log directory does not exist"
        return 1
    fi
}}

# Main health check function
main() {{
    local exit_code=0
    local check_type="${{1:-full}}"
    
    log "Starting {package_name} health check (mode: $check_type)"
    
    case "$check_type" in
        "startup")
            log "Running startup health check"
            check_endpoint "Startup" "$STARTUP_ENDPOINT" "200" "30" || exit_code=1
            check_config || exit_code=1
            check_logs || exit_code=1
            ;;
        "live"|"liveness")
            log "Running liveness health check"
            check_endpoint "Liveness" "$LIVE_ENDPOINT" "200" "10" || exit_code=1
            check_process || exit_code=1
            ;;
        "ready"|"readiness")
            log "Running readiness health check"
            check_endpoint "Readiness" "$READY_ENDPOINT" "200" "10" || exit_code=1
            check_database || exit_code=1
            check_redis || exit_code=1
            ;;
        "full"|*)
            log "Running full health check"
            check_endpoint "Health" "$HEALTH_ENDPOINT" "200" "30" || exit_code=1
            check_endpoint "Readiness" "$READY_ENDPOINT" "200" "10" || exit_code=1
            check_endpoint "Liveness" "$LIVE_ENDPOINT" "200" "10" || exit_code=1
            check_endpoint "Metrics" "$METRICS_ENDPOINT" "200" "15" || exit_code=1
            check_database || exit_code=1
            check_redis || exit_code=1
            check_disk_space || exit_code=1
            check_memory || exit_code=1
            check_process || exit_code=1
            check_config || exit_code=1
            check_logs || exit_code=1
            ;;
    esac
    
    if [[ $exit_code -eq 0 ]]; then
        success "Health check completed successfully"
    else
        error "Health check failed"
    fi
    
    return $exit_code
}}

# Run health check if script is executed directly
if [[ "${{BASH_SOURCE[0]}}" == "${{0}}" ]]; then
    main "$@"
fi