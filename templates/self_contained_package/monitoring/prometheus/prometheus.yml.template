# {package_name} - Prometheus Configuration
# =======================================
# Complete monitoring configuration for self-contained package

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: '{package_name}-cluster'
    environment: '${ENVIRONMENT:-development}'

rule_files:
  - "rules/*.yml"

alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

scrape_configs:
  # Self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  # Main application metrics
  - job_name: '{package_name}'
    static_configs:
      - targets: ['{package_name}:8080']
    scrape_interval: 10s
    metrics_path: /metrics
    scheme: http
    basic_auth:
      username: 'prometheus'
      password: 'prometheus_password'
    scrape_timeout: 5s
    honor_labels: false
    sample_limit: 1000
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: '{package_name}'
      - source_labels: [__scheme__]
        target_label: scheme
      - source_labels: [__metrics_path__]
        target_label: metrics_path

  # Application health endpoints
  - job_name: '{package_name}-health'
    static_configs:
      - targets: ['{package_name}:8081']
    scrape_interval: 30s
    metrics_path: /health/metrics
    scheme: http
    scrape_timeout: 10s

  # PostgreSQL metrics (if using postgres_exporter)
  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres-exporter:9187']
    scrape_interval: 30s

  # Redis metrics (if using redis_exporter)
  - job_name: 'redis'
    static_configs:
      - targets: ['redis-exporter:9121']
    scrape_interval: 30s

  # Node exporter for system metrics
  - job_name: 'node'
    static_configs:
      - targets: ['node-exporter:9100']
    scrape_interval: 30s

  # cAdvisor for container metrics
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']
    scrape_interval: 30s

  # Docker daemon metrics
  - job_name: 'docker'
    static_configs:
      - targets: ['docker-daemon:9323']
    scrape_interval: 30s

  # Application-specific business metrics
  - job_name: '{package_name}-business'
    static_configs:
      - targets: ['{package_name}:8080']
    scrape_interval: 30s
    metrics_path: /metrics/business
    scheme: http

  # Custom exporters (if any)
  - job_name: '{package_name}-custom'
    static_configs:
      - targets: ['{package_name}-exporter:9090']
    scrape_interval: 60s

  # Kubernetes API server (if running in k8s)
  - job_name: 'kubernetes-apiservers'
    kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
            - default
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https

  # Kubernetes pods
  - job_name: 'kubernetes-pods'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            - {package_name}
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

  # Service discovery for dynamic targets
  - job_name: '{package_name}-discovery'
    consul_sd_configs:
      - server: 'consul:8500'
        services: ['{package_name}', '{package_name}-worker']
    relabel_configs:
      - source_labels: [__meta_consul_tags]
        regex: .*,metrics,.*
        action: keep
      - source_labels: [__meta_consul_service]
        target_label: job

# Remote write configuration (for long-term storage)
remote_write:
  - url: "http://victoriametrics:8428/api/v1/write"
    queue_config:
      max_samples_per_send: 1000
      capacity: 10000
      batch_send_deadline: 5s

# Remote read configuration
remote_read:
  - url: "http://victoriametrics:8428/api/v1/read"
    read_recent: true