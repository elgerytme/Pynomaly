# {package_name} - Kubernetes Deployment Configuration
# ==================================================
# Complete Kubernetes deployment with production-ready configuration

apiVersion: v1
kind: Namespace
metadata:
  name: {package_name}
  labels:
    app: {package_name}
    version: "{package_version}"

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: {package_name}-config
  namespace: {package_name}
  labels:
    app: {package_name}
    version: "{package_version}"
data:
  LOG_LEVEL: "INFO"
  ENVIRONMENT: "production"
  PROMETHEUS_PORT: "8080"
  HEALTH_CHECK_PORT: "8081"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: {package_name}-secrets
  namespace: {package_name}
  labels:
    app: {package_name}
    version: "{package_version}"
type: Opaque
stringData:
  DATABASE_URL: "postgresql://user:password@postgres:5432/{package_name}_prod"
  REDIS_URL: "redis://redis:6379/0"
  JWT_SECRET: "your-jwt-secret-here"
  API_KEY: "your-api-key-here"

---
# Service for internal communication
apiVersion: v1
kind: Service
metadata:
  name: {package_name}-service
  namespace: {package_name}
  labels:
    app: {package_name}
    version: "{package_version}"
spec:
  selector:
    app: {package_name}
  ports:
    - name: http
      port: 8000
      targetPort: 8000
      protocol: TCP
    - name: metrics
      port: 8080
      targetPort: 8080
      protocol: TCP
    - name: health
      port: 8081
      targetPort: 8081
      protocol: TCP
  type: ClusterIP

---
# Service for external access
apiVersion: v1
kind: Service
metadata:
  name: {package_name}-external
  namespace: {package_name}
  labels:
    app: {package_name}
    version: "{package_version}"
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
spec:
  selector:
    app: {package_name}
  ports:
    - name: http
      port: 80
      targetPort: 8000
      protocol: TCP
    - name: https
      port: 443
      targetPort: 8000
      protocol: TCP
  type: LoadBalancer

---
# Deployment for the main application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {package_name}-deployment
  namespace: {package_name}
  labels:
    app: {package_name}
    version: "{package_version}"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: {package_name}
  template:
    metadata:
      labels:
        app: {package_name}
        version: "{package_version}"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: {package_name}-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: {package_name}
          image: {docker_registry}/{package_name}:{package_version}
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
              name: http
              protocol: TCP
            - containerPort: 8080
              name: metrics
              protocol: TCP
            - containerPort: 8081
              name: health
              protocol: TCP
          env:
            - name: PACKAGE_NAME
              value: "{package_name}"
            - name: PACKAGE_VERSION
              value: "{package_version}"
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBERNETES_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          envFrom:
            - configMapRef:
                name: {package_name}-config
            - secretRef:
                name: {package_name}-secrets
          resources:
            requests:
              memory: "256Mi"
              cpu: "200m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /health/live
              port: 8081
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 8081
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health/startup
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
              readOnly: true
            - name: data-volume
              mountPath: /app/data
            - name: logs-volume
              mountPath: /app/logs
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
      volumes:
        - name: config-volume
          configMap:
            name: {package_name}-config
        - name: data-volume
          persistentVolumeClaim:
            claimName: {package_name}-data-pvc
        - name: logs-volume
          emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - {package_name}
                topologyKey: kubernetes.io/hostname

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {package_name}-service-account
  namespace: {package_name}
  labels:
    app: {package_name}
    version: "{package_version}"

---
# Role for service account
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {package_name}-role
  namespace: {package_name}
  labels:
    app: {package_name}
    version: "{package_version}"
rules:
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]

---
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {package_name}-rolebinding
  namespace: {package_name}
  labels:
    app: {package_name}
    version: "{package_version}"
subjects:
  - kind: ServiceAccount
    name: {package_name}-service-account
    namespace: {package_name}
roleRef:
  kind: Role
  name: {package_name}-role
  apiGroup: rbac.authorization.k8s.io

---
# Persistent Volume Claim for data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {package_name}-data-pvc
  namespace: {package_name}
  labels:
    app: {package_name}
    version: "{package_version}"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {package_name}-hpa
  namespace: {package_name}
  labels:
    app: {package_name}
    version: "{package_version}"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {package_name}-deployment
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: {package_name}-pdb
  namespace: {package_name}
  labels:
    app: {package_name}
    version: "{package_version}"
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: {package_name}

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {package_name}-network-policy
  namespace: {package_name}
  labels:
    app: {package_name}
    version: "{package_version}"
spec:
  podSelector:
    matchLabels:
      app: {package_name}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 8080
    - from: []
      ports:
        - protocol: TCP
          port: 8000
        - protocol: TCP
          port: 8081
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 5432  # PostgreSQL
        - protocol: TCP
          port: 6379  # Redis
        - protocol: TCP
          port: 443   # HTTPS
        - protocol: TCP
          port: 53    # DNS
        - protocol: UDP
          port: 53    # DNS