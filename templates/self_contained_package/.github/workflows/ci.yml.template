name: {package_name} - CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - '{package_name}/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - '{package_name}/**'
  schedule:
    # Run daily at 2 AM UTC for maintenance checks
    - cron: '0 2 * * *'

env:
  PACKAGE_NAME: {package_name}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

defaults:
  run:
    working-directory: {package_name}

jobs:
  # ==========================================================================
  # Code Quality and Security
  # ==========================================================================
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{{{ env.PYTHON_VERSION }}}}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,security]"

      - name: Run linting
        run: |
          echo "::group::Ruff Linting"
          ruff check src tests --format=github
          echo "::endgroup::"

      - name: Run type checking
        run: |
          echo "::group::MyPy Type Check"
          mypy src --show-error-codes
          echo "::endgroup::"

      - name: Run security checks
        run: |
          echo "::group::Bandit Security Scan"
          bandit -r src -f json -o reports/bandit.json
          bandit -r src
          echo "::endgroup::"
          
          echo "::group::Safety Check"
          safety check --json --output reports/safety.json
          safety check
          echo "::endgroup::"
          
          echo "::group::Pip Audit"
          pip-audit --format=json --output=reports/pip-audit.json
          pip-audit
          echo "::endgroup::"

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: ${{{{ env.PACKAGE_NAME }}}}/reports/
          retention-days: 30

  # ==========================================================================
  # Testing Matrix
  # ==========================================================================
  test:
    name: Test Suite
    runs-on: ${{{{ matrix.os }}}}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12']
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: {package_name}_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{{{ matrix.python-version }}}}
        uses: actions/setup-python@v4
        with:
          python-version: ${{{{ matrix.python-version }}}}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run unit tests
        run: |
          pytest tests/unit -v \
            --cov=src/{package_name} \
            --cov-report=xml:reports/coverage.xml \
            --cov-report=html:reports/coverage \
            --junit-xml=reports/pytest.xml \
            --tb=short
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/{package_name}_test
          REDIS_URL: redis://localhost:6379/0

      - name: Run integration tests
        run: |
          pytest tests/integration -v \
            --tb=short
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/{package_name}_test
          REDIS_URL: redis://localhost:6379/1

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{{{ matrix.os }}}}-py${{{{ matrix.python-version }}}}
          path: |
            ${{{{ env.PACKAGE_NAME }}}}/reports/
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        with:
          file: ${{{{ env.PACKAGE_NAME }}}}/reports/coverage.xml
          flags: unittests
          name: {package_name}

  # ==========================================================================
  # End-to-End Testing
  # ==========================================================================
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test environment
        run: |
          docker-compose -f docker-compose.yml build
          docker-compose -f docker-compose.yml up -d
          
          # Wait for services to be ready
          sleep 30
          docker-compose -f docker-compose.yml exec -T {package_name} ./scripts/health-check.sh

      - name: Run E2E tests
        run: |
          docker-compose -f docker-compose.yml exec -T {package_name} \
            pytest tests/e2e -v --tb=short

      - name: Collect logs
        if: always()
        run: |
          mkdir -p reports/logs
          docker-compose -f docker-compose.yml logs > reports/logs/docker-compose.log

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.yml down -v

      - name: Upload E2E results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results
          path: ${{{{ env.PACKAGE_NAME }}}}/reports/
          retention-days: 30

  # ==========================================================================
  # Performance Testing
  # ==========================================================================
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{{{ env.PYTHON_VERSION }}}}

      - name: Install dependencies
        run: |
          pip install -e ".[performance]"

      - name: Run performance benchmarks
        run: |
          pytest tests/performance \
            --benchmark-only \
            --benchmark-json=reports/benchmark.json \
            --benchmark-html=reports/benchmark.html

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: ${{{{ env.PACKAGE_NAME }}}}/reports/benchmark.*
          retention-days: 30

  # ==========================================================================
  # Container Build and Security Scan
  # ==========================================================================
  container:
    name: Container Build & Scan
    runs-on: ubuntu-latest
    needs: [quality]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container
        uses: docker/build-push-action@v5
        with:
          context: ${{{{ env.PACKAGE_NAME }}}}
          file: ${{{{ env.PACKAGE_NAME }}}}/docker/Dockerfile
          target: production
          tags: ${{{{ env.PACKAGE_NAME }}}}:${{{{ github.sha }}}}
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PACKAGE_NAME=${{{{ env.PACKAGE_NAME }}}}
            BUILD_DATE=${{{{ github.run_id }}}}
            VCS_REF=${{{{ github.sha }}}}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{{{ env.PACKAGE_NAME }}}}:${{{{ github.sha }}}}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ==========================================================================
  # Documentation Build
  # ==========================================================================
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [quality]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{{{ env.PYTHON_VERSION }}}}

      - name: Install dependencies
        run: |
          pip install -e ".[docs]"

      - name: Build documentation
        run: |
          mkdocs build --strict

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: ${{{{ env.PACKAGE_NAME }}}}/site/
          retention-days: 30

      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          mkdocs gh-deploy --force

  # ==========================================================================
  # Build and Release
  # ==========================================================================
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, e2e, container]
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{{{ env.PYTHON_VERSION }}}}

      - name: Install build dependencies
        run: |
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: package-dist
          path: ${{{{ env.PACKAGE_NAME }}}}/dist/
          retention-days: 30

  # ==========================================================================
  # Deployment
  # ==========================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://{package_name}-staging.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{{{ secrets.AWS_ACCESS_KEY_ID }}}}
          aws-secret-access-key: ${{{{ secrets.AWS_SECRET_ACCESS_KEY }}}}
          aws-region: us-east-1

      - name: Deploy to staging
        run: |
          echo "Deploying ${{{{ env.PACKAGE_NAME }}}} to staging environment"
          # Add your deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://{package_name}.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{{{ secrets.AWS_ACCESS_KEY_ID }}}}
          aws-secret-access-key: ${{{{ secrets.AWS_SECRET_ACCESS_KEY }}}}
          aws-region: us-east-1

      - name: Deploy to production
        run: |
          echo "Deploying ${{{{ env.PACKAGE_NAME }}}} to production environment"
          # Add your deployment commands here

  # ==========================================================================
  # Notification and Cleanup
  # ==========================================================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality, test, e2e, container, docs, build]
    if: always()

    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{{{ job.status }}}}
          channel: '#ci-cd'
          webhook_url: ${{{{ secrets.SLACK_WEBHOOK }}}}
          fields: repo,message,commit,author,action,eventName,ref,workflow