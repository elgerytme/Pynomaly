[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "htmx-tailwind-app"
version = "0.1.0"
description = "HTMX + Tailwind CSS web application template"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["htmx", "tailwind", "fastapi", "web", "template"]

# Core dependencies
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "jinja2>=3.1.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-formdata>=0.0.2",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "httpx>=0.25.0",
    "aiofiles>=23.2.0",
    "websockets>=12.0",
    "redis>=5.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pre-commit>=3.5.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "coverage>=7.3.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-html>=4.1.0",
    "pytest-xdist>=3.3.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
    "httpx>=0.25.0",
    "respx>=0.20.0",
]

monitoring = [
    "prometheus-client>=0.19.0",
    "prometheus-fastapi-instrumentator>=6.1.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "sentry-sdk[fastapi]>=1.38.0",
]

production = [
    "gunicorn>=21.2.0",
    "uvicorn[standard]>=0.24.0",
    "redis>=5.0.0",
    "psycopg2-binary>=2.9.0",
    "prometheus-client>=0.19.0",
    "sentry-sdk[fastapi]>=1.38.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/htmx-tailwind-app"
Documentation = "https://htmx-tailwind-app.readthedocs.io"
Repository = "https://github.com/yourusername/htmx-tailwind-app"
Issues = "https://github.com/yourusername/htmx-tailwind-app/issues"
Changelog = "https://github.com/yourusername/htmx-tailwind-app/blob/main/CHANGELOG.md"

[project.scripts]
htmx-app = "htmx_app.cli:main"

[tool.hatch.version]
path = "src/htmx_app/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/README.md",
    "/CHANGELOG.md",
    "/LICENSE",
]

[tool.hatch.build.targets.wheel]
packages = ["src/htmx_app"]

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=src/htmx_app --cov-report=term-missing {args:tests}"
lint = "ruff check {args:src tests}"
format = "ruff format {args:src tests}"
type-check = "mypy {args:src}"
all = ["lint", "type-check", "test"]

[tool.hatch.envs.docs]
dependencies = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build"
serve = "mkdocs serve"
deploy = "mkdocs gh-deploy"

# Tool configurations
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PIE", # flake8-pie
    "A",  # flake8-builtins
    "PL", # pylint
    "TRY", # tryceratops
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "TRY003", # avoid specifying long messages outside the exception class
    "PLR0913", # too many arguments to function call
    "PLR0912", # too many branches
    "PLR0915", # too many statements
]

[tool.ruff.per-file-ignores]
"tests/*" = ["ARG", "S", "SLF001", "PLR2004"]
"src/htmx_app/__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["htmx_app"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "gunicorn.*",
    "uvicorn.*",
    "redis.*",
    "sqlalchemy.*",
    "alembic.*",
    "asyncpg.*",
    "prometheus_client.*",
    "sentry_sdk.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src/htmx_app"]
branch = true
omit = [
    "tests/*",
    "src/htmx_app/__init__.py",
    "src/htmx_app/cli.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
skip_covered = true
sort = "Cover"

[tool.coverage.html]
directory = "build/coverage"

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
tests = ["B201", "B301", "B401", "B501", "B601"]
skips = ["B101", "B601"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["htmx_app"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true