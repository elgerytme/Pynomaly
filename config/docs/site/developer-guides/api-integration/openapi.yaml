openapi: 3.1.1
info:
  title: Pynomaly API
  description: |
    **Pynomaly** is a state-of-the-art anomaly detection platform that provides a unified interface 
    for multiple machine learning frameworks and algorithms.
    
    ## Features
    - 40+ anomaly detection algorithms from PyOD, scikit-learn, PyTorch, TensorFlow, and JAX
    - AutoML capabilities with intelligent algorithm selection and hyperparameter optimization
    - Real-time streaming anomaly detection with Kafka and Redis connectors
    - Model explainability with SHAP and LIME integration
    - Distributed processing for horizontal scaling
    - Production-ready monitoring, health checks, and performance metrics
    
    ## Authentication
    All API endpoints except health checks require authentication using JWT tokens.
    Obtain a token via the `/api/auth/token` endpoint.
    
    ## Rate Limiting
    API requests are rate-limited to prevent abuse. Current limits:
    - 100 requests per minute for authenticated users
    - 10 requests per minute for unauthenticated users
    
    ## Error Handling
    The API uses standard HTTP status codes and returns detailed error information:
    - 400: Bad Request (validation errors)
    - 401: Unauthorized (authentication required)
    - 403: Forbidden (insufficient permissions)
    - 404: Not Found (resource doesn't exist)
    - 422: Unprocessable Entity (invalid data)
    - 429: Too Many Requests (rate limit exceeded)
    - 500: Internal Server Error
  version: 1.0.0
  contact:
    name: Pynomaly Team
    url: https://github.com/your-org/pynomaly
    email: support@pynomaly.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000/api
    description: Development server
  - url: https://api.pynomaly.io
    description: Production server

security:
  - bearerAuth: []

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health Check
      description: Check the health status of the API and its dependencies
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /health/detailed:
    get:
      tags:
        - Health
      summary: Detailed Health Check
      description: Get detailed health information about all system components
      security: []
      responses:
        '200':
          description: Detailed health information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedHealthResponse'

  /auth/token:
    post:
      tags:
        - Authentication
      summary: Get Access Token
      description: Authenticate with username/password and receive a JWT token
      security: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /detectors:
    get:
      tags:
        - Detectors
      summary: List Detectors
      description: Retrieve a list of all anomaly detectors with optional filtering
      parameters:
        - name: algorithm
          in: query
          description: Filter by algorithm name
          schema:
            type: string
            example: IsolationForest
        - name: is_fitted
          in: query
          description: Filter by fitted status
          schema:
            type: boolean
        - name: limit
          in: query
          description: Maximum number of detectors to return
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
      responses:
        '200':
          description: List of detectors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetectorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      tags:
        - Detectors
      summary: Create Detector
      description: Create a new anomaly detector with specified algorithm and parameters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDetectorRequest'
      responses:
        '201':
          description: Detector created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetectorResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /detectors/{detector_id}:
    get:
      tags:
        - Detectors
      summary: Get Detector
      description: Retrieve details of a specific detector
      parameters:
        - $ref: '#/components/parameters/DetectorId'
      responses:
        '200':
          description: Detector details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetectorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags:
        - Detectors
      summary: Update Detector
      description: Update detector configuration and parameters
      parameters:
        - $ref: '#/components/parameters/DetectorId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDetectorRequest'
      responses:
        '200':
          description: Detector updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetectorResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - Detectors
      summary: Delete Detector
      description: Delete a detector and all associated models/data
      parameters:
        - $ref: '#/components/parameters/DetectorId'
      responses:
        '204':
          description: Detector deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /datasets:
    get:
      tags:
        - Datasets
      summary: List Datasets
      description: Retrieve a list of all datasets with optional filtering
      parameters:
        - name: format
          in: query
          description: Filter by data format
          schema:
            type: string
            enum: [csv, parquet, json]
        - name: has_target
          in: query
          description: Filter by presence of target column
          schema:
            type: boolean
        - name: limit
          in: query
          description: Maximum number of datasets to return
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
      responses:
        '200':
          description: List of datasets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DatasetResponse'

    post:
      tags:
        - Datasets
      summary: Upload Dataset
      description: Upload a new dataset for anomaly detection
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadDatasetRequest'
      responses:
        '201':
          description: Dataset uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /datasets/{dataset_id}:
    get:
      tags:
        - Datasets
      summary: Get Dataset
      description: Retrieve details of a specific dataset
      parameters:
        - $ref: '#/components/parameters/DatasetId'
      responses:
        '200':
          description: Dataset details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - Datasets
      summary: Delete Dataset
      description: Delete a dataset and all associated data
      parameters:
        - $ref: '#/components/parameters/DatasetId'
      responses:
        '204':
          description: Dataset deleted successfully
        '404':
          $ref: '#/components/responses/NotFoundError'

  /datasets/{dataset_id}/sample:
    get:
      tags:
        - Datasets
      summary: Get Dataset Sample
      description: Retrieve a sample of data from the dataset
      parameters:
        - $ref: '#/components/parameters/DatasetId'
        - name: size
          in: query
          description: Number of samples to return
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 10
      responses:
        '200':
          description: Dataset sample
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetSampleResponse'

  /detection/train:
    post:
      tags:
        - Detection
      summary: Train Detector
      description: Train a detector on a specific dataset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrainDetectorRequest'
      responses:
        '200':
          description: Training completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /detection/predict:
    post:
      tags:
        - Detection
      summary: Detect Anomalies
      description: Run anomaly detection on data using a trained detector
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetectionRequest'
      responses:
        '200':
          description: Detection completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetectionResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /detection/explain:
    post:
      tags:
        - Detection
      summary: Explain Predictions
      description: Get explanations for anomaly predictions using SHAP or LIME
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExplanationRequest'
      responses:
        '200':
          description: Explanation generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExplanationResponse'

  /experiments:
    get:
      tags:
        - Experiments
      summary: List Experiments
      description: Retrieve a list of all experiments
      responses:
        '200':
          description: List of experiments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExperimentResponse'

    post:
      tags:
        - Experiments
      summary: Create Experiment
      description: Create a new experiment to track model performance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExperimentRequest'
      responses:
        '201':
          description: Experiment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentResponse'

  /performance/metrics:
    get:
      tags:
        - Performance
      summary: Get Performance Metrics
      description: Retrieve current performance metrics
      responses:
        '200':
          description: Performance metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerformanceMetrics'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    DetectorId:
      name: detector_id
      in: path
      required: true
      description: Unique identifier for the detector
      schema:
        type: string
        format: uuid

    DatasetId:
      name: dataset_id
      in: path
      required: true
      description: Unique identifier for the dataset
      schema:
        type: string
        format: uuid

  responses:
    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            detail: "Not authenticated"
            error_code: "AUTH_REQUIRED"

    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            detail: "Invalid request parameters"
            error_code: "BAD_REQUEST"

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            detail: "Resource not found"
            error_code: "NOT_FOUND"

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'

  schemas:
    ErrorResponse:
      type: object
      required:
        - detail
        - error_code
      properties:
        detail:
          type: string
          description: Human-readable error description
        error_code:
          type: string
          description: Machine-readable error code
        timestamp:
          type: string
          format: date-time
          description: When the error occurred

    ValidationErrorResponse:
      type: object
      required:
        - detail
        - errors
      properties:
        detail:
          type: string
          example: "Validation error"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
              value:
                type: string

    HealthResponse:
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        uptime_seconds:
          type: number

    DetailedHealthResponse:
      type: object
      required:
        - status
        - timestamp
        - components
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        timestamp:
          type: string
          format: date-time
        components:
          type: object
          additionalProperties:
            type: object
            properties:
              status:
                type: string
                enum: [healthy, unhealthy]
              details:
                type: object

    TokenRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: admin
        password:
          type: string
          format: password
          example: password123

    TokenResponse:
      type: object
      required:
        - access_token
        - token_type
      properties:
        access_token:
          type: string
          description: JWT access token
        token_type:
          type: string
          example: bearer
        expires_in:
          type: integer
          description: Token expiration time in seconds

    CreateDetectorRequest:
      type: object
      required:
        - name
        - algorithm_name
      properties:
        name:
          type: string
          description: Human-readable detector name
          example: "Fraud Detection Model"
        algorithm_name:
          type: string
          description: Algorithm to use
          example: "IsolationForest"
          enum:
            - IsolationForest
            - LOF
            - OneClassSVM
            - EllipticEnvelope
            - DBSCAN
            - KMeans
            - AutoEncoder
            - VAE
        contamination_rate:
          type: number
          minimum: 0.0
          maximum: 0.5
          default: 0.1
          description: Expected proportion of anomalies
        hyperparameters:
          type: object
          description: Algorithm-specific parameters
          example:
            n_estimators: 100
            max_samples: auto
        description:
          type: string
          description: Optional detector description

    UpdateDetectorRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        hyperparameters:
          type: object

    DetectorResponse:
      type: object
      required:
        - id
        - name
        - algorithm_name
        - contamination_rate
        - is_fitted
        - created_at
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        algorithm_name:
          type: string
        contamination_rate:
          type: number
        is_fitted:
          type: boolean
        hyperparameters:
          type: object
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        training_history:
          type: array
          items:
            type: object

    UploadDatasetRequest:
      type: object
      required:
        - file
        - name
      properties:
        file:
          type: string
          format: binary
          description: Dataset file (CSV, Parquet, JSON)
        name:
          type: string
          description: Dataset name
        description:
          type: string
          description: Dataset description
        target_column:
          type: string
          description: Name of target column (if any)

    DatasetResponse:
      type: object
      required:
        - id
        - name
        - file_format
        - n_samples
        - n_features
        - created_at
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        file_format:
          type: string
          enum: [csv, parquet, json]
        n_samples:
          type: integer
        n_features:
          type: integer
        has_target:
          type: boolean
        target_column:
          type: string
        feature_names:
          type: array
          items:
            type: string
        file_size_mb:
          type: number
        created_at:
          type: string
          format: date-time

    DatasetSampleResponse:
      type: object
      required:
        - data
        - total_samples
        - sample_size
      properties:
        data:
          type: array
          items:
            type: object
        total_samples:
          type: integer
        sample_size:
          type: integer
        feature_names:
          type: array
          items:
            type: string

    TrainDetectorRequest:
      type: object
      required:
        - detector_id
        - dataset_id
      properties:
        detector_id:
          type: string
          format: uuid
        dataset_id:
          type: string
          format: uuid
        validation_split:
          type: number
          minimum: 0.0
          maximum: 0.9
          default: 0.2
        cross_validation:
          type: boolean
          default: false
        save_model:
          type: boolean
          default: true

    TrainingResponse:
      type: object
      required:
        - success
        - training_time_ms
      properties:
        success:
          type: boolean
        training_time_ms:
          type: number
        validation_metrics:
          type: object
          properties:
            precision:
              type: number
            recall:
              type: number
            f1_score:
              type: number
            auc_score:
              type: number
        model_info:
          type: object

    DetectionRequest:
      type: object
      required:
        - detector_id
      properties:
        detector_id:
          type: string
          format: uuid
        dataset_id:
          type: string
          format: uuid
        data:
          type: array
          items:
            type: object
          description: "Data to analyze (alternative to dataset_id)"
        threshold:
          type: number
          minimum: 0.0
          maximum: 1.0
          description: "Custom anomaly threshold"
        return_scores:
          type: boolean
          default: false

    DetectionResponse:
      type: object
      required:
        - predictions
        - anomaly_count
        - processing_time_ms
      properties:
        predictions:
          type: array
          items:
            type: integer
            enum: [0, 1]
          description: "Binary predictions (0=normal, 1=anomaly)"
        anomaly_scores:
          type: array
          items:
            type: number
          description: "Anomaly scores (when return_scores=true)"
        anomaly_count:
          type: integer
        anomaly_rate:
          type: number
        processing_time_ms:
          type: number
        threshold_used:
          type: number
        summary:
          type: object

    ExplanationRequest:
      type: object
      required:
        - detector_id
        - instance
      properties:
        detector_id:
          type: string
          format: uuid
        instance:
          type: object
          description: "Single data instance to explain"
        method:
          type: string
          enum: [shap, lime]
          default: shap
        feature_names:
          type: array
          items:
            type: string

    ExplanationResponse:
      type: object
      required:
        - explanation
        - method_used
      properties:
        explanation:
          type: object
          properties:
            feature_importance:
              type: object
              additionalProperties:
                type: number
            values:
              type: array
              items:
                type: number
        method_used:
          type: string
        prediction:
          type: number
        confidence:
          type: number

    CreateExperimentRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string

    ExperimentResponse:
      type: object
      required:
        - id
        - name
        - created_at
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        metrics:
          type: object

    PerformanceMetrics:
      type: object
      properties:
        cpu_usage_percent:
          type: number
        memory_usage_mb:
          type: number
        active_requests:
          type: integer
        total_requests:
          type: integer
        average_response_time_ms:
          type: number
        error_rate_percent:
          type: number

tags:
  - name: Health
    description: Health check and monitoring endpoints
  - name: Authentication
    description: Authentication and authorization
  - name: Detectors
    description: Anomaly detector management
  - name: Datasets
    description: Dataset management and operations
  - name: Detection
    description: Anomaly detection operations
  - name: Experiments
    description: Experiment tracking and management
  - name: Performance
    description: Performance monitoring and metrics