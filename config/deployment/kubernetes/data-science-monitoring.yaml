apiVersion: apps/v1
kind: Deployment
metadata:
  name: pynomaly-prometheus
  namespace: pynomaly-data-science
  labels:
    app: pynomaly
    component: prometheus
    tier: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pynomaly
      component: prometheus
  template:
    metadata:
      labels:
        app: pynomaly
        component: prometheus
        tier: monitoring
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9090
          name: http
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.console.templates=/etc/prometheus/consoles
        - --storage.tsdb.retention.time=30d
        - --web.enable-lifecycle
        - --storage.tsdb.wal-compression
        - --web.enable-admin-api
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/prometheus.yml
          subPath: prometheus.yml
        - name: prometheus-data
          mountPath: /prometheus
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "8Gi"
            cpu: "2"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: http
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: prometheus-config
        configMap:
          name: pynomaly-prometheus-config
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: prometheus-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: pynomaly-prometheus-service
  namespace: pynomaly-data-science
  labels:
    app: pynomaly
    component: prometheus
    tier: monitoring
spec:
  selector:
    app: pynomaly
    component: prometheus
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: http
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pynomaly-grafana
  namespace: pynomaly-data-science
  labels:
    app: pynomaly
    component: grafana
    tier: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pynomaly
      component: grafana
  template:
    metadata:
      labels:
        app: pynomaly
        component: grafana
        tier: monitoring
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: pynomaly-grafana-secret
              key: admin-user
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pynomaly-grafana-secret
              key: admin-password
        - name: GF_USERS_ALLOW_SIGN_UP
          valueFrom:
            configMapKeyRef:
              name: pynomaly-grafana-config
              key: GF_USERS_ALLOW_SIGN_UP
        - name: GF_INSTALL_PLUGINS
          valueFrom:
            configMapKeyRef:
              name: pynomaly-grafana-config
              key: GF_INSTALL_PLUGINS
        - name: GF_SERVER_DOMAIN
          valueFrom:
            configMapKeyRef:
              name: pynomaly-grafana-config
              key: GF_SERVER_DOMAIN
        - name: GF_SERVER_ROOT_URL
          valueFrom:
            configMapKeyRef:
              name: pynomaly-grafana-config
              key: GF_SERVER_ROOT_URL
        - name: GF_DATABASE_TYPE
          valueFrom:
            configMapKeyRef:
              name: pynomaly-grafana-config
              key: GF_DATABASE_TYPE
        - name: GF_DATABASE_HOST
          value: "pynomaly-postgres-service:5432"
        - name: GF_DATABASE_NAME
          value: "grafana"
        - name: GF_DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: pynomaly-postgres-secret
              key: username
        - name: GF_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pynomaly-postgres-secret
              key: password
        - name: GF_DATABASE_SSL_MODE
          valueFrom:
            configMapKeyRef:
              name: pynomaly-grafana-config
              key: GF_DATABASE_SSL_MODE
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1"
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-data-pvc
      - name: grafana-dashboards
        configMap:
          name: pynomaly-grafana-dashboards
      - name: grafana-datasources
        configMap:
          name: pynomaly-grafana-datasources
---
apiVersion: v1
kind: Service
metadata:
  name: pynomaly-grafana-service
  namespace: pynomaly-data-science
  labels:
    app: pynomaly
    component: grafana
    tier: monitoring
spec:
  selector:
    app: pynomaly
    component: grafana
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pynomaly-grafana-datasources
  namespace: pynomaly-data-science
  labels:
    app: pynomaly
    component: grafana
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://pynomaly-prometheus-service:9090
      isDefault: true
      editable: true
    - name: InfluxDB
      type: influxdb
      access: proxy
      url: http://pynomaly-influxdb-service:8086
      database: metrics
      user: pynomaly
      secureJsonData:
        password: pynomaly_influx_password_change_in_production
      jsonData:
        version: Flux
        organization: pynomaly
        defaultBucket: metrics
        tlsSkipVerify: true
    - name: PostgreSQL
      type: postgres
      access: proxy
      url: pynomaly-postgres-service:5432
      database: pynomaly
      user: pynomaly
      secureJsonData:
        password: pynomaly_secure_password_change_in_production
      jsonData:
        sslmode: require
        postgresVersion: 1300
        timescaledb: false
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pynomaly-grafana-dashboards
  namespace: pynomaly-data-science
  labels:
    app: pynomaly
    component: grafana
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'pynomaly-dashboards'
      orgId: 1
      folder: 'Pynomaly Data Science'
      type: file
      disableDeletion: false
      editable: true
      updateIntervalSeconds: 30
      allowUiUpdates: true
      options:
        path: /etc/grafana/provisioning/dashboards