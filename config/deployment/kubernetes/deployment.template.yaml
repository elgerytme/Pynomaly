apiVersion: apps/v1
kind: Deployment
metadata:
  name: pynomaly-api
  namespace: ${NAMESPACE:-default}
  labels:
    app: pynomaly
    component: api
    version: ${VERSION:-latest}
spec:
  replicas: ${REPLICAS:-3}
  selector:
    matchLabels:
      app: pynomaly
      component: api
  template:
    metadata:
      labels:
        app: pynomaly
        component: api
        version: ${VERSION:-latest}
    spec:
      containers:
      - name: pynomaly-api
        image: pynomaly:${VERSION:-latest}
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: PYNOMALY_ENV
          value: ${ENVIRONMENT:-production}
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: pynomaly-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: pynomaly-config
              key: redis-url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: pynomaly-secrets
              key: secret-key
        resources:
          requests:
            memory: "${MEMORY_REQUEST:-512Mi}"
            cpu: "${CPU_REQUEST:-250m}"
          limits:
            memory: "${MEMORY_LIMIT:-1Gi}"
            cpu: "${CPU_LIMIT:-500m}"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: data
          mountPath: /app/data
      volumes:
      - name: logs
        emptyDir: {}
      - name: data
        persistentVolumeClaim:
          claimName: pynomaly-data-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: pynomaly-api-service
  namespace: ${NAMESPACE:-default}
  labels:
    app: pynomaly
    component: api
spec:
  selector:
    app: pynomaly
    component: api
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  type: ${SERVICE_TYPE:-ClusterIP}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pynomaly-config
  namespace: ${NAMESPACE:-default}
data:
  redis-url: "redis://pynomaly-redis-service:6379"
  environment: "${ENVIRONMENT:-production}"

---
apiVersion: v1
kind: Secret
metadata:
  name: pynomaly-secrets
  namespace: ${NAMESPACE:-default}
type: Opaque
data:
  database-url: ${DATABASE_URL_B64}
  secret-key: ${SECRET_KEY_B64}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pynomaly-data-pvc
  namespace: ${NAMESPACE:-default}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: ${STORAGE_SIZE:-10Gi}