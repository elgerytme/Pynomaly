# Pynomaly Data Science Kubernetes Deployment Script
# This file orchestrates the complete deployment of the data science infrastructure
#
# Usage:
#   kubectl apply -f data-science-deploy.yaml
#
# Prerequisites:
#   1. Kubernetes cluster with sufficient resources
#   2. StorageClass 'data-science-ssd' configured
#   3. Load balancer controller installed
#   4. Metrics server installed for HPA
#
# Resource Requirements:
#   - Minimum: 32 CPU cores, 128GB RAM, 2TB storage
#   - Recommended: 100+ CPU cores, 500GB+ RAM, 5TB+ storage
#   - Supports horizontal scaling to 100+ nodes
#
apiVersion: v1
kind: List
metadata:
  name: pynomaly-data-science-deployment
  namespace: pynomaly-data-science
  labels:
    app: pynomaly
    deployment: data-science
    version: v1.0.0
    environment: production
items:
# Namespace and Resource Management
- apiVersion: v1
  kind: Namespace
  metadata:
    name: pynomaly-data-science
    labels:
      name: pynomaly-data-science
      environment: production
      app: pynomaly
      component: data-science

# Network Policies for Security
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    name: pynomaly-data-science-network-policy
    namespace: pynomaly-data-science
  spec:
    podSelector:
      matchLabels:
        app: pynomaly
    policyTypes:
    - Ingress
    - Egress
    ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: pynomaly-data-science
      - namespaceSelector:
          matchLabels:
            name: kube-system
    - from: []
      ports:
      - protocol: TCP
        port: 80
      - protocol: TCP
        port: 443
    egress:
    - to:
      - namespaceSelector:
          matchLabels:
            name: pynomaly-data-science
    - to:
      - namespaceSelector:
          matchLabels:
            name: kube-system
    - to: []
      ports:
      - protocol: TCP
        port: 53
      - protocol: UDP
        port: 53
      - protocol: TCP
        port: 443
      - protocol: TCP
        port: 80

# Pod Security Policy
- apiVersion: policy/v1beta1
  kind: PodSecurityPolicy
  metadata:
    name: pynomaly-data-science-psp
    namespace: pynomaly-data-science
  spec:
    privileged: false
    allowPrivilegeEscalation: false
    requiredDropCapabilities:
      - ALL
    volumes:
      - 'configMap'
      - 'emptyDir'
      - 'projected'
      - 'secret'
      - 'downwardAPI'
      - 'persistentVolumeClaim'
    runAsUser:
      rule: 'MustRunAsNonRoot'
    seLinux:
      rule: 'RunAsAny'
    fsGroup:
      rule: 'RunAsAny'
    readOnlyRootFilesystem: false

# Service Account and RBAC
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: pynomaly-data-science-sa
    namespace: pynomaly-data-science
    labels:
      app: pynomaly
      component: service-account

- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    name: pynomaly-data-science-role
    namespace: pynomaly-data-science
  rules:
  - apiGroups: [""]
    resources: ["pods", "services", "endpoints", "configmaps", "secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["deployments", "replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods", "nodes"]
    verbs: ["get", "list"]

- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: pynomaly-data-science-rb
    namespace: pynomaly-data-science
  subjects:
  - kind: ServiceAccount
    name: pynomaly-data-science-sa
    namespace: pynomaly-data-science
  roleRef:
    kind: Role
    name: pynomaly-data-science-role
    apiGroup: rbac.authorization.k8s.io

# Priority Classes for workload prioritization
- apiVersion: scheduling.k8s.io/v1
  kind: PriorityClass
  metadata:
    name: pynomaly-critical
  value: 1000
  globalDefault: false
  description: "Critical priority class for Pynomaly core services"

- apiVersion: scheduling.k8s.io/v1
  kind: PriorityClass
  metadata:
    name: pynomaly-high
  value: 800
  globalDefault: false
  description: "High priority class for Pynomaly API services"

- apiVersion: scheduling.k8s.io/v1
  kind: PriorityClass
  metadata:
    name: pynomaly-normal
  value: 500
  globalDefault: false
  description: "Normal priority class for Pynomaly worker services"

# Pod Disruption Budgets
- apiVersion: policy/v1
  kind: PodDisruptionBudget
  metadata:
    name: pynomaly-api-pdb
    namespace: pynomaly-data-science
  spec:
    minAvailable: 70%
    selector:
      matchLabels:
        app: pynomaly
        component: api

- apiVersion: policy/v1
  kind: PodDisruptionBudget
  metadata:
    name: pynomaly-worker-pdb
    namespace: pynomaly-data-science
  spec:
    minAvailable: 50%
    selector:
      matchLabels:
        app: pynomaly
        component: worker

- apiVersion: policy/v1
  kind: PodDisruptionBudget
  metadata:
    name: pynomaly-nginx-pdb
    namespace: pynomaly-data-science
  spec:
    minAvailable: 2
    selector:
      matchLabels:
        app: pynomaly
        component: nginx

# Ingress for external access
- apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: pynomaly-data-science-ingress
    namespace: pynomaly-data-science
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: "100m"
      nginx.ingress.kubernetes.io/rate-limit: "100"
      nginx.ingress.kubernetes.io/rate-limit-window: "1m"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    labels:
      app: pynomaly
      component: ingress
  spec:
    tls:
    - hosts:
      - api.pynomaly.io
      - grafana.pynomaly.io
      secretName: pynomaly-tls-secret
    rules:
    - host: api.pynomaly.io
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: pynomaly-nginx-service
              port:
                number: 80
    - host: grafana.pynomaly.io
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: pynomaly-nginx-service
              port:
                number: 80