apiVersion: v1
kind: ConfigMap
metadata:
  name: pynomaly-postgres-config
  namespace: pynomaly-data-science
  labels:
    app: pynomaly
    component: postgres
data:
  POSTGRES_MULTIPLE_DATABASES: "pynomaly_data_science,pynomaly_profiles,pynomaly_quality"
  max_connections: "500"
  shared_buffers: "2GB"
  effective_cache_size: "6GB"
  maintenance_work_mem: "512MB"
  random_page_cost: "1.1"
  effective_io_concurrency: "200"
  work_mem: "32MB"
  min_wal_size: "2GB"
  max_wal_size: "8GB"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pynomaly-redis-config
  namespace: pynomaly-data-science
  labels:
    app: pynomaly
    component: redis
data:
  redis.conf: |
    # Redis Production Configuration for Data Science
    maxmemory 8gb
    maxmemory-policy allkeys-lru
    save 900 1
    save 300 10
    save 60 10000
    tcp-keepalive 60
    timeout 300
    tcp-backlog 511
    databases 16
    
    # Performance optimizations
    hz 100
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit replica 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60
    
    # Security
    protected-mode yes
    bind 0.0.0.0
    port 6379
    
    # Persistence
    appendonly yes
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pynomaly-api-config
  namespace: pynomaly-data-science
  labels:
    app: pynomaly
    component: api
data:
  # Application configuration
  PYNOMALY_ENV: "production"
  PYTHONPATH: "/app/src"
  
  # Data Science configuration
  PYNOMALY_DATA_SCIENCE_ENABLED: "true"
  PYNOMALY_DATA_PROFILING_ENABLED: "true"
  PYNOMALY_DATA_QUALITY_ENABLED: "true"
  PYNOMALY_ML_PIPELINES_ENABLED: "true"
  
  # Performance configuration
  PYNOMALY_PERFORMANCE_MAX_WORKERS: "8"
  PYNOMALY_PERFORMANCE_PARALLEL_PROCESSING: "true"
  PYNOMALY_PERFORMANCE_MEMORY_LIMIT: "16GB"
  
  # Database configuration
  PYNOMALY_DATABASE_USE_DATABASE_REPOSITORIES: "true"
  PYNOMALY_STORAGE_CACHE_ENABLED: "true"
  
  # Security configuration
  PYNOMALY_SECURITY_AUTH_ENABLED: "true"
  
  # Monitoring configuration
  PYNOMALY_MONITORING_ENABLED: "true"
  PYNOMALY_MONITORING_METRICS_ENABLED: "true"
  PYNOMALY_MONITORING_HEALTH_CHECK_ENABLED: "true"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pynomaly-prometheus-config
  namespace: pynomaly-data-science
  labels:
    app: pynomaly
    component: prometheus
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'pynomaly-data-science'
        environment: 'production'
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - pynomaly-alertmanager-service:9093
    
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      - job_name: 'pynomaly-api'
        static_configs:
          - targets: ['pynomaly-api-service:8000']
        metrics_path: '/metrics'
        scrape_interval: 10s
        scrape_timeout: 10s
      
      - job_name: 'pynomaly-worker'
        static_configs:
          - targets: ['pynomaly-worker-service:8001']
        metrics_path: '/metrics'
        scrape_interval: 10s
      
      - job_name: 'postgres'
        static_configs:
          - targets: ['pynomaly-postgres-service:5432']
      
      - job_name: 'redis'
        static_configs:
          - targets: ['pynomaly-redis-service:6379']
      
      - job_name: 'influxdb'
        static_configs:
          - targets: ['pynomaly-influxdb-service:8086']
        metrics_path: '/metrics'
      
      - job_name: 'nginx'
        static_configs:
          - targets: ['pynomaly-nginx-service:80']
        metrics_path: '/metrics'
      
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
      
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics
      
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - pynomaly-data-science
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pynomaly-grafana-config
  namespace: pynomaly-data-science
  labels:
    app: pynomaly
    component: grafana
data:
  GF_SECURITY_ADMIN_USER: admin
  GF_USERS_ALLOW_SIGN_UP: "false"
  GF_INSTALL_PLUGINS: "grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel"
  GF_SERVER_DOMAIN: "grafana.pynomaly.io"
  GF_SERVER_ROOT_URL: "https://grafana.pynomaly.io"
  GF_DATABASE_TYPE: postgres
  GF_DATABASE_SSL_MODE: require