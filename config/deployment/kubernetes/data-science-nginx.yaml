apiVersion: v1
kind: ConfigMap
metadata:
  name: pynomaly-nginx-config
  namespace: pynomaly-data-science
  labels:
    app: pynomaly
    component: nginx
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 4096;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'rt=$request_time uct="$upstream_connect_time" '
                        'uht="$upstream_header_time" urt="$upstream_response_time"';
        
        access_log /var/log/nginx/access.log main;
        
        # Performance
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 100m;
        server_tokens off;
        
        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
        limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
        limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
        
        # Upstream servers
        upstream pynomaly_api {
            least_conn;
            server pynomaly-api-service:8000 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }
        
        upstream pynomaly_grafana {
            server pynomaly-grafana-service:3000 max_fails=3 fail_timeout=30s;
        }
        
        upstream pynomaly_prometheus {
            server pynomaly-prometheus-service:9090 max_fails=3 fail_timeout=30s;
        }
        
        # Health check endpoint
        server {
            listen 80;
            server_name health.local;
            
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
        
        # Main API server
        server {
            listen 80;
            server_name api.pynomaly.io;
            
            # Security headers
            add_header X-Frame-Options DENY always;
            add_header X-Content-Type-Options nosniff always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Referrer-Policy "strict-origin-when-cross-origin" always;
            add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self'" always;
            
            # Rate limiting
            limit_req zone=api burst=200 nodelay;
            limit_conn conn_limit_per_ip 20;
            
            # API endpoints
            location /api/ {
                proxy_pass http://pynomaly_api;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 5s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
                proxy_buffering on;
                proxy_buffer_size 4k;
                proxy_buffers 8 4k;
                proxy_http_version 1.1;
                proxy_set_header Connection "";
            }
            
            # Authentication endpoints (stricter rate limiting)
            location /api/v1/auth/ {
                limit_req zone=auth burst=10 nodelay;
                proxy_pass http://pynomaly_api;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 5s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
            }
            
            # Health check
            location /health {
                access_log off;
                proxy_pass http://pynomaly_api/api/v1/health;
                proxy_connect_timeout 2s;
                proxy_send_timeout 2s;
                proxy_read_timeout 2s;
            }
            
            # Metrics endpoint (internal only)
            location /metrics {
                allow 10.0.0.0/8;
                allow 172.16.0.0/12;
                allow 192.168.0.0/16;
                deny all;
                proxy_pass http://pynomaly_api/metrics;
            }
        }
        
        # Grafana monitoring interface
        server {
            listen 80;
            server_name grafana.pynomaly.io;
            
            location / {
                proxy_pass http://pynomaly_grafana;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 5s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
            }
            
            # WebSocket support for Grafana
            location /api/live/ {
                proxy_pass http://pynomaly_grafana;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 5s;
                proxy_send_timeout 3600s;
                proxy_read_timeout 3600s;
            }
        }
        
        # Prometheus monitoring interface (internal only)
        server {
            listen 80;
            server_name prometheus.pynomaly.io;
            
            # IP whitelist for internal access
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            location / {
                proxy_pass http://pynomaly_prometheus;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 5s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
            }
        }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pynomaly-nginx
  namespace: pynomaly-data-science
  labels:
    app: pynomaly
    component: nginx
    tier: proxy
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: pynomaly
      component: nginx
  template:
    metadata:
      labels:
        app: pynomaly
        component: nginx
        tier: proxy
    spec:
      containers:
      - name: nginx
        image: nginx:1.25-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
          name: http
        - containerPort: 443
          name: https
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: nginx-logs
          mountPath: /var/log/nginx
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
            httpHeaders:
            - name: Host
              value: health.local
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
            httpHeaders:
            - name: Host
              value: health.local
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: nginx-config
        configMap:
          name: pynomaly-nginx-config
      - name: nginx-logs
        emptyDir: {}
      # Pod Anti-Affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - pynomaly
                - key: component
                  operator: In
                  values:
                  - nginx
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: pynomaly-nginx-service
  namespace: pynomaly-data-science
  labels:
    app: pynomaly
    component: nginx
    tier: proxy
spec:
  selector:
    app: pynomaly
    component: nginx
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  - port: 443
    targetPort: 443
    protocol: TCP
    name: https
  type: LoadBalancer
  sessionAffinity: None
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: pynomaly-nginx-hpa
  namespace: pynomaly-data-science
  labels:
    app: pynomaly
    component: nginx
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pynomaly-nginx
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 15
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 60
      selectPolicy: Min