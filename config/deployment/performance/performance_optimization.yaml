# Performance Optimization Configuration for Pynomaly
# This configuration file defines optimization strategies and thresholds

# Target environment settings
target:
  host: "http://localhost:8000"
  prometheus_url: "http://localhost:9090"
  grafana_url: "http://localhost:3000"
  environment: "staging"

# Performance thresholds (violations trigger optimizations)
thresholds:
  response_time:
    p50: 100  # milliseconds
    p95: 500  # milliseconds
    p99: 1000  # milliseconds
  error_rate: 0.01  # 1%
  throughput:
    min_rps: 100  # requests per second
    target_rps: 1000
  system:
    cpu_usage: 70  # percentage
    memory_usage: 80  # percentage
    disk_usage: 85  # percentage
  database:
    connection_pool_utilization: 80  # percentage
    query_time_p95: 100  # milliseconds
    cache_hit_ratio: 0.90  # 90%
  network:
    latency_p95: 50  # milliseconds
    bandwidth_utilization: 80  # percentage

# Optimization strategies configuration
strategies:
  caching:
    enabled: true
    priority: "high"
    redis:
      maxmemory: "1GB"
      maxmemory_policy: "allkeys-lru"
      timeout: 300
      tcp_keepalive: 60
      save: "900 1 300 10 60 10000"
    application:
      enable_response_cache: true
      response_cache_ttl: 300
      enable_query_cache: true
      query_cache_size: 1000
      enable_object_cache: true
      object_cache_ttl: 600
    cdn:
      enabled: true
      cache_control: "public, max-age=3600"
      static_files_ttl: 86400

  database:
    enabled: true
    priority: "high"
    postgresql:
      shared_buffers: "512MB"
      effective_cache_size: "2GB"
      maintenance_work_mem: "128MB"
      checkpoint_completion_target: 0.9
      wal_buffers: "32MB"
      default_statistics_target: 100
      random_page_cost: 1.1
      effective_io_concurrency: 200
      max_connections: 200
      connection_pool_size: 50
    mongodb:
      wiredTiger:
        engineConfig:
          cacheSizeGB: 1.0
        collectionConfig:
          blockCompressor: "snappy"
      operationProfiling:
        mode: "slowOp"
        slowOpThresholdMs: 100
      connection_pool_size: 50
    redis:
      maxmemory: "1GB"
      maxmemory_policy: "allkeys-lru"
      databases: 16
      connection_pool_size: 20

  memory:
    enabled: true
    priority: "medium"
    python:
      gc_threshold: [700, 10, 10]
      enable_gc: true
      optimize_imports: true
      memory_profiling: true
    application:
      enable_object_pooling: true
      max_memory_per_worker: "1GB"
      enable_memory_monitoring: true
      garbage_collection_interval: 60
      memory_leak_detection: true
    system:
      swappiness: 10
      overcommit_memory: 1

  cpu:
    enabled: true
    priority: "medium"
    application:
      enable_multiprocessing: true
      worker_processes: 4
      async_processing: true
      cpu_affinity: true
      thread_pool_size: 8
      enable_jit_compilation: true
    system:
      governor: "performance"
      scaling_min_freq: "1000000"
      scaling_max_freq: "3000000"

  network:
    enabled: true
    priority: "medium"
    http:
      enable_compression: true
      compression_level: 6
      keep_alive_timeout: 65
      max_connections: 2000
      buffer_size: 8192
      enable_http2: true
      tcp_nodelay: true
      tcp_keepalive: true
    ssl:
      session_cache_size: "10m"
      session_timeout: "5m"
      prefer_server_ciphers: true

  algorithms:
    enabled: true
    priority: "low"
    machine_learning:
      enable_vectorization: true
      use_numba_jit: true
      optimize_loops: true
      enable_parallel_processing: true
      use_efficient_data_structures: true
      batch_processing: true
      streaming_processing: true
    data_processing:
      enable_pandas_optimization: true
      use_numpy_acceleration: true
      enable_cython_modules: true
      parallel_data_loading: true

  resources:
    enabled: true
    priority: "high"
    kubernetes:
      auto_scaling_enabled: true
      min_replicas: 2
      max_replicas: 20
      cpu_request: "500m"
      cpu_limit: "2000m"
      memory_request: "512Mi"
      memory_limit: "2Gi"
      scaling_metrics:
        cpu_threshold: 70
        memory_threshold: 80
        custom_metrics_enabled: true
    docker:
      memory_limit: "2GB"
      cpu_limit: "2.0"
      enable_resource_monitoring: true

  monitoring:
    enabled: true
    priority: "low"
    metrics:
      enable_detailed_metrics: true
      metrics_interval: 15
      enable_tracing: true
      trace_sampling_rate: 0.1
      enable_profiling: true
      profiling_interval: 300
    logging:
      log_level: "INFO"
      enable_structured_logging: true
      log_rotation_size: "100MB"
      log_retention_days: 30
    alerting:
      enable_alerting: true
      alert_thresholds:
        cpu_usage: 80
        memory_usage: 85
        response_time_p95: 1000
        error_rate: 0.05

# Optimization execution configuration
execution:
  dry_run: false
  backup_configs: true
  rollback_on_failure: true
  validation_timeout: 300
  metrics_collection_interval: 60
  optimization_cooldown: 300  # seconds between optimizations
  
# Reporting configuration
reporting:
  enabled: true
  output_dir: "./reports/performance"
  formats: ["json", "html", "csv"]
  include_charts: true
  retention_days: 90
  
# Testing configuration for optimization validation
testing:
  enabled: true
  load_test:
    duration: 300  # seconds
    concurrent_users: 100
    ramp_up_time: 60
    scenarios:
      - name: "basic_detection"
        weight: 60
        endpoint: "/api/v1/detect"
        method: "POST"
      - name: "model_training"
        weight: 20
        endpoint: "/api/v1/train"
        method: "POST"
      - name: "health_check"
        weight: 20
        endpoint: "/health"
        method: "GET"
  
  performance_test:
    enabled: true
    baseline_collection: true
    comparison_enabled: true
    regression_threshold: 0.1  # 10% regression tolerance
    
# Environment-specific overrides
environments:
  development:
    thresholds:
      cpu_usage: 90
      memory_usage: 90
    strategies:
      monitoring:
        log_level: "DEBUG"
        
  staging:
    thresholds:
      cpu_usage: 75
      memory_usage: 85
    strategies:
      caching:
        redis:
          maxmemory: "512MB"
          
  production:
    thresholds:
      cpu_usage: 60
      memory_usage: 70
    strategies:
      caching:
        redis:
          maxmemory: "2GB"
      resources:
        kubernetes:
          min_replicas: 3
          max_replicas: 50