apiVersion: apps/v1
kind: Deployment
metadata:
  name: anomaly-detection-api
  namespace: anomaly-detection
  labels:
    app.kubernetes.io/name: anomaly-detection
    app.kubernetes.io/component: api
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: anomaly-detection
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: anomaly-detection
        app.kubernetes.io/component: api
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: anomaly-detection
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: api
        image: anomaly-detection:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: ANOMALY_DETECTION_DATABASE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres:5432/$(POSTGRES_DB)"
        - name: ANOMALY_DETECTION_REDIS_URL
          value: "redis://redis:6379/$(REDIS_DB)"
        - name: ANOMALY_DETECTION_KAFKA_BROKERS
          value: "kafka:9092"
        envFrom:
        - configMapRef:
            name: anomaly-detection-config
        - secretRef:
            name: anomaly-detection-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
        volumeMounts:
        - name: data-storage
          mountPath: /app/data
        - name: model-storage
          mountPath: /app/models
        - name: logs-storage
          mountPath: /app/logs
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: data-storage
        persistentVolumeClaim:
          claimName: anomaly-detection-data
      - name: model-storage
        persistentVolumeClaim:
          claimName: anomaly-detection-models
      - name: logs-storage
        persistentVolumeClaim:
          claimName: anomaly-detection-logs
      - name: tmp
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "anomaly-detection"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - anomaly-detection
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - api
              topologyKey: kubernetes.io/hostname

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: anomaly-detection-worker
  namespace: anomaly-detection
  labels:
    app.kubernetes.io/name: anomaly-detection
    app.kubernetes.io/component: worker
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: anomaly-detection
      app.kubernetes.io/component: worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: anomaly-detection
        app.kubernetes.io/component: worker
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9091"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: anomaly-detection
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: worker
        image: anomaly-detection:latest
        imagePullPolicy: IfNotPresent
        command: ["python", "-m", "anomaly_detection.worker"]
        ports:
        - containerPort: 9091
          name: metrics
          protocol: TCP
        env:
        - name: ANOMALY_DETECTION_DATABASE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres:5432/$(POSTGRES_DB)"
        - name: ANOMALY_DETECTION_REDIS_URL
          value: "redis://redis:6379/$(REDIS_DB)"
        - name: ANOMALY_DETECTION_KAFKA_BROKERS
          value: "kafka:9092"
        envFrom:
        - configMapRef:
            name: anomaly-detection-config
        - secretRef:
            name: anomaly-detection-secrets
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: metrics
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: metrics
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: data-storage
          mountPath: /app/data
        - name: model-storage
          mountPath: /app/models
        - name: logs-storage
          mountPath: /app/logs
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: data-storage
        persistentVolumeClaim:
          claimName: anomaly-detection-data
      - name: model-storage
        persistentVolumeClaim:
          claimName: anomaly-detection-models
      - name: logs-storage
        persistentVolumeClaim:
          claimName: anomaly-detection-logs
      - name: tmp
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux