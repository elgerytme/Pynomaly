# Prometheus Configuration for Domain-Driven Monorepo
# Comprehensive monitoring and observability setup

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'domain-driven-monorepo'
    environment: 'production'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

# Load rules once and periodically evaluate them
rule_files:
  - "/etc/prometheus/rules/*.yml"

# Scrape configurations
scrape_configs:
  # Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    metrics_path: /metrics
    scrape_interval: 30s

  # Node Exporter for system metrics
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']
    scrape_interval: 15s

  # Application metrics from packages
  - job_name: 'package-metrics'
    consul_sd_configs:
      - server: 'consul:8500'
        services: ['package-*']
    relabel_configs:
      - source_labels: [__meta_consul_service]
        target_label: service_name
      - source_labels: [__meta_consul_service_metadata_package]
        target_label: package_name
      - source_labels: [__meta_consul_service_metadata_domain]
        target_label: domain
      - source_labels: [__meta_consul_service_metadata_environment]
        target_label: environment

  # Database metrics
  - job_name: 'postgres-exporter'
    static_configs:
      - targets: ['postgres-exporter:9187']
    scrape_interval: 30s

  - job_name: 'redis-exporter'
    static_configs:
      - targets: ['redis-exporter:9121']
    scrape_interval: 30s

  # Message queue metrics
  - job_name: 'kafka-exporter'
    static_configs:
      - targets: ['kafka-exporter:9308']
    scrape_interval: 30s

  - job_name: 'rabbitmq-exporter'
    static_configs:
      - targets: ['rabbitmq-exporter:9419']
    scrape_interval: 30s

  # API Gateway metrics
  - job_name: 'nginx-exporter'
    static_configs:
      - targets: ['nginx-exporter:9113']
    scrape_interval: 15s

  - job_name: 'traefik'
    static_configs:
      - targets: ['traefik:8080']
    metrics_path: /metrics
    scrape_interval: 15s

  # Container metrics
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']
    scrape_interval: 15s

  # Kubernetes metrics (if running on K8s)
  - job_name: 'kubernetes-apiservers'
    kubernetes_sd_configs:
      - role: endpoints
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https

  - job_name: 'kubernetes-nodes'
    kubernetes_sd_configs:
      - role: node
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics

  - job_name: 'kubernetes-pods'
    kubernetes_sd_configs:
      - role: pod
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

  # Custom application metrics with advanced service discovery
  - job_name: 'domain-services'
    dns_sd_configs:
      - names:
        - 'user-management.service.consul'
        - 'order-management.service.consul'
        - 'payment-processing.service.consul'
        - 'inventory-management.service.consul'
        - 'notification-service.service.consul'
        type: 'A'
        port: 8080
    metrics_path: '/metrics'
    scrape_interval: 15s
    relabel_configs:
      - source_labels: [__meta_dns_name]
        regex: '([^.]+)\.service\.consul'
        target_label: service_name
        replacement: '${1}'
      - target_label: domain
        replacement: 'business'

  # Event streaming metrics
  - job_name: 'event-streams'
    static_configs:
      - targets: ['event-processor:8080']
    metrics_path: '/metrics'
    scrape_interval: 15s
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: 'event_(.+)'
        target_label: metric_type
        replacement: 'event'

  # Security monitoring
  - job_name: 'security-scanner'
    static_configs:
      - targets: ['security-scanner:9090']
    metrics_path: '/security/metrics'
    scrape_interval: 60s

  # Performance testing metrics
  - job_name: 'load-test-results'
    static_configs:
      - targets: ['k6-exporter:9090']
    metrics_path: '/metrics'
    scrape_interval: 30s

  # Business metrics
  - job_name: 'business-metrics'
    http_sd_configs:
      - url: 'http://service-discovery:8080/v1/business-metrics'
        refresh_interval: 30s
    metrics_path: '/business/metrics'
    scrape_interval: 60s

# Remote write configuration for long-term storage
remote_write:
  - url: "https://prometheus-remote-storage:9201/write"
    basic_auth:
      username: "prometheus"
      password_file: "/etc/prometheus/secrets/remote-write-password"
    queue_config:
      max_samples_per_send: 10000
      max_shards: 200
      capacity: 2500

# Remote read configuration
remote_read:
  - url: "https://prometheus-remote-storage:9201/read"
    basic_auth:
      username: "prometheus"
      password_file: "/etc/prometheus/secrets/remote-read-password"

# Storage configuration
storage:
  tsdb:
    retention.time: 15d
    retention.size: 50GB
    wal-compression: true