# Pynomaly Project Isolation Configuration
# Defines rules and automation for working on changes in isolation

version: "1.0"
enabled: false  # Start disabled for testing

isolation:
  # Primary isolation strategy
  default_strategy: "container"  # Options: container, venv, folder
  
  # Container-based isolation (recommended for complex changes)
  container:
    enabled: true
    base_image: "python:3.11-slim"
    dockerfile_template: ".project-rules/templates/Dockerfile.isolation"
    compose_template: ".project-rules/templates/docker-compose.isolation.yml"
    network_mode: "isolated"
    auto_cleanup: true
    resource_limits:
      memory: "4GB"
      cpu: "2"
    
  # Virtual environment isolation (lightweight for small changes)
  virtual_env:
    enabled: true
    base_path: ".isolated-envs"
    python_version: "3.11"
    auto_cleanup_days: 7
    requirements_isolation: true
    
  # Folder-based isolation (for documentation/config changes)
  folder:
    enabled: true
    base_path: ".isolated-work"
    sync_mode: "copy"  # Options: copy, symlink, mount
    exclude_patterns:
      - "*.pyc"
      - "__pycache__"
      - ".git"
      - "node_modules"
      - ".venv"

automation:
  # Automatic isolation triggers
  triggers:
    branch_pattern: "feature/*|hotfix/*|experiment/*"
    file_patterns:
      - "src/**/*.py"
      - "tests/**/*.py"
      - "*.requirements.txt"
      - "pyproject.toml"
    exclude_patterns:
      - "docs/**/*.md"
      - "*.yaml"
      - "*.yml" 
      - "README.md"
  
  # Git integration
  git:
    auto_create_isolation_branch: true
    isolation_branch_prefix: "isolated/"
    auto_stash_before_isolation: true
    auto_commit_on_exit: false
    prevent_direct_main_commits: true
    
  # Dependency management
  dependencies:
    lock_requirements: true
    create_isolated_lockfile: true
    check_conflicts: true
    auto_resolve_conflicts: false

# Isolation profiles for different types of work
profiles:
  development:
    strategy: "container"
    include_test_db: true
    mount_source: true
    enable_debug: true
    ports:
      - "8000:8000"  # FastAPI
      - "3000:3000"  # Frontend dev server
      
  testing:
    strategy: "container"
    include_test_db: true
    mount_source: false
    run_tests_on_start: true
    coverage_reporting: true
    
  experimentation:
    strategy: "venv"
    lightweight: true
    quick_setup: true
    auto_cleanup: true
    
  documentation:
    strategy: "folder"
    lightweight: true
    exclude_code: true
    include_assets: true

# Safety and cleanup rules
safety:
  max_concurrent_isolations: 5
  max_isolation_age_days: 30
  auto_cleanup_failed: true
  backup_before_isolation: true
  
  # Prevent dangerous operations
  prevent_operations:
    - "rm -rf /"
    - "sudo rm"
    - "docker system prune -a"
    
  # Resource monitoring
  monitoring:
    disk_usage_limit: "10GB"
    memory_usage_limit: "8GB"
    cpu_usage_limit: 80
    
# Integration with existing CI/CD
cicd:
  skip_isolation_in_ci: true
  isolation_test_stage: false
  artifact_collection: true
  
# Notification settings
notifications:
  isolation_created: true
  isolation_failed: true
  cleanup_performed: true
  resource_limits_exceeded: true
