version: '3.8'

# Pynomaly Local Development Environment
# Complete stack with database, cache, monitoring, and development tools

services:
  # =============================================================================
  # Core Application Services
  # =============================================================================
  
  # Development API Server with Hot-Reload
  pynomaly-dev:
    build:
      context: .
      dockerfile: Dockerfile.multi-stage
      target: development
    container_name: pynomaly-dev
    ports:
      - "8000:8000"  # API server
      - "8080:8080"  # Web UI
      - "5678:5678"  # Debugger port
    environment:
      - PYNOMALY_ENVIRONMENT=development
      - PYNOMALY_DEBUG=true
      - PYNOMALY_LOG_LEVEL=DEBUG
      - PYNOMALY_RELOAD=true
      - PYNOMALY_API_HOST=0.0.0.0
      - PYNOMALY_API_PORT=8000
      - PYNOMALY_DB_HOST=postgres
      - PYNOMALY_DB_PORT=5432
      - PYNOMALY_DB_NAME=pynomaly_dev
      - PYNOMALY_DB_USER=pynomaly
      - PYNOMALY_DB_PASSWORD=pynomaly_dev_password
      - PYNOMALY_REDIS_HOST=redis
      - PYNOMALY_REDIS_PORT=6379
      - PYNOMALY_REDIS_DB=0
      - PYNOMALY_MONITORING_ENABLED=true
      - PYNOMALY_METRICS_ENABLED=true
      - PYNOMALY_TRACING_ENABLED=true
    volumes:
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
      - ./logs:/app/logs
      - ./storage:/app/storage
      - ./cache:/app/cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - pynomaly-network
    restart: unless-stopped

  # =============================================================================
  # Database Services
  # =============================================================================
  
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: pynomaly-postgres
    environment:
      - POSTGRES_DB=pynomaly_dev
      - POSTGRES_USER=pynomaly
      - POSTGRES_PASSWORD=pynomaly_dev_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pynomaly -d pynomaly_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pynomaly-network
    restart: unless-stopped
    command: >
      postgres
      -c log_statement=all
      -c log_destination=stderr
      -c log_min_duration_statement=0
      -c max_connections=200
      -c shared_preload_libraries=pg_stat_statements

  # =============================================================================
  # Cache Services
  # =============================================================================
  
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: pynomaly-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pynomaly-network
    restart: unless-stopped

  # =============================================================================
  # Monitoring Services
  # =============================================================================
  
  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: pynomaly-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - pynomaly-dev
    networks:
      - pynomaly-network
    restart: unless-stopped

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: pynomaly-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - pynomaly-network
    restart: unless-stopped

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: pynomaly-jaeger
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - pynomaly-network
    restart: unless-stopped

  # =============================================================================
  # Development Tools
  # =============================================================================
  
  # pgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pynomaly-pgadmin
    ports:
      - "8081:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@pynomaly.dev
      - PGADMIN_DEFAULT_PASSWORD=admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - pynomaly-network
    restart: unless-stopped

  # Redis Commander for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: pynomaly-redis-commander
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - pynomaly-network
    restart: unless-stopped

  # =============================================================================
  # Message Queue (for streaming/async processing)
  # =============================================================================
  
  # Apache Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: pynomaly-kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper
    networks:
      - pynomaly-network
    restart: unless-stopped

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: pynomaly-zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - pynomaly-network
    restart: unless-stopped

  # =============================================================================
  # Reverse Proxy & Load Balancer
  # =============================================================================
  
  # Nginx for Load Balancing and SSL Termination
  nginx:
    image: nginx:alpine
    container_name: pynomaly-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - pynomaly-dev
    networks:
      - pynomaly-network
    restart: unless-stopped

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local

# =============================================================================
# Networks
# =============================================================================
networks:
  pynomaly-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
