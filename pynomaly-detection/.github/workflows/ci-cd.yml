name: CI/CD Pipeline for Pynomaly Detection

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov numpy pandas scikit-learn scipy
        # Install package in development mode
        pip install -e .
    
    - name: Run linting
      run: |
        pip install ruff black isort mypy
        ruff check src/
        black --check src/
        isort --check-only src/
    
    - name: Run type checking
      run: |
        mypy src/pynomaly_detection --ignore-missing-imports
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=pynomaly_detection --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

  publish-test:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: test-pypi
      url: https://test.pypi.org/project/pynomaly-detection/
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/project/pynomaly-detection/
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security linter
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install performance test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest-benchmark memory-profiler
        pip install -e .
    
    - name: Run performance tests
      run: |
        # Create basic performance test
        python -c "
import time
import numpy as np
from pynomaly_detection import AnomalyDetector

# Generate test data
np.random.seed(42)
X = np.random.randn(1000, 10)
X[:50] += 3  # Add outliers

detector = AnomalyDetector()

# Measure training time
start = time.time()
detector.fit(X)
train_time = time.time() - start

# Measure prediction time
start = time.time()
predictions = detector.predict(X)
predict_time = time.time() - start

print(f'Training time: {train_time:.3f}s')
print(f'Prediction time: {predict_time:.3f}s')
print(f'Anomalies detected: {predictions.sum()}/{len(X)} ({predictions.sum()/len(X)*100:.1f}%)')

# Performance assertions
assert train_time < 5.0, f'Training too slow: {train_time:.3f}s'
assert predict_time < 1.0, f'Prediction too slow: {predict_time:.3f}s'
assert 0.01 <= predictions.sum()/len(X) <= 0.20, f'Anomaly rate out of range: {predictions.sum()/len(X)*100:.1f}%'
        "

  compatibility:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install package and test basic functionality
      run: |
        python -m pip install --upgrade pip
        pip install numpy pandas scikit-learn
        pip install -e .
    
    - name: Test basic functionality
      run: |
        python -c "
import pynomaly_detection
import numpy as np

print(f'Package version: {pynomaly_detection.__version__}')

# Test basic functionality
detector = pynomaly_detection.AnomalyDetector()
X = np.random.randn(100, 5)
detector.fit(X)
predictions = detector.predict(X)
print(f'Basic test passed on ${{ matrix.os }} with Python ${{ matrix.python-version }}')
        "