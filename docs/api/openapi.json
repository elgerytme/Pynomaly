{
  "openapi": "3.0.3",
  "info": {
    "title": "Pynomaly API",
    "version": "1.0.0",
    "description": "\n# Pynomaly - Enterprise Anomaly Detection Platform\n\nA comprehensive, production-ready anomaly detection system with enterprise-grade features.\n\n## Features\n\n### Core Detection\n- **Anomaly Detection**: Detect anomalies in time series, tabular, and streaming data\n- **Multiple Algorithms**: Support for Isolation Forest, One-Class SVM, LSTM Autoencoders, and custom models\n- **Ensemble Methods**: Combine multiple detection algorithms for improved accuracy\n- **Real-time Processing**: Stream processing for continuous anomaly detection\n\n### MLOps Platform\n- **Model Registry**: Centralized model management with versioning and metadata\n- **Experiment Tracking**: Track experiments, parameters, and metrics\n- **Model Deployment**: Deploy models to development, staging, and production environments\n- **Automated Retraining**: Automatic model retraining based on data drift and performance degradation\n\n### Enterprise Features\n- **Multi-tenancy**: Complete tenant isolation with role-based access control\n- **Audit Logging**: Comprehensive audit trails with compliance support (GDPR, HIPAA, SOX)\n- **Security**: JWT authentication, data encryption, and tamper detection\n- **Analytics Dashboard**: Real-time insights and business metrics\n\n### Monitoring & Observability\n- **Health Monitoring**: System health checks and performance metrics\n- **Alerting**: Real-time alerts for anomalies and system issues\n- **Compliance Reporting**: Generate compliance reports for regulatory requirements\n- **Performance Tracking**: Track model performance and system metrics\n\n## Quick Start\n\n### 1. Authentication\n```bash\n# Get JWT token\ncurl -X POST \"https://api.pynomaly.com/api/v1/auth/login\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"your_username\", \"password\": \"your_password\"}'\n```\n\n### 2. Basic Anomaly Detection\n```bash\n# Detect anomalies in data\ncurl -X POST \"https://api.pynomaly.com/api/v1/detection/detect\" \\\n  -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"data\": [1.0, 2.0, 3.0, 100.0, 4.0, 5.0],\n    \"algorithm\": \"isolation_forest\",\n    \"parameters\": {\"contamination\": 0.1}\n  }'\n```\n\n### 3. Train Custom Model\n```bash\n# Train a new model\ncurl -X POST \"https://api.pynomaly.com/api/v1/detection/train\" \\\n  -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"training_data\": \"path/to/training/data.csv\",\n    \"algorithm\": \"lstm_autoencoder\",\n    \"parameters\": {\"epochs\": 100, \"batch_size\": 32}\n  }'\n```\n\n## Authentication\n\nMost endpoints require authentication using JWT tokens. Include the token in the Authorization header:\n\n```\nAuthorization: Bearer <your-jwt-token>\n```\n\n### API Key Authentication\nFor service-to-service authentication, use API keys:\n\n```\nX-API-Key: <your-api-key>\n```\n\n## Rate Limiting\n\nAPI calls are rate-limited to ensure fair usage and system stability:\n- **Standard users**: 1000 requests per hour\n- **Enterprise users**: 10000 requests per hour\n- **Internal services**: Unlimited\n\n## Error Handling\n\nThe API uses standard HTTP status codes and returns detailed error messages following RFC 7807:\n\n```json\n{\n  \"type\": \"https://pynomaly.com/errors/validation-error\",\n  \"title\": \"Validation Error\",\n  \"status\": 422,\n  \"detail\": \"The request data is invalid\",\n  \"instance\": \"/api/v1/detection/detect\",\n  \"errors\": [\n    {\n      \"field\": \"data\",\n      \"message\": \"Field required\"\n    }\n  ]\n}\n```\n\n## Support\n\n- **Documentation**: https://docs.pynomaly.com\n- **Support**: support@pynomaly.com\n- **Community**: https://community.pynomaly.com\n",
    "contact": {
      "name": "Pynomaly Support",
      "url": "https://pynomaly.com/support",
      "email": "support@pynomaly.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://api.pynomaly.com",
      "description": "Production server"
    },
    {
      "url": "https://staging-api.pynomaly.com",
      "description": "Staging server"
    },
    {
      "url": "http://localhost:8000",
      "description": "Development server"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and authorization",
      "externalDocs": {
        "description": "Authentication Guide",
        "url": "https://docs.pynomaly.com/authentication"
      }
    },
    {
      "name": "Anomaly Detection",
      "description": "Core anomaly detection capabilities",
      "externalDocs": {
        "description": "Detection Guide",
        "url": "https://docs.pynomaly.com/detection"
      }
    },
    {
      "name": "Model Management",
      "description": "Model lifecycle management and deployment",
      "externalDocs": {
        "description": "Model Management Guide",
        "url": "https://docs.pynomaly.com/models"
      }
    },
    {
      "name": "MLOps",
      "description": "MLOps platform features",
      "externalDocs": {
        "description": "MLOps Guide",
        "url": "https://docs.pynomaly.com/mlops"
      }
    },
    {
      "name": "Enterprise",
      "description": "Enterprise features and multi-tenancy",
      "externalDocs": {
        "description": "Enterprise Guide",
        "url": "https://docs.pynomaly.com/enterprise"
      }
    },
    {
      "name": "Monitoring",
      "description": "System monitoring and health checks",
      "externalDocs": {
        "description": "Monitoring Guide",
        "url": "https://docs.pynomaly.com/monitoring"
      }
    },
    {
      "name": "Analytics",
      "description": "Analytics dashboard and insights",
      "externalDocs": {
        "description": "Analytics Guide",
        "url": "https://docs.pynomaly.com/analytics"
      }
    },
    {
      "name": "Compliance",
      "description": "Audit logging and compliance reporting",
      "externalDocs": {
        "description": "Compliance Guide",
        "url": "https://docs.pynomaly.com/compliance"
      }
    }
  ],
  "paths": {
    "/api/v1/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User login",
        "description": "Authenticate user and return JWT token",
        "operationId": "login",
        "requestBody": {
          "$ref": "#/components/requestBodies/LoginRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/LoginResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          }
        }
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh JWT token",
        "description": "Refresh an existing JWT token",
        "operationId": "refresh_token",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/v1/auth/me": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get current user profile",
        "description": "Get the current authenticated user's profile",
        "operationId": "get_current_user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserProfile"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/v1/detection/detect": {
      "post": {
        "tags": [
          "Anomaly Detection"
        ],
        "summary": "Detect anomalies in data",
        "description": "Detect anomalies in the provided dataset using the specified algorithm",
        "operationId": "detect_anomalies",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DetectionRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/DetectionResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          }
        }
      }
    },
    "/api/v1/detection/train": {
      "post": {
        "tags": [
          "Anomaly Detection"
        ],
        "summary": "Train anomaly detection model",
        "description": "Train a new anomaly detection model with the provided data",
        "operationId": "train_model",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TrainingRequest"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/TrainingResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          }
        }
      }
    },
    "/api/v1/detection/batch": {
      "post": {
        "tags": [
          "Anomaly Detection"
        ],
        "summary": "Batch anomaly detection",
        "description": "Perform batch anomaly detection with multiple detectors",
        "operationId": "batch_detect",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BatchDetectionRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BatchDetectionResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/v1/models": {
      "get": {
        "tags": [
          "Model Management"
        ],
        "summary": "List models",
        "description": "Get a list of all available models",
        "operationId": "list_models",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageParameter"
          },
          {
            "$ref": "#/components/parameters/SizeParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ModelListResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/v1/models/{model_id}": {
      "get": {
        "tags": [
          "Model Management"
        ],
        "summary": "Get model details",
        "description": "Get detailed information about a specific model",
        "operationId": "get_model",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelIdParameter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ModelDetailsResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/v1/health": {
      "get": {
        "tags": [
          "Monitoring"
        ],
        "summary": "Health check",
        "description": "Get system health status",
        "operationId": "health_check",
        "responses": {
          "200": {
            "$ref": "#/components/responses/HealthResponse"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailableError"
          }
        }
      }
    },
    "/api/v1/health/metrics": {
      "get": {
        "tags": [
          "Monitoring"
        ],
        "summary": "System metrics",
        "description": "Get detailed system metrics",
        "operationId": "get_metrics",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MetricsResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "LoginRequest": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Username or email address",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "User password",
            "example": "secretpassword123"
          }
        }
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "JWT access token"
          },
          "refresh_token": {
            "type": "string",
            "description": "JWT refresh token"
          },
          "token_type": {
            "type": "string",
            "description": "Token type",
            "example": "bearer"
          },
          "expires_in": {
            "type": "integer",
            "description": "Token expiration time in seconds",
            "example": 3600
          }
        }
      },
      "DetectionRequest": {
        "type": "object",
        "required": [
          "data",
          "algorithm"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Input data for anomaly detection",
            "example": [
              1.0,
              2.0,
              3.0,
              100.0,
              4.0,
              5.0
            ]
          },
          "algorithm": {
            "type": "string",
            "enum": [
              "isolation_forest",
              "one_class_svm",
              "lstm_autoencoder",
              "ensemble"
            ],
            "description": "Anomaly detection algorithm",
            "example": "isolation_forest"
          },
          "parameters": {
            "type": "object",
            "description": "Algorithm-specific parameters",
            "example": {
              "contamination": 0.1,
              "n_estimators": 100
            }
          }
        }
      },
      "DetectionResponse": {
        "type": "object",
        "properties": {
          "anomalies": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Indices of detected anomalies",
            "example": [
              3
            ]
          },
          "scores": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Anomaly scores for each data point",
            "example": [
              0.1,
              0.2,
              0.15,
              0.95,
              0.18,
              0.12
            ]
          },
          "threshold": {
            "type": "number",
            "description": "Anomaly detection threshold",
            "example": 0.5
          },
          "model_id": {
            "type": "string",
            "description": "ID of the model used for detection",
            "example": "isolation_forest_20240101_001"
          },
          "processing_time_ms": {
            "type": "number",
            "description": "Processing time in milliseconds",
            "example": 45.6
          }
        }
      },
      "TrainingRequest": {
        "type": "object",
        "required": [
          "training_data",
          "algorithm"
        ],
        "properties": {
          "training_data": {
            "type": "string",
            "description": "Path to training data file or inline data",
            "example": "path/to/training/data.csv"
          },
          "algorithm": {
            "type": "string",
            "enum": [
              "isolation_forest",
              "one_class_svm",
              "lstm_autoencoder",
              "ensemble"
            ],
            "description": "Algorithm to train",
            "example": "lstm_autoencoder"
          },
          "parameters": {
            "type": "object",
            "description": "Training parameters",
            "example": {
              "epochs": 100,
              "batch_size": 32,
              "learning_rate": 0.001
            }
          },
          "model_name": {
            "type": "string",
            "description": "Name for the trained model",
            "example": "production_model_v1"
          }
        }
      },
      "TrainingResponse": {
        "type": "object",
        "properties": {
          "model_id": {
            "type": "string",
            "description": "ID of the trained model",
            "example": "lstm_autoencoder_20240101_001"
          },
          "model_name": {
            "type": "string",
            "description": "Name of the trained model",
            "example": "production_model_v1"
          },
          "training_metrics": {
            "type": "object",
            "description": "Training performance metrics",
            "example": {
              "loss": 0.0234,
              "accuracy": 0.967,
              "precision": 0.923,
              "recall": 0.889
            }
          },
          "training_time_ms": {
            "type": "number",
            "description": "Training time in milliseconds",
            "example": 45600.0
          }
        }
      },
      "HealthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "healthy",
              "unhealthy",
              "degraded"
            ],
            "description": "Overall system health status",
            "example": "healthy"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Health check timestamp",
            "example": "2024-01-01T12:00:00Z"
          },
          "version": {
            "type": "string",
            "description": "Application version",
            "example": "1.0.0"
          },
          "services": {
            "type": "object",
            "description": "Individual service health statuses",
            "example": {
              "database": "healthy",
              "cache": "healthy",
              "model_registry": "healthy"
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Error type URI",
            "example": "https://pynomaly.com/errors/validation-error"
          },
          "title": {
            "type": "string",
            "description": "Error title",
            "example": "Validation Error"
          },
          "status": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 422
          },
          "detail": {
            "type": "string",
            "description": "Error details",
            "example": "The request data is invalid"
          },
          "instance": {
            "type": "string",
            "description": "Request instance that caused the error",
            "example": "/api/v1/detection/detect"
          }
        }
      }
    },
    "responses": {
      "LoginResponse": {
        "description": "Successful login response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TokenResponse"
            }
          }
        }
      },
      "TokenResponse": {
        "description": "JWT token response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TokenResponse"
            }
          }
        }
      },
      "DetectionResponse": {
        "description": "Anomaly detection response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DetectionResponse"
            }
          }
        }
      },
      "TrainingResponse": {
        "description": "Model training response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TrainingResponse"
            }
          }
        }
      },
      "HealthResponse": {
        "description": "System health response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/HealthResponse"
            }
          }
        }
      },
      "BadRequestError": {
        "description": "Bad request error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "type": "https://pynomaly.com/errors/bad-request",
              "title": "Bad Request",
              "status": 400,
              "detail": "Invalid request parameters"
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "type": "https://pynomaly.com/errors/unauthorized",
              "title": "Unauthorized",
              "status": 401,
              "detail": "Authentication required"
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Resource not found error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "type": "https://pynomaly.com/errors/not-found",
              "title": "Not Found",
              "status": 404,
              "detail": "Resource not found"
            }
          }
        }
      },
      "ValidationError": {
        "description": "Validation error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "type": "https://pynomaly.com/errors/validation-error",
              "title": "Validation Error",
              "status": 422,
              "detail": "The request data is invalid"
            }
          }
        }
      },
      "ServiceUnavailableError": {
        "description": "Service unavailable error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "type": "https://pynomaly.com/errors/service-unavailable",
              "title": "Service Unavailable",
              "status": 503,
              "detail": "Service temporarily unavailable"
            }
          }
        }
      }
    },
    "parameters": {
      "PageParameter": {
        "name": "page",
        "in": "query",
        "description": "Page number for pagination",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1
        }
      },
      "SizeParameter": {
        "name": "size",
        "in": "query",
        "description": "Number of items per page",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "default": 20
        }
      },
      "ModelIdParameter": {
        "name": "model_id",
        "in": "path",
        "description": "Unique model identifier",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "examples": {
      "SimpleDetectionRequest": {
        "summary": "Simple anomaly detection",
        "description": "Basic anomaly detection with Isolation Forest",
        "value": {
          "data": [
            1.0,
            2.0,
            3.0,
            100.0,
            4.0,
            5.0
          ],
          "algorithm": "isolation_forest",
          "parameters": {
            "contamination": 0.1,
            "n_estimators": 100
          }
        }
      },
      "TimeSeriesDetectionRequest": {
        "summary": "Time series anomaly detection",
        "description": "Anomaly detection for time series data",
        "value": {
          "data": [
            1.0,
            1.1,
            1.2,
            1.1,
            1.0,
            5.0,
            1.1,
            1.2
          ],
          "algorithm": "lstm_autoencoder",
          "parameters": {
            "sequence_length": 10,
            "epochs": 50
          }
        }
      },
      "ModelTrainingRequest": {
        "summary": "Model training example",
        "description": "Training a custom LSTM autoencoder model",
        "value": {
          "training_data": "s3://pynomaly-data/training/timeseries.csv",
          "algorithm": "lstm_autoencoder",
          "parameters": {
            "epochs": 100,
            "batch_size": 32,
            "learning_rate": 0.001,
            "hidden_units": 64
          },
          "model_name": "production_lstm_v1"
        }
      }
    },
    "requestBodies": {
      "LoginRequest": {
        "description": "User login credentials",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LoginRequest"
            }
          }
        },
        "required": true
      },
      "DetectionRequest": {
        "description": "Anomaly detection request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DetectionRequest"
            },
            "examples": {
              "simple": {
                "$ref": "#/components/examples/SimpleDetectionRequest"
              },
              "timeseries": {
                "$ref": "#/components/examples/TimeSeriesDetectionRequest"
              }
            }
          }
        },
        "required": true
      },
      "TrainingRequest": {
        "description": "Model training request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TrainingRequest"
            },
            "examples": {
              "lstm_training": {
                "$ref": "#/components/examples/ModelTrainingRequest"
              }
            }
          }
        },
        "required": true
      }
    },
    "headers": {
      "X-Request-ID": {
        "description": "Unique request identifier",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "X-Rate-Limit-Remaining": {
        "description": "Number of requests remaining in current window",
        "schema": {
          "type": "integer"
        }
      },
      "X-Rate-Limit-Reset": {
        "description": "Time when rate limit resets",
        "schema": {
          "type": "integer"
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token obtained from the authentication endpoint"
      },
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key for service-to-service authentication"
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    },
    {
      "ApiKeyAuth": []
    }
  ],
  "externalDocs": {
    "description": "Pynomaly Documentation",
    "url": "https://docs.pynomaly.com"
  }
}
