components:
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad request
    Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Forbidden
    InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Internal server error
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Not found
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Unauthorized
  schemas:
    AuthResponse:
      properties:
        access_token:
          type: string
        expires_in:
          type: integer
        refresh_token:
          type: string
        token_type:
          type: string
      type: object
    DetectionRequest:
      properties:
        algorithm:
          type: string
        data:
          items:
            type: number
          type: array
        parameters:
          type: object
      required:
      - data
      - algorithm
      type: object
    DetectionResponse:
      properties:
        anomalies:
          items:
            type: object
          type: array
        scores:
          items:
            type: number
          type: array
        threshold:
          type: number
      type: object
    Error:
      properties:
        detail:
          type: string
        instance:
          type: string
        status:
          type: integer
        title:
          type: string
        type:
          type: string
      type: object
    LoginRequest:
      properties:
        password:
          type: string
        username:
          type: string
      required:
      - username
      - password
      type: object
    TOTPSetupResponse:
      properties:
        backup_codes:
          items:
            type: string
          type: array
        manual_entry_key:
          type: string
        qr_code_url:
          type: string
        secret:
          type: string
      type: object
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: X-API-Key
      type: apiKey
    BearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
info:
  contact:
    email: support@pynomaly.com
    name: Pynomaly Team
    url: https://github.com/pynomaly/pynomaly
  description: Comprehensive anomaly detection API with authentication, MFA, and admin
    capabilities
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Pynomaly API
  version: 1.0.0
openapi: 3.0.3
paths:
  /api/v1/admin/users:
    get:
      description: List all users
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Users list retrieved
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: List all users
      tags:
      - admin
  /api/v1/admin/users/{user_id}:
    get:
      description: Get user details
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: User details retrieved
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Get user details
      tags:
      - admin
  /api/v1/admin/users/{user_id}/disable:
    post:
      description: Disable user account
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: User account disabled
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Disable user account
      tags:
      - admin
  /api/v1/admin/users/{user_id}/enable:
    post:
      description: Enable user account
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: User account enabled
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Enable user account
      tags:
      - admin
  /api/v1/admin/users/{user_id}/roles:
    put:
      description: Update user roles
      requestBody:
        content:
          application/json:
            schema:
              properties:
                roles:
                - string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: User roles updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Update user roles
      tags:
      - admin
  /api/v1/api-keys/:
    get:
      description: List API keys
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: API keys list retrieved
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: List API keys
      tags:
      - api_keys
    post:
      description: Create new API key
      requestBody:
        content:
          application/json:
            schema:
              properties:
                expires_at: string
                name: string
                scopes:
                - string
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: API key created
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Create new API key
      tags:
      - api_keys
  /api/v1/api-keys/{key_id}:
    delete:
      description: Delete API key
      responses:
        '204':
          content:
            application/json:
              schema: {}
          description: API key deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Delete API key
      tags:
      - api_keys
  /api/v1/api-keys/{key_id}/regenerate:
    post:
      description: Regenerate API key
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: API key regenerated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Regenerate API key
      tags:
      - api_keys
  /api/v1/auth/login:
    post:
      description: Authenticate user and get JWT token
      requestBody:
        content:
          application/json:
            schema:
              properties:
                password: string
                username: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                access_token: string
                expires_in: integer
                refresh_token: string
                token_type: string
          description: Authentication successful
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Authenticate user and get JWT token
      tags:
      - authentication
  /api/v1/auth/logout:
    post:
      description: Logout user and invalidate token
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Logout successful
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Logout user and invalidate token
      tags:
      - authentication
  /api/v1/auth/password-reset:
    post:
      description: Request password reset
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Password reset email sent
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Request password reset
      tags:
      - authentication
  /api/v1/auth/password-reset/confirm:
    post:
      description: Confirm password reset
      requestBody:
        content:
          application/json:
            schema:
              properties:
                new_password: string
                token: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Password reset successful
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Confirm password reset
      tags:
      - authentication
  /api/v1/auth/refresh:
    post:
      description: Refresh JWT token
      requestBody:
        content:
          application/json:
            schema:
              properties:
                refresh_token: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                access_token: string
                expires_in: integer
          description: Token refreshed successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Refresh JWT token
      tags:
      - authentication
  /api/v1/detection/algorithms:
    get:
      description: List available algorithms
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Algorithms list retrieved
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: List available algorithms
      tags:
      - detection
  /api/v1/detection/batch:
    post:
      description: Batch anomaly detection
      requestBody:
        content:
          application/json:
            schema:
              properties:
                algorithm: string
                datasets:
                - object
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Batch detection completed
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Batch anomaly detection
      tags:
      - detection
  /api/v1/detection/detect:
    post:
      description: Perform anomaly detection
      requestBody:
        content:
          application/json:
            schema:
              properties:
                algorithm: string
                data: array
                parameters: object
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                anomalies:
                - object
                scores:
                - number
                threshold: number
          description: Detection completed
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Perform anomaly detection
      tags:
      - detection
  /api/v1/health/:
    get:
      description: Health check
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Service healthy
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Health check
      tags:
      - health
  /api/v1/health/detailed:
    get:
      description: Detailed health check
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Detailed health status
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Detailed health check
      tags:
      - health
  /api/v1/mfa/backup-codes:
    get:
      description: Get backup codes count
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Backup codes info
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Get backup codes count
      tags:
      - mfa
  /api/v1/mfa/backup-codes/regenerate:
    post:
      description: Regenerate backup codes
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Backup codes regenerated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Regenerate backup codes
      tags:
      - mfa
  /api/v1/mfa/email/setup:
    post:
      description: Setup email authentication
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Email code sent
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Setup email authentication
      tags:
      - mfa
  /api/v1/mfa/email/verify:
    post:
      description: Verify email code
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email_code: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Email verification successful
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Verify email code
      tags:
      - mfa
  /api/v1/mfa/sms/setup:
    post:
      description: Setup SMS authentication
      requestBody:
        content:
          application/json:
            schema:
              properties:
                phone_number: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: SMS code sent
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Setup SMS authentication
      tags:
      - mfa
  /api/v1/mfa/sms/verify:
    post:
      description: Verify SMS code
      requestBody:
        content:
          application/json:
            schema:
              properties:
                sms_code: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: SMS verification successful
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Verify SMS code
      tags:
      - mfa
  /api/v1/mfa/status:
    get:
      description: Get MFA status
      responses:
        '200':
          content:
            application/json:
              schema:
                active_methods:
                - object
                backup_codes_available: boolean
                mfa_enabled: boolean
          description: MFA status retrieved
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Get MFA status
      tags:
      - mfa
  /api/v1/mfa/totp/setup:
    post:
      description: Setup TOTP authentication
      requestBody:
        content:
          application/json:
            schema:
              properties:
                app_name: string
                issuer: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                backup_codes:
                - string
                manual_entry_key: string
                qr_code_url: string
                secret: string
          description: TOTP setup successful
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Setup TOTP authentication
      tags:
      - mfa
  /api/v1/mfa/totp/verify:
    post:
      description: Verify TOTP code
      requestBody:
        content:
          application/json:
            schema:
              properties:
                totp_code: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: TOTP verification successful
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Verify TOTP code
      tags:
      - mfa
security:
- BearerAuth: []
- ApiKeyAuth: []
servers:
- description: Development server
  url: http://localhost:8000
- description: Production server
  url: https://api.pynomaly.com
