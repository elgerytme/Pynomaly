version: '3.8'

services:
  # Main Pynomaly Application
  pynomaly-api:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    image: pynomaly:production
    container_name: pynomaly-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://pynomaly:${POSTGRES_PASSWORD}@postgres:5432/pynomaly_prod
      - REDIS_URL=redis://redis-cluster:6379
      - LOG_LEVEL=INFO
      - WORKERS=4
      - MAX_CONNECTIONS=100
      - RATE_LIMIT_GLOBAL=10000
      - RATE_LIMIT_PER_USER=1000
      - STREAMING_BUFFER_SIZE=10000
      - STREAMING_BATCH_SIZE=100
      - MODEL_REGISTRY_PATH=/app/models
      - FEATURE_STORE_PATH=/app/features
    volumes:
      - pynomaly-models:/app/models
      - pynomaly-features:/app/features
      - pynomaly-logs:/app/logs
    depends_on:
      - postgres
      - redis-cluster
      - prometheus
    networks:
      - pynomaly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Real-time Streaming Service
  pynomaly-streaming:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: streaming
    image: pynomaly:streaming
    container_name: pynomaly-streaming
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis-cluster:6379
      - KAFKA_BROKERS=kafka:9092
      - STREAMING_WORKERS=8
      - BUFFER_SIZE=50000
      - BATCH_SIZE=500
    volumes:
      - pynomaly-models:/app/models
      - pynomaly-logs:/app/logs
    depends_on:
      - redis-cluster
      - kafka
    networks:
      - pynomaly-network
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # PostgreSQL Database with High Availability
  postgres:
    image: postgres:15-alpine
    container_name: pynomaly-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=pynomaly_prod
      - POSTGRES_USER=pynomaly
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/db-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - pynomaly-network
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c random_page_cost=1.1
      -c temp_file_limit=2GB
      -c log_min_duration_statement=200ms
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pynomaly -d pynomaly_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cluster for Caching and Session Management
  redis-cluster:
    image: redis:7-alpine
    container_name: pynomaly-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - pynomaly-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Apache Kafka for Event Streaming
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: pynomaly-kafka
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 8
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - pynomaly-network

  # Zookeeper for Kafka Coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: pynomaly-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - pynomaly-network

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: pynomaly-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pynomaly-network

  # Grafana for Monitoring Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: pynomaly-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - pynomaly-network

  # Elasticsearch for Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: pynomaly-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - pynomaly-network

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: pynomaly-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - pynomaly-network

  # Nginx Load Balancer and Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: pynomaly-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
      - nginx-logs:/var/log/nginx
    depends_on:
      - pynomaly-api
    networks:
      - pynomaly-network

  # Model Training Job (runs periodically)
  model-trainer:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: trainer
    image: pynomaly:trainer
    container_name: pynomaly-trainer
    restart: "no"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://pynomaly:${POSTGRES_PASSWORD}@postgres:5432/pynomaly_prod
      - MODEL_REGISTRY_PATH=/app/models
      - TRAINING_DATA_PATH=/app/data
      - TRAINING_SCHEDULE=0 2 * * *  # Daily at 2 AM
    volumes:
      - pynomaly-models:/app/models
      - pynomaly-data:/app/data
      - pynomaly-logs:/app/logs
    depends_on:
      - postgres
      - pynomaly-api
    networks:
      - pynomaly-network
    profiles:
      - training

# Named volumes for data persistence
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  kafka-data:
    driver: local
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  nginx-logs:
    driver: local
  pynomaly-models:
    driver: local
  pynomaly-features:
    driver: local
  pynomaly-data:
    driver: local
  pynomaly-logs:
    driver: local

# Network configuration
networks:
  pynomaly-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16