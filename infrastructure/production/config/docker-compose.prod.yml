# Production Docker Compose Configuration
# This file defines the complete production deployment stack

version: '3.8'

# =============================================================================
# NETWORK CONFIGURATION
# =============================================================================
networks:
  mlops-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
  database-network:
    driver: bridge
    internal: true
    
  monitoring-network:
    driver: bridge

# =============================================================================
# VOLUME CONFIGURATION
# =============================================================================
volumes:
  # Database Volumes
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/mlops/postgres
  
  # Redis Volumes
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/mlops/redis
  
  # Application Volumes
  app-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/mlops
  
  model-storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/mlops/models
  
  # SSL Certificates
  ssl-certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /etc/ssl/mlops
  
  # Monitoring Data
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local

# =============================================================================
# SERVICES CONFIGURATION
# =============================================================================
services:

  # ==========================================================================
  # REVERSE PROXY & LOAD BALANCER
  # ==========================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: mlops-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ssl-certs:/etc/ssl/certs:ro
      - app-logs:/var/log/nginx
    networks:
      - mlops-network
    depends_on:
      - api-server
      - web-ui
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - NGINX_ENVSUBST_TEMPLATE_DIR=/etc/nginx/templates
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/conf.d
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`${DOMAIN_NAME}`)"
      - "traefik.http.routers.nginx.tls=true"

  # ==========================================================================
  # API SERVER
  # ==========================================================================
  api-server:
    image: ${DOCKER_REGISTRY}/mlops-api:${VERSION}
    container_name: mlops-api-server
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    ports:
      - "8000-8002:8000"
    volumes:
      - ./config/application.yml:/app/config/application.yml:ro
      - ssl-certs:/etc/ssl/certs:ro
      - app-logs:/var/log/app
      - model-storage:/app/models
    networks:
      - mlops-network
      - database-network
      - monitoring-network
    depends_on:
      - postgres
      - redis-cache
      - redis-session
    environment:
      - CONFIG_FILE=/app/config/application.yml
      - DATABASE_URL=postgresql://mlops:${POSTGRES_PASSWORD}@postgres:5432/mlops_prod
      - REDIS_CACHE_URL=redis://redis-cache:6379/0
      - REDIS_SESSION_URL=redis://redis-session:6379/1
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - ENVIRONMENT=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9090"
      - "prometheus.io/path=/metrics"

  # ==========================================================================
  # WEB UI
  # ==========================================================================
  web-ui:
    image: ${DOCKER_REGISTRY}/mlops-ui:${VERSION}
    container_name: mlops-web-ui
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    ports:
      - "3000-3001:80"
    networks:
      - mlops-network
    depends_on:
      - api-server
    environment:
      - API_BASE_URL=https://${DOMAIN_NAME}/api
      - ENVIRONMENT=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # DATABASE SERVICES
  # ==========================================================================
  postgres:
    image: postgres:15-alpine
    container_name: mlops-postgres
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - database-network
    environment:
      - POSTGRES_DB=mlops_prod
      - POSTGRES_USER=mlops
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlops -d mlops_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Redis Cache
  redis-cache:
    image: redis:7-alpine
    container_name: mlops-redis-cache
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis-data:/data
      - ./redis/redis-cache.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - database-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Redis Session Store
  redis-session:
    image: redis:7-alpine
    container_name: mlops-redis-session
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    ports:
      - "127.0.0.1:6380:6379"
    volumes:
      - ./redis/redis-session.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - database-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # ==========================================================================
  # MONITORING SERVICES
  # ==========================================================================
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: mlops-prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/alert-rules.yml:/etc/prometheus/rules/alert-rules.yml:ro
    networks:
      - monitoring-network
      - mlops-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:10.1.0
    container_name: mlops-grafana
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ../monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    networks:
      - monitoring-network
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=grafana
      - GF_DATABASE_PASSWORD=${GRAFANA_DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: mlops-alertmanager
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    ports:
      - "127.0.0.1:9093:9093"
    volumes:
      - alertmanager-data:/alertmanager
      - ../monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    networks:
      - monitoring-network
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # ML/AI SERVICES
  # ==========================================================================
  model-server:
    image: ${DOCKER_REGISTRY}/mlops-model-server:${VERSION}
    container_name: mlops-model-server
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    ports:
      - "8080-8081:8080"
    volumes:
      - model-storage:/app/models
      - ./config/model-server.yml:/app/config/model-server.yml:ro
    networks:
      - mlops-network
      - database-network
    depends_on:
      - postgres
      - redis-cache
    environment:
      - MODEL_STORAGE_PATH=/app/models
      - REDIS_URL=redis://redis-cache:6379/2
      - DATABASE_URL=postgresql://mlops:${POSTGRES_PASSWORD}@postgres:5432/mlops_prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9090"

  # ==========================================================================
  # BACKGROUND SERVICES
  # ==========================================================================
  worker:
    image: ${DOCKER_REGISTRY}/mlops-worker:${VERSION}
    container_name: mlops-worker
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    volumes:
      - ./config/application.yml:/app/config/application.yml:ro
      - model-storage:/app/models
      - app-logs:/var/log/app
    networks:
      - mlops-network
      - database-network
    depends_on:
      - postgres
      - redis-cache
    environment:
      - CONFIG_FILE=/app/config/application.yml
      - DATABASE_URL=postgresql://mlops:${POSTGRES_PASSWORD}@postgres:5432/mlops_prod
      - REDIS_CACHE_URL=redis://redis-cache:6379/0
      - WORKER_TYPE=general
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 60s
      timeout: 10s
      retries: 3

  scheduler:
    image: ${DOCKER_REGISTRY}/mlops-scheduler:${VERSION}
    container_name: mlops-scheduler
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    volumes:
      - ./config/application.yml:/app/config/application.yml:ro
      - app-logs:/var/log/app
    networks:
      - mlops-network
      - database-network
    depends_on:
      - postgres
      - redis-cache
    environment:
      - CONFIG_FILE=/app/config/application.yml
      - DATABASE_URL=postgresql://mlops:${POSTGRES_PASSWORD}@postgres:5432/mlops_prod
      - REDIS_CACHE_URL=redis://redis-cache:6379/0
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 60s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # UTILITY SERVICES
  # ==========================================================================
  backup:
    image: ${DOCKER_REGISTRY}/mlops-backup:${VERSION}
    container_name: mlops-backup
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    volumes:
      - postgres-data:/backup/postgres:ro
      - ./backup/scripts:/backup/scripts:ro
      - ./backup/config:/backup/config:ro
    networks:
      - database-network
    depends_on:
      - postgres
    environment:
      - BACKUP_SCHEDULE=0 2 * * *
      - DATABASE_URL=postgresql://mlops:${POSTGRES_PASSWORD}@postgres:5432/mlops_prod
      - S3_BACKUP_BUCKET=${S3_BACKUP_BUCKET}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
    command: ["cron", "-f"]

# =============================================================================
# CONFIGURATION OVERRIDES FOR PRODUCTION
# =============================================================================
x-logging: &logging
  driver: "json-file"
  options:
    max-size: "100m"
    max-file: "3"

x-restart-policy: &restart-policy
  restart: unless-stopped

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s