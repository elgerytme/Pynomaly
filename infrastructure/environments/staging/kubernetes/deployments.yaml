apiVersion: apps/v1
kind: Deployment
metadata:
  name: model-server
  namespace: mlops-staging
  labels:
    app: model-server
    environment: staging
spec:
  replicas: 2
  selector:
    matchLabels:
      app: model-server
  template:
    metadata:
      labels:
        app: model-server
    spec:
      containers:
      - name: model-server
        image: mlops/model-server:staging
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: mlops-config
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: mlops-config
              key: REDIS_URL
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: mlops-config
              key: ENVIRONMENT
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: feature-store
  namespace: mlops-staging
  labels:
    app: feature-store
    environment: staging
spec:
  replicas: 2
  selector:
    matchLabels:
      app: feature-store
  template:
    metadata:
      labels:
        app: feature-store
    spec:
      containers:
      - name: feature-store
        image: mlops/feature-store:staging
        ports:
        - containerPort: 8001
        env:
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: mlops-config
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: mlops-config
              key: REDIS_URL
        - name: KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: mlops-config
              key: KAFKA_BOOTSTRAP_SERVERS
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: inference-engine
  namespace: mlops-staging
  labels:
    app: inference-engine
    environment: staging
spec:
  replicas: 3
  selector:
    matchLabels:
      app: inference-engine
  template:
    metadata:
      labels:
        app: inference-engine
    spec:
      containers:
      - name: inference-engine
        image: mlops/inference-engine:staging
        ports:
        - containerPort: 8002
        env:
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: mlops-config
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: mlops-config
              key: REDIS_URL
        - name: MODEL_SERVER_URL
          value: "http://model-server-service:8000"
        - name: FEATURE_STORE_URL
          value: "http://feature-store-service:8001"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 30
          periodSeconds: 10

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: mlops-staging
  labels:
    app: postgres
    environment: staging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "mlops_staging"
        - name: POSTGRES_USER
          value: "mlops_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mlops-secrets
              key: postgres-password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "500m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: mlops-staging
  labels:
    app: redis
    environment: staging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"