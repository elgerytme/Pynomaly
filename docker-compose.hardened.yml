version: '3.8'

services:
  # ============================================================================
  # Development Environment
  # ============================================================================
  pynomaly-dev:
    build:
      context: .
      dockerfile: Dockerfile.hardened
      target: development
    container_name: pynomaly-dev
    volumes:
      # Mount source code for development
      - ./src:/app/src:cached
      - ./tests:/app/tests:cached
      - ./pyproject.toml:/app/pyproject.toml:ro
      # Development data persistence
      - pynomaly-dev-storage:/app/storage
      - pynomaly-dev-logs:/app/logs
    ports:
      - "8000:8000"  # API server
      - "8888:8888"  # Jupyter (if needed)
    environment:
      - PYNOMALY_ENV=development
      - PYNOMALY_LOG_LEVEL=DEBUG
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://pynomaly:pynomaly@postgres:5432/pynomaly_dev
    depends_on:
      - redis
      - postgres
    networks:
      - pynomaly-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # ============================================================================
  # Testing Environment
  # ============================================================================
  pynomaly-test:
    build:
      context: .
      dockerfile: Dockerfile.hardened
      target: testing
    container_name: pynomaly-test
    volumes:
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
      - ./pyproject.toml:/app/pyproject.toml:ro
      - pynomaly-test-reports:/app/htmlcov
    environment:
      - PYNOMALY_ENV=testing
      - PYNOMALY_LOG_LEVEL=DEBUG
      - REDIS_URL=redis://redis-test:6379
      - DATABASE_URL=postgresql://pynomaly:pynomaly@postgres-test:5432/pynomaly_test
    depends_on:
      - redis-test
      - postgres-test
    networks:
      - pynomaly-test-network
    profiles:
      - testing
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # ============================================================================
  # Production Environment
  # ============================================================================
  pynomaly-prod:
    build:
      context: .
      dockerfile: Dockerfile.hardened
      target: production
    container_name: pynomaly-prod
    volumes:
      - pynomaly-prod-storage:/app/storage:rw
      - pynomaly-prod-logs:/app/logs:rw
    ports:
      - "80:8000"
    environment:
      - PYNOMALY_ENV=production
      - PYNOMALY_LOG_LEVEL=INFO
      - REDIS_URL=redis://redis-prod:6379
      - DATABASE_URL=postgresql://pynomaly:${POSTGRES_PASSWORD}@postgres-prod:5432/pynomaly_prod
    depends_on:
      - redis-prod
      - postgres-prod
    networks:
      - pynomaly-prod-network
    profiles:
      - production
    restart: always
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # ============================================================================
  # Infrastructure Services
  # ============================================================================
  
  # Development Redis
  redis:
    image: redis:7.2-alpine
    container_name: pynomaly-redis-dev
    volumes:
      - pynomaly-redis-dev-data:/data
    ports:
      - "6379:6379"
    networks:
      - pynomaly-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    command: redis-server --requirepass pynomaly --appendonly yes

  # Testing Redis
  redis-test:
    image: redis:7.2-alpine
    container_name: pynomaly-redis-test
    tmpfs:
      - /data
    networks:
      - pynomaly-test-network
    profiles:
      - testing
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    command: redis-server --requirepass pynomaly

  # Production Redis
  redis-prod:
    image: redis:7.2-alpine
    container_name: pynomaly-redis-prod
    volumes:
      - pynomaly-redis-prod-data:/data
    networks:
      - pynomaly-prod-network
    profiles:
      - production
    restart: always
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes

  # Development PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: pynomaly-postgres-dev
    volumes:
      - pynomaly-postgres-dev-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=pynomaly_dev
      - POSTGRES_USER=pynomaly
      - POSTGRES_PASSWORD=pynomaly
    networks:
      - pynomaly-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Testing PostgreSQL
  postgres-test:
    image: postgres:15-alpine
    container_name: pynomaly-postgres-test
    tmpfs:
      - /var/lib/postgresql/data
    environment:
      - POSTGRES_DB=pynomaly_test
      - POSTGRES_USER=pynomaly
      - POSTGRES_PASSWORD=pynomaly
    networks:
      - pynomaly-test-network
    profiles:
      - testing
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Production PostgreSQL
  postgres-prod:
    image: postgres:15-alpine
    container_name: pynomaly-postgres-prod
    volumes:
      - pynomaly-postgres-prod-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=pynomaly_prod
      - POSTGRES_USER=pynomaly
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - pynomaly-prod-network
    profiles:
      - production
    restart: always
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # ============================================================================
  # Monitoring and Management
  # ============================================================================
  
  # Production Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: pynomaly-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "443:443"
      - "80:80"
    depends_on:
      - pynomaly-prod
    networks:
      - pynomaly-prod-network
    profiles:
      - production
    restart: always
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

# ============================================================================
# Networks
# ============================================================================
networks:
  pynomaly-network:
    driver: bridge
    name: pynomaly-dev-network
  
  pynomaly-test-network:
    driver: bridge
    name: pynomaly-test-network
    
  pynomaly-prod-network:
    driver: bridge
    name: pynomaly-prod-network

# ============================================================================
# Volumes
# ============================================================================
volumes:
  # Development volumes
  pynomaly-dev-storage:
    name: pynomaly-dev-storage
  pynomaly-dev-logs:
    name: pynomaly-dev-logs
  pynomaly-redis-dev-data:
    name: pynomaly-redis-dev-data
  pynomaly-postgres-dev-data:
    name: pynomaly-postgres-dev-data
  
  # Testing volumes
  pynomaly-test-reports:
    name: pynomaly-test-reports
  
  # Production volumes
  pynomaly-prod-storage:
    name: pynomaly-prod-storage
  pynomaly-prod-logs:
    name: pynomaly-prod-logs
  pynomaly-redis-prod-data:
    name: pynomaly-redis-prod-data
  pynomaly-postgres-prod-data:
    name: pynomaly-postgres-prod-data