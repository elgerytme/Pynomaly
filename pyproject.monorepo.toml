# Pynomaly Monorepo Configuration
[build-system]
requires = [
    "hatchling",
    "hatch-vcs",
]
build-backend = "hatchling.build"

[project]
name = "pynomaly-monorepo"
dynamic = ["version"]
description = "State-of-the-art Python anomaly detection platform with clean architecture - Monorepo"
authors = [{name = "Pynomaly Team", email = "team@pynomaly.io"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
keywords = ["anomaly-detection", "outlier-detection", "machine-learning", "clean-architecture", "monorepo"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

dependencies = [
    "pyod>=2.0.5",
    "numpy>=1.26.0,<2.2.0",
    "pandas>=2.2.3",
    "polars>=1.19.0",
    "pydantic>=2.10.4",
    "structlog>=24.4.0",
    "dependency-injector>=4.42.0",
    "networkx>=3.0",
]

[project.urls]
Homepage = "https://github.com/pynomaly/pynomaly"
Repository = "https://github.com/pynomaly/pynomaly"
Documentation = "https://pynomaly.readthedocs.io"
Issues = "https://github.com/pynomaly/pynomaly/issues"
Changelog = "https://github.com/pynomaly/pynomaly/blob/main/CHANGELOG.md"

# Workspace configuration for monorepo
[project.optional-dependencies]
# Core packages
core = ["pynomaly-core"]
infrastructure = ["pynomaly-infrastructure"]
services = ["pynomaly-services"]

# Interface packages
api = ["pynomaly-api"]
cli = ["pynomaly-cli"]
web = ["pynomaly-web"]

# Specialized packages
enterprise = ["pynomaly-enterprise"]
algorithms = ["pynomaly-algorithms"]
sdks = ["pynomaly-sdks"]

# Development packages
testing = ["pynomaly-testing"]
tools = ["pynomaly-tools"]

# Full installation
all = [
    "pynomaly-core",
    "pynomaly-infrastructure",
    "pynomaly-services",
    "pynomaly-api",
    "pynomaly-cli",
    "pynomaly-web",
    "pynomaly-enterprise",
    "pynomaly-algorithms",
    "pynomaly-sdks",
    "pynomaly-testing",
    "pynomaly-tools",
]

# Development extras
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-xdist>=3.6.0",
    "ruff>=0.8.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "mypy>=1.13.0",
    "pre-commit>=4.0.0",
]

docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.27.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
]

[project.scripts]
pynomaly = "pynomaly.cli:main"
pynomaly-api = "pynomaly.api:main"
pynomaly-web = "pynomaly.web:main"

# Hatch configuration for monorepo
[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = ["src"]

# Workspace management
[tool.hatch.envs.default]
path = ".venv"
dependencies = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=src --cov-report=html --cov-report=xml {args:tests}"

# Individual package environments
[tool.hatch.envs.core]
path = "src/packages/core/.venv"
dependencies = ["pynomaly-core[dev]"]

[tool.hatch.envs.infrastructure]
path = "src/packages/infrastructure/.venv"
dependencies = ["pynomaly-infrastructure[dev]"]

[tool.hatch.envs.services]
path = "src/packages/services/.venv"
dependencies = ["pynomaly-services[dev]"]

[tool.hatch.envs.api]
path = "src/packages/api/.venv"
dependencies = ["pynomaly-api[dev]"]

[tool.hatch.envs.cli]
path = "src/packages/cli/.venv"
dependencies = ["pynomaly-cli[dev]"]

[tool.hatch.envs.web]
path = "src/packages/web/.venv"
dependencies = ["pynomaly-web[dev]"]

# Tool configuration
[tool.ruff]
target-version = "py311"
line-length = 88
extend-exclude = [
    "migrations",
    "environments",
    ".env*",
    ".venv*",
    "test_env*",
    "venv*"
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "B008",  # Allow function calls in argument defaults (FastAPI Depends pattern)
]

[tool.black]
target-version = ["py311"]
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
(
    environments
    | \.env.*
    | \.venv.*
    | test_env.*
    | venv.*
)
'''

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["pynomaly"]
skip_glob = [
    "environments/*",
    ".env*",
    ".venv*",
    "test_env*",
    "venv*"
]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
exclude = [
    "environments/",
    "\\.env.*",
    "\\.venv.*",
    "test_env.*",
    "venv.*"
]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--disable-warnings",
    "--color=yes",
    "--durations=10",
    "--show-capture=no",
    "--maxfail=5"
]
testpaths = ["src/packages/*/tests", "tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/*_test.py",
    "*/conftest.py",
    "*/__init__.py",
]

[tool.coverage.report]
show_missing = true
fail_under = 90
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\\\(.*Protocol\\\\):",
    "@(abc\\\\.)?abstractmethod",
    "if TYPE_CHECKING:",
    "\\.\\.\\.",
    "pass",
]