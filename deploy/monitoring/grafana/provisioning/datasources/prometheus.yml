# Grafana datasource configuration
apiVersion: 1

datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true
    editable: true
    jsonData:
      timeInterval: "15s"
      httpMethod: POST
      manageAlerts: true
      alerting: true
      prometheusType: Prometheus
      prometheusVersion: "2.45.0"
      cacheLevel: 'High'
      disableMetricsLookup: false
      customQueryParameters: ""
      incrementalQuerying: false
      exemplarTraceIdDestinations:
        - name: traceID
          datasourceUid: jaeger
          urlDisplayLabel: "View trace"

  - name: Loki
    type: loki
    access: proxy
    url: http://loki:3100
    editable: true
    jsonData:
      maxLines: 1000
      derivedFields:
        - matcherRegex: "(?:traceID|trace_id)=([A-Za-z0-9]+)"
          name: TraceID
          datasourceUid: jaeger
          url: "$${__value.raw}"

  - name: Jaeger
    type: jaeger
    access: proxy
    url: http://jaeger:16686
    editable: true
    uid: jaeger
    jsonData:
      tracesToLogsV2:
        datasourceUid: loki
        spanStartTimeShift: "1h"
        spanEndTimeShift: "-1h"
        tags: ['job', 'instance', 'pod', 'namespace']
        filterByTraceID: false
        filterBySpanID: false
        customQuery: true
        query: 'method="$${__span.tags.method}"'
      tracesToMetrics:
        datasourceUid: prometheus
        spanStartTimeShift: "1h"
        spanEndTimeShift: "-1h"
        tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]
        queries:
          - name: 'Sample query'
            query: 'sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[5m]))'
      nodeGraph:
        enabled: true
      search:
        hide: false
      spanBar:
        type: 'Tag'
        tag: 'http.path'