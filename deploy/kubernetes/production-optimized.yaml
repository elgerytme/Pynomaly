---
# Production-optimized Kubernetes deployment for Pynomaly
# This configuration includes performance optimizations, monitoring, and security hardening

apiVersion: v1
kind: Namespace
metadata:
  name: pynomaly-prod
  labels:
    name: pynomaly-prod
    environment: production
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: pynomaly-config
  namespace: pynomaly-prod
data:
  # Application settings
  PYNOMALY_ENVIRONMENT: "production"
  PYNOMALY_LOG_LEVEL: "INFO"
  PYNOMALY_API_PORT: "8000"
  PYNOMALY_WORKERS: "4"

  # Database settings
  PYNOMALY_DB_HOST: "postgresql-service"
  PYNOMALY_DB_PORT: "5432"
  PYNOMALY_DB_NAME: "pynomaly_prod"

  # Cache settings
  PYNOMALY_REDIS_HOST: "redis-service"
  PYNOMALY_REDIS_PORT: "6379"
  PYNOMALY_CACHE_TTL: "3600"

  # Performance settings
  PYNOMALY_ENABLE_OPTIMIZATION: "true"
  PYNOMALY_BATCH_SIZE: "10000"
  PYNOMALY_MAX_WORKERS: "8"

  # Monitoring settings
  PYNOMALY_METRICS_ENABLED: "true"
  PYNOMALY_TRACING_ENABLED: "true"
  OTEL_EXPORTER_OTLP_ENDPOINT: "http://jaeger-collector:14268"

  # Resource limits
  OMP_NUM_THREADS: "4"
  MKL_NUM_THREADS: "4"
  OPENBLAS_NUM_THREADS: "4"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: pynomaly-secrets
  namespace: pynomaly-prod
type: Opaque
stringData:
  # Database credentials
  PYNOMALY_DB_USER: "pynomaly_user"
  PYNOMALY_DB_PASSWORD: "secure_password_change_me"

  # JWT secrets
  PYNOMALY_JWT_SECRET: "jwt_secret_key_change_me"
  PYNOMALY_JWT_ALGORITHM: "HS256"

  # API keys
  PYNOMALY_API_KEY: "api_key_change_me"

---
# Persistent Volume for data storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pynomaly-storage
  namespace: pynomaly-prod
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd
---
# Persistent Volume for model storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pynomaly-models
  namespace: pynomaly-prod
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
---
# Main application deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pynomaly-api
  namespace: pynomaly-prod
  labels:
    app: pynomaly-api
    version: v1.3.0
    tier: backend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: pynomaly-api
  template:
    metadata:
      labels:
        app: pynomaly-api
        version: v1.3.0
        tier: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: pynomaly-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: pynomaly-api
        image: pynomaly/pynomaly:v1.3.0-production
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP

        # Resource limits and requests
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "8Gi"
            cpu: "4000m"
            ephemeral-storage: "5Gi"

        # Environment variables
        envFrom:
        - configMapRef:
            name: pynomaly-config
        - secretRef:
            name: pynomaly-secrets

        # Volume mounts
        volumeMounts:
        - name: storage
          mountPath: /app/storage
        - name: models
          mountPath: /app/models
        - name: temp
          mountPath: /app/temp
        - name: cache
          mountPath: /app/cache

        # Health checks
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /api/health/ready
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        # Startup probe for slow initialization
        startupProbe:
          httpGet:
            path: /api/health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30

        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1001

      # Volumes
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: pynomaly-storage
      - name: models
        persistentVolumeClaim:
          claimName: pynomaly-models
      - name: temp
        emptyDir:
          sizeLimit: 10Gi
      - name: cache
        emptyDir:
          sizeLimit: 5Gi

      # Pod scheduling preferences
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - pynomaly-api
              topologyKey: kubernetes.io/hostname

      # Node selection
      nodeSelector:
        node-type: compute-optimized

      # Tolerations for dedicated nodes
      tolerations:
      - key: "compute-optimized"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
---
# Service for API access
apiVersion: v1
kind: Service
metadata:
  name: pynomaly-api-service
  namespace: pynomaly-prod
  labels:
    app: pynomaly-api
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: pynomaly-api
---
# Worker deployment for background tasks
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pynomaly-worker
  namespace: pynomaly-prod
  labels:
    app: pynomaly-worker
    version: v1.3.0
    tier: worker
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: pynomaly-worker
  template:
    metadata:
      labels:
        app: pynomaly-worker
        version: v1.3.0
        tier: worker
    spec:
      serviceAccountName: pynomaly-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: pynomaly-worker
        image: pynomaly/pynomaly:v1.3.0-production
        imagePullPolicy: IfNotPresent
        command: ["python", "-m", "pynomaly.infrastructure.workers.background_worker"]

        # Resource limits optimized for ML workloads
        resources:
          requests:
            memory: "4Gi"
            cpu: "2000m"
          limits:
            memory: "16Gi"
            cpu: "8000m"

        # Environment variables
        envFrom:
        - configMapRef:
            name: pynomaly-config
        - secretRef:
            name: pynomaly-secrets

        # Volume mounts
        volumeMounts:
        - name: storage
          mountPath: /app/storage
        - name: models
          mountPath: /app/models
        - name: temp
          mountPath: /app/temp

        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1001

      # Volumes
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: pynomaly-storage
      - name: models
        persistentVolumeClaim:
          claimName: pynomaly-models
      - name: temp
        emptyDir:
          sizeLimit: 20Gi

      # Node selection for CPU-intensive workloads
      nodeSelector:
        node-type: cpu-optimized
---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: pynomaly-api-hpa
  namespace: pynomaly-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pynomaly-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
---
# Redis Cache Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: pynomaly-prod
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir:
          sizeLimit: 10Gi
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: pynomaly-prod
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pynomaly-ingress
  namespace: pynomaly-prod
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.pynomaly.io
    secretName: pynomaly-tls
  rules:
  - host: api.pynomaly.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pynomaly-api-service
            port:
              number: 8000
---
# Service Account for RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pynomaly-service-account
  namespace: pynomaly-prod
---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: pynomaly-network-policy
  namespace: pynomaly-prod
spec:
  podSelector:
    matchLabels:
      app: pynomaly-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app: postgresql
    ports:
    - protocol: TCP
      port: 5432
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: pynomaly-api-pdb
  namespace: pynomaly-prod
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: pynomaly-api
