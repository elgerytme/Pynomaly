# Kubernetes deployment for monitoring services
# Prometheus, Grafana, OpenTelemetry Collector, and Alertmanager

apiVersion: apps/v1
kind: Deployment
metadata:
  name: pynomaly-prometheus
  namespace: pynomaly
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: production
    app.kubernetes.io/version: "2.48.0"
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: observability
    app.kubernetes.io/managed-by: kubectl
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/component: metrics
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/component: metrics
        app.kubernetes.io/instance: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: pynomaly-prometheus
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: prometheus
        image: prom/prometheus:v2.48.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
        ports:
        - name: http
          containerPort: 9090
          protocol: TCP
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.console.templates=/etc/prometheus/consoles
        - --storage.tsdb.retention.time=30d
        - --storage.tsdb.retention.size=10GB
        - --web.enable-lifecycle
        - --web.enable-admin-api
        - --web.external-url=http://prometheus.pynomaly.local
        - --web.route-prefix=/
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "8Gi"
            cpu: "2000m"
            ephemeral-storage: "5Gi"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
          readOnly: true
        - name: prometheus-data
          mountPath: /prometheus
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: prometheus-config
        configMap:
          name: pynomaly-prometheus-config
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: pynomaly-prometheus-pvc
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-role
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: monitoring
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-role-binding
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-role
subjects:
- kind: ServiceAccount
  name: prometheus-service-account
  namespace: pynomaly-production
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: pynomaly-production
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'pynomaly-production'
        environment: 'production'

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager-service:9093

    scrape_configs:
    # Pynomaly API metrics
    - job_name: 'pynomaly-api'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - pynomaly-production
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: pynomaly-api-internal
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics
      - source_labels: [__meta_kubernetes_pod_name]
        target_label: instance
      - source_labels: [__meta_kubernetes_pod_name]
        target_label: pod
      - source_labels: [__meta_kubernetes_namespace]
        target_label: namespace

    # Kubernetes API server
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https

    # Kubernetes nodes
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics

    # Kubernetes node-exporter
    - job_name: 'kubernetes-node-exporter'
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_endpoints_name]
        action: keep
        regex: node-exporter
      - source_labels: [__meta_kubernetes_endpoint_address_target_name]
        target_label: instance

    # Kubernetes pods
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - pynomaly-production
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

    # PostgreSQL metrics
    - job_name: 'postgres'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - pynomaly-production
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: postgres-service
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: postgres

    # Redis metrics
    - job_name: 'redis'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - pynomaly-production
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: redis-service
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: redis

  alerts.yml: |
    groups:
    - name: pynomaly-alerts
      rules:
      # API Health Alerts
      - alert: PynomalyAPIDown
        expr: up{job="pynomaly-api"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Pynomaly API is down"
          description: "Pynomaly API has been down for more than 1 minute."

      - alert: PynomalyAPIHighLatency
        expr: histogram_quantile(0.95, http_request_duration_seconds_bucket{job="pynomaly-api"}) > 2
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Pynomaly API high latency"
          description: "95th percentile latency is above 2 seconds for 5 minutes."

      - alert: PynomalyAPIHighErrorRate
        expr: rate(http_requests_total{job="pynomaly-api",status=~"5.."}[5m]) > 0.1
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "Pynomaly API high error rate"
          description: "API error rate is above 10% for 5 minutes."

      # Resource Alerts
      - alert: PynomalyHighCPUUsage
        expr: rate(container_cpu_usage_seconds_total{pod=~"pynomaly-.*"}[5m]) > 0.8
        for: 10m
        labels:
          severity: warning
        annotations:
          summary: "Pynomaly high CPU usage"
          description: "CPU usage is above 80% for 10 minutes."

      - alert: PynomalyHighMemoryUsage
        expr: container_memory_usage_bytes{pod=~"pynomaly-.*"} / container_spec_memory_limit_bytes > 0.9
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Pynomaly high memory usage"
          description: "Memory usage is above 90% for 5 minutes."

      # Database Alerts
      - alert: PostgreSQLDown
        expr: up{job="postgres"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "PostgreSQL is down"
          description: "PostgreSQL database has been down for more than 1 minute."

      - alert: PostgreSQLHighConnections
        expr: pg_stat_database_numbackends / pg_settings_max_connections > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "PostgreSQL high connection usage"
          description: "PostgreSQL connection usage is above 80%."

      # Redis Alerts
      - alert: RedisDown
        expr: up{job="redis"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Redis is down"
          description: "Redis has been down for more than 1 minute."

      - alert: RedisHighMemoryUsage
        expr: redis_memory_used_bytes / redis_memory_max_bytes > 0.9
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Redis high memory usage"
          description: "Redis memory usage is above 90%."

      # Kubernetes Alerts
      - alert: KubePodCrashLooping
        expr: rate(kube_pod_container_status_restarts_total{namespace="pynomaly-production"}[5m]) > 0
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Pod is crash looping"
          description: "Pod {{ $labels.pod }} is crash looping."

      - alert: KubePodNotReady
        expr: kube_pod_status_ready{namespace="pynomaly-production", condition="false"} == 1
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Pod not ready"
          description: "Pod {{ $labels.pod }} has been not ready for more than 5 minutes."
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: pynomaly-production
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/version: "2.47"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/instance: production
      app.kubernetes.io/component: monitoring
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/instance: production
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/version: "2.47"
    spec:
      serviceAccountName: prometheus-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: prometheus
        image: prom/prometheus:v2.47.2
        imagePullPolicy: IfNotPresent
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus/
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.console.templates=/etc/prometheus/consoles
        - --storage.tsdb.retention.time=15d
        - --storage.tsdb.retention.size=10GB
        - --web.enable-lifecycle
        - --web.enable-admin-api
        ports:
        - name: web
          containerPort: 9090
          protocol: TCP
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: web
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: web
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 4
          failureThreshold: 3
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-storage
          mountPath: /prometheus
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-storage-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: pynomaly-production
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: monitoring
spec:
  type: ClusterIP
  ports:
  - name: web
    port: 9090
    targetPort: web
    protocol: TCP
  selector:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: monitoring
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage-pvc
  namespace: pynomaly-production
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: gp3-encrypted
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: pynomaly-production
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: visualization
data:
  grafana.ini: |
    [analytics]
    check_for_updates = false
    reporting_enabled = false

    [server]
    root_url = http://localhost:3000/
    serve_from_sub_path = false

    [security]
    admin_user = admin
    admin_password = REPLACE_WITH_ADMIN_PASSWORD
    secret_key = REPLACE_WITH_SECRET_KEY
    disable_gravatar = true

    [users]
    allow_sign_up = false
    auto_assign_org = true
    auto_assign_org_role = Viewer

    [auth.anonymous]
    enabled = false

    [log]
    mode = console
    level = info

    [paths]
    data = /var/lib/grafana
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning

  datasources.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus-service:9090
      isDefault: true
      editable: false

  dashboards.yml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      editable: true
      options:
        path: /var/lib/grafana/dashboards

  pynomaly-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Pynomaly Production Dashboard",
        "tags": ["pynomaly", "production"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "API Request Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "rate(http_requests_total{job=\"pynomaly-api\"}[5m])",
                "legendFormat": "{{method}} {{handler}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "reqps"
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "API Response Time",
            "type": "stat",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, http_request_duration_seconds_bucket{job=\"pynomaly-api\"})",
                "legendFormat": "95th percentile"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "s"
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Memory Usage",
            "type": "timeseries",
            "targets": [
              {
                "expr": "container_memory_usage_bytes{pod=~\"pynomaly-.*\"} / 1024 / 1024",
                "legendFormat": "{{pod}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "MB"
              }
            },
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 8}
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "5s"
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: pynomaly-production
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: visualization
    app.kubernetes.io/version: "10.2"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: production
      app.kubernetes.io/component: visualization
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: production
        app.kubernetes.io/component: visualization
        app.kubernetes.io/version: "10.2"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        runAsGroup: 472
        fsGroup: 472
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: grafana
        image: grafana/grafana:10.2.2
        imagePullPolicy: IfNotPresent
        ports:
        - name: grafana
          containerPort: 3000
          protocol: TCP
        env:
        - name: GF_PATHS_CONFIG
          value: /etc/grafana/grafana.ini
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 472
          runAsGroup: 472
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /api/health
            port: grafana
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: grafana
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage-pvc
      - name: grafana-dashboards
        configMap:
          name: grafana-config
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: pynomaly-production
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: visualization
spec:
  type: ClusterIP
  ports:
  - name: grafana
    port: 3000
    targetPort: grafana
    protocol: TCP
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: visualization
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage-pvc
  namespace: pynomaly-production
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: visualization
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp3-encrypted
