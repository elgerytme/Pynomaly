# Advanced Redis cache deployment with clustering and persistence
# High-availability cache for model predictions, feature stores, and session data

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pynomaly-redis-cluster
  namespace: pynomaly
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/instance: production
    app.kubernetes.io/version: "7.2"
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: anomaly-detection
    app.kubernetes.io/managed-by: kubectl
spec:
  serviceName: pynomaly-redis-headless
  replicas: 6  # 3 masters + 3 replicas
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: pynomaly
      app.kubernetes.io/component: cache
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pynomaly
        app.kubernetes.io/component: cache
        app.kubernetes.io/instance: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: pynomaly-cache
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      terminationGracePeriodSeconds: 30
      initContainers:
      - name: config-init
        image: redis:7.2-alpine
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Initializing Redis configuration..."

          # Create Redis configuration
          cat > /opt/redis/redis.conf << 'EOF'
          # Redis Cluster Configuration
          port 6379
          cluster-enabled yes
          cluster-config-file nodes.conf
          cluster-node-timeout 5000
          cluster-announce-hostname $(hostname).pynomaly-redis-headless.pynomaly.svc.cluster.local
          cluster-announce-port 6379
          cluster-announce-bus-port 16379

          # Persistence
          save 900 1
          save 300 10
          save 60 10000
          stop-writes-on-bgsave-error yes
          rdbcompression yes
          rdbchecksum yes
          dbfilename dump.rdb
          dir /data

          # AOF
          appendonly yes
          appendfilename appendonly.aof
          appendfsync everysec
          no-appendfsync-on-rewrite no
          auto-aof-rewrite-percentage 100
          auto-aof-rewrite-min-size 64mb

          # Memory Management
          maxmemory 2gb
          maxmemory-policy allkeys-lru

          # Security
          protected-mode no

          # Logging
          loglevel notice
          logfile /var/log/redis/redis.log

          # Performance
          tcp-keepalive 300
          timeout 0
          tcp-backlog 511

          # Monitoring
          latency-monitor-threshold 100
          EOF

          # Set permissions
          chown -R 999:999 /opt/redis/
        volumeMounts:
        - name: config
          mountPath: /opt/redis
        - name: data
          mountPath: /data
      containers:
      - name: redis
        image: redis:7.2-alpine
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
        command:
        - redis-server
        - /opt/redis/redis.conf
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        - name: cluster
          containerPort: 16379
          protocol: TCP
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        resources:
          requests:
            memory: "1Gi"
            cpu: "250m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "3Gi"
            cpu: "1000m"
            ephemeral-storage: "5Gi"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          failureThreshold: 3
          successThreshold: 1
        volumeMounts:
        - name: data
          mountPath: /data
        - name: config
          mountPath: /opt/redis
          readOnly: true
        - name: logs
          mountPath: /var/log/redis
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.55.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 59000
          capabilities:
            drop:
            - ALL
        ports:
        - name: metrics
          containerPort: 9121
          protocol: TCP
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        - name: REDIS_EXPORTER_INCL_SYSTEM_METRICS
          value: "true"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: config
        emptyDir:
          sizeLimit: 100Mi
      - name: logs
        emptyDir:
          sizeLimit: 1Gi
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - pynomaly
              - key: app.kubernetes.io/component
                operator: In
                values:
                - cache
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values:
                - memory-optimized
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app.kubernetes.io/name: pynomaly
        app.kubernetes.io/component: cache
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 20Gi
---
apiVersion: v1
kind: Service
metadata:
  name: pynomaly-redis-headless
  namespace: pynomaly
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/component: cache
    app.kubernetes.io/instance: production
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
  - name: redis
    port: 6379
    targetPort: redis
    protocol: TCP
  - name: cluster
    port: 16379
    targetPort: cluster
    protocol: TCP
  - name: metrics
    port: 9121
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/component: cache
---
apiVersion: v1
kind: Service
metadata:
  name: pynomaly-redis-service
  namespace: pynomaly
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/component: cache
    app.kubernetes.io/instance: production
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
    protocol: TCP
  - name: metrics
    port: 9121
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/component: cache
---
# Redis Cluster Initialization Job
apiVersion: batch/v1
kind: Job
metadata:
  name: pynomaly-redis-cluster-init
  namespace: pynomaly
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/component: cache-init
    app.kubernetes.io/instance: production
spec:
  ttlSecondsAfterFinished: 300
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pynomaly
        app.kubernetes.io/component: cache-init
    spec:
      serviceAccountName: pynomaly-cache
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: cluster-init
        image: redis:7.2-alpine
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Waiting for Redis pods to be ready..."

          # Wait for all Redis pods to be ready
          for i in {0..5}; do
            echo "Checking pod pynomaly-redis-cluster-$i..."
            while ! redis-cli -h pynomaly-redis-cluster-$i.pynomaly-redis-headless.pynomaly.svc.cluster.local ping; do
              echo "Waiting for pynomaly-redis-cluster-$i..."
              sleep 5
            done
          done

          echo "All Redis pods are ready. Initializing cluster..."

          # Create cluster
          redis-cli --cluster create \
            pynomaly-redis-cluster-0.pynomaly-redis-headless.pynomaly.svc.cluster.local:6379 \
            pynomaly-redis-cluster-1.pynomaly-redis-headless.pynomaly.svc.cluster.local:6379 \
            pynomaly-redis-cluster-2.pynomaly-redis-headless.pynomaly.svc.cluster.local:6379 \
            pynomaly-redis-cluster-3.pynomaly-redis-headless.pynomaly.svc.cluster.local:6379 \
            pynomaly-redis-cluster-4.pynomaly-redis-headless.pynomaly.svc.cluster.local:6379 \
            pynomaly-redis-cluster-5.pynomaly-redis-headless.pynomaly.svc.cluster.local:6379 \
            --cluster-replicas 1 \
            --cluster-yes

          echo "Redis cluster initialized successfully!"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
# Advanced cache service for ML features
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pynomaly-cache-service
  namespace: pynomaly
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/instance: production
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: cache-service
    app.kubernetes.io/part-of: anomaly-detection
    app.kubernetes.io/managed-by: kubectl
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: pynomaly
      app.kubernetes.io/component: cache-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pynomaly
        app.kubernetes.io/component: cache-service
        app.kubernetes.io/instance: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9092"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: pynomaly-cache-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1003
        runAsGroup: 1003
        fsGroup: 1003
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: cache-service
        image: ghcr.io/pynomaly/cache-service:latest
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1003
          capabilities:
            drop:
            - ALL
        ports:
        - name: grpc
          containerPort: 8082
          protocol: TCP
        - name: metrics
          containerPort: 9092
          protocol: TCP
        env:
        - name: PYNOMALY_ENVIRONMENT
          value: "production"
        - name: CACHE_SERVICE_PORT
          value: "8082"
        - name: CACHE_METRICS_PORT
          value: "9092"
        - name: REDIS_CLUSTER_NODES
          value: "pynomaly-redis-headless:6379"
        - name: CACHE_TTL_SECONDS
          value: "3600"
        - name: MODEL_CACHE_TTL_SECONDS
          value: "86400"
        - name: FEATURE_CACHE_TTL_SECONDS
          value: "300"
        - name: CACHE_MAX_MEMORY_MB
          value: "1024"
        - name: ENABLE_CACHE_COMPRESSION
          value: "true"
        - name: CACHE_COMPRESSION_ALGORITHM
          value: "lz4"
        envFrom:
        - configMapRef:
            name: pynomaly-cache-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "5Gi"
        livenessProbe:
          grpc:
            port: 8082
            service: cache.CacheService
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          grpc:
            port: 8082
            service: cache.CacheService
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - pynomaly
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - cache-service
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: pynomaly-cache-service
  namespace: pynomaly
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/component: cache-service
    app.kubernetes.io/instance: production
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9092"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: grpc
    port: 8082
    targetPort: grpc
    protocol: TCP
  - name: metrics
    port: 9092
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/component: cache-service
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pynomaly-cache-config
  namespace: pynomaly
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/component: cache-service
data:
  cache.yaml: |
    cache:
      default_ttl_seconds: 3600
      model_cache_ttl_seconds: 86400
      feature_cache_ttl_seconds: 300
      prediction_cache_ttl_seconds: 60
      max_memory_mb: 1024
      eviction_policy: "lru"

    compression:
      enabled: true
      algorithm: "lz4"
      min_size_bytes: 1024

    clustering:
      enabled: true
      replication_factor: 1
      consistency_level: "eventual"

    monitoring:
      enable_detailed_metrics: true
      metrics_interval_seconds: 30

    performance:
      connection_pool_size: 20
      max_connections: 100
      connection_timeout_seconds: 5
      read_timeout_seconds: 3
      write_timeout_seconds: 3
