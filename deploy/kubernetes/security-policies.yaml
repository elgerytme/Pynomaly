apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: pynomaly-api-network-policy
  namespace: pynomaly-production
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: security
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: pynomaly
      app.kubernetes.io/component: api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from load balancer
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 8000
  # Allow ingress from monitoring
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
    ports:
    - protocol: TCP
      port: 9090
  egress:
  # Allow egress to database
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: postgres
    ports:
    - protocol: TCP
      port: 5432
  # Allow egress to Redis
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: redis
    ports:
    - protocol: TCP
      port: 6379
  # Allow egress to DNS
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow egress to internet for external APIs (limited)
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: pynomaly-worker-network-policy
  namespace: pynomaly-production
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: security
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: pynomaly
      app.kubernetes.io/component: worker
  policyTypes:
  - Egress
  egress:
  # Allow egress to database
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: postgres
    ports:
    - protocol: TCP
      port: 5432
  # Allow egress to Redis
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: redis
    ports:
    - protocol: TCP
      port: 6379
  # Allow egress to DNS
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: postgres-network-policy
  namespace: pynomaly-production
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: security
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: postgres
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from Pynomaly API
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: pynomaly
          app.kubernetes.io/component: api
    ports:
    - protocol: TCP
      port: 5432
  # Allow ingress from Pynomaly workers
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: pynomaly
          app.kubernetes.io/component: worker
    ports:
    - protocol: TCP
      port: 5432
  # Allow ingress from monitoring
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
    ports:
    - protocol: TCP
      port: 5432
  egress:
  # Allow egress to DNS only
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-network-policy
  namespace: pynomaly-production
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: security
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: redis
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from Pynomaly API
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: pynomaly
          app.kubernetes.io/component: api
    ports:
    - protocol: TCP
      port: 6379
  # Allow ingress from Pynomaly workers
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: pynomaly
          app.kubernetes.io/component: worker
    ports:
    - protocol: TCP
      port: 6379
  # Allow ingress from monitoring
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
    ports:
    - protocol: TCP
      port: 6379
  egress:
  # Allow egress to DNS only
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: monitoring-network-policy
  namespace: pynomaly-production
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: security
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: prometheus
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from Grafana
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: grafana
    ports:
    - protocol: TCP
      port: 9090
  # Allow ingress from ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 9090
  egress:
  # Allow egress to all pods for metrics scraping
  - to:
    - podSelector: {}
  # Allow egress to Kubernetes API
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow egress to DNS
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
---
apiVersion: v1
kind: LimitRange
metadata:
  name: pynomaly-limit-range
  namespace: pynomaly-production
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: security
spec:
  limits:
  - type: Container
    default:
      cpu: "1000m"
      memory: "1Gi"
    defaultRequest:
      cpu: "100m"
      memory: "128Mi"
    max:
      cpu: "4000m"
      memory: "8Gi"
    min:
      cpu: "10m"
      memory: "32Mi"
  - type: Pod
    max:
      cpu: "8000m"
      memory: "16Gi"
  - type: PersistentVolumeClaim
    max:
      storage: "500Gi"
    min:
      storage: "1Gi"
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: pynomaly-resource-quota
  namespace: pynomaly-production
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: security
spec:
  hard:
    # Compute resources
    requests.cpu: "10"
    requests.memory: "20Gi"
    limits.cpu: "20"
    limits.memory: "40Gi"
    
    # Storage resources
    requests.storage: "1Ti"
    persistentvolumeclaims: "20"
    
    # Object counts
    pods: "50"
    services: "20"
    secrets: "20"
    configmaps: "20"
    replicationcontrollers: "0"
    
    # Load balancers
    services.loadbalancers: "5"
    services.nodeports: "0"
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: pynomaly-psp
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: security
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
  seLinux:
    rule: 'RunAsAny'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pynomaly-psp-use
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: security
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs: ['use']
  resourceNames:
  - pynomaly-psp
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pynomaly-psp-use
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: security
roleRef:
  kind: ClusterRole
  name: pynomaly-psp-use
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: pynomaly-service-account
  namespace: pynomaly-production
- kind: ServiceAccount
  name: postgres-service-account
  namespace: pynomaly-production
- kind: ServiceAccount
  name: redis-service-account
  namespace: pynomaly-production