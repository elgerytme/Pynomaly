# Kubernetes deployment for Pynomaly API service
# Production-ready configuration with auto-scaling, health checks, and monitoring

apiVersion: apps/v1
kind: Deployment
metadata:
  name: pynomaly-api
  namespace: pynomaly
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/instance: production
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: anomaly-detection
    app.kubernetes.io/managed-by: kubectl
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pynomaly
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pynomaly
        app.kubernetes.io/component: api
        app.kubernetes.io/instance: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/api/metrics"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      serviceAccountName: pynomaly-api
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: pynomaly-api
        image: ghcr.io/pynomaly/api:latest
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: PYNOMALY_ENVIRONMENT
          value: "production"
        - name: PYNOMALY_API_HOST
          value: "0.0.0.0"
        - name: PYNOMALY_API_PORT
          value: "8000"
        - name: PYNOMALY_STORAGE_PATH
          value: "/app/storage"
        - name: PYNOMALY_LOG_PATH
          value: "/app/logs"
        - name: PYNOMALY_CONFIG_PATH
          value: "/app/config"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: pynomaly-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: pynomaly-secrets
              key: redis-url
        - name: CELERY_BROKER_URL
          valueFrom:
            secretKeyRef:
              name: pynomaly-secrets
              key: celery-broker-url
        - name: CELERY_RESULT_BACKEND
          valueFrom:
            secretKeyRef:
              name: pynomaly-secrets
              key: celery-result-backend
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: pynomaly-secrets
              key: jwt-secret-key
        - name: OPENTELEMETRY_EXPORTER_OTLP_ENDPOINT
          value: "http://otel-collector:4317"
        - name: OPENTELEMETRY_SERVICE_NAME
          value: "pynomaly-api"
        - name: OPENTELEMETRY_SERVICE_VERSION
          value: "1.0.0"
        - name: PROMETHEUS_METRICS_PORT
          value: "9090"
        envFrom:
        - configMapRef:
            name: pynomaly-config
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
          limits:
            memory: "4Gi"
            cpu: "2000m"
            ephemeral-storage: "10Gi"
        livenessProbe:
          httpGet:
            path: /api/health/live
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /api/health/ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /api/health/startup
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
          successThreshold: 1
        volumeMounts:
        - name: storage
          mountPath: /app/storage
        - name: logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: tmp
          mountPath: /tmp
        - name: var-tmp
          mountPath: /var/tmp
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: pynomaly-storage-pvc
      - name: logs
        persistentVolumeClaim:
          claimName: pynomaly-logs-pvc
      - name: config
        configMap:
          name: pynomaly-config
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      - name: var-tmp
        emptyDir:
          sizeLimit: 1Gi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - pynomaly
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - api
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      - key: node.kubernetes.io/unreachable
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
---
apiVersion: v1
kind: Service
metadata:
  name: pynomaly-api-service
  namespace: pynomaly
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/component: api
    app.kubernetes.io/instance: production
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/api/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/component: api
  sessionAffinity: None
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: pynomaly-api-hpa
  namespace: pynomaly
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/component: api
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pynomaly-api
  minReplicas: 2
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: pynomaly-api-pdb
  namespace: pynomaly
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/component: api
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pynomaly
      app.kubernetes.io/component: api