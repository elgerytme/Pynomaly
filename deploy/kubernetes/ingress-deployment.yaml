apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  labels:
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: ssl
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@pynomaly.ai  # Replace with actual email
    privateKeySecretRef:
      name: letsencrypt-prod-key
    solvers:
    - http01:
        ingress:
          class: nginx
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: pynomaly-tls-cert
  namespace: pynomaly-production
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: ssl
spec:
  secretName: pynomaly-tls-secret
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - api.pynomaly.ai      # Replace with actual domain
  - pynomaly.ai          # Replace with actual domain
  - monitoring.pynomaly.ai  # Replace with actual domain
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pynomaly-api-ingress
  namespace: pynomaly-production
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self'; frame-ancestors 'none';" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    # Body size limit
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    # Buffering
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
    # Health checks
    nginx.ingress.kubernetes.io/upstream-health-check: "true"
    nginx.ingress.kubernetes.io/upstream-health-check-path: "/api/health"
    nginx.ingress.kubernetes.io/upstream-health-check-interval: "30s"
    nginx.ingress.kubernetes.io/upstream-health-check-timeout: "10s"
    # CORS (if needed for web frontend)
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://pynomaly.ai"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
spec:
  tls:
  - hosts:
    - api.pynomaly.ai      # Replace with actual domain
    - pynomaly.ai          # Replace with actual domain
    secretName: pynomaly-tls-secret
  rules:
  - host: api.pynomaly.ai  # Replace with actual domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pynomaly-api-service
            port:
              number: 80
  - host: pynomaly.ai      # Replace with actual domain (if serving web UI)
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: pynomaly-api-service
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pynomaly-web-service  # If you have a separate web service
            port:
              number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pynomaly-monitoring-ingress
  namespace: pynomaly-production
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: monitoring
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    # Authentication (basic auth for monitoring)
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-auth
    nginx.ingress.kubernetes.io/auth-realm: "Pynomaly Monitoring - Authentication Required"
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    # Rate limiting (stricter for monitoring)
    nginx.ingress.kubernetes.io/rate-limit: "50"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "5"
    # IP whitelist (uncomment and configure for production)
    # nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
spec:
  tls:
  - hosts:
    - monitoring.pynomaly.ai  # Replace with actual domain
    secretName: pynomaly-tls-secret
  rules:
  - host: monitoring.pynomaly.ai  # Replace with actual domain
    http:
      paths:
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3000
      - path: /prometheus
        pathType: Prefix
        backend:
          service:
            name: prometheus-service
            port:
              number: 9090
---
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-auth
  namespace: pynomaly-production
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: monitoring
type: Opaque
data:
  # Default: admin:monitoring123 (change in production)
  # Generated with: htpasswd -nb admin monitoring123
  auth: YWRtaW46JGFwcjEkVEcuSThBUzQkdWQ1NW1ES2wvSFFVMU5XajNVbXhJLwo=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-custom-config
  namespace: pynomaly-production
  labels:
    app.kubernetes.io/name: nginx
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: ingress
data:
  # Custom Nginx configuration for additional security and performance
  custom.conf: |
    # Hide server information
    server_tokens off;
    
    # Buffer settings for better performance
    proxy_buffering on;
    proxy_buffer_size 128k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;
    proxy_temp_file_write_size 256k;
    
    # Connection settings
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    
    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
      application/atom+xml
      application/geo+json
      application/javascript
      application/x-javascript
      application/json
      application/ld+json
      application/manifest+json
      application/rdf+xml
      application/rss+xml
      application/xhtml+xml
      application/xml
      font/eot
      font/otf
      font/ttf
      image/svg+xml
      text/css
      text/javascript
      text/plain
      text/xml;
    
    # Security headers (additional)
    add_header X-Robots-Tag "noindex, nofollow, nosnippet, noarchive" always;
    add_header X-Download-Options "noopen" always;
    add_header X-Permitted-Cross-Domain-Policies "none" always;
    
    # Rate limiting configuration
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=monitoring:5m rate=5r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # Apply rate limiting
    limit_req zone=api burst=20 nodelay;
    limit_conn conn_limit_per_ip 10;
    
    # Log format for security monitoring
    log_format security_log '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $body_bytes_sent '
                           '"$http_referer" "$http_user_agent" '
                           '$request_time $upstream_response_time '
                           '$ssl_protocol $ssl_cipher';
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-network-policy
  namespace: pynomaly-production
  labels:
    app.kubernetes.io/name: nginx
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: security
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: nginx-ingress
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow all ingress traffic to the ingress controller
  - {}
  egress:
  # Allow egress to Pynomaly API
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: pynomaly
          app.kubernetes.io/component: api
    ports:
    - protocol: TCP
      port: 8000
  # Allow egress to monitoring services
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: grafana
    ports:
    - protocol: TCP
      port: 3000
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
    ports:
    - protocol: TCP
      port: 9090
  # Allow egress to DNS
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow egress to Let's Encrypt
  - to: []
    ports:
    - protocol: TCP
      port: 443