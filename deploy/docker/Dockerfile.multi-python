# Multi-Python Version Testing Dockerfile
# Supports Python 3.11.4, 3.11.x, 3.12.x, 3.13.x, and 3.14-dev

FROM ubuntu:22.04

LABEL maintainer="Pynomaly Team"
LABEL description="Multi-version Python testing environment for Pynomaly"
LABEL version="1.0"

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Install system dependencies for building Python
RUN apt-get update && apt-get install -y \
    # Build essentials
    build-essential \
    zlib1g-dev \
    libbz2-dev \
    libreadline-dev \
    libsqlite3-dev \
    libssl-dev \
    libffi-dev \
    liblzma-dev \
    libncurses5-dev \
    libgdbm-dev \
    libnss3-dev \
    # Development tools
    git \
    curl \
    wget \
    vim \
    unzip \
    # Python tools
    python3-pip \
    python3-venv \
    # Additional libraries
    pkg-config \
    tk-dev \
    && rm -rf /var/lib/apt/lists/*

# Install pyenv for managing multiple Python versions
ENV PYENV_ROOT="/opt/pyenv"
ENV PATH="$PYENV_ROOT/bin:$PATH"

RUN git clone https://github.com/pyenv/pyenv.git $PYENV_ROOT && \
    cd $PYENV_ROOT && \
    git checkout v2.3.36 && \
    echo 'export PYENV_ROOT="/opt/pyenv"' >> /etc/bash.bashrc && \
    echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> /etc/bash.bashrc && \
    echo 'eval "$(pyenv init -)"' >> /etc/bash.bashrc

# Install specific Python versions
RUN eval "$(pyenv init -)" && \
    # Python 3.11.4 (specific version for compatibility testing)
    pyenv install 3.11.4 && \
    # Python 3.11.9 (latest 3.11.x)
    pyenv install 3.11.9 && \
    # Python 3.12.8 (latest 3.12.x, Dec 2024)
    pyenv install 3.12.8 && \
    # Python 3.13.1 (latest 3.13.x, Dec 2024)
    pyenv install 3.13.1 && \
    # Set global Python versions
    pyenv global 3.11.9 3.12.8 3.13.1 3.11.4

# Install Python 3.14-dev (if available)
RUN eval "$(pyenv init -)" && \
    (pyenv install 3.14-dev || echo "Python 3.14-dev not available") && \
    pyenv rehash

# Create application directory
WORKDIR /app

# Copy requirements and install base dependencies for each Python version
COPY requirements.txt requirements-test.txt ./

# Install dependencies for each Python version
RUN eval "$(pyenv init -)" && \
    for version in 3.11.4 3.11.9 3.12.8 3.13.1; do \
        echo "Installing dependencies for Python $version..." && \
        pyenv shell $version && \
        python -m pip install --upgrade pip setuptools wheel && \
        python -m pip install -r requirements.txt && \
        python -m pip install -r requirements-test.txt && \
        python -m pip install tox pytest pytest-cov pytest-xdist hypothesis mypy black isort flake8; \
    done

# Install additional testing tools
RUN eval "$(pyenv init -)" && \
    pyenv shell 3.11.9 && \
    python -m pip install \
        bandit \
        safety \
        coverage[toml] \
        pytest-benchmark \
        pytest-timeout \
        pytest-mock

# Copy application code
COPY src/ ./src/
COPY tests/ ./tests/
COPY scripts/ ./scripts/
COPY pyproject.toml tox.ini ./

# Copy multi-version testing configuration
COPY .python-version .python-version-dev ./

# Create test runner script
RUN cat > /app/run_multi_tests.sh << 'EOF'
#!/bin/bash
set -e

echo "=== Multi-Version Python Testing ==="
echo "Available Python versions:"
pyenv versions

echo -e "\n=== Running tests for each Python version ==="

EXIT_CODE=0

for version in 3.11.4 3.11.9 3.12.8 3.13.1; do
    echo -e "\n--- Testing Python $version ---"

    if pyenv shell $version; then
        echo "Python version: $(python --version)"

        # Run basic tests
        if python -m pytest tests/ -v --tb=short --maxfail=5; then
            echo "✓ Python $version tests passed"
        else
            echo "✗ Python $version tests failed"
            EXIT_CODE=1
        fi

        # Run compatibility tests
        echo "Running compatibility tests..."
        python -c "
import sys
print(f'Testing Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}')

try:
    import numpy as np
    print(f'✓ NumPy {np.__version__}')
except ImportError as e:
    print(f'✗ NumPy: {e}')

try:
    import pandas as pd
    print(f'✓ Pandas {pd.__version__}')
except ImportError as e:
    print(f'✗ Pandas: {e}')

print('✓ Compatibility check completed')
"
    else
        echo "✗ Failed to switch to Python $version"
        EXIT_CODE=1
    fi
done

# Test Python 3.14-dev if available
if pyenv versions | grep -q "3.14"; then
    echo -e "\n--- Testing Python 3.14-dev ---"
    if pyenv shell 3.14-dev 2>/dev/null; then
        echo "Python version: $(python --version)"
        # Run limited tests for dev version
        python -c "print('✓ Python 3.14-dev basic functionality works')" || echo "⚠️ Python 3.14-dev has issues"
    fi
fi

echo -e "\n=== Multi-version testing completed ==="
exit $EXIT_CODE
EOF

RUN chmod +x /app/run_multi_tests.sh

# Create tox runner script
RUN cat > /app/run_tox_tests.sh << 'EOF'
#!/bin/bash
set -e

echo "=== Running tox multi-version tests ==="

# Initialize pyenv
eval "$(pyenv init -)"

# Run tox with multiple environments
echo "Running tox for multiple Python versions..."

# Basic tests across versions
tox -e py311,py312,py313 || echo "Some tox environments failed"

# Quality checks
tox -e lint,type,security || echo "Quality checks completed with issues"

# Generate coverage report
tox -e coverage || echo "Coverage report generation completed"

echo "✓ Tox multi-version testing completed"
EOF

RUN chmod +x /app/run_tox_tests.sh

# Create comprehensive test script
RUN cat > /app/comprehensive_test.sh << 'EOF'
#!/bin/bash
set -e

echo "=== Comprehensive Multi-Version Python Testing ==="

# Initialize pyenv
eval "$(pyenv init -)"

# Test 1: Basic functionality across all versions
echo -e "\n1. Testing basic functionality across all Python versions..."
./run_multi_tests.sh

# Test 2: Run tox environments
echo -e "\n2. Running tox multi-environment tests..."
./run_tox_tests.sh

# Test 3: Performance benchmarks
echo -e "\n3. Running performance benchmarks..."
for version in 3.11.9 3.12.8 3.13.1; do
    echo "Performance test for Python $version:"
    pyenv shell $version
    python -c "
import time
import numpy as np

# Basic performance test
start = time.perf_counter()
result = sum(i*i for i in range(100000))
python_time = time.perf_counter() - start
print(f'  Python computation: {python_time:.4f}s')

# NumPy performance test
start = time.perf_counter()
data = np.random.rand(1000, 100)
result = np.dot(data, data.T)
numpy_time = time.perf_counter() - start
print(f'  NumPy computation: {numpy_time:.4f}s')
"
done

# Test 4: Memory usage check
echo -e "\n4. Memory usage analysis..."
pyenv shell 3.11.9
python -c "
import psutil
import os

process = psutil.Process(os.getpid())
memory_mb = process.memory_info().rss / 1024 / 1024
print(f'Memory usage: {memory_mb:.1f} MB')
"

echo -e "\n✓ Comprehensive testing completed successfully!"
EOF

RUN chmod +x /app/comprehensive_test.sh

# Set up environment variables
ENV PYENV_ROOT="/opt/pyenv"
ENV PATH="$PYENV_ROOT/bin:$PATH"

# Default command
CMD ["bash", "-c", "eval \"$(pyenv init -)\" && ./comprehensive_test.sh"]

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD eval "$(pyenv init -)" && python --version || exit 1

# Expose port for potential web interface
EXPOSE 8080

# Add labels for better container management
LABEL org.opencontainers.image.title="Pynomaly Multi-Python Testing"
LABEL org.opencontainers.image.description="Docker container for testing Pynomaly across multiple Python versions"
LABEL org.opencontainers.image.vendor="Pynomaly Project"
LABEL org.opencontainers.image.source="https://github.com/pynomaly/pynomaly"

# Create volume for test results
VOLUME ["/app/reports"]

# Final setup
RUN eval "$(pyenv init -)" && \
    pyenv rehash && \
    pyenv versions
