# Multi-stage production Dockerfile for Pynomaly
# Optimized for production deployment with enhanced security and monitoring

#=============================================================================
# Build Stage - Dependencies and Asset Compilation
#=============================================================================
FROM python:3.11-slim as builder

# Build arguments
ARG BUILD_DATE
ARG VERSION
ARG VCS_REF

# Add metadata
LABEL maintainer="Pynomaly Team <team@pynomaly.ai>" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.title="Pynomaly Production Build" \
      org.opencontainers.image.description="Production-ready anomaly detection platform" \
      org.opencontainers.image.source="https://github.com/pynomaly/pynomaly"

# Install build dependencies and security updates
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
        gcc \
        g++ \
        build-essential \
        pkg-config \
        libffi-dev \
        libssl-dev \
        curl \
        git \
        && rm -rf /var/lib/apt/lists/* \
        && apt-get clean

# Set build environment
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Create build directory
WORKDIR /build

# Copy dependency files
COPY pyproject.toml poetry.lock ./
COPY requirements*.txt ./

# Install Poetry and export requirements
RUN pip install --upgrade pip setuptools wheel && \
    pip install poetry==1.7.1 && \
    poetry config virtualenvs.create false && \
    poetry export -f requirements.txt --output requirements-production.txt --without-hashes --only=main && \
    poetry export -f requirements.txt --output requirements-monitoring.txt --without-hashes --with=monitoring

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements-production.txt && \
    pip install --no-cache-dir -r requirements-monitoring.txt

#=============================================================================
# Frontend Build Stage - Tailwind CSS and Static Assets
#=============================================================================
FROM node:18-alpine as frontend-builder

# Set working directory
WORKDIR /frontend

# Copy package files
COPY package*.json ./

# Install frontend dependencies
RUN npm ci --only=production

# Copy frontend source files
COPY src/pynomaly/presentation/web/static ./static
COPY src/pynomaly/presentation/web/templates ./templates

# Build CSS and optimize assets
RUN npm run build-css && \
    npm run optimize-assets

#=============================================================================
# Runtime Stage - Production Image
#=============================================================================
FROM python:3.11-slim as runtime

# Runtime arguments
ARG BUILD_DATE
ARG VERSION
ARG VCS_REF

# Add metadata
LABEL maintainer="Pynomaly Team <team@pynomaly.ai>" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.title="Pynomaly Production" \
      org.opencontainers.image.description="Production anomaly detection platform" \
      org.opencontainers.image.source="https://github.com/pynomaly/pynomaly"

# Install runtime dependencies and security updates
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
        curl \
        ca-certificates \
        dumb-init \
        && rm -rf /var/lib/apt/lists/* \
        && apt-get clean

# Create non-root user with specific UID/GID
RUN groupadd -r -g 1001 pynomaly && \
    useradd -r -g pynomaly -u 1001 -m -s /bin/bash pynomaly

# Set production environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH="/app/src" \
    PYNOMALY_ENVIRONMENT=production \
    PYNOMALY_STORAGE_PATH=/app/storage \
    PYNOMALY_LOG_PATH=/app/logs \
    PYNOMALY_TEMP_PATH=/app/temp \
    PYNOMALY_CONFIG_PATH=/app/config \
    OPENTELEMETRY_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true

# Set working directory
WORKDIR /app

# Copy Python dependencies from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application source code
COPY --chown=pynomaly:pynomaly src/ ./src/
COPY --chown=pynomaly:pynomaly pyproject.toml ./
COPY --chown=pynomaly:pynomaly requirements*.txt ./

# Copy frontend assets from frontend builder
COPY --from=frontend-builder --chown=pynomaly:pynomaly /frontend/static ./src/pynomaly/presentation/web/static

# Create required directories with proper permissions
RUN mkdir -p \
        /app/storage/datasets \
        /app/storage/models \
        /app/storage/results \
        /app/logs \
        /app/temp \
        /app/config \
        /app/cache && \
    chown -R pynomaly:pynomaly /app && \
    chmod -R 755 /app && \
    chmod -R 700 /app/storage /app/logs /app/temp /app/config

# Copy configuration files
COPY --chown=pynomaly:pynomaly deploy/docker/config/ ./config/

# Install application in development mode for production
RUN pip install -e .

# Switch to non-root user
USER pynomaly

# Expose application ports
EXPOSE 8000 8080 9090

# Add health check with comprehensive validation
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/api/health/ready || exit 1

# Set volume mount points
VOLUME ["/app/storage", "/app/logs", "/app/config"]

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Default command - API server
CMD ["uvicorn", "pynomaly.presentation.api.app:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--workers", "4", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--access-log", \
     "--log-config", "/app/config/logging.yaml"]