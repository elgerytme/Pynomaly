# Monitoring-specific Dockerfile for Prometheus, Grafana, and telemetry services
# Optimized for observability and monitoring infrastructure

#=============================================================================
# Base Monitoring Stage
#=============================================================================
FROM python:3.11-slim as monitoring-base

# Install monitoring dependencies
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
        curl \
        ca-certificates \
        && rm -rf /var/lib/apt/lists/* \
        && apt-get clean

# Create monitoring user
RUN groupadd -r -g 1002 monitoring && \
    useradd -r -g monitoring -u 1002 -m -s /bin/bash monitoring

# Set monitoring environment
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    MONITORING_PORT=9090 \
    TELEMETRY_PORT=4317

WORKDIR /monitoring

#=============================================================================
# Prometheus Configuration Stage
#=============================================================================
FROM prom/prometheus:v2.48.0 as prometheus

# Copy custom Prometheus configuration
COPY deploy/docker/config/prometheus.yml /etc/prometheus/prometheus.yml
COPY deploy/docker/config/alert_rules.yml /etc/prometheus/alert_rules.yml

# Set proper permissions
USER nobody

#=============================================================================
# Grafana Configuration Stage
#=============================================================================
FROM grafana/grafana:10.2.0 as grafana

# Copy custom Grafana configuration
COPY deploy/docker/config/grafana/grafana.ini /etc/grafana/grafana.ini
COPY deploy/docker/config/grafana/dashboards/ /etc/grafana/provisioning/dashboards/
COPY deploy/docker/config/grafana/datasources/ /etc/grafana/provisioning/datasources/

# Set Grafana environment
ENV GF_SECURITY_ADMIN_USER=admin \
    GF_SECURITY_ADMIN_PASSWORD=pynomaly_admin \
    GF_USERS_ALLOW_SIGN_UP=false \
    GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel

#=============================================================================
# OpenTelemetry Collector Stage
#=============================================================================
FROM otel/opentelemetry-collector-contrib:0.91.0 as otel-collector

# Copy OpenTelemetry configuration
COPY deploy/docker/config/otelcol-config.yaml /etc/otelcol-contrib/config.yaml

# Expose OTLP ports
EXPOSE 4317 4318 8889

#=============================================================================
# Monitoring Python Services Stage
#=============================================================================
FROM monitoring-base as monitoring-services

# Copy Python dependencies from production build
COPY --from=runtime /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=runtime /usr/local/bin /usr/local/bin

# Copy monitoring-specific source code
COPY --chown=monitoring:monitoring src/pynomaly/infrastructure/monitoring/ ./src/pynomaly/infrastructure/monitoring/
COPY --chown=monitoring:monitoring deploy/docker/monitoring/ ./monitoring/

# Create monitoring directories
RUN mkdir -p \
        /monitoring/metrics \
        /monitoring/logs \
        /monitoring/config \
        /monitoring/dashboards && \
    chown -R monitoring:monitoring /monitoring

# Switch to monitoring user
USER monitoring

# Expose monitoring ports
EXPOSE 9090 8080 4317

# Health check for monitoring services
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:9090/metrics || exit 1

# Default command - metrics server
CMD ["python", "-m", "pynomaly.infrastructure.monitoring.metrics_server", \
     "--host", "0.0.0.0", \
     "--port", "9090"]
