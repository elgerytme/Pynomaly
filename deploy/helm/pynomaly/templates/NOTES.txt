1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "pynomaly.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "pynomaly.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "pynomaly.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "pynomaly.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Check the status of your deployment:
  kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "pynomaly.name" . }},app.kubernetes.io/instance={{ .Release.Name }}"

3. View application logs:
  kubectl logs --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "pynomaly.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -f

4. Access the API documentation:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}docs
  {{- end }}
{{- end }}
{{- else }}
  Use port-forward to access the API docs at http://127.0.0.1:8080/docs
{{- end }}

{{- if .Values.monitoring.metrics.enabled }}
5. Prometheus metrics are available at:
  kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ include "pynomaly.fullname" . }}-internal 9090:{{ .Values.service.internal.metricsPort }}
  Then visit http://127.0.0.1:9090/metrics
{{- end }}

{{- if .Values.postgresql.enabled }}
6. Connect to PostgreSQL:
  kubectl run pynomaly-postgresql-client --rm --tty -i --restart='Never' --namespace {{ .Release.Namespace }} --image docker.io/bitnami/postgresql:16 --env="PGPASSWORD=$POSTGRES_PASSWORD" --command -- psql --host {{ include "pynomaly.postgresql.fullname" . }} -U {{ .Values.postgresql.auth.username }} -d {{ .Values.postgresql.auth.database }} -p 5432
{{- end }}

{{- if .Values.redis.enabled }}
7. Connect to Redis:
  kubectl run pynomaly-redis-client --rm --tty -i --restart='Never' --namespace {{ .Release.Namespace }} --image docker.io/bitnami/redis:7.0 --env="REDISCLI_AUTH=$REDIS_PASSWORD" --command -- redis-cli -h {{ include "pynomaly.redis.fullname" . }} -p 6379
{{- end }}

{{- if .Values.tests.enabled }}
8. Run the test suite:
  helm test {{ .Release.Name }} --namespace {{ .Release.Namespace }}
{{- end }}

For more information on using Pynomaly, visit:
- Documentation: https://docs.pynomaly.ai
- GitHub: https://github.com/pynomaly/pynomaly
- Issues: https://github.com/pynomaly/pynomaly/issues