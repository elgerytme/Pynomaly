{
  "permissions": {
    "allow": [
      "Bash(python -m pytest --tb=short -v)",
      "Bash(pre-commit:*)",
      "Bash(python3 -m pytest --tb=short -v)",
      "Bash(pip install:*)",
      "Bash(ruff format:*)",
      "Bash(ls:*)",
      "Bash(isort:*)",
      "Bash(hatch env create:*)",
      "Bash(PYNOMALY_ADVANCED_AUTOML=true python3 -m pytest tests/automl/test_automl_cli.py::TestAutoMLCLI::test_automl_run_unsupported_algorithm -v)",
      "Bash(hatch run test:pip install:*)",
      "Bash(PYNOMALY_ADVANCED_AUTOML=true python3 -m pytest tests/automl/test_automl_cli.py::TestDatasetLoading::test_load_unsupported_format -v)",
      "Bash(bandit:*)",
      "Bash(hatch run test:python:*)",
      "Bash(npx esbuild:*)",
      "Bash(./environments/.venv/bin/python -c \"\nimport sys\nsys.path.insert(0, 'src')\ntry:\n    from pynomaly.shared import protocols\n    print('Successfully imported protocols')\n    print('Available protocols:', [name for name in dir(protocols) if name.endswith('Protocol')])\nexcept Exception as e:\n    print(f'Error importing protocols: {e}')\n\")",
      "Bash(./environments/.venv/bin/python -m pytest tests/ --tb=short -x -q)",
      "Bash(./environments/.venv/bin/python -c \"from pynomaly.application.dto.explainability_dto import CohortExplanationResponseDTO; print('Import successful')\")",
      "Bash(./environments/.venv/bin/python -m pytest tests/application/test_explainability_services.py --tb=short -v)",
      "Bash(./environments/.venv/bin/python -c \"from pynomaly.application.dto.explainability_dto import ExplanationComparisonRequestDTO, ExplanationComparisonResponseDTO; print('Import successful')\")",
      "Bash(./environments/.venv/bin/python -m pytest tests/cli/commands/test_detect_command.py -v --tb=short)",
      "Bash(./environments/.venv/bin/python -m pytest tests/cli/commands/test_datasets_command.py::TestDatasetsCommand::test_datasets_list_basic -v --tb=short --timeout=5)",
      "Bash(./environments/.venv/bin/python -c \"\nfrom pynomaly.application.dto.explainability_dto import (\n    CohortExplanationRequestDTO,\n    CohortExplanationResponseDTO,\n    ExplanationComparisonRequestDTO,\n    ExplanationComparisonResponseDTO,\n    ExplanationRequestDTO,\n    ExplanationResponseDTO,\n    FeatureImportanceRequestDTO,\n    FeatureImportanceResponseDTO,\n)\nprint('All imports successful')\n\")",
      "Bash(python -m pytest tests/application/test_explainability_services.py -v)",
      "Bash(PYNOMALY_ENV=testing TESTING=true python -m pytest tests/test_infrastructure.py::TestSmoke -v)",
      "Bash(python3 -m pytest tests/application/test_explainability_services.py -v)",
      "Bash(./environments/.venv/bin/python scripts/testing/automated_test_coverage_analysis.py --project-root /mnt/c/Users/andre/Pynomaly --output-format json)",
      "Bash(kill:*)",
      "Bash(python3:*)",
      "Bash(pip3 install:*)",
      "Bash(PYNOMALY_USE_LAZY_CLI=false python3 -m pynomaly.presentation.cli.app detector list --help)",
      "Bash(./environments/.venv/bin/python -m pytest tests/infrastructure/repositories/test_repository_comprehensive.py -v --tb=short --timeout=10)",
      "Bash(./environments/.venv/bin/python -c \"\nimport sys\nsys.path.insert(0, 'src')\nfrom pynomaly.infrastructure.repositories.in_memory_repositories import *\nprint('Available classes:', [name for name in dir() if 'Repository' in name])\n\")",
      "Bash(./environments/.venv/bin/python -m pytest tests/infrastructure/repositories/test_repositories_simplified.py -v --tb=short --timeout=10)",
      "Bash(alembic init:*)",
      "Bash(./environments/.venv/bin/python -c \"\nimport sys\nsys.path.insert(0, 'src')\nfrom pynomaly.infrastructure.repositories.in_memory_repositories import InMemoryDetectorRepository\nfrom pynomaly.domain.entities import Detector\nfrom uuid import uuid4\nfrom datetime import datetime, timezone\n\nprint('Testing basic repository operations...')\nrepo = InMemoryDetectorRepository()\ndetector = Detector(\n    id=uuid4(),\n    name='test-detector',\n    algorithm_name='IsolationForest',\n    hyperparameters={},\n    created_at=datetime.now(timezone.utc),\n    is_fitted=False\n)\nrepo.save(detector)\nprint(f'Saved detector: {detector.name}')\nfound = repo.find_by_id(detector.id)\nprint(f'Found detector: {found.name if found else None}')\nprint('Basic operations work!')\n\")",
      "Bash(./environments/.venv/bin/python -m pytest tests/infrastructure/repositories/test_repository_basic.py -v --tb=short)",
      "Bash(./scripts/setup_monitoring.sh:*)",
      "Bash(./environments/.venv/bin/python -m pytest tests/unit/domain/entities/test_dataset.py -v --tb=short --timeout=30)",
      "Bash(./environments/.venv/bin/python -m pytest tests/domain/services/test_domain_services_comprehensive.py::TestEnsembleAggregator::test_aggregate_scores_average -v --tb=short)",
      "Bash(./environments/.venv/bin/python -m pytest tests/unit/domain/services/test_anomaly_scorer.py -v --tb=short)",
      "Bash(git add:*)",
      "Bash(./environments/.venv/bin/python -m pytest tests/application/services/test_detection_service_comprehensive.py -v --tb=short --timeout=30)",
      "Bash(rm:*)",
      "Bash(git reset:*)",
      "Bash(docker-compose:*)",
      "Bash(chmod:*)"
    ],
    "deny": []
  }
}