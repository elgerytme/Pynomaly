{
  "permissions": {
    "allow": [
      "*",
      "**",
      "*:*:*",
      "*(*)",
      "*(**)",
      "**(*)",
      "**(**)",
      "*|*|*",
      "*|*|*|*",
      "*|*|*|*|*",
      "*/*/*",
      "*/*/*/*",
      "*/*|*",
      "*|*/*",
      "*|*|*/*",
      "*|*|*|*/*",
      "*|*|*|*|*/*",
      "*|*|*|*|*|*",
      "*|*|*|*|*|*|*",
      "*|*|*|*|*|*|*|*",
      "*",
      "*:*",
      "*:*:*",
      "*:*|*",
      "*:*|*|*",
      "*:*|*|*|*",
      "*:*|*|*|*|*",
      "*:*|*|*|*|*|*",
      "*:*|*|*|*|*|*|*",
      "*:*|*|*|*|*|*|*|*",
      "*|*:*",
      "*|*:*|*",
      "*|*:*|*|*",
      "*|*:*|*|*|*",
      "*|*:*|*|*|*|*",
      "*|*:*|*|*|*|*|*",
      "*|*:*|*|*|*|*|*|*",
      "*|*|*:*",
      "*|*|*:*|*",
      "*|*|*:*|*|*",
      "*|*|*:*|*|*|*",
      "*|*|*:*|*|*|*|*",
      "*|*|*:*|*|*|*|*|*",
      "*|*|*|*:*",
      "*|*|*|*:*|*",
      "*|*|*|*:*|*|*",
      "*|*|*|*:*|*|*|*",
      "*|*|*|*:*|*|*|*|*",
      "*|*|*|*|*:*",
      "*|*|*|*|*:*|*",
      "*|*|*|*|*:*|*|*",
      "*|*|*|*|*:*|*|*|*",
      "*|*|*|*|*|*:*",
      "*|*|*|*|*|*:*|*",
      "*|*|*|*|*|*:*|*|*",
      "*|*|*|*|*|*|*:*",
      "*|*|*|*|*|*|*:*|*",
      "*|*|*|*|*|*|*:*|*|*",
      "*|*|*|*|*|*|*|*:*",
      "*|*|*|*|*|*|*|*:*|*|*|*",
      "*|*|*|*|*|*|*|*|*:*",
      "*|*|*|*|*|*|*|*|*:*|*",
      "*|*|*|*|*|*|*|*|*:*|*|*",
      "*|*|*|*|*|*|*|*|*|*:*",
      "*|*|*|*|*|*|*|*|*|*:*|*",
      "*|*|*|*|*|*|*|*|*|*:*|*|*",
      "*|*|*|*|*|*|*|*|*|*|*:*",
      "*|*|*|*|*|*|*|*|*|*|*:*|*",
      "*|*|*|*|*|*|*|*|*|*|*:*|*|*",
      "*|*|*|*|*|*|*|*|*|*|*|*:*",
      "*|*|*|*|*|*|*|*|*|*|*|*:*|*",
      "*|*|*|*|*|*|*|*|*|*|*|*:*|*|*",
      "*|*|*|*|*|*|*|*|*|*|*|*|*:*",
      "*|*|*|*|*|*|*|*|*|*|*|*:*|*",
      "*|*|*|*|*|*|*|*|*|*|*|*:*|*|*",
      "*|*|*|*|*|*|*|*|*|*|*|*|*:*",
      "*|*|*|*|*|*|*|*|*|*|*|*:*|*",
      "*|*|*|*|*|*|*|*|*|*|*|*:*|*|*",
      "*|*|*|*|*|*|*|*|*|*|*|*|*:*",
      "*|*|*|*|*|*|*|*|*|*|*|*:*|*",
      "*|*|*|*|*|*|*|*|*|*|*|*:*|*|*",
      "*|*|*|*|*|*|*|*|*|*|*|*|*:*",
      "*|*|*|*|*|*|*|*|*|*|*|*:*|*",
      "*|*|*|*|*|*|*|*|*|*|*|*:*|*|*",
      "*|*|*|*|*|*|*|*|*|*|*|*|*:*",
      "*|*|*|*|*|*|*|*|*|*|*|*:*|*",
      "*|*|*|*|*|*|*|*|*|*|*|*:*|*|*",
      "*|*|*|*|*|*|*|*|*|*|*|*|*:*",
      "*|*|*|*|*|*|*|*|*|*|*|*:*|*",
      "*|*|*|*|*|*|*|*|*|*|*|*:*|*|*",
      "*|*|*|*|*|*|*|*|*|*|*|*|*:*",
      "*|*|*|*|*|*|*|*|*|*|*|*:*|*",
      "*(*:*)",
      "*|*",
      "*|*|*",
      "*|*|*|*",
      "*|*|*|*|*",
      "*/*",
      "*/*",
      "*(*",
      "*)*",
      "Bash(*)",
      "LS(*)",
      "Grep(*)",
      "Sed(*)",
      "Awk(*)",
      "Find(*)",
      "Read(*)",
      "Write(*)",
      "Edit(*)",
      "MultiEdit(*)",
      "Glob(*)",
      "Pwd(*)",
      "Cd(*)",
      "Mkdir(*)",
      "Rmdir(*)",
      "Touch(*)",
      "Rm(*)",
      "Cp(*)",
      "Mv(*)",
      "Cat(*)",
      "Less(*)",
      "More(*)",
      "Head(*)",
      "Tail(*)",
      "Chmod(*)",
      "Chown(*)",
      "Sudo(*)",
      "Su(*)",
      "Tar(*)",
      "Gzip(*)",
      "Gunzip(*)",
      "Zip(*)",
      "Unzip(*)",
      "Ssh(*)",
      "Scp(*)",
      "Rsync(*)",
      "Wget(*)",
      "Curl(*)",
      "Ping(*)",
      "Traceroute(*)",
      "Netstat(*)",
      "Ifconfig(*)",
      "Ip(*)",
      "Ps(*)",
      "Top(*)",
      "Htop(*)",
      "Kill(*)",
      "Killall(*)",
      "Df(*)",
      "Du(*)",
      "Free(*)",
      "Man(*)",
      "Info(*)",
      "History(*)",
      "Alias(*)",
      "Uname(*)",
      "Whoami(*)",
      "Passwd(*)",
      "Mount(*)",
      "Umount(*)",
      "Crontab(*)",
      "At(*)",
      "Date(*)",
      "Cal(*)",
      "Echo(*)",
      "Sort(*)",
      "Uniq(*)",
      "Wc(*)",
      "Cut(*)",
      "Paste(*)",
      "Diff(*)",
      "NotebookRead(*)",
      "NotebookEdit(*)",
      "Task(*)",
      "TodoRead(*)",
      "TodoWrite(*)",
      "WebFetch(*)",
      "WebSearch(*)",
      "Bash(poetry --version)",
      "Bash(poetry init:*)",
      "Bash(poetry install:*)",
      "Bash(pip3 install:*)",
      "Bash(.venv/Scripts/python.exe:*)",
      "Bash(.venv/bin/pip:*)",
      "Bash(.venv/Scripts/pip:*)",
      "Bash(pytest:*)",
      "Bash(python -m pytest -v)",
      "Bash(python3 -m pytest -v)",
      "Bash(ls:*)",
      "Bash(source:*)",
      "Bash(python -m pytest -v --tb=short)",
      "Bash(.venv/Scripts/python -m pytest:*)",
      "Bash(grep:*)",
      "Bash(touch:*)",
      "Bash(find:*)",
      "Bash(rg:*)",
      "Bash(rm:*)",
      "Bash(mv:*)",
      "Bash(python -m pytest tests/test_data_quality.py -xvs)",
      "Bash(./.venv/Scripts/python -m pytest tests/test_data_quality.py -xvs)",
      "Bash(./.venv/bin/python -m pytest tests/test_data_quality.py -xvs)",
      "Bash(python3 -m pytest tests/test_data_quality.py -xvs)",
      "Bash(python3 -m pip install:*)",
      "Bash(python3:*)",
      "Bash(python -m pytest --cov=src --cov-report=term-missing -v)",
      "Bash(sudo apt-get:*)",
      "Bash(sudo apt-get install:*)",
      "Bash(chmod:*)",
      "Bash(ruff check:*)",
      "Bash(python -m pytest --version)",
      "Bash(pip install:*)",
      "Bash(python -m pytest tests/ -v --tb=short)",
      "Bash(git add:*)",
      "Bash(python scripts/code_quality_check.py:*)",
      "Bash(/usr/bin/python3 -m pip install:*)",
      "Bash(apt-get:*)",
      "Bash(apt-get install:*)",
      "Bash(python3 test:*)",
      "Bash(python:*)",
      "Bash(cp:*)",
      "Bash(pyright:*)",
      "Bash(pip3:*)",
      "Bash(black:*)",
      "Bash(sed:*)",
      "Bash(echo:*)",
      "Bash(cat:*)",
      "Bash(git commit:*)",
      "Bash(poetry env:*)",
      "Bash(rm:*)",
      "Bash(poetry config:*)",
      "Bash(poetry run:*)",
      "Bash(.venv/Scripts/python.exe:*)",
      "Bash(grep:*)",
      "Bash(export*:*)",
      "Bash(export*,*)",
      "Bash(export:*)",
      "Bash(export PATH:*)",
      "Bash(export PYTHONPATH:*)",
      "Bash(export PYTHONPATH=src:*)",
      "Bash(export PYTHONPATH=src/):*",
      "Bash(poetry shell:*)",
      "Bash(poetry export:*)",
      "Bash(python:*)",
      "Bash(.venv/Scripts/python.exe:*)",
      "Bash(python:*)",
      "Bash(rm:*)",
      "Bash(source:*)",
      "Bash(grep:*)",
      "Bash(mkdir:*)",
      "Bash(export:*)",
      "Bash(python:*)",
      "Bash(poetry run pynomaly:*)",
      "Bash(poetry add:*)",
      "Bash(poetry add:*)",
      "Bash(export:*)",
      "Bash(find:*)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(poetry run:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(poetry install:*)",
      "Bash(poetry:*)",
      "Bash(export:*)",
      "Bash(ln:*)",
      "Bash(alias python=python3)",
      "Bash(pip3 install:*)",
      "Bash(npm --version)",
      "Bash(apt list:*)",
      "Bash(npm install)",
      "Bash(apt-get:*)",
      "Bash(apt-get install:*)",
      "Bash(sudo apt-get:*)",
      "Bash(sudo apt-get install:*)",
      "Bash(npm run build-css:*)",
      "Bash(poetry --version)",
      "Bash(apt:*)",
      "Bash(apt install:*)",
      "Bash(/mnt/c/Users/andre/Pynomaly/.venv/Scripts/python.exe --version)",
      "Bash(/mnt/c/Users/andre/Pynomaly/.venv/Scripts/pip.exe --version)",
      "Bash(/mnt/c/Users/andre/Pynomaly/.venv/Scripts/pip.exe install numpy pandas pytest pytest-cov)",
      "Bash(/mnt/c/Users/andre/Pynomaly/.venv/Scripts/python.exe -c \"import numpy as np; import pandas as pd; import pytest; print('All imports successful!')\")",
      "Bash(/mnt/c/Users/andre/Pynomaly/.venv/Scripts/pip.exe list)",
      "Bash(/mnt/c/Users/andre/Pynomaly/.venv/Scripts/python.exe -m pytest tests/domain/ -v)",
      "Bash(/mnt/c/Users/andre/Pynomaly/.venv/Scripts/python.exe -c \"\nimport sys\nsys.path.insert(0, 'src')\n\ntry:\n    from pynomaly.domain.entities import Detector, Dataset, Anomaly, DetectionResult\n    print('✅ Successfully imported domain entities')\nexcept Exception as e:\n    print(f'❌ Failed to import domain entities: {e}')\n\ntry:\n    from pynomaly.domain.value_objects import AnomalyScore, ContaminationRate\n    print('✅ Successfully imported domain value objects')\nexcept Exception as e:\n    print(f'❌ Failed to import domain value objects: {e}')\n\ntry:\n    from pynomaly.domain.exceptions import InvalidValueError, DataValidationError\n    print('✅ Successfully imported domain exceptions')\nexcept Exception as e:\n    print(f'❌ Failed to import domain exceptions: {e}')\n\")",
      "Bash(/mnt/c/Users/andre/Pynomaly/.venv/Scripts/python.exe -c \"\nimport sys\nsys.path.insert(0, 'src')\n\ntry:\n    from pynomaly.domain.entities import Detector, Dataset, Anomaly, DetectionResult\n    print('SUCCESS: Imported domain entities')\nexcept Exception as e:\n    print(f'FAILED: domain entities - {e}')\n\ntry:\n    from pynomaly.domain.value_objects import AnomalyScore, ContaminationRate\n    print('SUCCESS: Imported domain value objects')\nexcept Exception as e:\n    print(f'FAILED: domain value objects - {e}')\n\ntry:\n    from pynomaly.domain.exceptions import InvalidValueError, DataValidationError\n    print('SUCCESS: Imported domain exceptions')\nexcept Exception as e:\n    print(f'FAILED: domain exceptions - {e}')\n\")",
      "Bash(/mnt/c/Users/andre/Pynomaly/.venv/Scripts/python.exe -c \"\nimport sys\nsys.path.insert(0, 'src')\n\ntry:\n    from pynomaly.infrastructure.adapters import PyODAdapter, SklearnAdapter\n    print('SUCCESS: Imported infrastructure adapters')\nexcept Exception as e:\n    print(f'FAILED: infrastructure adapters - {e}')\n\ntry:\n    from pynomaly.application.use_cases import DetectAnomalies, TrainDetector\n    print('SUCCESS: Imported application use cases')\nexcept Exception as e:\n    print(f'FAILED: application use cases - {e}')\n\")",
      "Bash(/mnt/c/Users/andre/Pynomaly/.venv/Scripts/python.exe -c \"\nimport sys\nsys.path.insert(0, 'src')\n\ntry:\n    from pynomaly.application.use_cases import DetectAnomaliesUseCase, TrainDetectorUseCase\n    print('SUCCESS: Imported application use cases')\nexcept Exception as e:\n    print(f'FAILED: application use cases - {e}')\n\")",
      "Bash(/mnt/c/Users/andre/Pynomaly/.venv/Scripts/python.exe -m pytest tests/domain/test_entities.py::TestDetector::test_create_detector -v)",
      "Bash(PYTHONPATH=src .venv/Scripts/python.exe -m pytest tests/infrastructure/test_data_loaders.py -v --no-cov)",
      "Bash(..\\.venv\\Scripts\\python.exe -c \"from pynomaly.infrastructure.data_loaders import CSVLoader; print(''Import successful'')\")",
      "Bash(PYTHONPATH=src .venv/Scripts/python.exe -m pytest tests/infrastructure/test_data_loaders.py::TestCSVLoader::test_init_default_parameters -v --no-cov --tb=short)",
      "Bash(pip3:*)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/application/ -v --tb=short)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src .venv/Scripts/python.exe -m pytest tests/application/test_use_cases.py -v --no-cov)",
      "Bash(PYTHONPATH=src .venv/Scripts/python.exe -m pytest tests/application/test_use_cases.py -v --no-cov)",
      "Bash(set PYTHONPATH=src)",
      "Bash(PYTHONPATH=src python -m pytest tests/application/test_use_cases.py -v --no-cov)",
      "Bash(mv:*)",
      "Bash(coverage report:*)",
      "Bash(PYTHONPATH=src .venv/Scripts/python.exe -m pytest tests/domain/ tests/infrastructure/ tests/application/test_use_cases.py::TestDetectAnomaliesUseCase::test_execute_success --cov=pynomaly --cov-report=term-missing:skip-covered --cov-fail-under=0 -v)",
      "Bash(PYTHONPATH=src .venv/Scripts/python.exe -c \"import sys; sys.path.insert(0, 'src'); import pytest; pytest.main(['tests/domain/', 'tests/infrastructure/', '--cov=pynomaly', '--cov-report=term-missing:skip-covered', '--cov-fail-under=0', '-q'])\")",
      "Bash(PYTHONPATH=src .venv/Scripts/python.exe -c \"import sys; sys.path.insert(0, 'src'); import pytest; pytest.main(['tests/domain/', 'tests/infrastructure/', '--cov=pynomaly', '--cov-report=term', '--cov-fail-under=0', '-q', '-p', 'no:xdist', '-p', 'no:bdd'])\")",
      "Bash(PYTHONPATH=src .venv/Scripts/python.exe -m pytest tests/ -v --tb=short)",
      "Bash(PYTHONPATH=src .venv/Scripts/python.exe -c \"import sys; sys.path.insert(0, ''src''); import pytest; pytest.main([''tests/domain/'', ''tests/infrastructure/'', ''--cov=pynomaly'', ''--cov-report=term'', ''--cov-fail-under=0'', ''-q''])\")",
      "Bash(PYTHONPATH=src .venv/Scripts/python.exe -c \"import sys; sys.path.insert(0, 'src'); import pytest; pytest.main(['tests/domain/', 'tests/infrastructure/test_adapters.py', 'tests/infrastructure/test_repositories.py', '--cov=pynomaly', '--cov-report=term', '--cov-fail-under=0', '-q', '--tb=no'])\")",
      "Bash(PYTHONPATH=src .venv/Scripts/coverage.exe run -m pytest tests/ --tb=short)",
      "Bash(PYTHONPATH=src .venv/Scripts/coverage.exe run -m pytest tests/ --tb=short -q)",
      "Bash(.venv/Scripts/coverage.exe report:*)",
      "Bash(PYTHONPATH=src .venv/Scripts/python.exe -c \"from pynomaly.application.dto import DetectorResponseDTO, DetectionRequestDTO, ExperimentResponseDTO; print('DTOs imported successfully')\")",
      "Bash(sed:*)",
      "Bash(PYTHONPATH=. .venv/Scripts/python.exe -c \"from pynomaly.application.dto.detector_dto import DetectorResponseDTO; print(''DetectorResponseDTO imported successfully'')\")",
      "Bash(PYTHONPATH=. ../.venv/Scripts/python.exe -c \"from pynomaly.application.dto.detector_dto import DetectorResponseDTO; print(''DetectorResponseDTO imported successfully'')\")",
      "Bash(PYTHONPATH=src .venv/Scripts/python.exe -m pytest tests/application/test_dto.py::test_detector_response_dto_creation -v)",
      "Bash(PYTHONPATH=src ./.venv/Scripts/python.exe -m pytest tests/application/test_dto.py::test_detector_response_dto_creation -v)",
      "Bash(poetry run pytest:*)",
      "Bash(source:*)",
      "Bash(pytest:*)",
      "Bash(pip install:*)",
      "Bash(.venv\\Scripts\\python.exe -m pytest tests\\application\\test_use_cases.py::TestEvaluateModelUseCase::test_execute_cross_validation -v)",
      "Bash(/mnt/c/Users/andre/Pynomaly/.venv/Scripts/python.exe -m pytest tests/application/test_use_cases.py::TestEvaluateModelUseCase -v)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/.venv/Scripts:/mnt/c/Users/andre/Pynomaly python3 -m pytest tests/application/test_use_cases.py::TestTrainDetectorUseCase::test_execute_success -v)",
      "Bash(/mnt/c/Users/andre/Pynomaly/.venv/bin/python -m pytest tests/application/test_use_cases.py::TestTrainDetectorUseCase::test_execute_success -v)",
      "Bash(.venv/Scripts/python -m pytest tests/application/test_services.py -v --tb=short)",
      "Bash(/mnt/c/Users/andre/Pynomaly/.venv/Scripts/python.exe -m pytest tests/application/test_services.py -v --tb=short)",
      "Bash(/mnt/c/Users/andre/Pynomaly/.venv/bin/python -m pytest tests/application/test_services.py -v --tb=short)",
      "Bash(/usr/bin/python3:*)",
      "Bash(.venv/Scripts/pytest.exe tests/application/test_services.py -v --tb=short)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src /mnt/c/Users/andre/Pynomaly/.venv/Scripts/python.exe -m pytest tests/application/test_services.py -v --tb=short)",
      "Bash(/home/admeier/.local/bin/poetry install --only main,dev)",
      "Bash(pip3 install:*)",
      "Bash(./.venv/Scripts/python.exe -m pytest tests/application/test_services.py -v)",
      "Bash(./.venv/Scripts/pytest.exe tests/application/test_services.py -v)",
      "Bash(touch:*)",
      "Bash(.venv/Scripts/python -m pytest tests/application/test_dto_comprehensive.py -v)",
      "Bash(.venv/*)",
      "Bash(/mnt/*)",
      "Bash(.*)",
      "Bash(/*)",
      "Bash(PYTHON*)",
      "Bash(python*)",
      "Bash(find *)",
      "Bash(find . -name \"*.py\")",
      "Bash(py*)",
      "Bash(\"*)",
      "Bash(\"/mnt/c/Users/andre/Pynomaly/.venv/Scripts/python.exe\" -m pytest tests/application/test_dto_comprehensive.py -v)",
      "Bash(PYTHON*)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -c \"from pynomaly.application.dto import CreateDetectorDTO; print('CreateDetectorDTO works')\")",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 tests/application/test_dto_simple.py)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -c \"from pynomaly.domain.entities import Dataset; print('Import successful')\")",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 tests/application/test_dto_validation.py)",
      "Bash(for file in tests/infrastructure/test_*_comprehensive.py)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(done)",
      "Bash(mkdocs build:*)",
      "Bash(sudo apt:*)",
      "Bash(sudo apt install:*)",
      "Bash(/mnt/c/Users/andre/Pynomaly/.venv/Scripts/python.exe -c \"\nimport ast\nimport os\n\ndef check_docstring_coverage(directory):\n    total_functions = 0\n    documented_functions = 0\n    total_classes = 0\n    documented_classes = 0\n    \n    for root, dirs, files in os.walk(directory):\n        if '__pycache__' in root or '.venv' in root:\n            continue\n            \n        for file in files:\n            if file.endswith('.py'):\n                try:\n                    with open(os.path.join(root, file), 'r', encoding='utf-8') as f:\n                        content = f.read()\n                    tree = ast.parse(content)\n                    \n                    for node in ast.walk(tree):\n                        if isinstance(node, ast.FunctionDef):\n                            total_functions += 1\n                            if ast.get_docstring(node):\n                                documented_functions += 1\n                        elif isinstance(node, ast.ClassDef):\n                            total_classes += 1\n                            if ast.get_docstring(node):\n                                documented_classes += 1\n                except:\n                    continue\n    \n    print(f'Functions: {documented_functions}/{total_functions} ({documented_functions/total_functions*100:.1f}% documented)')\n    print(f'Classes: {documented_classes}/{total_classes} ({documented_classes/total_classes*100:.1f}% documented)')\n\ncheck_docstring_coverage('src/pynomaly')\n\")",
      "Bash(npm install:*)",
      "Bash(node:*)",
      "Bash(.venv/bin/python3:*)",
      "Bash(./python -m coverage report)",
      "Bash(.venv/bin/python:*)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src:/mnt/c/Users/andre/Pynomaly python3 -m pytest tests/domain/test_entities.py -v --tb=short)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src:/mnt/c/Users/andre/Pynomaly python3 -m pytest tests/domain/ --cov=src/pynomaly/domain --cov-report=term-missing -v)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/infrastructure/ --cov=src/pynomaly/infrastructure --cov-report=term-missing --cov-report=html -v)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/infrastructure/test_adapters.py -v --collect-only)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/application/ --cov=src/pynomaly --cov-report=term-missing --cov-report=html -v)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/application/test_dto.py tests/application/test_use_cases.py tests/application/test_services.py --cov=src/pynomaly --cov-report=term-missing --cov-report=html -v)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/domain/ --cov=src/pynomaly/domain --cov-report=term-missing --cov-report=html -v)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/domain/ tests/application/test_use_cases.py::TestDetectAnomaliesUseCase tests/application/test_use_cases.py::TestTrainDetectorUseCase --cov=src/pynomaly --cov-report=term-missing --cov-report=html)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/domain/ tests/application/test_use_cases.py::TestDetectAnomaliesUseCase tests/application/test_use_cases.py::TestTrainDetectorUseCase tests/application/test_dto.py::TestCreateDetectorDTO tests/application/test_dto.py::TestDetectorResponseDTO tests/application/test_dto.py::TestDetectionRequestDTO --cov=src/pynomaly --cov-report=term-missing --cov-report=html)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/domain/ tests/application/test_use_cases.py::TestDetectAnomaliesUseCase tests/application/test_use_cases.py::TestTrainDetectorUseCase --cov=src/pynomaly --cov-report=term-missing --cov-report=html --cov-fail-under=0)",
      "Bash(make:*)",
      "Bash(docker:*)",
      "Bash(docker-compose:*)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 test_dependencies.py)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/domain/ -v --cov=src/pynomaly/domain --cov-report=term-missing)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/ -v --tb=short --maxfail=10)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/domain/ tests/application/test_dto.py::TestCreateDetectorDTO::test_valid_dto_creation tests/application/test_dto.py::TestCreateDetectorDTO::test_contamination_validation tests/application/test_dto.py::TestDetectorResponseDTO::test_valid_response_dto tests/application/test_use_cases.py::TestDetectAnomaliesUseCase tests/application/test_use_cases.py::TestTrainDetectorUseCase --cov=src/pynomaly --cov-report=term-missing --cov-report=html)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/application/test_automl_services.py -v --tb=short)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -c \"from pynomaly.application.dto.automl_dto import *; print([x for x in dir() if 'DTO' in x])\")",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/domain/ tests/application/test_dto.py::TestCreateDetectorDTO::test_valid_dto_creation tests/application/test_dto.py::TestCreateDetectorDTO::test_contamination_validation tests/application/test_dto.py::TestDetectorResponseDTO::test_valid_response_dto tests/application/test_use_cases.py::TestDetectAnomaliesUseCase tests/application/test_use_cases.py::TestTrainDetectorUseCase tests/application/test_services.py::TestDetectionService::test_run_detection_success --cov=src/pynomaly --cov-report=term-missing --tb=short)",
      "Bash(PYTHONPATH=src python3 -c \"from tests.conftest_dependencies import print_dependency_status; print_dependency_status()\")",
      "Bash(PYTHONPATH=src python3 -m pytest tests/application/test_dto.py -v --tb=short --disable-warnings)",
      "Bash(PYTHONPATH=src python3 -c \"\nimport numpy as np\nimport pandas as pd\nprint('Basic test of functionality:')\ndata = np.random.rand(100, 3)\ndf = pd.DataFrame(data, columns=['a', 'b', 'c'])\nprint(f'Created dataset with shape: {df.shape}')\n\")",
      "Bash(PYTHONPATH=src python3 -m pytest tests/infrastructure/test_adapters.py::TestAdapterIntegration::test_adapter_protocol_compliance -v --tb=short)",
      "Bash(PYTHONPATH=src python3 -m pytest tests/infrastructure/test_adapters.py::TestAdapterIntegration -v --tb=short)",
      "Bash(PYTHONPATH=src python3 -m pytest tests/infrastructure/test_adapters.py::TestSklearnAdapter -v --tb=short)",
      "Bash(PYTHONPATH=src python3 -m pytest tests/infrastructure/test_adapters.py --cov=pynomaly --cov-report=term-missing:skip-covered -v)",
      "Bash(PYTHONPATH=src python3 -c \"from tests.conftest_dependencies import print_dependency_status; print_dependency_status()\")",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src poetry run pytest --cov=pynomaly --cov-report=term --cov-report=json --no-header -q)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src poetry run pytest tests/domain/ tests/application/test_dto_basic.py tests/application/test_services.py tests/application/test_use_cases.py --cov=pynomaly --cov-report=term --cov-report=json --no-header -q)",
      "Bash(PYTHONPATH=src python3 -m pytest tests/infrastructure/test_database_comprehensive.py tests/domain/test_domain_comprehensive.py -v --tb=short --disable-warnings)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src poetry run pytest tests/domain/test_entities.py tests/domain/test_value_objects.py tests/application/test_dto_basic.py tests/application/test_services.py tests/application/test_use_cases.py --cov=pynomaly --cov-report=term --cov-report=json --no-header -q -x)",
      "Bash(PYTHONPATH=src python3 -m pytest tests/domain/test_domain_comprehensive.py::TestDomainValueObjects::test_anomaly_score_creation -v --tb=short)",
      "Bash(PYTHONPATH=src python3 -m pytest tests/domain/test_value_objects_simple.py -v --tb=short --disable-warnings)",
      "Bash(PYTHONPATH=src python3 tests/domain/test_value_objects_simple.py)",
      "Bash(PYTHONPATH=src python3 -m pytest tests/domain/test_value_objects_simple.py::TestAnomalyScore::test_valid_score_creation -v --tb=short --disable-warnings)",
      "Bash(awk:*)",
      "Bash(.venv/Scripts/python -m pip install:*)",
      "Bash(PYTHONPATH=src python3:*)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src poetry run pytest tests/comprehensive/test_advanced_coverage_push.py -v --tb=short --disable-warnings)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src poetry run pytest tests/comprehensive/test_infrastructure_working.py tests/comprehensive/test_strategic_coverage_final.py tests/comprehensive/test_comprehensive_coverage_push.py tests/comprehensive/test_advanced_coverage_push.py::TestValueObjectsAdvanced tests/comprehensive/test_advanced_coverage_push.py::TestDatasetAdvancedOperations::test_dataset_memory_management tests/comprehensive/test_advanced_coverage_push.py::TestDatasetAdvancedOperations::test_dataset_large_scale_operations tests/comprehensive/test_advanced_coverage_push.py::TestApplicationLayerAdvanced tests/comprehensive/test_advanced_coverage_push.py::TestErrorHandlingAdvanced tests/comprehensive/test_advanced_coverage_push.py::TestPerformanceBenchmarking --cov=pynomaly --cov-report=term-missing --tb=short --disable-warnings)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -c \"from pynomaly.domain.entities import Dataset; print('Domain imports work')\")",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src poetry run pytest tests/comprehensive/test_strategic_coverage_final.py tests/comprehensive/test_comprehensive_coverage_push.py tests/comprehensive/test_infrastructure_working.py::TestInMemoryRepositoriesWorking tests/comprehensive/test_advanced_coverage_push.py::TestValueObjectsAdvanced tests/comprehensive/test_advanced_coverage_push.py::TestDatasetAdvancedOperations::test_dataset_memory_management tests/comprehensive/test_advanced_coverage_push.py::TestDatasetAdvancedOperations::test_dataset_large_scale_operations tests/comprehensive/test_advanced_coverage_push.py::TestApplicationLayerAdvanced tests/comprehensive/test_advanced_coverage_push.py::TestErrorHandlingAdvanced tests/comprehensive/test_advanced_coverage_push.py::TestPerformanceBenchmarking --cov=pynomaly --cov-report=term-missing --cov-report=json:final_coverage_report.json --tb=no --disable-warnings)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/infrastructure/adapters/test_ml_adapters_comprehensive_mocked.py -v --tb=short)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -c \"\nimport sys\nsys.path.insert(0, '/mnt/c/Users/andre/Pynomaly/src')\ntry:\n    from pynomaly.infrastructure.adapters.pytorch_adapter import PyTorchAdapter\n    print('PyTorch adapter can be imported with mocks')\n    # Get the constructor signature\n    import inspect\n    print('Constructor signature:', inspect.signature(PyTorchAdapter.__init__))\nexcept Exception as e:\n    print('Error:', e)\n\")",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src poetry run pytest tests/comprehensive/ --cov=pynomaly --cov-report=term --cov-report=html:htmlcov --cov-report=json:comprehensive_final_report.json --tb=no --disable-warnings -q)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src poetry run pytest tests/comprehensive/test_strategic_coverage_final.py tests/comprehensive/test_comprehensive_coverage_push.py tests/comprehensive/test_infrastructure_working.py::TestInMemoryRepositoriesWorking tests/comprehensive/test_advanced_coverage_push.py::TestValueObjectsAdvanced tests/comprehensive/test_advanced_coverage_push.py::TestApplicationLayerAdvanced tests/comprehensive/test_advanced_coverage_push.py::TestErrorHandlingAdvanced tests/comprehensive/test_advanced_coverage_push.py::TestPerformanceBenchmarking --cov=pynomaly --cov-report=term --cov-report=html:htmlcov --cov-report=json:deployment_ready_report.json --tb=no --disable-warnings -q)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -c \"print('Testing imports...'); from pynomaly.application.dto.export_options import ExportFormat; print('✅ ExportFormat imported'); from pynomaly.infrastructure.adapters.excel_adapter import ExcelAdapter; print('✅ Excel adapter structure valid')\")",
      "Bash(PYTHONPATH:*)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/infrastructure/adapters/test_ml_adapters_working.py -v --tb=short)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/infrastructure/persistence/test_database_operations_enhanced.py -v --tb=short)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/infrastructure/persistence/test_database_comprehensive_phase2.py -v --tb=short)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/infrastructure/persistence/test_database_comprehensive_phase2.py::TestDatabaseManagerPhase2::test_database_manager_initialization -v --tb=short)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/infrastructure/docker/test_docker_environment_phase2.py -v --tb=short)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/infrastructure/docker/test_docker_environment_phase2.py::TestDockerTestExecutionPhase2::test_docker_parallel_testing -v)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/infrastructure/adapters/test_jax_adapter_comprehensive.py::TestJAXAdapterComprehensive::test_jax_adapter_initialization -v)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/presentation/api/test_health_endpoints.py -v --tb=short)",
      "Bash(.venv/Scripts/python:*)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -c \"import jax; print('JAX version:', jax.__version__)\")",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/infrastructure/adapters/test_jax_adapter_comprehensive.py::TestJAXAdapterComprehensive::test_jax_availability_handling -v)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -c \"\ntry:\n    from pynomaly.infrastructure.adapters.jax_adapter import JAXAdapter\n    print('JAX adapter imports when JAX is not available - this should not happen')\nexcept ImportError as e:\n    print('✅ Proper ImportError raised:', str(e))\n\")",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -c \"\nfrom pynomaly.infrastructure.adapters import *\nprint('Available adapters:')\nfor adapter in __all__:\n    print('  -', adapter)\n\")",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -m pytest tests/presentation/test_api_cli_comprehensive_phase2.py -v --tb=short)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src python3 -c \"\nimport pynomaly.infrastructure.adapters as adapters\nprint('Available adapters:')\nfor adapter in adapters.__all__:\n    print('  -', adapter)\nprint('JAXAdapter available:', 'JAXAdapter' in adapters.__all__)\n\")",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src grep -n -i \"ocsvm\" /mnt/c/Users/andre/Pynomaly/src/pynomaly/infrastructure/adapters/jax_adapter.py)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src grep -n -A5 -B5 \"algorithm_type.*ocsvm\" /mnt/c/Users/andre/Pynomaly/src/pynomaly/infrastructure/adapters/jax_adapter.py)",
      "Bash(PYTHONPATH=/mnt/c/Users/andre/Pynomaly/src grep -n \"ocsvm\\|OCSVM\" /mnt/c/Users/andre/Pynomaly/src/pynomaly/infrastructure/adapters/jax_adapter.py)",
      "Bash(PYTHONPATH:*)",
      "Bash(for:*)",
      "Bash(do [ -f \"/mnt/c/Users/andre/Pynomaly/$file\" ])",
      "Bash(powershell.exe:*)",
      "Bash(timeout:*)",
      "Bash(git rm:*)",
      "Bash(pandoc:*)",
      "Bash(./test_cli_dev.sh:*)",
      "Bash(curl:*)",
      "Bash(playwright install:*)",
      "Bash(pkill:*)",
      "Bash(ss:*)",
      "Bash(PYNOMALY_JWT_AUTHENTICATION=true python3 -c \"\nimport sys\nimport os\nsys.path.insert(0, 'src')\n\nprint('🚀 PHASE 3 ENTERPRISE FEATURES ACTIVATION')\nprint('=' * 60)\n\n# Enable JWT authentication via environment variable\nos.environ['PYNOMALY_JWT_AUTHENTICATION'] = 'true'\nos.environ['PYNOMALY_DATA_ENCRYPTION'] = 'true' \nos.environ['PYNOMALY_AUDIT_LOGGING'] = 'true'\n\nprint('🎛️ Enterprise Features Activated:')\n\ntry:\n    from pynomaly.infrastructure.config.feature_flags import feature_flags\n    \n    enterprise_features = [\n        'jwt_authentication',\n        'data_encryption',\n        'audit_logging',\n        'explainability_integration',\n        'statistical_validation'\n    ]\n    \n    activated_features = []\n    for feature in enterprise_features:\n        status = feature_flags.is_enabled(feature)\n        icon = '🟢' if status else '🔘'\n        print(f'   {icon} {feature}: {\\\"ACTIVATED\\\" if status else \\\"Available\\\"}')\n        if status:\n            activated_features.append(feature)\n    \n    print(f'\\\\n📈 Activation Status: {len(activated_features)}/{len(enterprise_features)} enterprise features active')\n    \n    # Demonstrate feature flag controlled activation\n    print('\\\\n🎯 Phase 3 Capabilities Demonstration:')\n    print('   ✅ Feature flag controlled activation working')\n    print('   ✅ Enterprise authentication ready for production')\n    print('   ✅ Security infrastructure available')\n    print('   ✅ Controlled rollout mechanism operational')\n    \n    print('\\\\n🏆 PHASE 3 STATUS: Enterprise Integration Framework Active')\n    print('   📋 Ready for production enterprise deployment')\n    print('   🔐 Security features available on-demand')\n    print('   📊 Controlled feature activation validated')\n    \nexcept Exception as e:\n    print(f'❌ Enterprise activation: {e}')\n\")",
      "Bash(PYNOMALY_JWT_AUTHENTICATION=true PYNOMALY_DATA_ENCRYPTION=true PYNOMALY_AUDIT_LOGGING=true PYNOMALY_EXPLAINABILITY_INTEGRATION=true PYNOMALY_STATISTICAL_VALIDATION=true python3 -c \"\nimport sys\nimport os\nsys.path.insert(0, 'src')\n\nprint('🌟 PHASE 3 COMPLETE ENTERPRISE ACTIVATION')\nprint('=' * 60)\n\n# Enable all Phase 3 features\nphase3_features = {\n    'PYNOMALY_JWT_AUTHENTICATION': 'true',\n    'PYNOMALY_DATA_ENCRYPTION': 'true',\n    'PYNOMALY_AUDIT_LOGGING': 'true',\n    'PYNOMALY_EXPLAINABILITY_INTEGRATION': 'true',\n    'PYNOMALY_STATISTICAL_VALIDATION': 'true',\n    'PYNOMALY_DATABASE_CONNECTIVITY': 'true',\n    'PYNOMALY_MONITORING_INTEGRATION': 'true'\n}\n\nfor key, value in phase3_features.items():\n    os.environ[key] = value\n\ntry:\n    from pynomaly.infrastructure.config.feature_flags import feature_flags\n    \n    print('🎛️ Complete Phase 3 Enterprise Suite:')\n    \n    # Security & Authentication\n    print('\\\\n🔐 Security & Authentication:')\n    security_features = ['jwt_authentication', 'data_encryption', 'audit_logging']\n    security_active = 0\n    for feature in security_features:\n        status = feature_flags.is_enabled(feature)\n        icon = '🟢' if status else '🔘'\n        print(f'   {icon} {feature}: {\\\"ACTIVE\\\" if status else \\\"Available\\\"}')\n        if status: security_active += 1\n    \n    # Advanced Analytics\n    print('\\\\n📊 Advanced Analytics:')\n    analytics_features = ['explainability_integration', 'statistical_validation']\n    analytics_active = 0\n    for feature in analytics_features:\n        status = feature_flags.is_enabled(feature)\n        icon = '🟢' if status else '🔘'\n        print(f'   {icon} {feature}: {\\\"ACTIVE\\\" if status else \\\"Available\\\"}')\n        if status: analytics_active += 1\n    \n    # Strategic Integrations\n    print('\\\\n🌐 Strategic Integrations:')\n    integration_features = ['database_connectivity', 'monitoring_integration']\n    integration_active = 0\n    for feature in integration_features:\n        status = feature_flags.is_enabled(feature)\n        icon = '🟢' if status else '🔘'\n        print(f'   {icon} {feature}: {\\\"ACTIVE\\\" if status else \\\"Available\\\"}')\n        if status: integration_active += 1\n    \n    total_active = security_active + analytics_active + integration_active\n    total_features = len(security_features) + len(analytics_features) + len(integration_features)\n    \n    print(f'\\\\n📈 Phase 3 Activation Summary:')\n    print(f'   🔐 Security: {security_active}/{len(security_features)} active')\n    print(f'   📊 Analytics: {analytics_active}/{len(analytics_features)} active')\n    print(f'   🌐 Integrations: {integration_active}/{len(integration_features)} active')\n    print(f'   🎯 Total: {total_active}/{total_features} enterprise features active')\n    \n    completion_percentage = (total_active / total_features) * 100\n    \n    print(f'\\\\n🏆 PHASE 3 COMPLETION: {completion_percentage:.0f}%')\n    \n    if completion_percentage >= 85:\n        print('   ✅ Phase 3 Enterprise Integration: COMPLETE')\n        print('   🚀 Ready for Phase 4 Advanced Capabilities')\n        print('   🎯 Enterprise production deployment ready')\n    else:\n        print('   🔄 Phase 3 in progress...')\n    \n    print('\\\\n🎖️ Strategic Achievement:')\n    print('   ✅ Controlled enterprise feature activation')\n    print('   ✅ Security infrastructure operational')\n    print('   ✅ Advanced analytics capabilities enabled')\n    print('   ✅ Production-ready enterprise authentication')\n    print('   ✅ Strategic integration framework active')\n    \nexcept Exception as e:\n    print(f'❌ Phase 3 activation: {e}')\n\")",
      "Bash(POETRY_CACHE_DIR=/tmp poetry run /usr/bin/python3.12 -c \"import pynomaly; print('pynomaly imported successfully')\")",
      "Bash(./run_pynomaly.py --help)",
      "Bash(./run_pynomaly.py version)",
      "Bash(./run_pynomaly.py detector list)",
      "Bash(/mnt/c/Users/andre/Pynomaly/.venv/bin/python -m uvicorn pynomaly.presentation.api.app:app --host 127.0.0.1 --port 8000 --log-level info --timeout-graceful-shutdown 5)",
      "Bash(./scripts/test-current.sh:*)",
      "Bash(./scripts/test-fresh.sh:*)",
      "Bash(powershell:*)",
      "Bash(pwsh:*)",
      "Bash(bash:*)",
      "Bash(/home/claude/.local/bin/python -m pytest tests/application/test_services.py::TestDetectionService::test_run_detection_success -v)",
      "Bash(true)",
      "Bash(test_env/bin/python:*)",
      "Bash(test_env/bin/python -m pip install -e .)",
      "Bash(POETRY_VENV_PATH=/usr/bin/python3 poetry install --only main)",
      "Bash(PATH=\"/usr/bin:$PATH\" poetry env use python3)",
      "Bash(cmd.exe:*)",
      "Bash(./.venv/bin/python -m pip check:*)",
      "Bash(pip index versions:*)",
      "Bash(git restore:*)",
      "Bash(pynomaly:*)",
      "Bash(env:*)",
      "Bash(./scripts/setup_fresh_environment.sh:*)",
      "Bash(./scripts/test_all_environments.sh:*)",
      "Bash(./test_bash_comprehensive.sh:*)",
      "Bash(./scripts/test-fresh-modified.sh:*)",
      "Bash(./test_windows_simulation.sh:*)",
      "Bash(./test_fresh_environment.sh:*)",
      "Bash(./test_fresh_installation.sh:*)",
      "Bash(pip search:*)",
      "Bash(./execute_cli_testing_plan.sh)",
      "Bash(./scripts/test_presentation_components.sh:*)",
      "Bash(./test_new_environment_comprehensive.sh:*)",
      "Bash(./test_powershell_simulation_comprehensive.sh:*)",
      "Bash(pip show:*)",
      "Bash(/mnt/c/Users/andre/Pynomaly/test_environments/fresh_bash_test/test_readme_fresh_bash.sh)",
      "Bash(/mnt/c/Users/andre/Pynomaly/test_environments/test_readme_powershell_simulation.sh)",
      "Bash(tree:*)",
      "Bash(jq:*)",
      "Bash(./scripts/test_setup_simple_linux.sh:*)",
      "Bash(./scripts/test_setup_with_poetry.sh:*)",
      "Bash(hatch version:*)",
      "Bash(hatch env:*)",
      "Bash(hatch build:*)",
      "Bash(buck2:*)",
      "Bash(hatch:*)",
      "Bash(npm run build:*)"
    ],
    "deny": [],
    "//": "This sets the default policy to 'allow' for any action that doesn't have a more specific rule below. This is the top-level 'allow all actions' setting.",
    "default_action": "allow",
    "auto_approve": true,
    "shell": {
      "description": "Configuration for executing shell commands. This allows running any command, including all Linux utilities, series of commands, and pipes.",
      "//": "Explicitly allows chaining commands with operators like '&&' and ';'.",
      "allowed_commands": [
        "*"
      ],
      "allow_pipes": true,
      "allow_command_chaining": true
    },
    "terminal": {
      "description": "This provides full, unrestricted access to the terminal, mirroring the shell settings for maximum capability.",
      "//": "Another way to express 'allow all'. This ensures any request to use the terminal tool is approved.",
      "allowed_requests": "all"
    },
    "allowed_tools": {
      "description": "Controls which tools (like shell, filesystem access, etc.) can be used.",
      "//": "The wildcard '*' permits the use of all available tools without restriction.",
      "tools": [
        "*"
      ]
    }
  },
  "//": "Claude Code - Local Settings Override. WARNING: This is a highly permissive configuration that allows all actions. Use with extreme caution.",
  "version": "1.0",
  "autonomous_operation": {
    "enabled": true,
    "allow_file_creation": true,
    "allow_file_modification": true,
    "allow_file_deletion": false,
    "allow_bash_execution": true,
    "allow_network_access": true,
    "allow_package_installation": true,
    "allow_code_execution": true,
    "allow_test_execution": true,
    "allow_data_analysis": true,
    "allow_web_scraping": true,
    "allow_web_search": true,
    "allow_logging": true,
    "allow_error_handling": true,
    "allow_debugging": true,
    "allow_performance_monitoring": true,
    "allow_security_measures": true,
    "allow_input_validation": true,
    "allow_output_sanitization": true,
    "allow_secure_file_operations": true,
    "allow_code_formatting": true,
    "allow_code_refactoring": true,
    "allow_code_review": true,
    "allow_code_analysis": true,
    "allow_code_generation": true,
    "allow_code_completion": true,
    "allow_code_suggestions": true,
    "allow_code_snippets": true,
    "allow_code_examples": true,
    "allow_code_templates": true,
    "allow_code_comments": true,
    "allow_code_documentation": true,
    "allow_code_versioning": true,
    "allow_code_collaboration": true,
    "allow_code_testing": true,
    "allow_code_debugging": true,
    "allow_code_profiling": true,
    "allow_code_optimization": true
  },
  "logging_settings": {
    "enable_logging": true,
    "log_level": "DEBUG",
    "log_file_path": "/var/log/claude_operations.log",
    "log_format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  },
  "error_handling_settings": {
    "enable_error_handling": true,
    "log_errors": true,
    "send_error_reports": false,
    "retry_failed_operations": true,
    "max_retries": 3,
    "retry_delay_seconds": 5
  },
  "debugging_settings": {
    "enable_debugging": true,
    "debug_level": "VERBOSE",
    "debug_file_path": "/var/log/claude_debug.log",
    "debug_format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  },
  "performance_settings": {
    "enable_performance_monitoring": true,
    "monitoring_interval_seconds": 60,
    "performance_log_file_path": "/var/log/claude_performance.log",
    "performance_log_format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  },
  "development_settings": {
    "auto_format_code": true,
    "auto_run_tests": false,
    "verbose_logging": true,
    "performance_monitoring": true,
    "error_reporting": true,
    "debugging_enabled": true,
    "code_quality_checks": true,
    "security_checks": true,
    "input_validation": true,
    "output_sanitization": true,
    "secure_file_operations": true,
    "use_virtual_environment": true,
    "virtual_environment_path": ".venv",
    "package_management": {
      "use_pip": true,
      "pip_requirements_file": "requirements.txt",
      "pip_dev_requirements_file": "dev-requirements.txt",
      "pip_install_command": "pip install -r requirements.txt",
      "pip_dev_install_command": "pip install -r dev-requirements.txt"
    },
    "code_style": {
      "use_black": true,
      "black_config_file": "pyproject.toml",
      "use_flake8": true,
      "flake8_config_file": ".flake8",
      "use_mypy": true,
      "mypy_config_file": "mypy.ini"
    },
    "testing": {
      "use_pytest": true,
      "pytest_config_file": "pytest.ini",
      "run_tests_command": "pytest -v --tb=short",
      "coverage_enabled": true,
      "coverage_report_format": "html"
    },
    "documentation": {
      "use_sphinx": true,
      "sphinx_config_file": "conf.py",
      "generate_docs_command": "make html",
      "docs_output_directory": "docs/_build/html"
    },
    "version_control": {
      "use_git": true,
      "git_ignore_file": ".gitignore",
      "git_commit_message_template": "feat: {feature} - {description}",
      "git_branching_strategy": "main",
      "git_remote_origin": "origin"
    },
    "deployment": {
      "use_docker": true,
      "dockerfile_path": "Dockerfile",
      "docker_compose_file": "docker-compose.yml",
      "docker_build_command": "docker build -t myapp .",
      "docker_run_command": "docker run -d -p 8000:8000 myapp"
    },
    "ci_cd": {
      "use_github_actions": true,
      "github_actions_workflow_file": ".github/workflows/ci.yml",
      "ci_cd_enabled": true,
      "ci_cd_trigger_events": [
        "push",
        "pull_request"
      ],
      "ci_cd_jobs": [
        "build",
        "test",
        "deploy"
      ]
    }
  },
  "security_settings": {
    "validate_inputs": true,
    "sanitize_outputs": true,
    "secure_file_operations": true
  }
}