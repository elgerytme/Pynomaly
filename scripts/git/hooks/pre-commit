#!/bin/bash
# Pre-commit hook for Pynomaly project
# - Validates branch naming conventions
# - Runs partial linting on staged files

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}üîç Running pre-commit checks...${NC}"

# 1. Branch naming validation
echo -e "${YELLOW}1Ô∏è‚É£ Validating branch name...${NC}"

CURRENT_BRANCH=$(git branch --show-current 2>/dev/null)
if [ -z "$CURRENT_BRANCH" ]; then
    echo -e "${RED}‚ùå Error: Not in a git repository or no current branch${NC}"
    exit 1
fi

# Skip branch validation for main branches
if [[ "$CURRENT_BRANCH" =~ ^(main|master|develop)$ ]]; then
    echo -e "${GREEN}‚úÖ Main branch '$CURRENT_BRANCH' - skipping validation${NC}"
else
    # Validate branch naming convention
    if ! [[ "$CURRENT_BRANCH" =~ ^(feature|bugfix|hotfix|release|chore|docs)/[a-z0-9-]+$ ]]; then
        echo -e "${RED}‚ùå Error: Branch name '$CURRENT_BRANCH' does not follow naming convention${NC}"
        echo -e "${RED}Expected format: <type>/<name>${NC}"
        echo -e "${RED}Valid types: feature, bugfix, hotfix, release, chore, docs${NC}"
        echo -e "${RED}Name must contain only lowercase letters, numbers, and hyphens${NC}"
        echo -e "${RED}Examples: feature/anomaly-detection, bugfix/memory-leak, docs/api-updates${NC}"
        exit 1
    fi
    echo -e "${GREEN}‚úÖ Branch name '$CURRENT_BRANCH' follows naming convention${NC}"
fi

# 2. Partial linting on staged files
echo -e "${YELLOW}2Ô∏è‚É£ Running partial linting on staged files...${NC}"

# Get list of staged Python files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(py)$' || true)

if [ -z "$STAGED_FILES" ]; then
    echo -e "${GREEN}‚úÖ No Python files staged for commit${NC}"
else
    echo -e "${YELLOW}Checking staged Python files:${NC}"
    echo "$STAGED_FILES" | while read -r file; do
        echo -e "${YELLOW}  - $file${NC}"
    done
    
    # Create temporary file with staged file list
    TEMP_FILE=$(mktemp)
    echo "$STAGED_FILES" > "$TEMP_FILE"
    
    # Run linting on staged files only
    echo -e "${YELLOW}Running ruff check on staged files...${NC}"
    if command -v hatch >/dev/null 2>&1; then
        # Use hatch if available
        if ! xargs -a "$TEMP_FILE" hatch env run lint:ruff check --select=E,W,F --no-fix; then
            echo -e "${RED}‚ùå Ruff check failed on staged files${NC}"
            rm -f "$TEMP_FILE"
            exit 1
        fi
    else
        # Fallback to direct ruff call
        if command -v ruff >/dev/null 2>&1; then
            if ! xargs -a "$TEMP_FILE" ruff check --select=E,W,F --no-fix; then
                echo -e "${RED}‚ùå Ruff check failed on staged files${NC}"
                rm -f "$TEMP_FILE"
                exit 1
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è Ruff not available, skipping lint check${NC}"
        fi
    fi
    
    # Basic import check
    echo -e "${YELLOW}Checking Python imports...${NC}"
    while IFS= read -r file; do
        if [ -f "$file" ]; then
            if ! python -m py_compile "$file"; then
                echo -e "${RED}‚ùå Python compilation failed for $file${NC}"
                rm -f "$TEMP_FILE"
                exit 1
            fi
        fi
    done < "$TEMP_FILE"
    
    rm -f "$TEMP_FILE"
    echo -e "${GREEN}‚úÖ Partial linting passed${NC}"
fi

# 3. Check for common issues
echo -e "${YELLOW}3Ô∏è‚É£ Checking for common issues...${NC}"

# Check for merge conflict markers
if git diff --cached | grep -E '^[+].*(<{7}|>{7}|={7})'; then
    echo -e "${RED}‚ùå Merge conflict markers found in staged files${NC}"
    exit 1
fi

# Check for debug statements (basic check)
DEBUG_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(py)$' | xargs grep -l "pdb\|debugger\|breakpoint()" 2>/dev/null || true)
if [ -n "$DEBUG_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Debug statements found in:${NC}"
    echo "$DEBUG_FILES" | while read -r file; do
        echo -e "${YELLOW}  - $file${NC}"
    done
    echo -e "${YELLOW}Please remove debug statements before committing${NC}"
    # Don't exit here, just warn
fi

echo -e "${GREEN}‚úÖ All pre-commit checks passed!${NC}"
echo -e "${GREEN}üöÄ Ready to commit${NC}"
