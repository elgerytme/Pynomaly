#!/usr/bin/env python3
"""
Test script to verify GitHub Actions integration for SARIF aggregation.
"""

import json
import os
import tempfile
import subprocess
import sys
from pathlib import Path


def create_mock_sarif_files(temp_dir):
    """Create mock SARIF files similar to what would be generated by security tools."""
    
    # Mock bandit SARIF
    bandit_sarif = {
        "version": "2.1.0",
        "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json",
        "runs": [
            {
                "tool": {
                    "driver": {
                        "name": "bandit",
                        "version": "1.7.5"
                    }
                },
                "results": [
                    {
                        "ruleId": "B101",
                        "level": "warning",
                        "message": {"text": "Test assert usage"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "src/test.py"}}}]
                    }
                ]
            }
        ]
    }
    
    # Mock pip-audit SARIF
    pip_audit_sarif = {
        "version": "2.1.0",
        "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json",
        "runs": [
            {
                "tool": {
                    "driver": {
                        "name": "pip-audit",
                        "version": "2.6.1"
                    }
                },
                "results": [
                    {
                        "ruleId": "VULN-001",
                        "level": "error",
                        "message": {"text": "Vulnerability in package"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "requirements.txt"}}}]
                    }
                ]
            }
        ]
    }
    
    # Create directories and files
    bandit_dir = os.path.join(temp_dir, "bandit-results")
    pip_audit_dir = os.path.join(temp_dir, "pip-audit-results")
    os.makedirs(bandit_dir)
    os.makedirs(pip_audit_dir)
    
    bandit_file = os.path.join(bandit_dir, "bandit.sarif")
    pip_audit_file = os.path.join(pip_audit_dir, "pip-audit.sarif")
    
    with open(bandit_file, 'w') as f:
        json.dump(bandit_sarif, f, indent=2)
    
    with open(pip_audit_file, 'w') as f:
        json.dump(pip_audit_sarif, f, indent=2)
    
    return [bandit_file, pip_audit_file]


def test_github_actions_workflow():
    """Test the GitHub Actions workflow steps."""
    
    with tempfile.TemporaryDirectory() as temp_dir:
        print(f"üß™ Testing GitHub Actions workflow in {temp_dir}")
        
        # Step 1: Create mock SARIF files (simulating downloaded artifacts)
        sarif_files = create_mock_sarif_files(temp_dir)
        print(f"‚úÖ Created {len(sarif_files)} mock SARIF files")
        
        # Step 2: Create security-results directory
        security_results_dir = os.path.join(temp_dir, "security-results")
        os.makedirs(security_results_dir)
        
        # Step 3: Find SARIF files (simulating find command)
        found_files = []
        for root, dirs, files in os.walk(temp_dir):
            for file in files:
                if file.endswith('.sarif') and 'combined' not in file:
                    found_files.append(os.path.join(root, file))
        
        print(f"‚úÖ Found {len(found_files)} SARIF files: {[os.path.basename(f) for f in found_files]}")
        
        # Step 4: Run aggregation script
        output_file = os.path.join(security_results_dir, "combined-security.sarif")
        
        # Build command
        cmd = [
            sys.executable, 
            "scripts/aggregate_sarif.py",
            "--output", output_file
        ] + found_files
        
        print(f"üîß Running: {' '.join(cmd)}")
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, cwd=Path(__file__).parent.parent)
            
            if result.returncode == 0:
                print("‚úÖ Aggregation script executed successfully")
                print(f"üìÑ Output: {result.stdout}")
                if result.stderr:
                    print(f"‚ö†Ô∏è  Stderr: {result.stderr}")
            else:
                print(f"‚ùå Script failed with return code {result.returncode}")
                print(f"üìÑ Stdout: {result.stdout}")
                print(f"‚ùå Stderr: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error running script: {e}")
            return False
        
        # Step 5: Verify output file
        if os.path.exists(output_file):
            with open(output_file, 'r') as f:
                combined_data = json.load(f)
            
            print(f"‚úÖ Combined SARIF file created with {len(combined_data['runs'])} runs")
            
            # Verify structure
            assert combined_data['version'] == '2.1.0'
            assert '$schema' in combined_data
            assert 'runs' in combined_data
            assert len(combined_data['runs']) == 2  # bandit + pip-audit
            
            # Check that runs from both tools are present
            tools = [run['tool']['driver']['name'] for run in combined_data['runs']]
            assert 'bandit' in tools
            assert 'pip-audit' in tools
            
            print("‚úÖ All validation checks passed")
            return True
        else:
            print(f"‚ùå Output file not created: {output_file}")
            return False


def test_empty_sarif_handling():
    """Test handling when no SARIF files are found."""
    
    with tempfile.TemporaryDirectory() as temp_dir:
        print(f"üß™ Testing empty SARIF handling in {temp_dir}")
        
        security_results_dir = os.path.join(temp_dir, "security-results")
        os.makedirs(security_results_dir)
        
        # Create empty combined SARIF (simulating the else branch in GitHub Actions)
        output_file = os.path.join(security_results_dir, "combined-security.sarif")
        
        empty_sarif = {
            "version": "2.1.0",
            "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json",
            "runs": []
        }
        
        with open(output_file, 'w') as f:
            json.dump(empty_sarif, f, indent=2)
        
        # Verify the file
        with open(output_file, 'r') as f:
            data = json.load(f)
        
        assert data['version'] == '2.1.0'
        assert len(data['runs']) == 0
        
        print("‚úÖ Empty SARIF handling test passed")
        return True


if __name__ == "__main__":
    print("üöÄ Testing GitHub Actions integration for SARIF aggregation...")
    
    try:
        # Test main workflow
        if not test_github_actions_workflow():
            sys.exit(1)
        
        # Test edge case
        if not test_empty_sarif_handling():
            sys.exit(1)
            
        print("\nüéâ All GitHub Actions integration tests passed!")
        print("‚úÖ The workflow should work correctly in GitHub Actions environment")
        
    except Exception as e:
        print(f"\n‚ùå Test failed: {e}")
        sys.exit(1)
