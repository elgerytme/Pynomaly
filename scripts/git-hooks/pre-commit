#!/bin/bash
#
# Domain Boundary Enforcement Pre-commit Hook
# ===========================================
# Validates domain boundaries and repository organization before allowing commits
# Enhanced with automatic domain detection and smart violation fixing
#

set -e

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Repository root
REPO_ROOT="$(git rev-parse --show-toplevel)"
DOMAIN_VALIDATOR="$REPO_ROOT/scripts/domain_boundary_validator.py"
DOMAIN_CLI="$REPO_ROOT/scripts/domain_cli.py"
IMPORT_CONSOLIDATION_VALIDATOR="$REPO_ROOT/scripts/import_consolidation_validator.py"
IMPORT_REFACTOR="$REPO_ROOT/scripts/import_consolidation_refactor.py"
SINGLE_PACKAGE_VALIDATOR="$REPO_ROOT/tools/validate_single_package_development.py"
VALIDATION_SCRIPT="$REPO_ROOT/scripts/validation/validate_organization.py"

# Configuration
AUTO_FIX_VIOLATIONS=${AUTO_FIX_VIOLATIONS:-true}
DETECT_NEW_DOMAINS=${DETECT_NEW_DOMAINS:-true}
BLOCK_ON_HIGH_CONFIDENCE_DOMAINS=${BLOCK_ON_HIGH_CONFIDENCE_DOMAINS:-true}
CONFIDENCE_THRESHOLD=${CONFIDENCE_THRESHOLD:-0.8}
AUTO_FIX_IMPORTS=${AUTO_FIX_IMPORTS:-true}

echo -e "${BLUE}üîç Pre-commit: Domain Boundary Enforcement${NC}"
echo -e "${CYAN}===========================================${NC}"

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to run domain validation
run_domain_validation() {
    echo -e "${BLUE}üîç Step 1: Domain Boundary Validation${NC}"
    
    if [ ! -f "$DOMAIN_VALIDATOR" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Domain validator not found, skipping domain validation${NC}"
        return 0
    fi
    
    # Get list of changed files
    CHANGED_FILES=$(git diff --cached --name-only | tr '\n' ' ')
    
    if [ -z "$CHANGED_FILES" ]; then
        echo -e "${GREEN}‚úÖ No files changed, skipping domain validation${NC}"
        return 0
    fi
    
    echo -e "${BLUE}   Analyzing changed files for domain violations...${NC}"
    
    # Run domain validation with change analysis
    if python3 "$DOMAIN_VALIDATOR" --analyze-changes --detect-new-domains --confidence-threshold "$CONFIDENCE_THRESHOLD" --output "pre_commit_domain_report.json"; then
        VALIDATION_EXIT_CODE=$?
        
        # Parse results
        if [ -f "pre_commit_domain_report.json" ]; then
            VIOLATIONS=$(python3 -c "
import json, sys
try:
    with open('pre_commit_domain_report.json', 'r') as f:
        report = json.load(f)
    print(report['summary']['total_violations'])
except:
    print('0')
" 2>/dev/null || echo "0")
            
            NEW_DOMAINS=$(python3 -c "
import json, sys
try:
    with open('pre_commit_domain_report.json', 'r') as f:
        report = json.load(f)
    print(report['summary']['new_domains_detected'])
except:
    print('0')
" 2>/dev/null || echo "0")
            
            HIGH_CONF_DOMAINS=$(python3 -c "
import json, sys
try:
    with open('pre_commit_domain_report.json', 'r') as f:
        report = json.load(f)
    high_conf = [d for d in report['new_domain_detections'] if d['confidence'] >= $CONFIDENCE_THRESHOLD]
    print(','.join([d['domain_name'] for d in high_conf]))
except:
    print('')
" 2>/dev/null || echo "")
        else
            VIOLATIONS=0
            NEW_DOMAINS=0
            HIGH_CONF_DOMAINS=""
        fi
        
        # Handle violations
        if [ "$VIOLATIONS" -gt 0 ]; then
            echo -e "${RED}‚ùå Found $VIOLATIONS domain boundary violations${NC}"
            
            if [ "$AUTO_FIX_VIOLATIONS" = "true" ]; then
                echo -e "${BLUE}üîß Attempting to auto-fix violations...${NC}"
                
                if command_exists "$DOMAIN_CLI"; then
                    python3 "$DOMAIN_CLI" validate --fix
                    
                    # Re-validate after auto-fix
                    python3 "$DOMAIN_VALIDATOR" --analyze-changes --output "post_fix_domain_report.json" >/dev/null 2>&1
                    REMAINING_VIOLATIONS=$(python3 -c "
import json
try:
    with open('post_fix_domain_report.json', 'r') as f:
        report = json.load(f)
    print(report['summary']['total_violations'])
except:
    print('$VIOLATIONS')
" 2>/dev/null || echo "$VIOLATIONS")
                    
                    if [ "$REMAINING_VIOLATIONS" -lt "$VIOLATIONS" ]; then
                        echo -e "${GREEN}‚úÖ Auto-fixed $(($VIOLATIONS - $REMAINING_VIOLATIONS)) violations${NC}"
                        VIOLATIONS=$REMAINING_VIOLATIONS
                    else
                        echo -e "${YELLOW}‚ö†Ô∏è  Could not auto-fix violations${NC}"
                    fi
                fi
            fi
            
            if [ "$VIOLATIONS" -gt 0 ]; then
                echo -e "${RED}‚ùå $VIOLATIONS domain boundary violations remain${NC}"
                echo -e "${BLUE}üí° Manual fixes required:${NC}"
                echo "   ‚Ä¢ Run: python scripts/domain_cli.py validate"
                echo "   ‚Ä¢ Fix violations manually"
                echo "   ‚Ä¢ Use --no-verify to skip (not recommended)"
                return 1
            fi
        fi
        
        # Handle new domain detections
        if [ "$NEW_DOMAINS" -gt 0 ]; then
            echo -e "${PURPLE}üÜï Detected $NEW_DOMAINS potential new domains${NC}"
            
            if [ -n "$HIGH_CONF_DOMAINS" ] && [ "$BLOCK_ON_HIGH_CONFIDENCE_DOMAINS" = "true" ]; then
                echo -e "${YELLOW}‚ö†Ô∏è  High-confidence new domains detected: $HIGH_CONF_DOMAINS${NC}"
                echo -e "${BLUE}üí° Consider creating packages for these domains:${NC}"
                
                IFS=',' read -ra DOMAIN_ARRAY <<< "$HIGH_CONF_DOMAINS"
                for domain in "${DOMAIN_ARRAY[@]}"; do
                    if [ -n "$domain" ]; then
                        echo "   python scripts/create_domain_package.py $domain --intelligent"
                    fi
                done
                
                echo ""
                read -p "Create packages now? [y/N] " -n 1 -r
                echo
                if [[ $REPLY =~ ^[Yy]$ ]]; then
                    for domain in "${DOMAIN_ARRAY[@]}"; do
                        if [ -n "$domain" ]; then
                            echo -e "${BLUE}üöÄ Creating package: $domain${NC}"
                            python3 "$REPO_ROOT/scripts/create_domain_package.py" "$domain" --intelligent --skip-samples
                        fi
                    done
                    echo -e "${GREEN}‚úÖ Packages created successfully${NC}"
                else
                    echo -e "${YELLOW}‚ö†Ô∏è  Proceeding without creating packages${NC}"
                    echo "   Note: Consider creating them before merging"
                fi
            fi
        fi
        
        echo -e "${GREEN}‚úÖ Domain boundary validation passed${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Domain boundary validation failed${NC}"
        return 1
    fi
}

# Function to run import consolidation validation
run_import_consolidation_check() {
    echo -e "${BLUE}üîç Step 2: Import Consolidation Validation${NC}"
    
    if [ ! -f "$IMPORT_CONSOLIDATION_VALIDATOR" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Import consolidation validator not found, skipping${NC}"
        return 0
    fi
    
    # Get list of changed Python files
    CHANGED_PY_FILES=$(git diff --cached --name-only | grep "\.py$" | grep "^src/packages/" || true)
    
    if [ -z "$CHANGED_PY_FILES" ]; then
        echo -e "${GREEN}‚úÖ No Python files in packages changed${NC}"
        return 0
    fi
    
    echo -e "${BLUE}   Checking import consolidation in changed files...${NC}"
    
    # Run import consolidation validation on changed files
    if python3 "$IMPORT_CONSOLIDATION_VALIDATOR" --changed-files $CHANGED_PY_FILES --fail-on-violations; then
        echo -e "${GREEN}‚úÖ Import consolidation validation passed${NC}"
        return 0
    else
        VIOLATIONS_FOUND=$?
        echo -e "${RED}‚ùå Found import consolidation violations${NC}"
        
        if [ "$AUTO_FIX_IMPORTS" = "true" ] && [ -f "$IMPORT_REFACTOR" ]; then
            echo -e "${BLUE}üîß Attempting to auto-fix import violations...${NC}"
            
            # Run import refactoring on changed files
            if python3 "$IMPORT_REFACTOR" --files $CHANGED_PY_FILES; then
                echo -e "${GREEN}‚úÖ Auto-fixed import consolidation violations${NC}"
                
                # Re-stage the fixed files
                for file in $CHANGED_PY_FILES; do
                    git add "$file"
                done
                
                echo -e "${BLUE}üìù Fixed files have been re-staged${NC}"
                
                # Re-validate to ensure fixes worked
                if python3 "$IMPORT_CONSOLIDATION_VALIDATOR" --changed-files $CHANGED_PY_FILES --fail-on-violations; then
                    echo -e "${GREEN}‚úÖ Import consolidation validation passed after auto-fix${NC}"
                    return 0
                else
                    echo -e "${YELLOW}‚ö†Ô∏è  Some violations could not be auto-fixed${NC}"
                fi
            else
                echo -e "${YELLOW}‚ö†Ô∏è  Could not auto-fix import violations${NC}"
            fi
        fi
        
        echo -e "${RED}‚ùå Import consolidation violations remain${NC}"
        echo -e "${BLUE}üí° Manual fixes required:${NC}"
        echo "   ‚Ä¢ Run: python scripts/import_consolidation_validator.py --changed-files <files>"
        echo "   ‚Ä¢ Fix violations manually or run: python scripts/import_consolidation_refactor.py --files <files>"
        echo "   ‚Ä¢ Use --no-verify to skip (not recommended)"
        return 1
    fi
}

# Function to run single package development check
run_single_package_check() {
    echo -e "${BLUE}üîç Step 3: Single Package Development Check${NC}"
    
    # Get changed files in src/packages/
    PACKAGE_FILES=$(git diff --cached --name-only | grep "^src/packages/" || true)
    
    if [ -z "$PACKAGE_FILES" ]; then
        echo -e "${GREEN}‚úÖ No package files changed${NC}"
        return 0
    fi
    
    # Extract unique package paths
    PACKAGES=$(echo "$PACKAGE_FILES" | cut -d'/' -f3 | sort -u)
    PACKAGE_COUNT=$(echo "$PACKAGES" | wc -l | tr -d ' ')
    
    if [ "$PACKAGE_COUNT" -gt 1 ]; then
        echo -e "${RED}‚ùå Changes span multiple packages ($PACKAGE_COUNT packages):${NC}"
        echo "$PACKAGES" | sed 's/^/   ‚Ä¢ /'
        echo ""
        echo -e "${BLUE}üí° Single package development rule violated${NC}"
        echo "   Only one package should be modified per commit"
        echo ""
        echo -e "${YELLOW}Options:${NC}"
        echo "   1. Split changes into separate commits"
        echo "   2. Create BREAKING_CHANGE_JUSTIFICATION.md for cross-package changes"
        echo "   3. Use --no-verify to skip (not recommended)"
        return 1
    else
        echo -e "${GREEN}‚úÖ Single package rule compliance verified${NC}"
        echo -e "${BLUE}   Modified package: $(echo "$PACKAGES" | head -1)${NC}"
        return 0
    fi
}

# Check if validation scripts exist
if [ ! -f "$DOMAIN_VALIDATOR" ] && [ ! -f "$VALIDATION_SCRIPT" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  No validation scripts found, running basic checks only${NC}"
fi

# Run all validation steps
VALIDATION_FAILED=false

# Step 1: Domain boundary validation
if ! run_domain_validation; then
    VALIDATION_FAILED=true
fi

# Step 2: Import consolidation validation
if ! run_import_consolidation_check; then
    VALIDATION_FAILED=true
fi

# Step 3: Single package development check
if ! run_single_package_check; then
    VALIDATION_FAILED=true
fi

# Step 4: Repository organization validation (if script exists)
if [ -f "$VALIDATION_SCRIPT" ]; then
    echo -e "${BLUE}üîç Step 4: Repository Organization Validation${NC}"
    if python3 "$VALIDATION_SCRIPT" --quiet; then
        echo -e "${GREEN}‚úÖ Repository organization validation passed${NC}"
    else
        echo -e "${RED}‚ùå Repository organization validation failed${NC}"
        echo ""
        echo -e "${YELLOW}The following issues were found:${NC}"
        if [ -f "$REPO_ROOT/scripts/validation/organization_report.md" ]; then
            grep -E "^(‚ùå|‚ö†Ô∏è)" "$REPO_ROOT/scripts/validation/organization_report.md" | head -10
        fi
        echo ""
        echo -e "${BLUE}Full report available at: scripts/validation/organization_report.md${NC}"
        echo ""
        echo -e "${YELLOW}Options:${NC}"
        echo "1. Fix the issues manually"
        echo "2. Run: scripts/cleanup/auto_organize.py"
        echo "3. Use --no-verify to skip this check (not recommended)"
        echo ""
        VALIDATION_FAILED=true
    fi
fi

# Exit early if any validation failed
if [ "$VALIDATION_FAILED" = true ]; then
    echo -e "${RED}‚ùå Pre-commit validation failed${NC}"
    echo -e "${BLUE}üí° Quick fixes:${NC}"
    echo "   ‚Ä¢ Domain issues: python scripts/domain_cli.py validate --fix"
    echo "   ‚Ä¢ Import consolidation: python scripts/import_consolidation_refactor.py --files <files>"
    echo "   ‚Ä¢ Single package: split commits by package"
    echo "   ‚Ä¢ Organization: scripts/cleanup/auto_organize.py"
    echo ""
    exit 1
fi

# Quick check for common issues in staged files
echo -e "${BLUE}üîç Checking staged files for common issues...${NC}"

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only)

# Check for prohibited files in root
ROOT_VIOLATIONS=""
for file in $STAGED_FILES; do
    # Check if file is in root directory
    if [[ "$file" != *"/"* ]]; then
        case "$file" in
            README.md|CHANGELOG.md|LICENSE|pyproject.toml|.gitignore|.python-version)
                # These are allowed
                ;;
            .*)
                # Hidden files should be checked
                if [[ "$file" =~ ^\.(env|config|buck|docker|eslint|prettier|style|mutmut|percy) ]]; then
                    ROOT_VIOLATIONS="$ROOT_VIOLATIONS\n  - $file (should be in scripts/config/)"
                fi
                ;;
            test_*|*_test.*|temp*|tmp*|scratch*|debug*|backup*)
                ROOT_VIOLATIONS="$ROOT_VIOLATIONS\n  - $file (prohibited in root)"
                ;;
            *.py)
                if [[ "$file" != "setup.py" ]]; then
                    ROOT_VIOLATIONS="$ROOT_VIOLATIONS\n  - $file (Python files should be in src/)"
                fi
                ;;
            *_GUIDE.md|*_PLAN.md|*_SUMMARY.md|*_REPORT.md)
                ROOT_VIOLATIONS="$ROOT_VIOLATIONS\n  - $file (documentation should be in docs/)"
                ;;
        esac
    fi
done

if [ -n "$ROOT_VIOLATIONS" ]; then
    echo -e "${RED}‚ùå Found prohibited files in root directory:${NC}"
    echo -e "$ROOT_VIOLATIONS"
    echo ""
    echo -e "${YELLOW}Please move these files to appropriate directories:${NC}"
    echo "  - Configuration files ‚Üí scripts/config/"
    echo "  - Python files ‚Üí src/"
    echo "  - Documentation ‚Üí docs/"
    echo "  - Temporary files ‚Üí remove or move to temp/ directories"
    echo ""
    exit 1
fi

# Check for temporary files being committed
TEMP_FILES=""
for file in $STAGED_FILES; do
    case "$file" in
        *.tmp|*.temp|*.bak|*.backup|*~|*.swp|*.swo)
            TEMP_FILES="$TEMP_FILES\n  - $file"
            ;;
        */temp/*|*/tmp/*|*/cache/*|*/scratch/*|*/debug/*)
            # These are in temp directories, which is okay
            ;;
        *temp*|*tmp*|*scratch*|*debug*)
            if [[ "$file" =~ (temp|tmp|scratch|debug) ]]; then
                TEMP_FILES="$TEMP_FILES\n  - $file"
            fi
            ;;
    esac
done

if [ -n "$TEMP_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Found temporary files being committed:${NC}"
    echo -e "$TEMP_FILES"
    echo ""
    echo -e "${YELLOW}Are you sure you want to commit these temporary files?${NC}"
    echo "If not, run: git reset HEAD <file> to unstage them"
    echo ""
    read -p "Continue with commit? [y/N] " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}Commit aborted by user${NC}"
        exit 1
    fi
fi

# Check for large files (>10MB)
echo -e "${BLUE}üîç Checking for large files...${NC}"
LARGE_FILES=""
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo 0)
        if [ "$size" -gt 10485760 ]; then  # 10MB
            size_mb=$((size / 1048576))
            LARGE_FILES="$LARGE_FILES\n  - $file (${size_mb}MB)"
        fi
    fi
done

if [ -n "$LARGE_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Found large files being committed:${NC}"
    echo -e "$LARGE_FILES"
    echo ""
    echo -e "${YELLOW}Consider:${NC}"
    echo "1. Using Git LFS for large files"
    echo "2. Adding to .gitignore if it's a generated file"
    echo "3. Storing externally and linking"
    echo ""
    read -p "Continue with commit? [y/N] " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}Commit aborted by user${NC}"
        exit 1
    fi
fi

# Final success message and cleanup
echo -e "${CYAN}===========================================${NC}"
echo -e "${GREEN}‚úÖ All pre-commit checks passed!${NC}"
echo -e "${BLUE}üéâ Domain boundaries are compliant${NC}"

# Clean up temporary files
rm -f pre_commit_domain_report.json post_fix_domain_report.json

echo -e "${CYAN}===========================================${NC}"
exit 0