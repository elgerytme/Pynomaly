#!/bin/bash
#
# Repository Organization Pre-commit Hook
# =====================================
# Validates repository organization before allowing commits
#

set -e

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Repository root
REPO_ROOT="$(git rev-parse --show-toplevel)"
VALIDATION_SCRIPT="$REPO_ROOT/scripts/validation/validate_organization.py"

echo -e "${BLUE}üîç Pre-commit: Validating repository organization...${NC}"

# Check if validation script exists
if [ ! -f "$VALIDATION_SCRIPT" ]; then
    echo -e "${RED}‚ùå Organization validation script not found: $VALIDATION_SCRIPT${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Skipping organization validation${NC}"
    exit 0
fi

# Run organization validation
if python3 "$VALIDATION_SCRIPT" --quiet; then
    echo -e "${GREEN}‚úÖ Repository organization validation passed${NC}"
else
    echo -e "${RED}‚ùå Repository organization validation failed${NC}"
    echo ""
    echo -e "${YELLOW}The following issues were found:${NC}"
    cat "$REPO_ROOT/scripts/validation/organization_report.md" | grep -E "^(‚ùå|‚ö†Ô∏è)" | head -10
    echo ""
    echo -e "${BLUE}Full report available at: scripts/validation/organization_report.md${NC}"
    echo ""
    echo -e "${YELLOW}Options:${NC}"
    echo "1. Fix the issues manually"
    echo "2. Run: scripts/cleanup/auto_organize.py"
    echo "3. Use --no-verify to skip this check (not recommended)"
    echo ""
    exit 1
fi

# Quick check for common issues in staged files
echo -e "${BLUE}üîç Checking staged files for common issues...${NC}"

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only)

# Check for prohibited files in root
ROOT_VIOLATIONS=""
for file in $STAGED_FILES; do
    # Check if file is in root directory
    if [[ "$file" != *"/"* ]]; then
        case "$file" in
            README.md|CHANGELOG.md|LICENSE|pyproject.toml|.gitignore|.python-version)
                # These are allowed
                ;;
            .*)
                # Hidden files should be checked
                if [[ "$file" =~ ^\.(env|config|buck|docker|eslint|prettier|style|mutmut|percy) ]]; then
                    ROOT_VIOLATIONS="$ROOT_VIOLATIONS\n  - $file (should be in scripts/config/)"
                fi
                ;;
            test_*|*_test.*|temp*|tmp*|scratch*|debug*|backup*)
                ROOT_VIOLATIONS="$ROOT_VIOLATIONS\n  - $file (prohibited in root)"
                ;;
            *.py)
                if [[ "$file" != "setup.py" ]]; then
                    ROOT_VIOLATIONS="$ROOT_VIOLATIONS\n  - $file (Python files should be in src/)"
                fi
                ;;
            *_GUIDE.md|*_PLAN.md|*_SUMMARY.md|*_REPORT.md)
                ROOT_VIOLATIONS="$ROOT_VIOLATIONS\n  - $file (documentation should be in docs/)"
                ;;
        esac
    fi
done

if [ -n "$ROOT_VIOLATIONS" ]; then
    echo -e "${RED}‚ùå Found prohibited files in root directory:${NC}"
    echo -e "$ROOT_VIOLATIONS"
    echo ""
    echo -e "${YELLOW}Please move these files to appropriate directories:${NC}"
    echo "  - Configuration files ‚Üí scripts/config/"
    echo "  - Python files ‚Üí src/"
    echo "  - Documentation ‚Üí docs/"
    echo "  - Temporary files ‚Üí remove or move to temp/ directories"
    echo ""
    exit 1
fi

# Check for temporary files being committed
TEMP_FILES=""
for file in $STAGED_FILES; do
    case "$file" in
        *.tmp|*.temp|*.bak|*.backup|*~|*.swp|*.swo)
            TEMP_FILES="$TEMP_FILES\n  - $file"
            ;;
        */temp/*|*/tmp/*|*/cache/*|*/scratch/*|*/debug/*)
            # These are in temp directories, which is okay
            ;;
        *temp*|*tmp*|*scratch*|*debug*)
            if [[ "$file" =~ (temp|tmp|scratch|debug) ]]; then
                TEMP_FILES="$TEMP_FILES\n  - $file"
            fi
            ;;
    esac
done

if [ -n "$TEMP_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Found temporary files being committed:${NC}"
    echo -e "$TEMP_FILES"
    echo ""
    echo -e "${YELLOW}Are you sure you want to commit these temporary files?${NC}"
    echo "If not, run: git reset HEAD <file> to unstage them"
    echo ""
    read -p "Continue with commit? [y/N] " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}Commit aborted by user${NC}"
        exit 1
    fi
fi

# Check for large files (>10MB)
echo -e "${BLUE}üîç Checking for large files...${NC}"
LARGE_FILES=""
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo 0)
        if [ "$size" -gt 10485760 ]; then  # 10MB
            size_mb=$((size / 1048576))
            LARGE_FILES="$LARGE_FILES\n  - $file (${size_mb}MB)"
        fi
    fi
done

if [ -n "$LARGE_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Found large files being committed:${NC}"
    echo -e "$LARGE_FILES"
    echo ""
    echo -e "${YELLOW}Consider:${NC}"
    echo "1. Using Git LFS for large files"
    echo "2. Adding to .gitignore if it's a generated file"
    echo "3. Storing externally and linking"
    echo ""
    read -p "Continue with commit? [y/N] " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}Commit aborted by user${NC}"
        exit 1
    fi
fi

echo -e "${GREEN}‚úÖ Pre-commit checks passed${NC}"
exit 0