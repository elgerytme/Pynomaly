#!/bin/bash
#
# Domain Boundary Enforcement Post-commit Hook
# ============================================
# Updates domain metrics and generates compliance reports after successful commit
# Enhanced with intelligent domain monitoring and analytics
#

set -e

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Repository root and scripts
REPO_ROOT="$(git rev-parse --show-toplevel)"
DOMAIN_CLI="$REPO_ROOT/scripts/domain_cli.py"
DOMAIN_VALIDATOR="$REPO_ROOT/scripts/domain_boundary_validator.py"
METRICS_SCRIPT="$REPO_ROOT/scripts/monitoring/organization_monitor.py"
VALIDATION_SCRIPT="$REPO_ROOT/scripts/validation/validate_organization.py"

echo -e "${BLUE}📈 Post-commit: Domain Compliance Analytics${NC}"
echo -e "${CYAN}===========================================${NC}"

# Configuration
UPDATE_METRICS=${UPDATE_METRICS:-true}
GENERATE_QUICK_REPORT=${GENERATE_QUICK_REPORT:-true}
MONITOR_DOMAIN_CHANGES=${MONITOR_DOMAIN_CHANGES:-true}

# Function to update domain metrics
update_domain_metrics() {
    echo -e "${BLUE}📊 Updating domain metrics...${NC}"
    
    if [ -f "$DOMAIN_CLI" ]; then
        # Generate current domain status
        python3 "$DOMAIN_CLI" status --json > "post_commit_domain_status.json" 2>/dev/null || {
            echo -e "${BLUE}   Could not generate domain status${NC}"
            return
        }
        
        # Create metrics directory if it doesn't exist
        METRICS_DIR="$REPO_ROOT/metrics/domain_compliance"
        mkdir -p "$METRICS_DIR"
        
        # Save timestamped metrics
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        cp "post_commit_domain_status.json" "$METRICS_DIR/domain_status_${TIMESTAMP}.json"
        
        # Update latest status
        cp "post_commit_domain_status.json" "$METRICS_DIR/latest_domain_status.json"
        
        echo -e "${GREEN}✅ Domain metrics updated${NC}"
        rm -f "post_commit_domain_status.json"
    fi
}

# Function to monitor domain changes in this commit
monitor_domain_changes() {
    echo -e "${BLUE}🔍 Monitoring domain changes in commit...${NC}"
    
    # Get commit info
    COMMIT_HASH=$(git rev-parse HEAD)
    COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
    
    # Get changed files
    CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD)
    
    # Check if any domain packages were modified
    DOMAIN_CHANGES=""
    for file in $CHANGED_FILES; do
        if [[ "$file" =~ ^src/packages/ ]]; then
            PACKAGE_NAME=$(echo "$file" | cut -d'/' -f3)
            if [[ ! "$DOMAIN_CHANGES" =~ "$PACKAGE_NAME" ]]; then
                DOMAIN_CHANGES="$DOMAIN_CHANGES $PACKAGE_NAME"
            fi
        fi
    done
    
    if [ -n "$DOMAIN_CHANGES" ]; then
        echo -e "${PURPLE}📝 Domain packages modified:${DOMAIN_CHANGES}${NC}"
        
        # Log domain changes
        DOMAIN_LOG="$REPO_ROOT/metrics/domain_compliance/domain_changes.log"
        mkdir -p "$(dirname "$DOMAIN_LOG")"
        echo "$(date -Iseconds) | $COMMIT_HASH | $COMMIT_MESSAGE |$DOMAIN_CHANGES" >> "$DOMAIN_LOG"
        
        # Run quick validation on changed packages
        if [ -f "$DOMAIN_VALIDATOR" ]; then
            echo -e "${BLUE}   Quick validation of changed packages...${NC}"
            for package in $DOMAIN_CHANGES; do
                if [ -d "$REPO_ROOT/src/packages/$package" ]; then
                    python3 "$DOMAIN_VALIDATOR" --root-path "src/packages/$package" --output "temp_${package}_validation.json" >/dev/null 2>&1 || true
                    
                    # Extract violation count
                    if [ -f "temp_${package}_validation.json" ]; then
                        VIOLATIONS=$(python3 -c "
import json
try:
    with open('temp_${package}_validation.json', 'r') as f:
        report = json.load(f)
    print(report['summary']['total_violations'])
except:
    print('0')
" 2>/dev/null || echo "0")
                        
                        if [ "$VIOLATIONS" -gt 0 ]; then
                            echo -e "${PURPLE}   ⚠️  Package $package: $VIOLATIONS violations${NC}"
                        fi
                        
                        rm -f "temp_${package}_validation.json"
                    fi
                fi
            done
        fi
    else
        echo -e "${BLUE}   No domain packages modified in this commit${NC}"
    fi
}

# Function to generate quick compliance report
generate_quick_report() {
    echo -e "${BLUE}📋 Generating quick compliance report...${NC}"
    
    if [ -f "$DOMAIN_VALIDATOR" ]; then
        # Run lightweight validation
        python3 "$DOMAIN_VALIDATOR" --root-path "src/packages" --output "post_commit_compliance.json" >/dev/null 2>&1 || {
            echo -e "${BLUE}   Could not generate compliance report${NC}"
            return
        }
        
        if [ -f "post_commit_compliance.json" ]; then
            # Extract key metrics
            TOTAL_VIOLATIONS=$(python3 -c "
import json
try:
    with open('post_commit_compliance.json', 'r') as f:
        report = json.load(f)
    print(report['summary']['total_violations'])
except:
    print('0')
" 2>/dev/null || echo "0")
            
            NEW_DOMAINS=$(python3 -c "
import json
try:
    with open('post_commit_compliance.json', 'r') as f:
        report = json.load(f)
    print(report['summary']['new_domains_detected'])
except:
    print('0')
" 2>/dev/null || echo "0")
            
            echo -e "${BLUE}   Violations: $TOTAL_VIOLATIONS${NC}"
            echo -e "${BLUE}   New domains: $NEW_DOMAINS${NC}"
            
            # Save to compliance history
            COMPLIANCE_DIR="$REPO_ROOT/metrics/domain_compliance"
            mkdir -p "$COMPLIANCE_DIR"
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            cp "post_commit_compliance.json" "$COMPLIANCE_DIR/compliance_${TIMESTAMP}.json"
            
            rm -f "post_commit_compliance.json"
            echo -e "${GREEN}✅ Compliance report generated${NC}"
        fi
    fi
}

# Execute post-commit actions
if [ "$UPDATE_METRICS" = "true" ]; then
    update_domain_metrics
fi

if [ "$MONITOR_DOMAIN_CHANGES" = "true" ]; then
    monitor_domain_changes
fi

if [ "$GENERATE_QUICK_REPORT" = "true" ]; then
    generate_quick_report
fi

# Legacy organization validation (if script exists)
if [ -f "$VALIDATION_SCRIPT" ]; then
    echo -e "${BLUE}📋 Repository organization status${NC}"
    if python3 "$VALIDATION_SCRIPT" --summary 2>/dev/null; then
        echo -e "${GREEN}✅ Repository organization is healthy${NC}"
    else
        echo -e "${YELLOW}⚠️  Repository organization needs attention${NC}"
        echo -e "${BLUE}Run 'scripts/validation/validate_organization.py' for details${NC}"
    fi
fi

# Update organization metrics (legacy support)
if [ -f "$METRICS_SCRIPT" ]; then
    echo -e "${BLUE}📈 Updating organization metrics...${NC}"
    python3 "$METRICS_SCRIPT" --update-metrics --quiet 2>/dev/null || true
    echo -e "${GREEN}✅ Organization metrics updated${NC}"
fi

# Repository stats
echo -e "${BLUE}📊 Repository stats:${NC}"
echo "  - Commits: $(git rev-list --count HEAD)"
echo "  - Files: $(find "$REPO_ROOT" -type f ! -path '*/.*' | wc -l | tr -d ' ')"
echo "  - Last organization check: $(date)"

# Final summary
echo -e "${CYAN}===========================================${NC}"
echo -e "${GREEN}✅ Post-commit analytics completed${NC}"
echo -e "${CYAN}===========================================${NC}"