"""
Autogenerated Positive Path Tests for All API Endpoints

This file contains autogenerated test skeletons for all endpoints documented in docs/api_routes.md.
Each test covers:
- Valid payload/request construction
- Client calls with assertion of 2xx status codes
- JSON schema validation
- Header validation
- Parameterized tests for all HTTP methods where applicable
"""

import pytest
from fastapi.testclient import TestClient
from uuid import uuid4
import json
import tempfile
import os

from pynomaly.presentation.api.app import create_app


class TestHealthEndpoints:
    """Test suite for health endpoints."""
    
    @pytest.fixture
    def client(self):
        """Create test client."""
        app = create_app()
        return TestClient(app)

    def test_health_root_get(self, client):
        """Test GET /api/v1/health/ - Health check endpoint."""
        response = client.get("/api/v1/health/")
        
        # Assert 2xx status
        assert 200 <= response.status_code < 300
        
        # Assert JSON response
        assert response.headers["content-type"] == "application/json"
        
        # Assert JSON schema
        data = response.json()
        assert isinstance(data, dict)
        assert "status" in data
        assert "timestamp" in data

    def test_health_metrics_get(self, client):
        """Test GET /api/v1/health/metrics - System metrics endpoint."""
        response = client.get("/api/v1/health/metrics")
        
        # Assert 2xx status
        assert 200 <= response.status_code < 300
        
        # Assert JSON response
        assert response.headers["content-type"] == "application/json"
        
        # Assert JSON schema
        data = response.json()
        assert isinstance(data, dict)

    def test_health_history_get(self, client):
        """Test GET /api/v1/health/history - Health history endpoint."""
        response = client.get("/api/v1/health/history")
        
        # Assert 2xx status
        assert 200 <= response.status_code < 300
        
        # Assert JSON response
        assert response.headers["content-type"] == "application/json"
        
        # Assert JSON schema
        data = response.json()
        assert isinstance(data, list)

    def test_health_summary_get(self, client):
        """Test GET /api/v1/health/summary - Health summary endpoint."""
        response = client.get("/api/v1/health/summary")
        
        # Assert 2xx status
        assert 200 <= response.status_code < 300
        
        # Assert JSON response
        assert response.headers["content-type"] == "application/json"
        
        # Assert JSON schema
        data = response.json()
        assert isinstance(data, dict)

    def test_health_ready_get(self, client):
        """Test GET /api/v1/health/ready - Readiness probe endpoint."""
        response = client.get("/api/v1/health/ready")
        
        # Assert 2xx status or 503 (service unavailable is acceptable for readiness)
        assert response.status_code in [200, 503]
        
        # Assert JSON response
        assert response.headers["content-type"] == "application/json"
        
        # Assert JSON schema
        data = response.json()
        assert isinstance(data, dict)

    def test_health_live_get(self, client):
        """Test GET /api/v1/health/live - Liveness probe endpoint."""
        response = client.get("/api/v1/health/live")
        
        # Assert 2xx status
        assert 200 <= response.status_code < 300
        
        # Assert JSON response
        assert response.headers["content-type"] == "application/json"
        
        # Assert JSON schema
        data = response.json()
        assert isinstance(data, dict)

    @pytest.mark.parametrize("endpoint,method", [
        ("/api/v1/health/", "GET"),
        ("/api/v1/health/metrics", "GET"),
        ("/api/v1/health/history", "GET"), 
        ("/api/v1/health/summary", "GET"),
        ("/api/v1/health/ready", "GET"),
        ("/api/v1/health/live", "GET"),
    ])
    def test_health_endpoints_allowed_methods(self, client, endpoint, method):
        """Test that health endpoints respond to their allowed HTTP methods."""
        response = client.request(method, endpoint)
        # Health endpoints should return 2xx or 503 for readiness checks
        assert response.status_code in [200, 503] or 200 <= response.status_code < 300


class TestAuthEndpoints:
    """Test suite for authentication endpoints."""
    
    @pytest.fixture
    def client(self):
        """Create test client."""
        app = create_app()
        return TestClient(app)

    @pytest.fixture
    def valid_login_payload(self):
        """Valid login payload for testing."""
        return {
            "username": "admin",
            "password": "admin123"
        }

    @pytest.fixture
    def valid_register_payload(self):
        """Valid register payload for testing."""
        return {
            "username": f"testuser_{uuid4().hex[:8]}",
            "email": f"test_{uuid4().hex[:8]}@example.com",
            "password": "TestPass123!",
            "full_name": "Test User"
        }

    @pytest.fixture
    def valid_api_key_payload(self):
        """Valid API key creation payload."""
        return {
            "name": "Test API Key",
            "permissions": ["read:datasets"],
            "expires_in_days": 30
        }

    def test_auth_login_post(self, client, valid_login_payload):
        """Test POST /api/v1/auth/login - User login endpoint."""
        response = client.post("/api/v1/auth/login", data=valid_login_payload)
        
        # Assert 2xx status
        assert 200 <= response.status_code < 300
        
        # Assert JSON response
        assert response.headers["content-type"] == "application/json"
        
        # Assert JSON schema
        data = response.json()
        assert isinstance(data, dict)
        assert "access_token" in data
        assert "token_type" in data

    def test_auth_refresh_post(self, client, valid_login_payload):
        """Test POST /api/v1/auth/refresh - Token refresh endpoint."""
        # First login to get a token
        login_response = client.post("/api/v1/auth/login", data=valid_login_payload)
        if login_response.status_code == 200:
            token = login_response.json().get("access_token")
            
            response = client.post("/api/v1/auth/refresh", 
                                 headers={"Authorization": f"Bearer {token}"})
            
            # Assert 2xx status
            assert 200 <= response.status_code < 300
            
            # Assert JSON response
            assert response.headers["content-type"] == "application/json"
            
            # Assert JSON schema
            data = response.json()
            assert isinstance(data, dict)

    def test_auth_register_post(self, client, valid_register_payload):
        """Test POST /api/v1/auth/register - User registration endpoint."""
        response = client.post("/api/v1/auth/register", json=valid_register_payload)
        
        # Assert 2xx status (201 for creation or 200 for success)
        assert 200 <= response.status_code < 300
        
        # Assert JSON response
        assert response.headers["content-type"] == "application/json"
        
        # Assert JSON schema
        data = response.json()
        assert isinstance(data, dict)

    def test_auth_me_get(self, client, valid_login_payload):
        """Test GET /api/v1/auth/me - Get current user endpoint."""
        # First login to get a token
        login_response = client.post("/api/v1/auth/login", data=valid_login_payload)
        if login_response.status_code == 200:
            token = login_response.json().get("access_token")
            
            response = client.get("/api/v1/auth/me", 
                                headers={"Authorization": f"Bearer {token}"})
            
            # Assert 2xx status
            assert 200 <= response.status_code < 300
            
            # Assert JSON response
            assert response.headers["content-type"] == "application/json"
            
            # Assert JSON schema
            data = response.json()
            assert isinstance(data, dict)

    def test_auth_api_keys_post(self, client, valid_login_payload, valid_api_key_payload):
        """Test POST /api/v1/auth/api-keys - Create API key endpoint."""
        # First login to get a token
        login_response = client.post("/api/v1/auth/login", data=valid_login_payload)
        if login_response.status_code == 200:
            token = login_response.json().get("access_token")
            
            response = client.post("/api/v1/auth/api-keys", 
                                 json=valid_api_key_payload,
                                 headers={"Authorization": f"Bearer {token}"})
            
            # Assert 2xx status
            assert 200 <= response.status_code < 300
            
            # Assert JSON response
            assert response.headers["content-type"] == "application/json"
            
            # Assert JSON schema
            data = response.json()
            assert isinstance(data, dict)

    def test_auth_api_keys_delete(self, client, valid_login_payload):
        """Test DELETE /api/v1/auth/api-keys/{api_key} - Delete API key endpoint."""
        # First login to get a token
        login_response = client.post("/api/v1/auth/login", data=valid_login_payload)
        if login_response.status_code == 200:
            token = login_response.json().get("access_token")
            
            # Use a test API key
            test_api_key = "test-api-key-123"
            response = client.delete(f"/api/v1/auth/api-keys/{test_api_key}", 
                                   headers={"Authorization": f"Bearer {token}"})
            
            # Assert 2xx status or 404 (not found is acceptable)
            assert response.status_code in [200, 204, 404]
            
            # Assert JSON response
            assert response.headers["content-type"] == "application/json"

    def test_auth_logout_post(self, client, valid_login_payload):
        """Test POST /api/v1/auth/logout - User logout endpoint."""
        # First login to get a token
        login_response = client.post("/api/v1/auth/login", data=valid_login_payload)
        if login_response.status_code == 200:
            token = login_response.json().get("access_token")
            
            response = client.post("/api/v1/auth/logout", 
                                 headers={"Authorization": f"Bearer {token}"})
            
            # Assert 2xx status
            assert 200 <= response.status_code < 300
            
            # Assert JSON response
            assert response.headers["content-type"] == "application/json"

    @pytest.mark.parametrize("endpoint,method,requires_auth", [
        ("/api/v1/auth/login", "POST", False),
        ("/api/v1/auth/refresh", "POST", True),
        ("/api/v1/auth/register", "POST", False),
        ("/api/v1/auth/me", "GET", True),
        ("/api/v1/auth/api-keys", "POST", True),
        ("/api/v1/auth/logout", "POST", True),
    ])
    def test_auth_endpoints_methods(self, client, endpoint, method, requires_auth, valid_login_payload):
        """Test auth endpoints with their allowed HTTP methods."""
        headers = {}
        data = {}
        
        if requires_auth:
            # Get auth token
            login_response = client.post("/api/v1/auth/login", data=valid_login_payload)
            if login_response.status_code == 200:
                token = login_response.json().get("access_token")
                headers["Authorization"] = f"Bearer {token}"
        
        if method == "POST" and "login" in endpoint:
            data = valid_login_payload
            response = client.request(method, endpoint, data=data, headers=headers)
        elif method == "POST" and "register" in endpoint:
            data = {
                "username": f"testuser_{uuid4().hex[:8]}",
                "email": f"test_{uuid4().hex[:8]}@example.com", 
                "password": "TestPass123!",
                "full_name": "Test User"
            }
            response = client.request(method, endpoint, json=data, headers=headers)
        else:
            response = client.request(method, endpoint, headers=headers)
        
        # Should return 2xx for valid requests
        if requires_auth and not headers:
            assert response.status_code == 401  # Unauthorized without token
        else:
            assert 200 <= response.status_code < 300 or response.status_code in [401, 422]


class TestDatasetEndpoints:
    """Test suite for dataset endpoints."""
    
    @pytest.fixture
    def client(self):
        """Create test client."""
        app = create_app()
        return TestClient(app)

    @pytest.fixture
    def auth_headers(self, client):
        """Get auth headers for protected endpoints."""
        login_response = client.post("/api/v1/auth/login", data={
            "username": "admin",
            "password": "admin123"
        })
        if login_response.status_code == 200:
            token = login_response.json().get("access_token")
            return {"Authorization": f"Bearer {token}"}
        return {}

    @pytest.fixture
    def sample_csv_file(self):
        """Create a sample CSV file for upload testing."""
        with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as f:
            f.write("feature1,feature2,feature3,target\n")
            f.write("1.0,2.0,3.0,0\n")
            f.write("4.0,5.0,6.0,1\n")
            f.write("7.0,8.0,9.0,0\n")
            temp_file = f.name
        
        yield temp_file
        
        # Cleanup
        try:
            os.unlink(temp_file)
        except:
            pass

    def test_datasets_get(self, client, auth_headers):
        """Test GET /api/v1/datasets/ - List datasets endpoint."""
        response = client.get("/api/v1/datasets/", headers=auth_headers)
        
        # Assert 2xx status or 401 if auth failed
        assert 200 <= response.status_code < 300 or response.status_code == 401
        
        if response.status_code < 300:
            # Assert JSON response
            assert response.headers["content-type"] == "application/json"
            
            # Assert JSON schema
            data = response.json()
            assert isinstance(data, list)

    def test_datasets_by_id_get(self, client, auth_headers):
        """Test GET /api/v1/datasets/{dataset_id} - Get dataset by ID endpoint."""
        # Use a test UUID
        test_dataset_id = str(uuid4())
        response = client.get(f"/api/v1/datasets/{test_dataset_id}", headers=auth_headers)
        
        # Assert 2xx status, 404 (not found), or 401 (unauthorized)
        assert response.status_code in [200, 404, 401]
        
        if response.status_code == 200:
            # Assert JSON response
            assert response.headers["content-type"] == "application/json"
            
            # Assert JSON schema
            data = response.json()
            assert isinstance(data, dict)

    def test_datasets_upload_post(self, client, auth_headers, sample_csv_file):
        """Test POST /api/v1/datasets/upload - Upload dataset endpoint."""
        with open(sample_csv_file, 'rb') as f:
            files = {"file": ("test.csv", f, "text/csv")}
            data = {
                "name": "Test Dataset",
                "description": "Test dataset for positive path testing"
            }
            response = client.post("/api/v1/datasets/upload", 
                                 files=files, data=data, headers=auth_headers)
        
        # Assert 2xx status or 401 if auth failed
        assert 200 <= response.status_code < 300 or response.status_code == 401
        
        if response.status_code < 300:
            # Assert JSON response
            assert response.headers["content-type"] == "application/json"
            
            # Assert JSON schema
            data = response.json()
            assert isinstance(data, dict)

    def test_datasets_quality_get(self, client, auth_headers):
        """Test GET /api/v1/datasets/{dataset_id}/quality - Dataset quality report endpoint."""
        # Use a test UUID
        test_dataset_id = str(uuid4())
        response = client.get(f"/api/v1/datasets/{test_dataset_id}/quality", headers=auth_headers)
        
        # Assert 2xx status, 404 (not found), or 401 (unauthorized)
        assert response.status_code in [200, 404, 401]
        
        if response.status_code == 200:
            # Assert JSON response
            assert response.headers["content-type"] == "application/json"
            
            # Assert JSON schema
            data = response.json()
            assert isinstance(data, dict)

    def test_datasets_sample_get(self, client, auth_headers):
        """Test GET /api/v1/datasets/{dataset_id}/sample - Dataset sample endpoint."""
        # Use a test UUID
        test_dataset_id = str(uuid4())
        params = {"sample_size": 10}
        response = client.get(f"/api/v1/datasets/{test_dataset_id}/sample", 
                            params=params, headers=auth_headers)
        
        # Assert 2xx status, 404 (not found), or 401 (unauthorized)
        assert response.status_code in [200, 404, 401]
        
        if response.status_code == 200:
            # Assert JSON response
            assert response.headers["content-type"] == "application/json"
            
            # Assert JSON schema
            data = response.json()
            assert isinstance(data, dict)

    def test_datasets_split_post(self, client, auth_headers):
        """Test POST /api/v1/datasets/{dataset_id}/split - Dataset split endpoint."""
        # Use a test UUID
        test_dataset_id = str(uuid4())
        payload = {
            "test_size": 0.2,
            "random_state": 42
        }
        response = client.post(f"/api/v1/datasets/{test_dataset_id}/split", 
                             json=payload, headers=auth_headers)
        
        # Assert 2xx status, 404 (not found), or 401 (unauthorized)
        assert response.status_code in [200, 404, 401]
        
        if response.status_code == 200:
            # Assert JSON response
            assert response.headers["content-type"] == "application/json"
            
            # Assert JSON schema
            data = response.json()
            assert isinstance(data, dict)

    def test_datasets_delete(self, client, auth_headers):
        """Test DELETE /api/v1/datasets/{dataset_id} - Delete dataset endpoint."""
        # Use a test UUID
        test_dataset_id = str(uuid4())
        response = client.delete(f"/api/v1/datasets/{test_dataset_id}", headers=auth_headers)
        
        # Assert 2xx status, 404 (not found), or 401 (unauthorized)
        assert response.status_code in [200, 204, 404, 401]
        
        if response.status_code in [200, 204]:
            # Assert JSON response for 200, no content for 204
            if response.status_code == 200:
                assert response.headers["content-type"] == "application/json"

    @pytest.mark.parametrize("endpoint,method,requires_auth", [
        ("/api/v1/datasets/", "GET", True),
        ("/api/v1/datasets/upload", "POST", True),
    ])
    def test_datasets_endpoints_methods(self, client, endpoint, method, requires_auth, auth_headers):
        """Test dataset endpoints with their allowed HTTP methods."""
        headers = auth_headers if requires_auth else {}
        
        if method == "GET":
            response = client.get(endpoint, headers=headers)
        elif method == "POST" and "upload" in endpoint:
            # Create temporary file for upload
            with tempfile.NamedTemporaryFile(mode='w', suffix='.csv') as f:
                f.write("col1,col2\n1,2\n3,4\n")
                f.flush()
                
                with open(f.name, 'rb') as file:
                    files = {"file": ("test.csv", file, "text/csv")}
                    data = {"name": "Test Dataset"}
                    response = client.post(endpoint, files=files, data=data, headers=headers)
        else:
            response = client.request(method, endpoint, headers=headers)
        
        # Should return 2xx for valid requests or 401 for unauthorized
        if requires_auth and not headers:
            assert response.status_code == 401
        else:
            assert 200 <= response.status_code < 300 or response.status_code in [401, 422]


class TestComprehensiveEndpointValidation:
    """Comprehensive validation of all documented endpoints."""
    
    @pytest.fixture
    def client(self):
        """Create test client."""
        app = create_app()
        return TestClient(app)
    
    @pytest.fixture
    def auth_headers(self, client):
        """Get auth headers for protected endpoints."""
        login_response = client.post("/api/v1/auth/login", data={
            "username": "admin", 
            "password": "admin123"
        })
        if login_response.status_code == 200:
            token = login_response.json().get("access_token")
            return {"Authorization": f"Bearer {token}"}
        return {}

    @pytest.mark.parametrize("endpoint,method,requires_auth,expected_content_type", [
        # Health endpoints
        ("/api/v1/health/", "GET", False, "application/json"),
        ("/api/v1/health/metrics", "GET", False, "application/json"),
        ("/api/v1/health/history", "GET", False, "application/json"),
        ("/api/v1/health/summary", "GET", False, "application/json"),
        ("/api/v1/health/ready", "GET", False, "application/json"),
        ("/api/v1/health/live", "GET", False, "application/json"),
        
        # Auth endpoints
        ("/api/v1/auth/login", "POST", False, "application/json"),
        ("/api/v1/auth/refresh", "POST", True, "application/json"),
        ("/api/v1/auth/register", "POST", False, "application/json"),
        ("/api/v1/auth/me", "GET", True, "application/json"),
        ("/api/v1/auth/api-keys", "POST", True, "application/json"),
        ("/api/v1/auth/logout", "POST", True, "application/json"),
        
        # Dataset endpoints
        ("/api/v1/datasets/", "GET", True, "application/json"),
    ])
    def test_endpoint_comprehensive_validation(self, client, auth_headers, endpoint, method, requires_auth, expected_content_type):
        """Test comprehensive validation for all documented endpoints."""
        headers = auth_headers if requires_auth else {}
        
        # Prepare request data based on endpoint
        data = None
        files = None
        json_data = None
        
        if method == "POST":
            if "login" in endpoint:
                data = {"username": "admin", "password": "admin123"}
            elif "register" in endpoint:
                json_data = {
                    "username": f"testuser_{uuid4().hex[:8]}",
                    "email": f"test_{uuid4().hex[:8]}@example.com",
                    "password": "TestPass123!",
                    "full_name": "Test User"
                }
            elif "api-keys" in endpoint:
                json_data = {
                    "name": "Test API Key",
                    "permissions": ["read:datasets"],
                    "expires_in_days": 30
                }
        
        # Make request
        if method == "GET":
            response = client.get(endpoint, headers=headers)
        elif method == "POST":
            if data:
                response = client.post(endpoint, data=data, headers=headers)
            elif json_data:
                response = client.post(endpoint, json=json_data, headers=headers)
            elif files:
                response = client.post(endpoint, files=files, data=data or {}, headers=headers)
            else:
                response = client.post(endpoint, headers=headers)
        else:
            response = client.request(method, endpoint, headers=headers)
        
        # Validate response
        if requires_auth and not headers:
            # Should return 401 for protected endpoints without auth
            assert response.status_code == 401
        else:
            # Should return 2xx for successful requests
            # Allow some endpoints to return 404, 422, or 503 for certain conditions
            assert (200 <= response.status_code < 300 or 
                   response.status_code in [401, 404, 422, 503])
            
            # Validate content type for successful responses
            if 200 <= response.status_code < 300:
                assert expected_content_type in response.headers.get("content-type", "")
                
                # Validate JSON structure
                if expected_content_type == "application/json":
                    data = response.json()
                    assert isinstance(data, (dict, list))

    def test_all_endpoints_return_json(self, client, auth_headers):
        """Test that all endpoints return valid JSON for successful responses."""
        endpoints = [
            ("/api/v1/health/", "GET", False),
            ("/api/v1/health/metrics", "GET", False),
            ("/api/v1/health/history", "GET", False),
            ("/api/v1/health/summary", "GET", False),
            ("/api/v1/health/ready", "GET", False),
            ("/api/v1/health/live", "GET", False),
            ("/api/v1/datasets/", "GET", True),
            ("/api/v1/auth/me", "GET", True),
        ]
        
        for endpoint, method, requires_auth in endpoints:
            headers = auth_headers if requires_auth else {}
            response = client.request(method, endpoint, headers=headers)
            
            # For successful responses, ensure JSON is valid
            if 200 <= response.status_code < 300:
                try:
                    data = response.json()
                    assert isinstance(data, (dict, list))
                except json.JSONDecodeError:
                    pytest.fail(f"Endpoint {endpoint} returned invalid JSON")

    def test_all_endpoints_have_appropriate_status_codes(self, client, auth_headers):
        """Test that all endpoints return appropriate HTTP status codes."""
        endpoints = [
            ("/api/v1/health/", "GET", False, [200]),
            ("/api/v1/health/metrics", "GET", False, [200]),
            ("/api/v1/health/history", "GET", False, [200]),
            ("/api/v1/health/summary", "GET", False, [200]),
            ("/api/v1/health/ready", "GET", False, [200, 503]),  # 503 for not ready
            ("/api/v1/health/live", "GET", False, [200]),
            ("/api/v1/datasets/", "GET", True, [200, 401]),
            ("/api/v1/auth/me", "GET", True, [200, 401]),
        ]
        
        for endpoint, method, requires_auth, expected_codes in endpoints:
            headers = auth_headers if requires_auth else {}
            response = client.request(method, endpoint, headers=headers)
            
            assert response.status_code in expected_codes, (
                f"Endpoint {endpoint} returned {response.status_code}, "
                f"expected one of {expected_codes}"
            )

    def test_endpoints_cors_headers(self, client):
        """Test that endpoints include appropriate CORS headers."""
        response = client.options("/api/v1/health/")
        
        # Should have CORS headers for preflight requests
        assert "access-control-allow-origin" in response.headers or response.status_code == 405

    def test_endpoints_security_headers(self, client, auth_headers):
        """Test that protected endpoints include appropriate security headers."""
        response = client.get("/api/v1/auth/me", headers=auth_headers)
        
        # Check for security-related headers
        if 200 <= response.status_code < 300:
            # These headers might be added by middleware
            expected_headers = ["content-type"]
            for header in expected_headers:
                assert header in response.headers
