version: '3.8'

services:
  # Core Database Services
  postgres:
    image: postgres:15-alpine
    container_name: pynomaly-postgres
    environment:
      POSTGRES_USER: pynomaly
      POSTGRES_PASSWORD: pynomaly_secure_password
      POSTGRES_DB: pynomaly
      POSTGRES_MULTIPLE_DATABASES: "pynomaly_data_science,pynomaly_profiles,pynomaly_quality"
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/deployment/database/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - pynomaly-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pynomaly"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: pynomaly-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
      - ./config/deployment/redis/redis-production.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - pynomaly-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # InfluxDB for Time-Series Metrics and Monitoring
  influxdb:
    image: influxdb:2.7-alpine
    container_name: pynomaly-influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: pynomaly
      DOCKER_INFLUXDB_INIT_PASSWORD: pynomaly_influx_password
      DOCKER_INFLUXDB_INIT_ORG: pynomaly
      DOCKER_INFLUXDB_INIT_BUCKET: metrics
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: pynomaly_super_secret_token
    ports:
      - '8086:8086'
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    networks:
      - pynomaly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main API Service with Data Science Capabilities
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pynomaly-api
    environment:
      # Database configuration
      - PYNOMALY_DATABASE_DATABASE_URL=postgresql://pynomaly:pynomaly_secure_password@postgres:5432/pynomaly
      - PYNOMALY_DATABASE_USE_DATABASE_REPOSITORIES=true
      
      # Redis cache configuration
      - PYNOMALY_STORAGE_REDIS_URL=redis://redis:6379/0
      - PYNOMALY_STORAGE_CACHE_ENABLED=true
      
      # InfluxDB metrics configuration
      - PYNOMALY_METRICS_INFLUXDB_URL=http://influxdb:8086
      - PYNOMALY_METRICS_INFLUXDB_TOKEN=pynomaly_super_secret_token
      - PYNOMALY_METRICS_INFLUXDB_ORG=pynomaly
      - PYNOMALY_METRICS_INFLUXDB_BUCKET=metrics
      
      # Security configuration
      - PYNOMALY_SECURITY_SECRET_KEY=your_super_secret_jwt_key_change_in_production
      - PYNOMALY_SECURITY_AUTH_ENABLED=true
      - PYNOMALY_SECURITY_JWT_EXPIRE_MINUTES=1440
      
      # Data Science specific configuration
      - PYNOMALY_DATA_SCIENCE_ENABLED=true
      - PYNOMALY_DATA_PROFILING_ENABLED=true
      - PYNOMALY_DATA_QUALITY_ENABLED=true
      - PYNOMALY_ML_PIPELINES_ENABLED=true
      
      # Performance configuration
      - PYNOMALY_PERFORMANCE_MAX_WORKERS=4
      - PYNOMALY_PERFORMANCE_PARALLEL_PROCESSING=true
      - PYNOMALY_PERFORMANCE_MEMORY_LIMIT=8GB
      
      # Monitoring configuration
      - PYNOMALY_MONITORING_ENABLED=true
      - PYNOMALY_MONITORING_METRICS_ENABLED=true
      - PYNOMALY_MONITORING_HEALTH_CHECK_ENABLED=true
      
      # Application configuration
      - PYTHONPATH=/app/src
      - PYNOMALY_ENV=production
    ports:
      - '8000:8000'
    volumes:
      - ./data:/app/data
      - ./storage/logs:/app/logs
      - ./storage/models:/app/models
      - ./storage/artifacts:/app/artifacts
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    networks:
      - pynomaly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 4G

  # Data Science Worker Service (for background processing)
  data-science-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pynomaly-ds-worker
    environment:
      # Same configuration as API service
      - PYNOMALY_DATABASE_DATABASE_URL=postgresql://pynomaly:pynomaly_secure_password@postgres:5432/pynomaly
      - PYNOMALY_STORAGE_REDIS_URL=redis://redis:6379/0
      - PYNOMALY_METRICS_INFLUXDB_URL=http://influxdb:8086
      - PYNOMALY_METRICS_INFLUXDB_TOKEN=pynomaly_super_secret_token
      - PYNOMALY_METRICS_INFLUXDB_ORG=pynomaly
      - PYNOMALY_METRICS_INFLUXDB_BUCKET=metrics
      - PYNOMALY_SECURITY_SECRET_KEY=your_super_secret_jwt_key_change_in_production
      - PYNOMALY_DATA_SCIENCE_ENABLED=true
      - PYTHONPATH=/app/src
      - PYNOMALY_WORKER_MODE=true
    volumes:
      - ./data:/app/data
      - ./storage/logs:/app/logs
      - ./storage/models:/app/models
      - ./storage/artifacts:/app/artifacts
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    networks:
      - pynomaly-network
    command: ["python", "-m", "pynomaly.workers.data_science_worker"]
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 16G
        reservations:
          cpus: '2.0'
          memory: 8G

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: pynomaly-prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./config/deployment/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - pynomaly-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for Monitoring Dashboards
  grafana:
    image: grafana/grafana:10.0.0
    container_name: pynomaly-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=pynomaly_grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - '3000:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/deployment/monitoring/grafana_dashboards.json:/etc/grafana/provisioning/dashboards/dashboards.json
    depends_on:
      - prometheus
    networks:
      - pynomaly-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy and Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: pynomaly-nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./config/deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/deployment/nginx/ssl:/etc/nginx/ssl
    depends_on:
      api:
        condition: service_healthy
    networks:
      - pynomaly-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  pynomaly-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local