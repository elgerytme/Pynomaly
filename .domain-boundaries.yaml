# Domain Boundary Configuration for Monorepo
# This file defines the domain boundaries and rules for the codebase

domains:
  ai:
    description: "Artificial Intelligence and Machine Learning"
    packages:
      - ai/mlops
      - ai/ml_platform
      - ai/neuro_symbolic
    allowed_dependencies:
      - shared
      - infrastructure
      - data
      - interfaces

  data:
    description: "Data processing, analytics, and management"
    packages:
      - data/analytics
      - data/detection_service
      - data/data
      - data/data_analytics
      - data/data_architecture
      - data/data_engineering
      - data/data_ingestion
      - data/data_lineage
      - data/data_modeling
      - data/data_pipelines
      - data/data_quality
      - data/data_science
      - data/data_visualization
      - data/knowledge_graph
      - data/observability
      - data/profiling
      - data/quality
      - data/statistics
      - data/transformation
    allowed_dependencies:
      - shared
      - infrastructure
      - interfaces

  finance:
    description: "Financial services, billing, and payments"
    packages:
      - finance/billing
      - finance/payments
      - finance/accounting
      - finance/invoicing
    allowed_dependencies:
      - shared
      - infrastructure
      - interfaces
      - data  # For analytics

  software:
    description: "Software engineering and development tools"
    packages:
      - software/algorithms
      - software/architecture
      - software/compiler
      - software/data_structures
      - software/database
      - software/design_patterns
      - software/devops
      - software/security
      - software/testing
    allowed_dependencies:
      - shared
      - infrastructure
      - interfaces

  tools:
    description: "Development and operational tools"
    packages:
      - tools/domain_boundary_detector
      - tools/code_generator
      - tools/migration_tools
    allowed_dependencies:
      - shared
      - infrastructure
      - interfaces

  infrastructure:
    description: "Technical infrastructure and cross-cutting concerns"
    packages:
      - infrastructure/logging
      - infrastructure/monitoring
      - infrastructure/config
      - infrastructure/cache
      - infrastructure/messaging
      - infrastructure/security
    allowed_dependencies: []  # Infrastructure should not depend on business domains

  shared:
    description: "Shared utilities and common code"
    packages:
      - shared/utils
      - shared/types
      - shared/constants
      - shared/protocols
    allowed_dependencies:
      - infrastructure  # Only infrastructure

  interfaces:
    description: "Shared interfaces and contracts between domains"
    packages:
      - interfaces/api_contracts
      - interfaces/events
      - interfaces/dto
    allowed_dependencies:
      - shared

  templates:
    description: "Package and project templates"
    packages:
      - templates/fastapi_api
      - templates/typer_cli
      - templates/htmx_tailwind_app
      - templates/self_contained_package
    allowed_dependencies:
      - shared
      - infrastructure

rules:
  - name: no_cross_domain_imports
    description: "Prevent direct imports between different business domains"
    severity: critical
    pattern: cross_domain
    exceptions:
      # Example exceptions (should be reviewed and justified)
      - from: ai/mlops
        to: finance/billing
        reason: "Temporary: Cost calculation for model training"
        expires: "2024-12-31"
        approved_by: "architecture-team"

  - name: no_circular_dependencies
    description: "Prevent circular dependencies between packages"
    severity: critical
    pattern: circular

  - name: no_private_access
    description: "Prevent access to private modules (starting with _)"
    severity: warning
    pattern: private_access

  - name: no_implementation_details
    description: "Prevent importing from internal/impl directories"
    severity: warning
    pattern: implementation_details

  - name: stable_interfaces_only
    description: "Only import from stable public APIs"
    severity: info
    pattern: unstable_api

global_allowed:
  - shared
  - infrastructure
  - interfaces

documentation:
  rules:
    - name: no_cross_package_references_in_package_docs
      description: "Package documentation must not reference other packages"
      severity: critical
      scope: "src/packages/*/docs/**/*.md"
      patterns:
        - pattern: "from\\s+(?!\\.{1,2})([a-zA-Z_][\\w_]*)\\..*import"
          message: "Package documentation must not reference other packages - use relative imports"
        - pattern: "(?<!\\.)\\b(anomaly_detection|mlops|data_science|enterprise_\\w+|neuro_symbolic|machine_learning)\\b(?!\\w)"
          message: "Package documentation must not reference other package names"
          exclude_self: true
        
    - name: no_package_specific_refs_in_repo_docs
      description: "Repository documentation must not reference specific packages"
      severity: critical
      scope: "docs/**/*.md"
      patterns:
        - pattern: "(?<!\\.)\\b(anomaly_detection|mlops|data_science|enterprise_\\w+|neuro_symbolic|machine_learning)\\b(?!\\w)"
          message: "Repository documentation must not reference specific packages - keep it generic"
        - pattern: "src/packages/[^\\s/]+/[^\\s]*"
          message: "Repository documentation must not reference specific package paths"
          
    - name: no_monorepo_imports
      description: "Use relative imports instead of monorepo-style imports"
      severity: warning
      scope: "**/*.md"
      patterns:
        - pattern: "from\\s+monorepo\\.[a-zA-Z_][\\w_]*"
          message: "Use relative imports instead of 'from monorepo.*' imports"
        - pattern: "import\\s+monorepo\\.[a-zA-Z_][\\w_]*"
          message: "Use relative imports instead of 'import monorepo.*' imports"
          
    - name: no_absolute_package_imports_in_package_docs
      description: "Package docs should use relative imports in code examples"
      severity: warning
      scope: "src/packages/*/docs/**/*.md"
      patterns:
        - pattern: "from\\s+[a-zA-Z_][\\w_]*\\.[a-zA-Z_][\\w_]*.*import"
          message: "Use relative imports (from .module import) in package documentation examples"
          exceptions:
            - "from typing import"
            - "from abc import"
            - "from collections import"
            - "from dataclasses import"
            - "from pathlib import"
            - "from datetime import"
            - "import os"
            - "import sys"
            - "import re"
            - "import json"
            - "import yaml"
            - "import logging"
            - "from pytest import"
            - "import pytest"
            - "from unittest import"
            - "import unittest"

  exceptions:
    - file: "docs/architecture/DOMAIN_SEPARATION_COMPLETION_SUMMARY.md"
      reason: "Historical migration documentation - contains specific package references for tracking"
      expires: "2025-12-31"
      approved_by: "architecture-team"
    - file: "docs/KNOWLEDGE_TRANSFER.md"
      reason: "Legacy knowledge transfer document - needs refactoring"
      expires: "2025-06-30"
      approved_by: "architecture-team"
    - file: "docs/rules/DOMAIN_BOUNDARY_RULES.md"
      reason: "Rule documentation may reference packages as examples"
      permanent: true
      approved_by: "architecture-team"

testing:
  rules:
    - name: no_cross_package_imports_in_package_tests
      description: "Package tests must not import from other packages"
      severity: critical
      scope: "src/packages/*/tests/**/*.py"
      patterns:
        - pattern: "from\\s+(?!\\.|test_|conftest)([a-zA-Z_][\\w_]*)\\..*import"
          message: "Package tests must only import from their own package - use relative imports"
          exceptions:
            - "from typing import"
            - "from abc import"
            - "from collections import"
            - "from dataclasses import"
            - "from pathlib import"
            - "from datetime import"
            - "from unittest import"
            - "from unittest.mock import"
            - "import unittest"
            - "from pytest import"
            - "import pytest"
            - "from hypothesis import"
            - "import hypothesis"
            - "from faker import"
            - "import faker"
            - "from freezegun import"
            - "import freezegun"
            - "from testcontainers import"
            - "import testcontainers"
        - pattern: "import\\s+(?!test_|conftest)([a-zA-Z_][\\w_]*)\\.(?!__)"
          message: "Package tests must not import other packages directly"
          exceptions:
            - "import os"
            - "import sys"
            - "import re" 
            - "import json"
            - "import yaml"
            - "import logging"
            - "import tempfile"
            - "import shutil"
            - "import subprocess"
            - "import asyncio"
            - "import threading"
            - "import multiprocessing"
            - "import uuid"
            - "import hashlib"
            - "import base64"
            - "import pickle"
            - "import sqlite3"
            - "import urllib"
            - "import http"
            - "import socket"
            - "import time"
            - "import random"
            - "import math"
            - "import statistics"
            - "import itertools"
            - "import functools"
            - "import operator"
            - "import contextlib"
            - "import warnings"
            - "import traceback"
            - "import inspect"
            - "import types"
            - "import copy"
            - "import weakref"

    - name: no_package_imports_in_system_tests
      description: "System tests must not import from specific packages"
      severity: critical
      scope: "src/packages/system_tests/**/*.py"
      patterns:
        - pattern: "from\\s+(ai|data|finance|software|tools)\\..*import"
          message: "System tests must not import directly from domain packages - use public APIs or test fixtures"
        - pattern: "import\\s+(ai|data|finance|software|tools)\\."
          message: "System tests must not import domain packages directly"

    - name: no_repo_level_package_imports
      description: "Repository-level tests must not import from packages"
      severity: critical  
      scope: "tests/**/*.py"
      patterns:
        - pattern: "from\\s+src\\.packages\\..*import"
          message: "Repository tests must not import from src.packages - use repository-level utilities only"
        - pattern: "import\\s+src\\.packages\\."
          message: "Repository tests must not import from src.packages"
        - pattern: "sys\\.path\\.insert.*src/packages"
          message: "Repository tests must not manipulate sys.path to access packages"

  exceptions:
    - file: "src/packages/*/tests/conftest.py"
      pattern: "from\\s+\\.\\."
      reason: "Test configuration files may need to import package modules for fixtures"
      approved_by: "testing-team"
    - file: "src/packages/shared/*/tests/**/*.py"
      pattern: "from\\s+(infrastructure|interfaces)\\."
      reason: "Shared package tests may import from infrastructure and interfaces"
      approved_by: "architecture-team"
    - file: "src/packages/infrastructure/*/tests/**/*.py"
      reason: "Infrastructure tests are foundational and have no domain restrictions"
      approved_by: "architecture-team"

options:
  ignore_tests: false  # Enable test scanning
  ignore_examples: true
  ignore_docs: false  # Enable documentation scanning
  strict_mode: false
  
  # Patterns to ignore when scanning
  ignore_patterns:
    - "*.pyc"
    - "__pycache__"
    - ".git"
    - ".pytest_cache"
    - "venv"
    - "env"
    - ".env"
    - "node_modules"
    - "*.egg-info"
    - "build/"
    - "dist/"
    - ".tox"
    - ".mypy_cache"
    - ".ruff_cache"
    
  # File patterns to consider
  include_patterns:
    - "*.py"
    - "*.md"    # Include markdown files for documentation scanning
    - "*.rst"   # Include reStructuredText files
    
  # Documentation-specific options
  documentation:
    scan_enabled: true
    include_code_blocks: true
    check_links: false  # For future enhancement
    validate_examples: true
    
  # Violation thresholds for CI/CD
  thresholds:
    critical: 0  # Fail on any critical violation
    warning: 10  # Warn if more than 10 warnings
    info: 50     # Info only