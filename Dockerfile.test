# Multi-stage Dockerfile for isolated test environments
# Base stage with common dependencies
FROM python:3.11-slim as base

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    libpq-dev \
    libffi-dev \
    libssl-dev \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Set environment variables for deterministic builds
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONHASHSEED=42 \
    PYTHON_SEED=42 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install hatch
RUN pip install --no-cache-dir hatch>=1.12.0

# Copy project files
COPY pyproject.toml .
COPY README.md .
COPY src/ src/
COPY tests/ tests/

# Create test environment directories
RUN mkdir -p test_env/minimal test_env/server test_env/deep test-results coverage-reports

# Stage 1: Minimal Core Test Environment
FROM base as test-minimal

# Install minimal dependencies only
RUN pip install --no-cache-dir -e .[minimal,test]

# Set deterministic environment variables
ENV PYNOMALY_ENVIRONMENT=test-minimal \
    PYNOMALY_DEBUG=false \
    PYNOMALY_LOG_LEVEL=WARNING \
    PYNOMALY_DETERMINISTIC=true

# Create lockfile for reproducible builds
RUN pip freeze > test_env/minimal/requirements.lock

# Default command
CMD ["hatch", "run", "test-minimal:test"]

# Stage 2: Server+API Test Environment
FROM base as test-server

# Install server dependencies
RUN pip install --no-cache-dir -e .[server,api,database,caching,test]

# Set deterministic environment variables
ENV PYNOMALY_ENVIRONMENT=test-server \
    PYNOMALY_DEBUG=false \
    PYNOMALY_LOG_LEVEL=WARNING \
    PYNOMALY_DETERMINISTIC=true \
    PYNOMALY_DB_HOST=postgres \
    PYNOMALY_DB_PORT=5432 \
    PYNOMALY_DB_NAME=pynomaly_test_server \
    PYNOMALY_DB_USER=pynomaly_test \
    PYNOMALY_DB_PASSWORD=pynomaly_test_password \
    PYNOMALY_REDIS_HOST=redis \
    PYNOMALY_REDIS_PORT=6379 \
    PYNOMALY_REDIS_DB=1

# Create lockfile for reproducible builds
RUN pip freeze > test_env/server/requirements.lock

# Default command
CMD ["hatch", "run", "test-server:test"]

# Stage 3: Deep Learning Test Environment
FROM base as test-deep

# Install additional system dependencies for deep learning
RUN apt-get update && apt-get install -y \
    libblas3 \
    liblapack3 \
    libopenblas-dev \
    && rm -rf /var/lib/apt/lists/*

# Install deep learning dependencies (CPU-only for reproducibility)
RUN pip install --no-cache-dir -e .[deep-cpu,automl,explainability,test]

# Set deterministic environment variables for deep learning
ENV PYNOMALY_ENVIRONMENT=test-deep \
    PYNOMALY_DEBUG=false \
    PYNOMALY_LOG_LEVEL=WARNING \
    PYNOMALY_DETERMINISTIC=true \
    TF_DETERMINISTIC_OPS=1 \
    TF_CUDNN_DETERMINISTIC=1 \
    CUDA_LAUNCH_BLOCKING=1 \
    CUDA_VISIBLE_DEVICES="" \
    OMP_NUM_THREADS=1 \
    MKL_NUM_THREADS=1 \
    NUMEXPR_NUM_THREADS=1

# Create lockfile for reproducible builds
RUN pip freeze > test_env/deep/requirements.lock

# Default command
CMD ["hatch", "run", "test-deep:test"]

# Stage 4: GitHub Actions Test Environment
FROM base as github-actions

# Install all dependencies for comprehensive testing
RUN pip install --no-cache-dir -e .[all,test]

# Set GitHub Actions environment variables
ENV GITHUB_ACTIONS=true \
    PYNOMALY_ENVIRONMENT=github-actions \
    PYNOMALY_DEBUG=false \
    PYNOMALY_LOG_LEVEL=WARNING \
    PYNOMALY_DETERMINISTIC=true \
    PYNOMALY_DB_HOST=postgres \
    PYNOMALY_DB_PORT=5432 \
    PYNOMALY_DB_NAME=pynomaly_test \
    PYNOMALY_DB_USER=pynomaly_test \
    PYNOMALY_DB_PASSWORD=pynomaly_test_password \
    PYNOMALY_REDIS_HOST=redis \
    PYNOMALY_REDIS_PORT=6379 \
    PYNOMALY_REDIS_DB=2

# Create lockfile for reproducible builds
RUN pip freeze > test_env/github-actions/requirements.lock

# Default command
CMD ["pytest", "tests/", "-v", "--tb=short", "--cov=pynomaly", "--cov-report=html:coverage-reports/html", "--cov-report=xml:coverage-reports/coverage.xml", "--junit-xml=test-results/junit.xml"]

# Stage 5: Development Test Environment
FROM base as development

# Install development dependencies
RUN pip install --no-cache-dir -e .[dev,test,all]

# Set development environment variables
ENV PYNOMALY_ENVIRONMENT=development \
    PYNOMALY_DEBUG=true \
    PYNOMALY_LOG_LEVEL=DEBUG

# Default command
CMD ["hatch", "run", "test:run"]
