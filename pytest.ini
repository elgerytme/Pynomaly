[pytest]
# Pytest configuration for Pynomaly comprehensive testing

# Minimum version
minversion = 8.0

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Add options
addopts = 
    # Verbose output
    -v
    # Show test coverage
    --cov=pynomaly
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    # Fail if coverage below threshold
    --cov-fail-under=90
    # Show slowest tests
    --durations=10
    # Strict markers
    --strict-markers
    --strict-config
    # Parallel execution
    -n auto
    # BDD integration
    --gherkin-terminal-reporter

# Markers for test categorization
markers =
    unit: Unit tests for individual components
    integration: Integration tests across components
    e2e: End-to-end tests for complete workflows
    slow: Slow tests that may take significant time
    property: Property-based tests using Hypothesis
    bdd: Behavior-driven development tests
    contract: Contract tests for interfaces
    mutation: Tests designed to catch mutations
    benchmark: Performance benchmark tests
    
    # Algorithm categories
    sklearn: Tests for sklearn adapter
    pyod: Tests for PyOD adapter (requires PyOD)
    tods: Tests for TODS adapter (requires TODS)
    pygod: Tests for PyGOD adapter (requires PyGOD)
    pytorch: Tests for PyTorch adapter (requires PyTorch)
    
    # Infrastructure categories
    database: Tests requiring database
    redis: Tests requiring Redis
    spark: Tests requiring Spark
    
    # Data categories
    csv: Tests for CSV data loading
    parquet: Tests for Parquet data loading
    polars: Tests requiring Polars
    
    # API categories
    api: REST API tests
    cli: CLI tests
    web: Web UI tests

# Coverage configuration
[coverage:run]
source = pynomaly
branch = True
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */site-packages/*
    */venv/*
    */.venv/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self\.debug
    if settings\.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if False:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

# Tool configuration for pytest plugins
[tool:pytest-bdd]
# BDD configuration
cucumber_json_expanded = true
cucumber_json = reports/cucumber.json

[tool:pytest-benchmark]
# Benchmark configuration
min_rounds = 10
max_time = 2.0
min_time = 0.1
timer = perf_counter
calibration_precision = 10
warmup = true
disable_gc = true

[tool:pytest-mock]
# Mock configuration
mock_use_standalone_module = true

[tool:pytest-xdist]
# Parallel execution configuration
addopts = --forked