[tool:pytest]
# Pytest configuration for Pynomaly - Consolidated from multiple sources
minversion = 8.0

# Test discovery and execution
testpaths = tests
pythonpath = src
addopts = 
    -ra
    --strict-markers 
    --strict-config
    --tb=short
    --durations=10
    --asyncio-mode=auto
    --cov=pynomaly
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-report=html:test-results/coverage-html
    --cov-report=xml:test-results/coverage.xml
    --cov-fail-under=80
    --maxfail=5

# Test timeout configuration
timeout = 300
timeout_method = thread

# Asyncio configuration
asyncio_mode = auto

# Test markers
markers =
    # Test types
    unit: marks tests as unit tests
    integration: marks tests as integration tests
    end_to_end: marks tests as end-to-end tests
    benchmark: marks tests as performance benchmarks
    mutation: marks tests for mutation testing
    contract: marks tests as contract tests
    property: marks tests as property-based tests
    slow: marks tests as slow (deselect with '-m "not slow"')
    
    # Component-specific markers
    api: marks tests as API integration tests
    service: marks tests as service integration tests
    database: marks tests as database integration tests
    cache: marks tests as cache integration tests
    streaming: marks tests as streaming integration tests
    external: marks tests as external service integration tests
    
    # Quality markers
    performance: marks tests as performance tests
    security: marks tests as security tests
    
    # Dependency markers - for conditional test execution
    torch: tests requiring PyTorch
    tensorflow: tests requiring TensorFlow
    jax: tests requiring JAX
    redis: tests requiring Redis
    auth: tests requiring authentication dependencies
    optuna: tests requiring Optuna
    shap: tests requiring SHAP
    lime: tests requiring LIME
    scikit-learn: tests requiring scikit-learn
    pyod: tests requiring PyOD
    fastapi: tests requiring FastAPI
    ml_optional: tests requiring optional ML libraries
    infrastructure: tests requiring infrastructure dependencies

# Warning filters
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::FutureWarning
    ignore::UserWarning:pydantic.*
    ignore::UserWarning:dependency_injector.*
    ignore::UserWarning:faker.*
    ignore::UserWarning:numpy.*
    ignore::UserWarning:pandas.*
    ignore::UserWarning:sklearn.*
    ignore::UserWarning:scipy.*
    ignore::RuntimeWarning:pkg_resources.*

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test collection
collect_ignore = ["setup.py", "build/", "dist/", ".eggs/"]

# Environment variables for tests
env = 
    PYNOMALY_ENVIRONMENT = test
    PYNOMALY_DEBUG = false
    PYNOMALY_LOG_LEVEL = INFO
    PYTHONPATH = src
    PYTHONDONTWRITEBYTECODE = 1
    PYTHONUNBUFFERED = 1

# Performance testing configuration
benchmark_min_rounds = 5
benchmark_max_time = 10.0
benchmark_min_time = 0.001

# Mutation testing configuration  
mutation_timeout = 60
mutation_processes = 4

# Test data configuration
junit_family = xunit2
junit_suite_name = pynomaly