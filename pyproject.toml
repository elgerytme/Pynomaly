
[project]
name = "pynomaly"
version = "0.1.0"
description = "State-of-the-art Python anomaly detection package with clean architecture"
authors = [{name = "Pynomaly Team", email = "team@pynomaly.io"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
keywords = ["anomaly-detection", "outlier-detection", "machine-learning", "clean-architecture"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed"
]

[project.urls]
homepage = "https://github.com/pynomaly/pynomaly"
repository = "https://github.com/pynomaly/pynomaly"
documentation = "https://pynomaly.readthedocs.io"

[project.scripts]
pynomaly = "pynomaly.presentation.cli.app:app"

[tool.poetry]
packages = [{include = "pynomaly", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"

# Core required dependencies (minimal set)
pyod = "^2.0.5"
numpy = "^2.1.0"
pandas = "^2.3.0"
polars = "^0.20.0"

# Core architecture dependencies (required for basic functionality)
pydantic = "^2.9.0"
structlog = "^24.4.0"
dependency-injector = "^4.41.0"

# Optional ML and data processing libraries
scikit-learn = {version = "^1.5.0", optional = true}
scipy = {version = "^1.11.0", optional = true}

# Optional infrastructure dependencies
pydantic-settings = {version = "^2.1.0", optional = true}
tenacity = {version = "^8.2.0", optional = true}
circuitbreaker = {version = "^1.4.0", optional = true}

# Optional API dependencies
fastapi = {version = "^0.115.0", optional = true}
uvicorn = {extras = ["standard"], version = "^0.32.0", optional = true}
httpx = {version = "^0.28.0", optional = true}
requests = {version = "^2.31.0", optional = true}
python-multipart = {version = "^0.0.18", optional = true}
jinja2 = {version = "^3.1.0", optional = true}
aiofiles = {version = "^23.2.0", optional = true}

# Optional CLI dependencies
typer = {extras = ["all"], version = "^0.9.0", optional = true}
rich = {version = "^13.7.0", optional = true}

# Optional authentication & security
pyjwt = {version = "^2.8.0", optional = true}
passlib = {extras = ["bcrypt"], version = "^1.7.4", optional = true}

# Optional caching
redis = {version = "^5.1.0", optional = true}

# Optional data processing
pyarrow = {version = "^17.0.0", optional = true}

# Optional monitoring & observability  
opentelemetry-api = {version = "^1.30.0", optional = true}
opentelemetry-sdk = {version = "^1.30.0", optional = true}
opentelemetry-instrumentation-fastapi = {version = "^0.51b0", optional = true}
prometheus-client = {version = "^0.19.0", optional = true}
psutil = {version = "^5.9.0", optional = true}
# Optional ML backends
torch = {version = "^2.1.0", optional = true}
tensorflow = {version = "^2.15.0", optional = true}
keras = {version = "^3.0.0", optional = true}
jax = {version = "^0.4.23", optional = true}
jaxlib = {version = "^0.4.23", optional = true}
optax = {version = "^0.1.7", optional = true}
pyspark = {version = "^3.5.0", optional = true}
h5py = {version = "^3.9.0", optional = true}
sqlalchemy = {version = "^2.0.0", optional = true}
psycopg2-binary = {version = "^2.9.0", optional = true}
fastparquet = {version = "^2024.2.0", optional = true}
openpyxl = {version = "^3.1.0", optional = true}
xlsxwriter = {version = "^3.1.0", optional = true}
pygod = {version = "^1.1.0", optional = true}
tods = {version = "^1.0.0", optional = true}
torch-geometric = {version = "^2.4.0", optional = true}
optuna = {version = "^3.5.0", optional = true}
hyperopt = {version = "^0.2.7", optional = true}
auto-sklearn2 = {version = "^1.0.0", optional = true}
shap = {version = "^0.42.0", optional = true}
lime = {version = "^0.2.0", optional = true}


[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.0.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.23.0"
pytest-xdist = "^3.5.0"
pytest-benchmark = "^4.0.0"
pytest-mock = "^3.12.0"
hypothesis = "^6.92.0"
faker = "^22.0.0"
pytest-bdd = "^7.0.0"
mutmut = "^2.4.0"
# Code Quality
mypy = "^1.8.0"
black = "^23.12.0"
isort = "^5.13.0"
flake8 = "^7.0.0"
flake8-docstrings = "^1.7.0"
flake8-annotations = "^3.0.1"
bandit = {extras = ["toml"], version = "^1.7.5"}
safety = "^3.0.0"
# Pre-commit
pre-commit = "^3.6.0"
# Documentation
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.0"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}
# Development tools
ipython = "^8.19.0"
jupyter = "^1.0.0"
notebook = "^7.0.0"
# Type stubs
types-requests = "^2.31.0"
pandas-stubs = "^2.1.0"

[tool.poetry.extras]
# Core functionality extras
ml = ["scikit-learn", "scipy"]
api = ["fastapi", "uvicorn", "httpx", "requests", "python-multipart", "jinja2", "aiofiles", "pydantic-settings"]
cli = ["typer", "rich"]
auth = ["pyjwt", "passlib"]
caching = ["redis"]
monitoring = ["opentelemetry-api", "opentelemetry-sdk", "opentelemetry-instrumentation-fastapi", "prometheus-client", "psutil"]
infrastructure = ["tenacity", "circuitbreaker", "pydantic-settings"]

# Data processing extras
data-formats = ["pyarrow", "fastparquet", "openpyxl", "xlsxwriter", "h5py"]
database = ["sqlalchemy", "psycopg2-binary"]
spark = ["pyspark"]

# ML backend extras
torch = ["torch"]
tensorflow = ["tensorflow", "keras"]
jax = ["jax", "jaxlib", "optax"]

# Specialized ML extras
graph = ["pygod", "torch-geometric"]
timeseries = []
automl = ["optuna", "hyperopt", "auto-sklearn2", "scikit-learn"]
explainability = ["shap", "lime"]

# Combined extras for common use cases
minimal = ["scikit-learn", "scipy"]
standard = ["scikit-learn", "scipy", "pyarrow"]
server = ["fastapi", "uvicorn", "httpx", "requests", "python-multipart", "jinja2", "aiofiles", "pydantic-settings", "typer", "rich"]
production = ["fastapi", "uvicorn", "redis", "opentelemetry-api", "opentelemetry-sdk", "opentelemetry-instrumentation-fastapi", "prometheus-client", "psutil", "tenacity", "circuitbreaker", "pydantic-settings", "pyjwt", "passlib"]

# Comprehensive extras
ml-all = ["scikit-learn", "scipy", "torch", "tensorflow", "keras", "jax", "jaxlib", "optax", "pygod", "torch-geometric", "optuna", "hyperopt", "auto-sklearn2", "shap", "lime"]
data-all = ["pyarrow", "fastparquet", "openpyxl", "xlsxwriter", "h5py", "sqlalchemy", "psycopg2-binary", "pyspark"]
all = ["scikit-learn", "scipy", "fastapi", "uvicorn", "httpx", "requests", "python-multipart", "jinja2", "aiofiles", "typer", "rich", "pyjwt", "passlib", "redis", "pyarrow", "opentelemetry-api", "opentelemetry-sdk", "opentelemetry-instrumentation-fastapi", "prometheus-client", "psutil", "tenacity", "circuitbreaker", "pydantic-settings", "torch", "tensorflow", "keras", "jax", "jaxlib", "optax", "fastparquet", "openpyxl", "xlsxwriter", "h5py", "sqlalchemy", "psycopg2-binary", "pyspark", "pygod", "torch-geometric", "optuna", "hyperopt", "auto-sklearn2", "shap", "lime"]


[build-system]
requires = ["poetry-core>=1.7.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=pynomaly",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:tests/enhanced-coverage-reports",
    "--cov-report=xml:tests/coverage.xml",
    "--cov-fail-under=90",
]
testpaths = ["tests"]
pythonpath = ["src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
branch = true
source = ["pynomaly"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
targets = ["src"]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "D100", "D104"]
docstring-convention = "google"
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:D"
]
