
[project]
name = "pynomaly"
version = "0.1.0"
description = "State-of-the-art Python anomaly detection package with clean architecture"
authors = [{name = "Pynomaly Team", email = "team@pynomaly.io"}]
license = "MIT"
readme = "README.md"
requires-python = ">=3.11"
keywords = ["anomaly-detection", "outlier-detection", "machine-learning", "clean-architecture"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed"
]

[project.urls]
homepage = "https://github.com/pynomaly/pynomaly"
repository = "https://github.com/pynomaly/pynomaly"
documentation = "https://pynomaly.readthedocs.io"

dependencies = [
    "pyod>=2.0.5",
    "numpy>=1.26.0,<2.2.0",
    "pandas>=2.2.3",
    "polars>=1.19.0",
    "pydantic>=2.10.4",
    "structlog>=24.5.0",
    "dependency-injector>=4.42.0",
]

[project.optional-dependencies]
# Core functionality extras
ml = ["scikit-learn>=1.6.0", "scipy>=1.15.0"]
api = ["fastapi>=0.117.0", "uvicorn[standard]>=0.34.0", "httpx>=0.28.1", "requests>=2.32.3", "python-multipart>=0.0.20", "jinja2>=3.1.5", "aiofiles>=24.1.0", "pydantic-settings>=2.8.0"]
cli = ["typer[all]>=0.15.1", "rich>=13.9.4"]
auth = ["pyjwt>=2.10.1", "passlib[bcrypt]>=1.7.4"]
caching = ["redis>=5.2.1"]
monitoring = ["opentelemetry-api>=1.29.0", "opentelemetry-sdk>=1.29.0", "opentelemetry-instrumentation-fastapi>=0.50b0", "prometheus-client>=0.21.1", "psutil>=6.1.1"]
infrastructure = ["tenacity>=9.0.0", "circuitbreaker>=2.0.0", "pydantic-settings>=2.8.0"]

# Data processing extras
data-formats = ["pyarrow>=18.1.0", "fastparquet>=2024.11.0", "openpyxl>=3.1.5", "xlsxwriter>=3.2.0", "h5py>=3.12.1"]
database = ["sqlalchemy>=2.0.36", "psycopg2-binary>=2.9.10"]
spark = ["pyspark>=3.5.4"]

# ML backend extras  
torch = ["torch>=2.5.1"]
tensorflow = ["tensorflow>=2.18.0,<2.20.0", "keras>=3.8.0"]
jax = ["jax>=0.4.37", "jaxlib>=0.4.37", "optax>=0.2.4"]

# Specialized ML extras
graph = ["pygod>=1.1.0", "torch-geometric>=2.6.1"]
automl = ["optuna>=4.1.0", "hyperopt>=0.2.7", "auto-sklearn2>=1.0.0", "scikit-learn>=1.6.0"]
explainability = ["shap>=0.46.0", "lime>=0.2.0.1"]

# Combined extras for common use cases
minimal = ["scikit-learn>=1.6.0", "scipy>=1.15.0"]
standard = ["scikit-learn>=1.6.0", "scipy>=1.15.0", "pyarrow>=18.1.0"]
server = ["fastapi>=0.117.0", "uvicorn[standard]>=0.34.0", "httpx>=0.28.1", "requests>=2.32.3", "python-multipart>=0.0.20", "jinja2>=3.1.5", "aiofiles>=24.1.0", "pydantic-settings>=2.8.0", "typer[all]>=0.15.1", "rich>=13.9.4", "scikit-learn>=1.6.0", "scipy>=1.15.0", "pyarrow>=18.1.0"]
production = ["fastapi>=0.117.0", "uvicorn[standard]>=0.34.0", "redis>=5.2.1", "opentelemetry-api>=1.29.0", "opentelemetry-sdk>=1.29.0", "opentelemetry-instrumentation-fastapi>=0.50b0", "prometheus-client>=0.21.1", "psutil>=6.1.1", "tenacity>=9.0.0", "circuitbreaker>=2.0.0", "pydantic-settings>=2.8.0", "pyjwt>=2.10.1", "passlib[bcrypt]>=1.7.4"]

# Comprehensive extras
ml-all = ["scikit-learn>=1.6.0", "scipy>=1.15.0", "torch>=2.5.1", "tensorflow>=2.18.0,<2.20.0", "keras>=3.8.0", "jax>=0.4.37", "jaxlib>=0.4.37", "optax>=0.2.4", "pygod>=1.1.0", "torch-geometric>=2.6.1", "optuna>=4.1.0", "hyperopt>=0.2.7", "auto-sklearn2>=1.0.0", "shap>=0.46.0", "lime>=0.2.0.1"]
data-all = ["pyarrow>=18.1.0", "fastparquet>=2024.11.0", "openpyxl>=3.1.5", "xlsxwriter>=3.2.0", "h5py>=3.12.1", "sqlalchemy>=2.0.36", "psycopg2-binary>=2.9.10", "pyspark>=3.5.4"]
all = ["scikit-learn>=1.6.0", "scipy>=1.15.0", "fastapi>=0.117.0", "uvicorn[standard]>=0.34.0", "httpx>=0.28.1", "requests>=2.32.3", "python-multipart>=0.0.20", "jinja2>=3.1.5", "aiofiles>=24.1.0", "typer[all]>=0.15.1", "rich>=13.9.4", "pyjwt>=2.10.1", "passlib[bcrypt]>=1.7.4", "redis>=5.2.1", "pyarrow>=18.1.0", "opentelemetry-api>=1.29.0", "opentelemetry-sdk>=1.29.0", "opentelemetry-instrumentation-fastapi>=0.50b0", "prometheus-client>=0.21.1", "psutil>=6.1.1", "tenacity>=9.0.0", "circuitbreaker>=2.0.0", "pydantic-settings>=2.8.0", "torch>=2.5.1", "tensorflow>=2.18.0,<2.20.0", "keras>=3.8.0", "jax>=0.4.37", "jaxlib>=0.4.37", "optax>=0.2.4", "fastparquet>=2024.11.0", "openpyxl>=3.1.5", "xlsxwriter>=3.2.0", "h5py>=3.12.1", "sqlalchemy>=2.0.36", "psycopg2-binary>=2.9.10", "pyspark>=3.5.4", "pygod>=1.1.0", "torch-geometric>=2.6.1", "optuna>=4.1.0", "hyperopt>=0.2.7", "auto-sklearn2>=1.0.0", "shap>=0.46.0", "lime>=0.2.0.1"]

[project.scripts]
pynomaly = "pynomaly.presentation.cli.app:app"

[tool.poetry]
packages = [{include = "pynomaly", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"

# Core required dependencies (minimal set)
pyod = "^2.0.5"
numpy = ">=1.26.0,<2.2.0"
pandas = "^2.2.3"
polars = "^1.19.0"

# Core architecture dependencies (required for basic functionality)
pydantic = "^2.10.4"
structlog = "^24.5.0"
dependency-injector = "^4.42.0"

# Optional ML and data processing libraries
scikit-learn = {version = "^1.6.0", optional = true}
scipy = {version = "^1.15.0", optional = true}

# Optional infrastructure dependencies
pydantic-settings = {version = "^2.8.0", optional = true}
tenacity = {version = "^9.0.0", optional = true}
circuitbreaker = {version = "^2.0.0", optional = true}

# Optional API dependencies
fastapi = {version = "^0.117.0", optional = true}
uvicorn = {extras = ["standard"], version = "^0.34.0", optional = true}
httpx = {version = "^0.28.1", optional = true}
requests = {version = "^2.32.3", optional = true}
python-multipart = {version = "^0.0.20", optional = true}
jinja2 = {version = "^3.1.5", optional = true}
aiofiles = {version = "^24.1.0", optional = true}

# Optional CLI dependencies
typer = {extras = ["all"], version = "^0.15.1", optional = true}
rich = {version = "^13.9.4", optional = true}

# Optional authentication & security
pyjwt = {version = "^2.10.1", optional = true}
passlib = {extras = ["bcrypt"], version = "^1.7.4", optional = true}

# Optional caching
redis = {version = "^5.2.1", optional = true}

# Optional data processing
pyarrow = {version = "^18.1.0", optional = true}

# Optional monitoring & observability  
opentelemetry-api = {version = "^1.29.0", optional = true}
opentelemetry-sdk = {version = "^1.29.0", optional = true}
opentelemetry-instrumentation-fastapi = {version = "^0.50b0", optional = true}
prometheus-client = {version = "^0.21.1", optional = true}
psutil = {version = "^6.1.1", optional = true}
# Optional ML backends
torch = {version = "^2.5.1", optional = true}
tensorflow = {version = ">=2.18.0,<2.20.0", optional = true}
keras = {version = "^3.8.0", optional = true}
jax = {version = "^0.4.37", optional = true}
jaxlib = {version = "^0.4.37", optional = true}
optax = {version = "^0.2.4", optional = true}
pyspark = {version = "^3.5.4", optional = true}
h5py = {version = "^3.12.1", optional = true}
sqlalchemy = {version = "^2.0.36", optional = true}
psycopg2-binary = {version = "^2.9.10", optional = true}
fastparquet = {version = "^2024.11.0", optional = true}
openpyxl = {version = "^3.1.5", optional = true}
xlsxwriter = {version = "^3.2.0", optional = true}
pygod = {version = "^1.1.0", optional = true}
torch-geometric = {version = "^2.6.1", optional = true}
optuna = {version = "^4.1.0", optional = true}
hyperopt = {version = "^0.2.7", optional = true}
auto-sklearn2 = {version = "^1.0.0", optional = true}
shap = {version = "^0.46.0", optional = true}
lime = {version = "^0.2.0.1", optional = true}


[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.3.4"
pytest-cov = "^6.0.0"
pytest-asyncio = "^0.24.0"
pytest-xdist = "^3.6.0"
pytest-benchmark = "^5.1.0"
pytest-mock = "^3.14.0"
hypothesis = "^6.123.3"
faker = "^33.1.0"
pytest-bdd = "^8.0.1"
mutmut = "^3.2.0"
# Code Quality
mypy = "^1.14.0"
black = "^24.12.0"
isort = "^5.13.2"
flake8 = "^7.1.1"
flake8-docstrings = "^1.7.0"
flake8-annotations = "^3.1.1"
bandit = {extras = ["toml"], version = "^1.8.0"}
safety = "^3.3.0"
# Pre-commit
pre-commit = "^4.0.1"
# Documentation
mkdocs = "^1.6.1"
mkdocs-material = "^9.5.51"
mkdocstrings = {extras = ["python"], version = "^0.27.1"}
# Development tools
ipython = "^8.30.0"
jupyter = "^1.1.1"
notebook = "^7.3.1"
# Type stubs
types-requests = "^2.32.0.20241218"
pandas-stubs = "^2.2.2.241218"

[tool.poetry.extras]
# Core functionality extras
ml = ["scikit-learn", "scipy"]
api = ["fastapi", "uvicorn", "httpx", "requests", "python-multipart", "jinja2", "aiofiles", "pydantic-settings"]
cli = ["typer", "rich"]
auth = ["pyjwt", "passlib"]
caching = ["redis"]
monitoring = ["opentelemetry-api", "opentelemetry-sdk", "opentelemetry-instrumentation-fastapi", "prometheus-client", "psutil"]
infrastructure = ["tenacity", "circuitbreaker", "pydantic-settings"]

# Data processing extras
data-formats = ["pyarrow", "fastparquet", "openpyxl", "xlsxwriter", "h5py"]
database = ["sqlalchemy", "psycopg2-binary"]
spark = ["pyspark"]

# ML backend extras
torch = ["torch"]
tensorflow = ["tensorflow", "keras"]
jax = ["jax", "jaxlib", "optax"]

# Specialized ML extras
graph = ["pygod", "torch-geometric"]
timeseries = []
automl = ["optuna", "hyperopt", "auto-sklearn2", "scikit-learn"]
explainability = ["shap", "lime"]

# Combined extras for common use cases
minimal = ["scikit-learn", "scipy"]
standard = ["scikit-learn", "scipy", "pyarrow"]
server = ["fastapi", "uvicorn", "httpx", "requests", "python-multipart", "jinja2", "aiofiles", "pydantic-settings", "typer", "rich"]
production = ["fastapi", "uvicorn", "redis", "opentelemetry-api", "opentelemetry-sdk", "opentelemetry-instrumentation-fastapi", "prometheus-client", "psutil", "tenacity", "circuitbreaker", "pydantic-settings", "pyjwt", "passlib"]

# Comprehensive extras
ml-all = ["scikit-learn", "scipy", "torch", "tensorflow", "keras", "jax", "jaxlib", "optax", "pygod", "torch-geometric", "optuna", "hyperopt", "auto-sklearn2", "shap", "lime"]
data-all = ["pyarrow", "fastparquet", "openpyxl", "xlsxwriter", "h5py", "sqlalchemy", "psycopg2-binary", "pyspark"]
all = ["scikit-learn", "scipy", "fastapi", "uvicorn", "httpx", "requests", "python-multipart", "jinja2", "aiofiles", "typer", "rich", "pyjwt", "passlib", "redis", "pyarrow", "opentelemetry-api", "opentelemetry-sdk", "opentelemetry-instrumentation-fastapi", "prometheus-client", "psutil", "tenacity", "circuitbreaker", "pydantic-settings", "torch", "tensorflow", "keras", "jax", "jaxlib", "optax", "fastparquet", "openpyxl", "xlsxwriter", "h5py", "sqlalchemy", "psycopg2-binary", "pyspark", "pygod", "torch-geometric", "optuna", "hyperopt", "auto-sklearn2", "shap", "lime"]


[build-system]
requires = ["poetry-core>=1.7.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=pynomaly",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:tests/enhanced-coverage-reports",
    "--cov-report=xml:tests/coverage.xml",
    "--cov-fail-under=90",
]
testpaths = ["tests"]
pythonpath = ["src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
branch = true
source = ["pynomaly"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
targets = ["src"]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "D100", "D104"]
docstring-convention = "google"
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:D"
]
