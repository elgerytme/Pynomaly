[build-system]
requires = [
    "hatchling", 
    "hatch-vcs",
]
build-backend = "hatchling.build"

[project]
name = "pynomaly"
dynamic = ["version"]
description = "State-of-the-art Python anomaly detection package with clean architecture"
authors = [{name = "Pynomaly Team", email = "team@pynomaly.io"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
keywords = ["anomaly-detection", "outlier-detection", "machine-learning", "clean-architecture"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

dependencies = [
    "pyod==2.0.5",
    "numpy==1.26.0",
    "pandas==2.2.3",
    "polars==1.19.0",
    "pydantic==2.10.4",
    "structlog==24.4.0",
    "dependency-injector==4.42.0",
    "networkx==3.0",
]

[project.urls]
Homepage = "https://github.com/pynomaly/pynomaly"
Repository = "https://github.com/pynomaly/pynomaly"
Documentation = "https://pynomaly.readthedocs.io"
Issues = "https://github.com/pynomaly/pynomaly/issues"
Changelog = "https://github.com/pynomaly/pynomaly/blob/main/CHANGELOG.md"

[project.optional-dependencies]
# Core functionality extras
minimal = ["scikit-learn>=1.6.0", "scipy>=1.15.0"]  # Core
ml = ["scikit-learn>=1.6.0", "scipy>=1.15.0"]  # Core ML
standard = ["scikit-learn>=1.6.0", "scipy>=1.15.0", "pyarrow>=18.1.0"]  # Standard + Pandas
# Annotation extras
pwa = ["service-worker", "web-pwa"]  # Progressive Web App
streaming = ["websockets", "asyncio"]  # Streaming frameworks

# Interface extras
api = [
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.34.0", 
    "httpx>=0.28.1",
    "requests>=2.32.3", 
    "python-multipart>=0.0.20",
    "jinja2>=3.1.5",
    "aiofiles>=24.1.0",
    "pydantic-settings>=2.8.0"
]
cli = ["typer[all]>=0.15.1", "rich>=13.9.4"]
server = [
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.34.0",
    "httpx>=0.28.1",
    "requests>=2.32.3",
    "python-multipart>=0.0.20",
    "jinja2>=3.1.5",
    "aiofiles>=24.1.0",
    "pydantic-settings>=2.8.0",
    "typer[all]>=0.15.1",
    "rich>=13.9.4",
    "scikit-learn>=1.6.0",
    "scipy>=1.15.0",
    "pyarrow>=18.1.0"
]

# Infrastructure extras
auth = ["pyjwt>=2.10.1", "passlib[bcrypt]>=1.7.4"]
caching = ["redis>=5.2.1"]
monitoring = [
    "opentelemetry-api>=1.29.0",
    "opentelemetry-sdk>=1.29.0", 
    "opentelemetry-instrumentation-fastapi>=0.50b0",
    "prometheus-client>=0.21.1",
    "psutil>=6.1.1",
    "prometheus-fastapi-instrumentator>=7.0.0"
]
infrastructure = [
    "tenacity>=9.0.0",
    "circuitbreaker>=2.0.0",
    "pydantic-settings>=2.8.0"
]

# Data processing extras
data-formats = [
    "pyarrow>=18.1.0",
    "fastparquet>=2024.11.0",
    "openpyxl>=3.1.5",
    "xlsxwriter>=3.2.0",
    "h5py>=3.12.1"
]
database = ["sqlalchemy>=2.0.36", "psycopg2-binary>=2.9.10"]
spark = ["pyspark>=3.5.4"]

# ML backend extras  
torch = ["torch>=2.5.1"]
tensorflow = ["tensorflow>=2.18.0,<2.20.0", "keras>=3.8.0"]
jax = ["jax>=0.4.37", "jaxlib>=0.4.37", "optax>=0.2.4"]

# New simplified extras structure for dependency resolution

# AutoML extras - optional hyperparameter optimization
automl = [
    "optuna>=4.1.0",
    "hyperopt>=0.2.7", 
    "scikit-learn>=1.6.0"
]

# Deep learning extras with platform markers
deep = [
    "torch>=2.5.1; platform_machine != 'aarch64'",
    "torch>=2.5.1,<2.6.0; platform_machine == 'aarch64'",  # ARM64 compatibility
    "tensorflow>=2.18.0,<2.20.0; platform_machine != 'aarch64'", 
    "tensorflow-macos>=2.18.0,<2.20.0; sys_platform == 'darwin' and platform_machine == 'aarch64'",
    "jax>=0.4.37",
    "jaxlib>=0.4.37; platform_machine != 'aarch64'",
    "jaxlib>=0.4.37,<0.5.0; platform_machine == 'aarch64'"
]

# CPU-only deep learning (lighter installations)
deep-cpu = [
    "torch==2.5.1+cpu; platform_system == 'Linux'",
    "torch>=2.5.1; platform_system != 'Linux'",  # CPU-only not available on all platforms
    "tensorflow-cpu>=2.18.0,<2.20.0; platform_system == 'Linux'",
    "tensorflow>=2.18.0,<2.20.0; platform_system != 'Linux'",
    "jax[cpu]>=0.4.37"
]

# GPU-enabled deep learning (CUDA support)
deep-gpu = [
    "torch==2.5.1+cu121; platform_system == 'Linux'",
    "torch>=2.5.1; platform_system != 'Linux'",
    "tensorflow[and-cuda]>=2.18.0,<2.20.0; platform_system == 'Linux'",
    "tensorflow>=2.18.0,<2.20.0; platform_system != 'Linux'",
    "jax[cuda12]>=0.4.37; platform_system == 'Linux'",
    "jax>=0.4.37; platform_system != 'Linux'"
]

# Explainability extras
explainability = ["shap>=0.46.0", "lime>=0.2.0.1"]

# Enhanced AutoML with distributed computing
automl-advanced = [
    "optuna>=4.1.0",
    "hyperopt>=0.2.7",
    "ray[tune]>=2.0.0",
    "auto-sklearn2>=1.0.0; platform_system == 'Linux'",  # Linux only
    "scikit-learn>=1.6.0"
]

# Legacy extras for backward compatibility
graph = ["pygod>=1.1.0", "torch-geometric>=2.6.1"]

# Production extras
production = [
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.34.0",
    "redis>=5.2.1",
    "opentelemetry-api>=1.29.0",
    "opentelemetry-sdk>=1.29.0",
    "opentelemetry-instrumentation-fastapi>=0.50b0",
    "prometheus-client>=0.21.1",
    "psutil>=6.1.1",
    "tenacity>=9.0.0",
    "circuitbreaker>=2.0.0",
    "pydantic-settings>=2.8.0",
    "pyjwt>=2.10.1",
    "passlib[bcrypt]>=1.7.4",
    "prometheus-fastapi-instrumentator>=7.0.0"
]

# Development extras
test = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-xdist>=3.6.0",
    "hypothesis>=6.115.0",
    "factory-boy>=3.3.1",
    "faker>=33.1.0"
]
ui-test = [
    "playwright>=1.40.0",
    "pytest-playwright>=0.4.3",
    "pytest-html>=4.1.0",
    "pillow>=10.0.0",
    "percy-playwright>=1.0.4",
    "axe-playwright-python>=0.1.3",
    "lighthouse>=0.1.4",
    "pytest-benchmark>=4.0.0"
]
lint = [
    "ruff>=0.8.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "mypy>=1.13.0",
    "bandit>=1.8.0",
    "safety>=4.0.0"
]
docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.27.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0"
]
dev = [
    "pre-commit>=4.0.0",
    "tox>=4.0.0",
    "pip-tools>=7.4.0"
]

# Comprehensive combinations using new extras
ml-all = [
    "scikit-learn>=1.6.0",
    "scipy>=1.15.0",
    # Use platform-aware deep learning dependencies
    "torch>=2.5.1; platform_machine != 'aarch64'",
    "torch>=2.5.1,<2.6.0; platform_machine == 'aarch64'",
    "tensorflow>=2.18.0,<2.20.0; platform_machine != 'aarch64'",
    "tensorflow-macos>=2.18.0,<2.20.0; sys_platform == 'darwin' and platform_machine == 'aarch64'",
    "keras>=3.8.0",
    "jax>=0.4.37",
    "jaxlib>=0.4.37; platform_machine != 'aarch64'",
    "optax>=0.2.4",
    "pygod>=1.1.0",
    "torch-geometric>=2.6.1",
    "optuna>=4.1.0",
    "hyperopt>=0.2.7",
    "auto-sklearn2>=1.0.0; platform_system == 'Linux'",
    "shap>=0.46.0",
    "lime>=0.2.0.1"
]
data-all = [
    "pyarrow>=18.1.0",
    "fastparquet>=2024.11.0",
    "openpyxl>=3.1.5",
    "xlsxwriter>=3.2.0",
    "h5py>=3.12.1",
    "sqlalchemy>=2.0.36",
    "psycopg2-binary>=2.9.10",
    "pyspark>=3.5.4"
]
all = [
    "scikit-learn>=1.6.0",
    "scipy>=1.15.0",
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.34.0",
    "httpx>=0.28.1",
    "requests>=2.32.3",
    "python-multipart>=0.0.20",
    "jinja2>=3.1.5",
    "aiofiles>=24.1.0",
    "typer[all]>=0.15.1",
    "rich>=13.9.4",
    "pyjwt>=2.10.1",
    "passlib[bcrypt]>=1.7.4",
    "redis>=5.2.1",
    "pyarrow>=18.1.0",
    "opentelemetry-api>=1.29.0",
    "opentelemetry-sdk>=1.29.0",
    "opentelemetry-instrumentation-fastapi>=0.50b0",
    "prometheus-client>=0.21.1",
    "psutil>=6.1.1",
    "tenacity>=9.0.0",
    "circuitbreaker>=2.0.0",
    "pydantic-settings>=2.8.0",
    "torch>=2.5.1",
    "tensorflow>=2.18.0,<2.20.0",
    "keras>=3.8.0",
    "jax>=0.4.37",
    "jaxlib>=0.4.37",
    "optax>=0.2.4",
    "fastparquet>=2024.11.0",
    "openpyxl>=3.1.5",
    "xlsxwriter>=3.2.0",
    "h5py>=3.12.1",
    "sqlalchemy>=2.0.36",
    "psycopg2-binary>=2.9.10",
    "pyspark>=3.5.4",
    "pygod>=1.1.0",
    "torch-geometric>=2.6.1",
    "optuna>=4.1.0",
    "hyperopt>=0.2.7",
    "auto-sklearn2>=1.0.0",
    "shap>=0.46.0",
    "lime>=0.2.0.1",
    "prometheus-fastapi-instrumentator>=7.0.0"
]

[project.scripts]
pynomaly = "pynomaly.presentation.cli.app:app"

[project.gui-scripts]
pynomaly-gui = "pynomaly.presentation.web.app:main"

# Hatch configuration
[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/pynomaly/_version.py"

# Buck2 integration (Buck2 is installed and available)
# [tool.hatch.build.hooks.buck2]
# Buck2 build hook configuration - accelerated builds with caching
# executable = "/mnt/c/Users/andre/buck2.exe"
# targets = [
#     "//:pynomaly-lib",
#     "//:pynomaly-cli", 
#     "//:pynomaly-api",
#     "//:pynomaly-web",
#     "//:web-assets",
#     "//:tailwind-build"
# ]
# web_assets = true
# artifacts_dir = "buck-out"

[tool.hatch.build]
include = [
    "src/pynomaly/**/*.py",
    "src/pynomaly/**/*.pyi",
    "src/pynomaly/py.typed",
]
exclude = [
    "src/pynomaly/**/*_test.py",
    "src/pynomaly/**/test_*.py",
]

[tool.hatch.build.targets.wheel]
packages = ["src/pynomaly"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/examples",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
]
exclude = [
    "/tests/test_environments",
    "**/__pycache__",
    "**/*.pyc",
]

# Hatch environments
[tool.hatch.envs.default]
dependencies = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
]
path = "environments/.venv"

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=pynomaly --cov-report=html --cov-report=xml {args:tests}"
cov-report = ["test-cov", "python -m webbrowser htmlcov/index.html"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "ruff>=0.8.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "mypy>=1.13.0",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/pynomaly tests}"
style = [
    "ruff check {args:.}",
    "black --check --diff {args:.}",
    "isort --check-only --diff {args:.}",
]
fmt = [
    "isort {args:.}",
    "black {args:.}",
    "ruff check --fix {args:.}",
    "style",
]
all = [
    "style",
    "typing",
]

[tool.hatch.envs.test]
dependencies = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-xdist>=3.6.0",
    "hypothesis>=6.115.0",
    "factory-boy>=3.3.1",
    "faker>=33.1.0",
]

[tool.hatch.envs.test.scripts]
run = "pytest {args:tests}"
run-cov = "pytest --cov=pynomaly --cov-report=html --cov-report=xml {args:tests}"
run-parallel = "pytest -n auto {args:tests}"

# Matrix testing for different Python versions
[[tool.hatch.envs.test.matrix]]
python = ["3.11", "3.12"]

[tool.hatch.envs.docs]
dependencies = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.27.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8080"

[tool.hatch.envs.dev]
dependencies = [
    "pre-commit>=4.0.0",
    "tox>=4.0.0",
    "pip-tools>=7.4.0",
    "hatch>=1.12.0",
]
extra-dependencies = [
    "pynomaly[test,lint,docs]",
]

[tool.hatch.envs.dev.scripts]
setup = [
    "pre-commit install",
    "pip install -e .[dev]",
]
update = "pre-commit autoupdate"
clean = [
    "find . -type f -name '*.pyc' -delete",
    "find . -type d -name '__pycache__' -delete",
    "rm -rf build/ dist/ *.egg-info/",
]

# Production environment for deployment
[tool.hatch.envs.prod]
extra-dependencies = ["pynomaly[production]"]

[tool.hatch.envs.prod.scripts]
serve-api = "uvicorn pynomaly.presentation.api.app:app --host 0.0.0.0 --port 8000"
serve-api-prod = "uvicorn pynomaly.presentation.api.app:app --host 0.0.0.0 --port 8000 --workers 4"

# CLI-specific environment
[tool.hatch.envs.cli]
extra-dependencies = ["pynomaly[cli,minimal]"]

[tool.hatch.envs.cli.scripts]
run = "pynomaly {args}"
test-cli = "pynomaly --help"

# UI Testing environment
[tool.hatch.envs.ui-test]
extra-dependencies = ["pynomaly[ui-test,test]"]

[tool.hatch.envs.ui-test.scripts]
install-browsers = "playwright install"
test = "pytest tests/ui/ {args}"
test-headed = "pytest tests/ui/ --headed {args}"
test-cross-browser = "pytest tests/ui/ --browser chromium --browser firefox --browser webkit {args}"
test-visual = "VISUAL_TESTING=true pytest tests/ui/test_visual_regression.py {args}"
test-accessibility = "pytest tests/ui/test_accessibility*.py {args}"
test-performance = "pytest tests/ui/test_performance*.py {args}"
report = "pytest tests/ui/ --html=test_reports/ui_test_report.html --self-contained-html {args}"

# Security environment for unified security scanning
[tool.hatch.envs.security]
extra-dependencies = ["pynomaly[lint]"]
dependencies = [
    "bandit[toml]>=1.7",
    "safety>=3.0",
    "pip-audit>=2.6",
]

[tool.hatch.envs.security.scripts]
scan = "python scripts/security/run_security_scans.py {args}"
quick = "bandit -r src/ -q && safety check -q"
# Individual security scan commands matching tox configuration
bandit-scan = "bandit -r src/ -f json -o artifacts/security/bandit_results.json -ll --skip B101,B601"
bandit-txt = "bandit -r src/ -f txt -o artifacts/security/bandit_results.txt -ll --skip B101,B601"
bandit-sarif = "bandit -r src/ -f sarif -o artifacts/security/bandit_results.sarif -ll --skip B101,B601"
safety-scan = "safety check --json --output artifacts/security/safety_results.json --continue-on-error"
pip-audit-scan = "pip-audit --format=json --output=artifacts/security/pip_audit_results.json"
pip-audit-cyclonedx = "pip-audit --format=cyclonedx --output=artifacts/security/pip_audit_cyclonedx.json"

# Tool configuration (existing tools)
[tool.ruff]
target-version = "py311"
line-length = 88
extend-exclude = [
    "migrations", 
    "environments", 
    ".env*", 
    ".venv*", 
    "test_env*", 
    "venv*"
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]

[tool.black]
target-version = ["py311"]
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
(
    environments
    | \.env.*
    | \.venv.*
    | test_env.*
    | venv.*
)
'''

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["pynomaly"]
skip_glob = [
    "environments/*",
    ".env*",
    ".venv*", 
    "test_env*",
    "venv*"
]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
exclude = [
    "environments/",
    "\\.env.*",
    "\\.venv.*",
    "test_env.*",
    "venv.*"
]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "torch: marks tests that require PyTorch",
    "stress: marks tests as stress tests",
    "e2e: marks tests as end-to-end tests",
    "security: marks tests as security tests",
    "ui: marks tests as UI tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "environments/*",
    ".env*/*",
    ".venv*/*",
    "test_env*/*",
    "venv*/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\\\(.*Protocol\\\\):",
    "@(abc\\\\.)?abstractmethod",
]

# Additional tool configurations for environment exclusion
[tool.bandit]
exclude_dirs = [
    "environments",
    ".env*",
    ".venv*",
    "test_env*",
    "venv*"
]

# PyLyzer configuration
[tool.pylyzer]
exclude = [
    "environments/",
    ".env*/",
    ".venv*/",
    "test_env*/",
    "venv*/"
]

# PyRight configuration  
[tool.pyright]
exclude = [
    "environments/",
    ".env*/",
    ".venv*/", 
    "test_env*/",
    "venv*/"
]

# YAPF configuration
[tool.yapf]
based_on_style = "black"
exclude = [
    "environments/**/*.py",
    ".env*/**/*.py",
    ".venv*/**/*.py",
    "test_env*/**/*.py",
    "venv*/**/*.py"
]
