[build-system]
requires = [
    "hatchling",
    "hatch-vcs",
]
build-backend = "hatchling.build"

# Legacy Poetry configuration removed - using Hatch build system

[project]
name = "pynomaly"
dynamic = ["version"]
description = "Production-ready Python anomaly detection platform with clean architecture, AutoML, and 40+ algorithms"
authors = [{name = "Pynomaly Team", email = "team@pynomaly.io"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
keywords = [
    "anomaly-detection", 
    "outlier-detection", 
    "machine-learning", 
    "automl", 
    "pyod", 
    "clean-architecture",
    "scikit-learn",
    "production-ready",
    "enterprise",
    "mlops"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering",
    "Framework :: FastAPI",
    "Typing :: Typed",
    "Environment :: Console",
    "Environment :: Web Environment",
]

dependencies = [
    "pyod>=2.0.5",
    "numpy>=1.26.0,<2.2.0",
    "pandas>=2.2.3",
    "polars>=1.19.0",
    "pydantic>=2.9.0",
    "structlog>=24.4.0",
    "dependency-injector>=4.42.0",
    "networkx>=3.0",
    # Essential system dependencies
    "pyyaml>=6.0",
    "pydantic-settings>=2.8.0",
    # Security and validation
    "cryptography>=41.0.0",
    "email-validator>=2.2.0",
]

[project.urls]
Homepage = "https://github.com/elgerytme/Pynomaly"
Repository = "https://github.com/elgerytme/Pynomaly"
Documentation = "https://github.com/elgerytme/Pynomaly/blob/main/docs/"
Issues = "https://github.com/elgerytme/Pynomaly/issues"
Changelog = "https://github.com/elgerytme/Pynomaly/blob/main/CHANGELOG.md"
"Bug Tracker" = "https://github.com/elgerytme/Pynomaly/issues"
"Source Code" = "https://github.com/elgerytme/Pynomaly"

[project.optional-dependencies]
# Core functionality extras
minimal = ["scikit-learn>=1.6.0", "scipy>=1.15.0"]
ml = ["scikit-learn>=1.6.0", "scipy>=1.15.0"]
standard = ["scikit-learn>=1.6.0", "scipy>=1.15.0", "pyarrow>=18.1.0"]

# Interface extras
api = [
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.34.0",
    "httpx>=0.28.1",
    "requests>=2.32.3",
    "python-multipart>=0.0.20",
    "jinja2>=3.1.5",
    "aiofiles>=24.1.0",
    "pydantic-settings>=2.8.0",
    # Session and authentication
    "itsdangerous>=2.2.0",
    "pyjwt>=2.10.1",
    "passlib[bcrypt]>=1.7.4",
    # Database support
    "sqlalchemy>=2.0.36",
    # Monitoring
    "prometheus-client>=0.21.1",
    "psutil>=6.1.1",
]
cli = [
    "typer>=0.15.1",
    "rich>=13.9.4",
    "shellingham>=1.3.0",
    "click>=8.0.0",
]
server = [
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.34.0",
    "httpx>=0.28.1",
    "requests>=2.32.3",
    "python-multipart>=0.0.20",
    "jinja2>=3.1.5",
    "aiofiles>=24.1.0",
    "pydantic-settings>=2.8.0",
    "typer>=0.15.1",
    "rich>=13.9.4",
    "scikit-learn>=1.6.0",
    "scipy>=1.15.0",
    "pyarrow>=18.1.0",
    # Authentication and security
    "itsdangerous>=2.2.0",
    "pyjwt>=2.10.1",
    "passlib[bcrypt]>=1.7.4",
    # Database and caching
    "sqlalchemy>=2.0.36",
    "redis>=5.2.1",
    # Monitoring and metrics
    "prometheus-client>=0.21.1",
    "psutil>=6.1.1",
    "prometheus-fastapi-instrumentator>=7.0.0",
    # CLI support
    "shellingham>=1.3.0",
    "click>=8.0.0",
]
graphql = [
    "strawberry-graphql[fastapi]>=0.218.0",
    "strawberry-graphql[pydantic]>=0.218.0"
]

# Infrastructure extras
auth = ["pyjwt>=2.10.1", "passlib[bcrypt]>=1.7.4"]
caching = ["redis>=5.2.1"]
monitoring = [
    "opentelemetry-api>=1.29.0",
    "opentelemetry-sdk>=1.29.0",
    "opentelemetry-instrumentation-fastapi>=0.50b0",
    "prometheus-client>=0.21.1",
    "psutil>=6.1.1",
    "prometheus-fastapi-instrumentator>=7.0.0"
]
infrastructure = [
    "tenacity>=9.0.0",
    "circuitbreaker>=2.0.0",
    "pydantic-settings>=2.8.0"
]
cloud-storage = [
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    "azure-storage-blob>=12.19.0",
    "azure-identity>=1.15.0",
    "google-cloud-storage>=2.10.0",
    "google-auth>=2.25.0",
    "minio>=7.2.0"
]

# Data processing extras
data-formats = [
    "pyarrow>=18.1.0",
    "fastparquet>=2024.11.0",
    "openpyxl>=3.1.5",
    "xlsxwriter>=3.2.0",
    "h5py>=3.12.1"
]
database = ["sqlalchemy>=2.0.36", "psycopg2-binary>=2.9.10"]
spark = ["pyspark>=3.5.4"]

# ML backend extras
torch = ["torch>=2.5.1"]
tensorflow = ["tensorflow>=2.18.0,<2.20.0", "keras>=3.8.0"]
jax = ["jax>=0.4.37", "jaxlib>=0.4.37", "optax>=0.2.4", "flax>=0.10.0"]

# Specialized ML extras
graph = ["pygod>=1.1.0", "torch-geometric>=2.6.1"]
automl = [
    "optuna>=4.1.0",
    "hyperopt>=0.2.7",
    "auto-sklearn2>=1.0.0",
    "scikit-learn>=1.6.0"
]
explainability = ["shap>=0.46.0", "lime>=0.2.0.1"]

# Natural Language Processing extras
nlp = [
    "spacy>=3.7.0",
    "gensim>=4.3.0",
    "transformers>=4.45.0",
    "sentence-transformers>=3.3.0",
    "textdistance>=4.6.0",
    "fuzzywuzzy[speedup]>=0.18.0",
    "nltk>=3.8.0",
    "tensorflow-hub>=0.16.1",
    "fasttext-wheel>=0.9.2"
]
text-processing = [
    "spacy>=3.7.0",
    "gensim>=4.3.0", 
    "sentence-transformers>=3.3.0",
    "textdistance>=4.6.0",
    "fuzzywuzzy[speedup]>=0.18.0",
    "nltk>=3.8.0"
]

# Production extras
production = [
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.34.0",
    "redis>=5.2.1",
    "opentelemetry-api>=1.29.0",
    "opentelemetry-sdk>=1.29.0",
    "opentelemetry-instrumentation-fastapi>=0.50b0",
    "prometheus-client>=0.21.1",
    "psutil>=6.1.1",
    "tenacity>=9.0.0",
    "circuitbreaker>=2.0.0",
    "pydantic-settings>=2.8.0",
    "pyjwt>=2.10.1",
    "passlib[bcrypt]>=1.7.4",
    "prometheus-fastapi-instrumentator>=7.0.0",
    "boto3>=1.34.0",
    "botocore>=1.34.0"
]

# Development extras
test = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-xdist>=3.6.0",
    "pytest-rerunfailures>=14.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.3.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.115.0",
    "factory-boy>=3.3.1",
    "faker>=33.1.0",
    "mutmut>=2.4.4",
    "cosmic-ray>=8.3.7",
    "responses>=0.24.0",
    "httpx>=0.28.1",
    "requests-mock>=1.11.0"
]
performance-test = [
    "pytest-benchmark>=4.0.0",
    "memray>=1.8.0",
    "memory-profiler>=0.61.0",
    "pympler>=0.9",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "pandas>=2.2.3",
    "locust>=2.14.0",
    "psutil>=6.1.1"
]
ui-test = [
    "playwright>=1.40.0",
    "pytest-playwright>=0.4.3",
    "pytest-html>=4.1.0",
    "pillow>=10.0.0",
    "percy-playwright>=1.0.4",
    "axe-playwright-python>=0.1.3",
    "lighthouse>=0.1.4",
    "pytest-benchmark>=4.0.0"
]
lint = [
    "ruff>=0.8.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "mypy>=1.13.0",
    "bandit>=1.8.0",
    "safety>=3.0.0"
]
docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.27.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0"
]
dev = [
    "pre-commit>=4.0.0",
    "tox>=4.0.0",
    "pip-tools>=7.4.0"
]

# Comprehensive combinations
ml-all = [
    "scikit-learn>=1.6.0",
    "scipy>=1.15.0",
    "torch>=2.5.1",
    "tensorflow>=2.18.0,<2.20.0",
    "keras>=3.8.0",
    "jax>=0.4.37",
    "jaxlib>=0.4.37",
    "optax>=0.2.4",
    "pygod>=1.1.0",
    "torch-geometric>=2.6.1",
    "optuna>=4.1.0",
    "hyperopt>=0.2.7",
    "auto-sklearn2>=1.0.0",
    "shap>=0.46.0",
    "lime>=0.2.0.1"
]
data-all = [
    "pyarrow>=18.1.0",
    "fastparquet>=2024.11.0",
    "openpyxl>=3.1.5",
    "xlsxwriter>=3.2.0",
    "h5py>=3.12.1",
    "sqlalchemy>=2.0.36",
    "psycopg2-binary>=2.9.10",
    "pyspark>=3.5.4"
]
all = [
    "scikit-learn>=1.6.0",
    "scipy>=1.15.0",
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.34.0",
    "httpx>=0.28.1",
    "requests>=2.32.3",
    "python-multipart>=0.0.20",
    "jinja2>=3.1.5",
    "aiofiles>=24.1.0",
    "typer[all]>=0.15.1",
    "rich>=13.9.4",
    "pyjwt>=2.10.1",
    "passlib[bcrypt]>=1.7.4",
    "redis>=5.2.1",
    "pyarrow>=18.1.0",
    "opentelemetry-api>=1.29.0",
    "opentelemetry-sdk>=1.29.0",
    "opentelemetry-instrumentation-fastapi>=0.50b0",
    "prometheus-client>=0.21.1",
    "psutil>=6.1.1",
    "tenacity>=9.0.0",
    "circuitbreaker>=2.0.0",
    "pydantic-settings>=2.8.0",
    "torch>=2.5.1",
    "tensorflow>=2.18.0,<2.20.0",
    "keras>=3.8.0",
    "jax>=0.4.37",
    "jaxlib>=0.4.37",
    "optax>=0.2.4",
    "fastparquet>=2024.11.0",
    "openpyxl>=3.1.5",
    "xlsxwriter>=3.2.0",
    "h5py>=3.12.1",
    "sqlalchemy>=2.0.36",
    "psycopg2-binary>=2.9.10",
    "pyspark>=3.5.4",
    "pygod>=1.1.0",
    "torch-geometric>=2.6.1",
    "optuna>=4.1.0",
    "hyperopt>=0.2.7",
    "auto-sklearn2>=1.0.0",
    "shap>=0.46.0",
    "lime>=0.2.0.1",
    "prometheus-fastapi-instrumentator>=7.0.0"
]

[project.scripts]
pynomaly = "pynomaly.presentation.cli.app:app"

[project.gui-scripts]
pynomaly-gui = "pynomaly.presentation.web.app:main"

# Hatch configuration
[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/pynomaly/_version.py"

# Buck2 integration (Buck2 is installed and available)
# [tool.hatch.build.hooks.buck2]
# Buck2 build hook configuration - accelerated builds with caching
# executable = "/mnt/c/Users/andre/buck2.exe"
# targets = [
#     "//:pynomaly-lib",
#     "//:pynomaly-cli",
#     "//:pynomaly-api",
#     "//:pynomaly-web",
#     "//:web-assets",
#     "//:tailwind-build"
# ]
# web_assets = true
# artifacts_dir = "buck-out"

[tool.hatch.build]
include = [
    "src/pynomaly/**/*.py",
    "src/pynomaly/**/*.pyi",
    "src/pynomaly/py.typed",
]
exclude = [
    "src/pynomaly/**/*_test.py",
    "src/pynomaly/**/test_*.py",
]

[tool.hatch.build.targets.wheel]
packages = ["src/pynomaly"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/examples",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
]
exclude = [
    "/tests/test_environments",
    "**/__pycache__",
    "**/*.pyc",
]

# Hatch environments
[tool.hatch.envs.default]
dependencies = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
]
path = "environments/.venv"

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=pynomaly --cov-report=html --cov-report=xml {args:tests}"
cov-report = ["test-cov", "python -m webbrowser htmlcov/index.html"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "ruff>=0.8.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "mypy>=1.13.0",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/pynomaly tests}"
style = [
    "ruff check {args:.}",
    "black --check --diff {args:.}",
    "isort --check-only --diff {args:.}",
]
fmt = [
    "isort {args:.}",
    "black {args:.}",
    "ruff check --fix {args:.}",
    "style",
]
all = [
    "style",
    "typing",
]

[tool.hatch.envs.test]
dependencies = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-xdist>=3.6.0",
    "pytest-rerunfailures>=14.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.3.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.115.0",
    "factory-boy>=3.3.1",
    "faker>=33.1.0",
    "mutmut>=2.4.4",
    "cosmic-ray>=8.3.7",
    "responses>=0.24.0",
    "httpx>=0.28.1",
    "requests-mock>=1.11.0",
]

[tool.hatch.envs.test.scripts]
# Core test runs
run = "pytest {args:tests}"
run-unit = "pytest tests/unit/ -m unit {args}"
run-integration = "pytest tests/integration/ -m integration {args}"
run-e2e = "pytest tests/e2e/ -m e2e {args}"
run-contract = "pytest tests/contract/ -m contract {args}"

# Coverage testing
run-cov = "pytest --cov=pynomaly --cov-report=html --cov-report=xml --cov-fail-under=90 {args:tests}"
run-cov-unit = "pytest tests/unit/ --cov=pynomaly --cov-report=html --cov-report=xml --cov-fail-under=90 {args}"
run-cov-integration = "pytest tests/integration/ --cov=pynomaly --cov-report=html --cov-report=xml --cov-fail-under=90 {args}"

# Parallel testing
run-parallel = "pytest -n auto {args:tests}"
run-parallel-unit = "pytest tests/unit/ -n auto -m unit {args}"
run-parallel-integration = "pytest tests/integration/ -n auto -m integration {args}"

# Property-based testing
run-property = "pytest -m property --hypothesis-show-statistics {args:tests}"
run-property-extensive = "pytest -m property --hypothesis-show-statistics --hypothesis-max-examples=1000 {args:tests}"

# Performance testing
run-performance = "pytest -m performance --benchmark-only {args:tests}"
run-stress = "pytest -m stress {args:tests}"

# Mutation testing
run-mutation-mutmut = "mutmut run"
run-mutation-cosmic = "cosmic-ray run"
check-mutation = "mutmut show"

# Quality gates
run-quality = "pytest --cov=pynomaly --cov-report=html --cov-report=xml --cov-fail-under=90 -n auto {args:tests}"
run-ci = "pytest --cov=pynomaly --cov-report=html --cov-report=xml --cov-fail-under=90 -n auto --tb=short {args:tests}"

# Test reporting
run-report = "pytest --cov=pynomaly --cov-report=html --cov-report=xml --html=test_reports/test_report.html --self-contained-html {args:tests}"

# Matrix testing for different Python versions
[[tool.hatch.envs.test.matrix]]
python = ["3.11", "3.12"]

[tool.hatch.envs.docs]
dependencies = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.27.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8080"

[tool.hatch.envs.dev]
dependencies = [
    "pre-commit>=4.0.0",
    "tox>=4.0.0",
    "pip-tools>=7.4.0",
    "hatch>=1.12.0",
]
extra-dependencies = [
    "pynomaly[test,lint,docs]",
]

[tool.hatch.envs.dev.scripts]
setup = [
    "pre-commit install",
    "pip install -e .[dev]",
]
update = "pre-commit autoupdate"
clean = [
    "find . -type f -name '*.pyc' -delete",
    "find . -type d -name '__pycache__' -delete",
    "rm -rf build/ dist/ *.egg-info/",
]

# Production environment for deployment
[tool.hatch.envs.prod]
extra-dependencies = ["pynomaly[production]"]

[tool.hatch.envs.prod.scripts]
serve-api = "uvicorn pynomaly.presentation.api.app:app --host 0.0.0.0 --port 8000"
serve-api-prod = "uvicorn pynomaly.presentation.api.app:app --host 0.0.0.0 --port 8000 --workers 4"

# CLI-specific environment
[tool.hatch.envs.cli]
extra-dependencies = ["pynomaly[cli,minimal]"]

[tool.hatch.envs.cli.scripts]
run = "pynomaly {args}"
test-cli = "pynomaly --help"

# UI Testing environment
[tool.hatch.envs.ui-test]
extra-dependencies = ["pynomaly[ui-test,test]"]

[tool.hatch.envs.ui-test.scripts]
install-browsers = "playwright install"
test = "pytest tests/ui/ {args}"
test-headed = "pytest tests/ui/ --headed {args}"
test-cross-browser = "pytest tests/ui/ --browser chromium --browser firefox --browser webkit {args}"
test-visual = "VISUAL_TESTING=true pytest tests/ui/test_visual_regression.py {args}"
test-accessibility = "pytest tests/ui/test_accessibility*.py {args}"
test-performance = "pytest tests/ui/test_performance*.py {args}"
report = "pytest tests/ui/ --html=test_reports/ui_test_report.html --self-contained-html {args}"

# Tool configuration (existing tools)
[tool.ruff]
target-version = "py311"
line-length = 88
extend-exclude = [
    "migrations",
    "environments",
    ".env*",
    ".venv*",
    "test_env*",
    "venv*"
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]

# Ignore specific rules that conflict with FastAPI patterns
ignore = [
    "B008",  # Allow function calls in argument defaults (FastAPI Depends pattern)
]

[tool.black]
target-version = ["py311"]
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
(
    environments
    | \.env.*
    | \.venv.*
    | test_env.*
    | venv.*
)
'''

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["pynomaly"]
skip_glob = [
    "environments/*",
    ".env*",
    ".venv*",
    "test_env*",
    "venv*"
]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
exclude = [
    "environments/",
    "\\.env.*",
    "\\.venv.*",
    "test_env.*",
    "venv.*"
]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--tb=short",
    "--disable-warnings",
    "--color=yes",
    "--durations=10",
    "--show-capture=no",
    "--maxfail=5"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning", 
    "ignore::FutureWarning",
    "ignore::UserWarning:pydantic.*",
    "ignore::UserWarning:dependency_injector.*",
    "ignore::UserWarning:sklearn.*",
    "ignore::ResourceWarning"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "api: API tests",
    "cli: CLI tests", 
    "ui: UI/frontend tests",
    "performance: Performance and load tests",
    "security: Security tests",
    "slow: Slow tests (may take more than 1 second)",
    "fast: Fast tests (should complete in under 1 second)",
    "database: Tests that require database",
    "redis: Tests that require Redis",
    "mongodb: Tests that require MongoDB",
    "external: Tests that require external services",
    "auth: Authentication/authorization tests",
    "model: Machine learning model tests",
    "torch: Tests requiring PyTorch",
    "tensorflow: Tests requiring TensorFlow", 
    "jax: Tests requiring JAX",
    "contract: Contract/API validation tests",
    "automl: AutoML related tests",
    "streaming: Real-time processing tests",
    "ui: User interface tests",
    "smoke: Smoke tests for basic functionality",
    "regression: Regression tests",
    "acceptance: Acceptance tests",
    "contract: Contract tests",
    "property: Property-based tests",
    "mutation: Mutation tests",
    "load: Load tests",
    "stress: Stress tests",
    "benchmark: Benchmark tests",
    "e2e: End-to-end tests",
    "docker: Tests that require Docker",
    "kubernetes: Tests that require Kubernetes",
    "async: Async tests",
    "sync: Sync tests",
    "network: Network-dependent tests",
    "filesystem: Filesystem-dependent tests",
    "memory: Memory-intensive tests",
    "cpu: CPU-intensive tests",
    "ml: Machine learning tests",
    "automl: AutoML tests",
    "xfail: Expected to fail",
    "skip: Skip these tests"
]
# timeout = 300  # Disabled due to configuration conflicts
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
data_file = ".coverage"
omit = [
    "environments/*",
    ".env*/*",
    ".venv*/*",
    "test_env*/*",
    "venv*/*",
    "*/tests/*",
    "*/test_*.py",
    "*/*_test.py",
    "*/conftest.py",
    "*/__init__.py",
    "*/migrations/*",
    "*/settings/*",
    "*/venv/*",
    "*/virtualenv/*",
    ".tox/*",
    "setup.py",
    "*/site-packages/*",
]

[tool.coverage.report]
show_missing = true
ship_to_report = true
fail_under = 90
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\\\(.*Protocol\\\\):",
    "@(abc\\\\.)?abstractmethod",
    "# pragma: no cover",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "def __repr__",
    "def __str__",
    "def __unicode__",
    "\\.\\.\\.",
    "pass",
]
ignore_errors = true

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Mutation testing configuration
[tool.mutmut]
paths_to_mutate = "src/"
backup = false
show_diffs = true
test_command = "python -m pytest tests/"
run_tests_in_parallel = true

[tool.cosmic-ray]
module-path = "src/pynomaly"
timeout = 10.0
test-command = "python -m pytest tests/"

# Additional tool configurations for environment exclusion
[tool.bandit]
exclude_dirs = [
    "environments",
    ".env*",
    ".venv*",
    "test_env*",
    "venv*"
]

# PyLyzer configuration
[tool.pylyzer]
exclude = [
    "environments/",
    ".env*/",
    ".venv*/",
    "test_env*/",
    "venv*/"
]

# PyRight configuration
[tool.pyright]
exclude = [
    "environments/",
    ".env*/",
    ".venv*/",
    "test_env*/",
    "venv*/"
]

# YAPF configuration
[tool.yapf]
based_on_style = "black"
exclude = [
    "environments/**/*.py",
    ".env*/**/*.py",
    ".venv*/**/*.py",
    "test_env*/**/*.py",
    "venv*/**/*.py"
]
