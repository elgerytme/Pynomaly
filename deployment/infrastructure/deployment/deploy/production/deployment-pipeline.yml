# Production Deployment Pipeline Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: deployment-config
data:
  # Deployment stages configuration
  stages: |
    stages:
      - name: test
        description: "Run comprehensive test suite"
        commands:
          - "python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html"
          - "python -m pytest tests/security/ -v --tb=short"
          - "python -m pytest tests/performance/ -v --tb=short"
        success_criteria:
          - test_coverage: ">= 90%"
          - security_tests: "all_pass"
          - performance_tests: "all_pass"
        
      - name: security_scan
        description: "Security vulnerability scanning"
        commands:
          - "safety check --json"
          - "bandit -r src/ -f json"
          - "semgrep --config=auto src/"
        success_criteria:
          - vulnerabilities: "none_critical"
          - security_score: ">= 8/10"
        
      - name: build
        description: "Build production containers"
        commands:
          - "docker build -f deploy/production/Dockerfile.api -t pynomaly-api:${VERSION} ."
          - "docker build -f deploy/production/Dockerfile.worker -t pynomaly-worker:${VERSION} ."
        success_criteria:
          - build_status: "success"
          - image_size: "<= 1GB"
        
      - name: integration_test
        description: "Integration testing with production-like environment"
        commands:
          - "docker-compose -f deploy/production/docker-compose.test.yml up -d"
          - "python -m pytest tests/integration/ -v --tb=short"
          - "python -m pytest tests/e2e/ -v --tb=short"
        success_criteria:
          - integration_tests: "all_pass"
          - api_health: "healthy"
        
      - name: staging_deploy
        description: "Deploy to staging environment"
        commands:
          - "docker-compose -f deploy/staging/docker-compose.yml up -d"
          - "python scripts/health_check.py --environment=staging"
        success_criteria:
          - deployment_status: "success"
          - health_check: "all_services_healthy"
        
      - name: production_deploy
        description: "Deploy to production environment"
        commands:
          - "docker-compose -f deploy/production/docker-compose.production.yml up -d"
          - "python scripts/health_check.py --environment=production"
          - "python scripts/smoke_test.py --environment=production"
        success_criteria:
          - deployment_status: "success"
          - health_check: "all_services_healthy"
          - smoke_tests: "all_pass"

  # Quality gates configuration
  quality_gates: |
    quality_gates:
      pre_deployment:
        - metric: "test_coverage"
          threshold: 90
          operator: ">="
        - metric: "security_vulnerabilities"
          threshold: 0
          operator: "=="
        - metric: "performance_regression"
          threshold: 10
          operator: "<="
      
      post_deployment:
        - metric: "api_response_time"
          threshold: 500
          operator: "<="
        - metric: "error_rate"
          threshold: 1
          operator: "<="
        - metric: "memory_usage"
          threshold: 80
          operator: "<="

  # Rollback configuration
  rollback: |
    rollback:
      triggers:
        - condition: "health_check_failure"
          timeout: "5m"
        - condition: "error_rate > 5%"
          timeout: "2m"
        - condition: "response_time > 2s"
          timeout: "3m"
      
      strategy:
        type: "blue_green"
        steps:
          - "stop_new_traffic"
          - "drain_connections"
          - "rollback_containers"
          - "verify_rollback"
          - "resume_traffic"