# Development Dockerfile for Pynomaly
# Provides Python 3.11, Node 20, Chrome/Playwright for comprehensive testing
# Optimized for reproducible test environments and UI testing

# Use Python 3.11 slim as base for smaller image size
FROM python:3.11-slim-bullseye

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app/src \
    PYNOMALY_ENVIRONMENT=development \
    PYNOMALY_LOG_LEVEL=INFO \
    DEBIAN_FRONTEND=noninteractive \
    NODE_VERSION=20 \
    PLAYWRIGHT_BROWSERS_PATH=/app/browsers

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    # Essential build tools
    build-essential \
    gcc \
    g++ \
    make \
    git \
    curl \
    wget \
    gnupg \
    ca-certificates \
    # Python development dependencies
    python3-dev \
    python3-pip \
    python3-venv \
    # Node.js dependencies
    curl \
    gnupg \
    # Chrome dependencies for Playwright
    libglib2.0-0 \
    libnss3 \
    libnspr4 \
    libatk-bridge2.0-0 \
    libdrm2 \
    libxkbcommon0 \
    libgtk-3-0 \
    libatspi2.0-0 \
    libxss1 \
    libasound2 \
    # Additional UI testing dependencies
    xvfb \
    fonts-liberation \
    libappindicator3-1 \
    libxrandr2 \
    libxcomposite1 \
    libxcursor1 \
    libxdamage1 \
    libxi6 \
    libxtst6 \
    # Database clients (for integration tests)
    postgresql-client \
    sqlite3 \
    # Networking tools
    netcat \
    # Cleanup
    && rm -rf /var/lib/apt/lists/*

# Install Node.js 20.x
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && npm install -g npm@latest yarn@latest

# Install Poetry for dependency management
RUN pip install --no-cache-dir poetry==1.7.1

# Configure Poetry
ENV POETRY_NO_INTERACTION=1 \
    POETRY_VENV_IN_PROJECT=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache

# Copy project files
COPY pyproject.toml poetry.lock ./
COPY requirements.lock requirements-dev.lock ./

# Install Python dependencies
RUN poetry install --with dev --no-root && rm -rf $POETRY_CACHE_DIR

# Install additional testing dependencies
RUN poetry run pip install \
    playwright==1.40.0 \
    pytest-playwright==0.4.3 \
    pytest-html==4.1.0 \
    pytest-benchmark==4.0.0 \
    selenium==4.15.0 \
    pytest-selenium==4.1.0 \
    pillow==10.0.0 \
    percy-playwright==1.0.4 \
    axe-playwright-python==0.1.3 \
    mutmut==2.4.0 \
    pip-audit==2.6.0

# Install Playwright browsers
RUN poetry run playwright install chromium firefox webkit \
    && poetry run playwright install-deps

# Create directories for test artifacts
RUN mkdir -p /app/reports /app/test_reports /app/browsers /app/screenshots

# Copy source code
COPY src/ src/
COPY tests/ tests/
COPY scripts/ scripts/
COPY tox.ini pytest.ini ./

# Copy development configuration files
COPY .gitignore .pre-commit-config.yaml ./

# Create a non-root user for security
RUN groupadd -g 1000 pynomaly && \
    useradd -u 1000 -g 1000 -m -s /bin/bash pynomaly && \
    chown -R pynomaly:pynomaly /app

# Switch to non-root user
USER pynomaly

# Set up development environment
RUN poetry run pre-commit install 2>/dev/null || echo "Pre-commit hooks not installed"

# Expose ports for development services
EXPOSE 8000 3000 5000 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import pynomaly; print('Health check passed')" || exit 1

# Default command for development
CMD ["poetry", "run", "python", "-m", "pynomaly.presentation.cli.app", "--help"]

# Development environment setup script
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
echo "Setting up Pynomaly development environment..."\n\
\n\
# Install dependencies\n\
poetry install --with dev\n\
\n\
# Install pre-commit hooks\n\
poetry run pre-commit install\n\
\n\
# Install Playwright browsers\n\
poetry run playwright install\n\
\n\
# Run basic tests to verify setup\n\
poetry run pytest tests/unit/ -v --tb=short || echo "Some tests may fail in initial setup"\n\
\n\
echo "Development environment ready!"\n\
echo "Available commands:"\n\
echo "  poetry run tox -e lint    # Run linting"\n\
echo "  poetry run tox -e type    # Run type checking"\n\
echo "  poetry run tox -e unit    # Run unit tests"\n\
echo "  poetry run tox -e integration  # Run integration tests"\n\
echo "  poetry run tox -e mutation     # Run mutation tests"\n\
echo "  poetry run tox -e e2e-ui       # Run UI tests"\n\
echo "  poetry run pytest tests/      # Run all tests"\n\
echo "  poetry run pynomaly --help    # CLI help"\n\
' > /app/setup-dev.sh && chmod +x /app/setup-dev.sh

# Build information
LABEL maintainer="Pynomaly Team <team@pynomaly.io>" \
      version="1.0.0" \
      description="Development environment for Pynomaly with Python 3.11, Node 20, Chrome/Playwright" \
      python.version="3.11" \
      node.version="20" \
      playwright.version="1.40.0"

# Docker build instructions
# Build: docker build -f Dockerfile.dev -t pynomaly:dev .
# Run: docker run -it -v $(pwd):/app -p 8000:8000 -p 3000:3000 pynomaly:dev bash
# Setup: docker run -it -v $(pwd):/app pynomaly:dev ./setup-dev.sh
