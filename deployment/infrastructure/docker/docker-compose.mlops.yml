version: '3.8'

services:
  # MLOps API Server with Model Serving
  pynomaly-mlops:
    build:
      context: .
      dockerfile: Dockerfile.mlops
    container_name: pynomaly-mlops
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "8001:8001"  # Model serving port
    environment:
      - PYNOMALY_ENVIRONMENT=development
      - PYTHONPATH=/app/src
      - LOG_LEVEL=INFO
      - WORKERS=2
      - MLOPS_STORAGE_PATH=/app/mlops
      - MODEL_REGISTRY_PATH=/app/mlops/model_registry
      - DEPLOYMENT_PATH=/app/mlops/deployments
      - MONITORING_ENABLED=true
      - DATA_VALIDATION_ENABLED=true
    volumes:
      - ./mlops:/app/mlops
      - ./src:/app/src
      - ./data:/app/data
      - mlops-storage:/app/storage
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - postgres
      - redis

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pynomaly-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=pynomaly_mlops
      - POSTGRES_USER=pynomaly
      - POSTGRES_PASSWORD=pynomaly_dev_pass
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pynomaly -d pynomaly_mlops"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Task Queue
  redis:
    image: redis:7-alpine
    container_name: pynomaly-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: pynomaly-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=24h'
    networks:
      - mlops-network

  # Grafana for Monitoring Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: pynomaly-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - mlops-network

  # Model Training Worker
  model-trainer:
    build:
      context: .
      dockerfile: Dockerfile.mlops
    container_name: pynomaly-trainer
    restart: "no"
    environment:
      - PYNOMALY_ENVIRONMENT=development
      - PYTHONPATH=/app/src
      - MLOPS_STORAGE_PATH=/app/mlops
      - WORKER_TYPE=trainer
    volumes:
      - ./mlops:/app/mlops
      - ./src:/app/src
      - ./data:/app/data
    networks:
      - mlops-network
    depends_on:
      - pynomaly-mlops
    profiles:
      - training
    command: ["python", "-m", "pynomaly.application.services.training_service", "--mode", "worker"]

  # Data Quality Monitor
  data-monitor:
    build:
      context: .
      dockerfile: Dockerfile.mlops
    container_name: pynomaly-data-monitor
    restart: unless-stopped
    environment:
      - PYNOMALY_ENVIRONMENT=development
      - PYTHONPATH=/app/src
      - MLOPS_STORAGE_PATH=/app/mlops
      - WORKER_TYPE=data_monitor
    volumes:
      - ./mlops:/app/mlops
      - ./src:/app/src
      - ./data:/app/data
    networks:
      - mlops-network
    depends_on:
      - pynomaly-mlops
    command: ["python", "-m", "pynomaly.infrastructure.data_quality.data_validation", "--monitor", "--interval", "300"]

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:
  mlops-storage:

networks:
  mlops-network:
    driver: bridge