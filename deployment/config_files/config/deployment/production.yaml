# Production Deployment Configuration for Pynomaly

metadata:
  name: "pynomaly-production-deployment"
  version: "2.0.0"
  description: "Production deployment configuration for Pynomaly platform"
  created_at: "2024-07-10T00:00:00Z"
  updated_at: "2024-07-10T00:00:00Z"

# Environment Configuration
environment:
  name: "production"
  namespace: "pynomaly-prod"
  domain: "pynomaly.ai"
  region: "us-east-1"
  availability_zones:
    - "us-east-1a"
    - "us-east-1b"
    - "us-east-1c"

# Container Configuration
container:
  registry: "ghcr.io/pynomaly/pynomaly"
  image_tag: "latest"
  pull_policy: "Always"
  restart_policy: "Always"

# Deployment Strategy
deployment:
  strategy: "rolling"
  max_unavailable: "25%"
  max_surge: "25%"
  timeout: 1800  # 30 minutes
  rollback_on_failure: true
  min_ready_seconds: 30
  revision_history_limit: 10

# Resource Configuration
resources:
  api:
    replicas:
      min: 3
      max: 50
      initial: 5
    requests:
      cpu: "500m"
      memory: "1Gi"
      ephemeral_storage: "1Gi"
    limits:
      cpu: "2000m"
      memory: "4Gi"
      ephemeral_storage: "5Gi"
    
  worker:
    replicas:
      min: 2
      max: 20
      initial: 3
    requests:
      cpu: "1000m"
      memory: "2Gi"
      ephemeral_storage: "1Gi"
    limits:
      cpu: "4000m"
      memory: "8Gi"
      ephemeral_storage: "5Gi"

  database:
    postgres:
      storage: "100Gi"
      storage_class: "fast-ssd"
      backup_retention: "30d"
      instances: 3
      cpu: "2000m"
      memory: "8Gi"
    
    redis:
      storage: "20Gi"
      storage_class: "fast-ssd"
      instances: 3
      cpu: "500m"
      memory: "2Gi"
    
    mongodb:
      storage: "200Gi"
      storage_class: "fast-ssd"
      instances: 3
      cpu: "1000m"
      memory: "4Gi"

# Autoscaling Configuration
autoscaling:
  enabled: true
  
  horizontal_pod_autoscaler:
    api:
      min_replicas: 3
      max_replicas: 50
      target_cpu_utilization: 70
      target_memory_utilization: 80
      scale_up_stabilization_window: 300  # 5 minutes
      scale_down_stabilization_window: 900  # 15 minutes
    
    worker:
      min_replicas: 2
      max_replicas: 20
      target_cpu_utilization: 80
      target_memory_utilization: 85
      scale_up_stabilization_window: 180  # 3 minutes
      scale_down_stabilization_window: 600  # 10 minutes
  
  vertical_pod_autoscaler:
    enabled: true
    update_mode: "Auto"
    resource_policy:
      min_allowed:
        cpu: "100m"
        memory: "128Mi"
      max_allowed:
        cpu: "8000m"
        memory: "16Gi"

# Networking Configuration
networking:
  service_mesh:
    enabled: true
    provider: "istio"
    mtls: true
  
  ingress:
    enabled: true
    class: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: "50m"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    tls:
      enabled: true
      secret_name: "pynomaly-tls"
      hosts:
        - "pynomaly.ai"
        - "api.pynomaly.ai"
        - "*.pynomaly.ai"
  
  network_policies:
    enabled: true
    default_deny: true
    allowed_namespaces:
      - "kube-system"
      - "monitoring"
      - "logging"

# Security Configuration
security:
  pod_security_standards:
    enforce: "restricted"
    audit: "restricted"
    warn: "restricted"
  
  security_context:
    run_as_non_root: true
    run_as_user: 10001
    run_as_group: 10001
    fs_group: 10001
    fs_group_change_policy: "OnRootMismatch"
    seccomp_profile:
      type: "RuntimeDefault"
  
  rbac:
    enabled: true
    create_service_account: true
    service_account_annotations:
      eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT:role/pynomaly-production-role"
  
  secrets:
    encryption_at_rest: true
    rotation:
      enabled: true
      schedule: "0 2 * * 0"  # Weekly on Sunday at 2 AM
    
    external_secrets:
      enabled: true
      provider: "aws-secrets-manager"
      region: "us-east-1"

# Health Checks
health_checks:
  liveness_probe:
    enabled: true
    path: "/health/live"
    initial_delay_seconds: 60
    period_seconds: 30
    timeout_seconds: 10
    failure_threshold: 3
    success_threshold: 1
  
  readiness_probe:
    enabled: true
    path: "/health/ready"
    initial_delay_seconds: 30
    period_seconds: 10
    timeout_seconds: 5
    failure_threshold: 3
    success_threshold: 1
  
  startup_probe:
    enabled: true
    path: "/health/startup"
    initial_delay_seconds: 30
    period_seconds: 10
    timeout_seconds: 5
    failure_threshold: 30
    success_threshold: 1

# Monitoring and Observability
monitoring:
  metrics:
    enabled: true
    prometheus:
      enabled: true
      port: 9090
      path: "/metrics"
      scrape_interval: "30s"
      scrape_timeout: "10s"
    
    custom_metrics:
      enabled: true
      adapter: "prometheus"
  
  logging:
    enabled: true
    level: "INFO"
    format: "json"
    
    log_aggregation:
      enabled: true
      provider: "fluentbit"
      destination: "elasticsearch"
      retention: "90d"
  
  tracing:
    enabled: true
    provider: "jaeger"
    sampling_rate: 0.1
    collector_endpoint: "http://jaeger-collector:14268/api/traces"
  
  alerting:
    enabled: true
    
    alert_rules:
      - name: "high-cpu-usage"
        condition: "rate(container_cpu_usage_seconds_total[5m]) > 0.8"
        severity: "warning"
        duration: "5m"
      
      - name: "high-memory-usage"
        condition: "container_memory_usage_bytes / container_spec_memory_limit_bytes > 0.9"
        severity: "warning"
        duration: "5m"
      
      - name: "pod-crash-looping"
        condition: "rate(kube_pod_container_status_restarts_total[15m]) > 0"
        severity: "critical"
        duration: "0m"
      
      - name: "api-high-error-rate"
        condition: "rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m]) > 0.05"
        severity: "critical"
        duration: "2m"
    
    notification_channels:
      - type: "slack"
        webhook_url: "${SLACK_WEBHOOK_URL}"
        channel: "#alerts-production"
      
      - type: "pagerduty"
        integration_key: "${PAGERDUTY_INTEGRATION_KEY}"
      
      - type: "email"
        smtp_server: "smtp.company.com"
        recipients:
          - "oncall@company.com"
          - "devops@company.com"

# Backup and Disaster Recovery
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention: "30d"
  
  databases:
    postgres:
      method: "pg_dump"
      compression: true
      encryption: true
      storage:
        type: "s3"
        bucket: "pynomaly-backups-prod"
        region: "us-east-1"
    
    mongodb:
      method: "mongodump"
      compression: true
      encryption: true
      storage:
        type: "s3"
        bucket: "pynomaly-backups-prod"
        region: "us-east-1"
  
  disaster_recovery:
    rpo: "1h"  # Recovery Point Objective
    rto: "4h"  # Recovery Time Objective
    
    cross_region_replication:
      enabled: true
      destination_region: "us-west-2"
      replication_schedule: "0 */6 * * *"  # Every 6 hours

# Quality Gates
quality_gates:
  pre_deployment:
    - name: "security-scan"
      type: "security"
      threshold: "high"
      required: true
    
    - name: "unit-tests"
      type: "test"
      threshold: "95%"
      required: true
    
    - name: "integration-tests"
      type: "test"
      threshold: "90%"
      required: true
    
    - name: "performance-tests"
      type: "performance"
      threshold: "p95 < 500ms"
      required: true
  
  post_deployment:
    - name: "health-check"
      type: "health"
      timeout: "300s"
      required: true
    
    - name: "smoke-tests"
      type: "test"
      timeout: "600s"
      required: true
    
    - name: "load-test"
      type: "performance"
      duration: "300s"
      required: false

# Environment Variables
environment_variables:
  # Application Configuration
  - name: "ENVIRONMENT"
    value: "production"
  
  - name: "LOG_LEVEL"
    value: "INFO"
  
  - name: "DEBUG"
    value: "false"
  
  # Database Configuration
  - name: "DATABASE_URL"
    value_from:
      secret_key_ref:
        name: "pynomaly-secrets"
        key: "database-url"
  
  - name: "REDIS_URL"
    value_from:
      secret_key_ref:
        name: "pynomaly-secrets"
        key: "redis-url"
  
  - name: "MONGODB_URL"
    value_from:
      secret_key_ref:
        name: "pynomaly-secrets"
        key: "mongodb-url"
  
  # Security Configuration
  - name: "SECRET_KEY"
    value_from:
      secret_key_ref:
        name: "pynomaly-secrets"
        key: "secret-key"
  
  - name: "JWT_SECRET"
    value_from:
      secret_key_ref:
        name: "pynomaly-secrets"
        key: "jwt-secret"
  
  # External Services
  - name: "SMTP_HOST"
    value: "smtp.company.com"
  
  - name: "SMTP_PORT"
    value: "587"
  
  - name: "SMTP_USERNAME"
    value_from:
      secret_key_ref:
        name: "pynomaly-secrets"
        key: "smtp-username"
  
  - name: "SMTP_PASSWORD"
    value_from:
      secret_key_ref:
        name: "pynomaly-secrets"
        key: "smtp-password"
  
  # Monitoring Configuration
  - name: "PROMETHEUS_ENDPOINT"
    value: "http://prometheus:9090"
  
  - name: "GRAFANA_ENDPOINT"
    value: "http://grafana:3000"
  
  - name: "JAEGER_ENDPOINT"
    value: "http://jaeger-collector:14268"

# Feature Flags
feature_flags:
  # Core Features
  advanced_analytics: true
  real_time_processing: true
  auto_scaling: true
  multi_tenant: true
  
  # Security Features
  mfa_enabled: true
  audit_logging: true
  encryption_at_rest: true
  encryption_in_transit: true
  
  # Performance Features
  caching_enabled: true
  compression_enabled: true
  connection_pooling: true
  
  # Experimental Features
  ml_auto_tuning: false
  beta_ui: false
  advanced_visualizations: true

# Maintenance Windows
maintenance:
  scheduled_maintenance:
    enabled: true
    schedule: "0 3 * * 0"  # Sunday at 3 AM
    duration: "2h"
    notification_advance: "24h"
  
  emergency_maintenance:
    enabled: true
    auto_approve_critical: true
    max_duration: "1h"
  
  patching:
    os_patches:
      enabled: true
      schedule: "0 4 * * 6"  # Saturday at 4 AM
      auto_reboot: false
    
    security_patches:
      enabled: true
      auto_apply: true
      schedule: "0 5 * * 1"  # Monday at 5 AM

# Compliance and Governance
compliance:
  data_protection:
    gdpr_compliance: true
    data_retention_policy: "7y"
    data_encryption: true
    audit_trail: true
  
  security_standards:
    soc2_compliance: true
    iso27001_compliance: true
    hipaa_compliance: false
  
  governance:
    change_management: true
    approval_workflow: true
    rollback_procedures: true
    incident_response: true
