1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "pynomaly.fullname" . }}-api)
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "pynomaly.fullname" . }}-api'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "pynomaly.fullname" . }}-api --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "pynomaly.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=api" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Check the status of your deployment:
   kubectl get all -n {{ .Release.Namespace }} -l app.kubernetes.io/instance={{ .Release.Name }}

3. View application logs:
   # API logs
   kubectl logs -f -n {{ .Release.Namespace }} deployment/{{ include "pynomaly.fullname" . }}-api
   
   # Worker logs
   kubectl logs -f -n {{ .Release.Namespace }} statefulset/{{ include "pynomaly.fullname" . }}-worker
   
   # Scheduler logs
   kubectl logs -f -n {{ .Release.Namespace }} deployment/{{ include "pynomaly.fullname" . }}-scheduler

4. Monitor your application:
{{- if .Values.monitoring.enabled }}
   {{- if .Values.monitoring.grafana.enabled }}
   # Access Grafana dashboard
   kubectl port-forward -n {{ .Release.Namespace }} svc/{{ include "pynomaly.fullname" . }}-grafana 3000:80
   # Open http://localhost:3000 (admin/{{ .Values.monitoring.grafana.adminPassword | default "admin" }})
   {{- end }}
   
   {{- if .Values.monitoring.prometheus.enabled }}
   # Access Prometheus
   kubectl port-forward -n {{ .Release.Namespace }} svc/{{ include "pynomaly.fullname" . }}-prometheus 9090:9090
   # Open http://localhost:9090
   {{- end }}
{{- end }}

5. Scale your deployment:
   # Scale API replicas
   kubectl scale deployment {{ include "pynomaly.fullname" . }}-api --replicas=5 -n {{ .Release.Namespace }}
   
   # Scale workers
   kubectl scale statefulset {{ include "pynomaly.fullname" . }}-worker --replicas=10 -n {{ .Release.Namespace }}

6. Health checks:
   # Check API health
   kubectl exec -n {{ .Release.Namespace }} deployment/{{ include "pynomaly.fullname" . }}-api -- curl -f http://localhost:8000/api/v1/health
   
   # Check all component status
   kubectl get pods -n {{ .Release.Namespace }} -l app.kubernetes.io/instance={{ .Release.Name }}

{{- if .Values.postgresql.enabled }}
7. Connect to PostgreSQL:
   export POSTGRES_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ include "pynomaly.fullname" . }}-secrets -o jsonpath="{.data.postgres-password}" | base64 --decode)
   kubectl run {{ include "pynomaly.fullname" . }}-postgresql-client --rm --tty -i --restart='Never' --namespace {{ .Release.Namespace }} --image docker.io/bitnami/postgresql:15 --env="PGPASSWORD=$POSTGRES_PASSWORD" \
     --command -- psql --host {{ include "pynomaly.fullname" . }}-postgresql --username pynomaly --dbname pynomaly --port 5432
{{- end }}

{{- if .Values.redis.enabled }}
8. Connect to Redis:
   export REDIS_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ include "pynomaly.fullname" . }}-secrets -o jsonpath="{.data.redis-password}" | base64 --decode)
   kubectl run {{ include "pynomaly.fullname" . }}-redis-client --rm --tty -i --restart='Never' --namespace {{ .Release.Namespace }} --image docker.io/bitnami/redis:7.0 --env="REDISCLI_AUTH=$REDIS_PASSWORD" \
     --command -- redis-cli -h {{ include "pynomaly.fullname" . }}-redis-master -p 6379
{{- end }}

{{- if .Values.backup.enabled }}
9. Backup operations:
   # Trigger manual backup
   kubectl create job --from=cronjob/{{ include "pynomaly.fullname" . }}-backup {{ include "pynomaly.fullname" . }}-backup-manual-$(date +%s) -n {{ .Release.Namespace }}
   
   # Check backup status
   kubectl get jobs -n {{ .Release.Namespace }} -l app.kubernetes.io/component=backup
{{- end }}

For more information and advanced configuration options, visit:
- Documentation: https://docs.pynomaly.com
- GitHub: https://github.com/elgerytme/Pynomaly
- Support: https://github.com/elgerytme/Pynomaly/issues

Enjoy using Pynomaly for enterprise anomaly detection! ðŸš€