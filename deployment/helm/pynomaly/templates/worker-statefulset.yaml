apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "pynomaly.fullname" . }}-worker
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "pynomaly.labels" . | nindent 4 }}
    app.kubernetes.io/component: worker
spec:
  serviceName: {{ include "pynomaly.fullname" . }}-worker
  {{- if not .Values.worker.autoscaling.enabled }}
  replicas: {{ .Values.worker.replicaCount }}
  {{- end }}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "pynomaly.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: worker
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
      labels:
        {{- include "pynomaly.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: worker
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "pynomaly.serviceAccountName" . }}-worker
      securityContext:
        {{- toYaml .Values.worker.podSecurityContext | nindent 8 }}
      containers:
        - name: worker
          securityContext:
            {{- toYaml .Values.worker.securityContext | nindent 12 }}
          image: "{{ .Values.global.imageRegistry }}/{{ .Values.images.worker.repository }}:{{ .Values.images.worker.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.images.worker.pullPolicy }}
          ports:
            - name: metrics
              containerPort: 9090
              protocol: TCP
          env:
            - name: ENVIRONMENT
              value: {{ .Values.global.environment | quote }}
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "pynomaly.fullname" . }}-secrets
                  key: database-url
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "pynomaly.fullname" . }}-secrets
                  key: redis-url
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: {{ include "pynomaly.fullname" . }}-config
                  key: log-level
            - name: WORKER_CONCURRENCY
              valueFrom:
                configMapKeyRef:
                  name: {{ include "pynomaly.fullname" . }}-config
                  key: worker-concurrency
            - name: WORKER_TYPE
              value: "training"
            - name: MAX_MEMORY_USAGE
              value: {{ .Values.worker.maxMemoryUsage | quote }}
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- if .Values.monitoring.sentry.enabled }}
            - name: SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  name: {{ include "pynomaly.fullname" . }}-secrets
                  key: sentry-dsn
            {{- end }}
          volumeMounts:
            - name: model-storage
              mountPath: /app/models
            - name: temp-storage
              mountPath: /app/tmp
            - name: logs
              mountPath: /app/logs
          livenessProbe:
            exec:
              command:
                - python
                - -c
                - "import pynomaly; print('Worker healthy')"
            initialDelaySeconds: {{ .Values.worker.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.worker.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.worker.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.worker.livenessProbe.failureThreshold }}
          readinessProbe:
            exec:
              command:
                - python
                - -c
                - "import pynomaly; print('Worker ready')"
            initialDelaySeconds: {{ .Values.worker.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.worker.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.worker.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.worker.readinessProbe.failureThreshold }}
          resources:
            {{- toYaml .Values.worker.resources | nindent 12 }}
      volumes:
        - name: temp-storage
          emptyDir:
            sizeLimit: {{ .Values.worker.tempStorage.sizeLimit | default "10Gi" }}
        - name: logs
          emptyDir: {}
      {{- with .Values.worker.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.worker.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.worker.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: model-storage
        labels:
          {{- include "pynomaly.labels" . | nindent 10 }}
          app.kubernetes.io/component: worker-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: {{ .Values.worker.persistence.storageClass | default .Values.global.storageClass }}
        resources:
          requests:
            storage: {{ .Values.worker.persistence.size }}