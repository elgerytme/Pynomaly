apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pynomaly.fullname" . }}-api
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "pynomaly.labels" . | nindent 4 }}
    app.kubernetes.io/component: api
spec:
  {{- if not .Values.api.autoscaling.enabled }}
  replicas: {{ .Values.api.replicaCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.api.rollingUpdate.maxSurge | default 1 }}
      maxUnavailable: {{ .Values.api.rollingUpdate.maxUnavailable | default 0 }}
  selector:
    matchLabels:
      {{- include "pynomaly.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: api
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
      labels:
        {{- include "pynomaly.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: api
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "pynomaly.serviceAccountName" . }}-api
      securityContext:
        {{- toYaml .Values.api.podSecurityContext | nindent 8 }}
      containers:
        - name: api
          securityContext:
            {{- toYaml .Values.api.securityContext | nindent 12 }}
          image: "{{ .Values.global.imageRegistry }}/{{ .Values.images.api.repository }}:{{ .Values.images.api.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.images.api.pullPolicy }}
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          env:
            - name: ENVIRONMENT
              value: {{ .Values.global.environment | quote }}
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "pynomaly.fullname" . }}-secrets
                  key: database-url
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "pynomaly.fullname" . }}-secrets
                  key: redis-url
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "pynomaly.fullname" . }}-secrets
                  key: secret-key
            - name: API_KEYS
              valueFrom:
                secretKeyRef:
                  name: {{ include "pynomaly.fullname" . }}-secrets
                  key: api-keys
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: {{ include "pynomaly.fullname" . }}-config
                  key: log-level
            - name: WORKERS
              valueFrom:
                configMapKeyRef:
                  name: {{ include "pynomaly.fullname" . }}-config
                  key: api-workers
            {{- if .Values.monitoring.sentry.enabled }}
            - name: SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  name: {{ include "pynomaly.fullname" . }}-secrets
                  key: sentry-dsn
            {{- end }}
          volumeMounts:
            - name: temp-storage
              mountPath: /tmp
            - name: logs
              mountPath: /app/logs
            {{- if .Values.api.persistence.enabled }}
            - name: data
              mountPath: {{ .Values.api.persistence.mountPath }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /api/v1/health
              port: http
            initialDelaySeconds: {{ .Values.api.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.api.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.api.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.api.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /api/v1/health
              port: http
            initialDelaySeconds: {{ .Values.api.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.api.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.api.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.api.readinessProbe.failureThreshold }}
          resources:
            {{- toYaml .Values.api.resources | nindent 12 }}
      volumes:
        - name: temp-storage
          emptyDir: {}
        - name: logs
          emptyDir: {}
        {{- if .Values.api.persistence.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "pynomaly.fullname" . }}-api-data
        {{- end }}
      {{- with .Values.api.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.api.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.api.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}