version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: pynomaly
      POSTGRES_USER: pynomaly
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-pynomaly_dev}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pynomaly"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_dev}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Core Application Services
  api:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.api
    environment:
      DATABASE_URL: postgresql://pynomaly:${POSTGRES_PASSWORD:-pynomaly_dev}@postgres:5432/pynomaly
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_dev}@redis:6379/0
      ENVIRONMENT: production
      LOG_LEVEL: info
      SECRET_KEY: ${SECRET_KEY}
      API_KEYS: ${API_KEYS}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  worker:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.worker
    environment:
      DATABASE_URL: postgresql://pynomaly:${POSTGRES_PASSWORD:-pynomaly_dev}@postgres:5432/pynomaly
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_dev}@redis:6379/0
      ENVIRONMENT: production
      LOG_LEVEL: info
      WORKER_TYPE: training
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - model_storage:/app/models
      - worker_logs:/app/logs
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  scheduler:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.scheduler
    environment:
      DATABASE_URL: postgresql://pynomaly:${POSTGRES_PASSWORD:-pynomaly_dev}@postgres:5432/pynomaly
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_dev}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_dev}@redis:6379/0
      ENVIRONMENT: production
      LOG_LEVEL: info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - scheduler_logs:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Monitoring Services
  monitoring:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.monitoring
    environment:
      DATABASE_URL: postgresql://pynomaly:${POSTGRES_PASSWORD:-pynomaly_dev}@postgres:5432/pynomaly
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_dev}@redis:6379/0
      ENVIRONMENT: production
    ports:
      - "9090:9090"
    depends_on:
      - api
      - worker
      - scheduler
    volumes:
      - monitoring_data:/app/metrics
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped

  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

volumes:
  postgres_data:
  redis_data:
  model_storage:
  worker_logs:
  scheduler_logs:
  monitoring_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16