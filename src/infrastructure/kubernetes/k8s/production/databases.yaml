apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-prod-config
  namespace: pynomaly-prod
  labels:
    app: postgres
    component: database
    environment: production
data:
  POSTGRES_DB: pynomaly_prod
  POSTGRES_USER: pynomaly_user
  PGUSER: pynomaly_user
  
  # PostgreSQL configuration
  shared_buffers: "1GB"
  effective_cache_size: "4GB"
  maintenance_work_mem: "256MB"
  checkpoint_completion_target: "0.9"
  wal_buffers: "64MB"
  default_statistics_target: "100"
  random_page_cost: "1.1"
  effective_io_concurrency: "200"
  work_mem: "8MB"
  min_wal_size: "1GB"
  max_wal_size: "4GB"
  max_worker_processes: "8"
  max_parallel_workers_per_gather: "4"
  max_parallel_workers: "8"
  max_parallel_maintenance_workers: "4"

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-prod
  namespace: pynomaly-prod
  labels:
    app: postgres
    component: database
    environment: production
spec:
  serviceName: postgres-prod-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
      component: database
      environment: production
  template:
    metadata:
      labels:
        app: postgres
        component: database
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        envFrom:
        - configMapRef:
            name: postgres-prod-config
        - secretRef:
            name: pynomaly-prod-secrets
        env:
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgres-backup
          mountPath: /backup
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:latest
        ports:
        - containerPort: 9187
          name: metrics
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@localhost:5432/$(POSTGRES_DB)?sslmode=disable"
        envFrom:
        - secretRef:
            name: pynomaly-prod-secrets
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-prod-config
      - name: postgres-backup
        persistentVolumeClaim:
          claimName: postgres-backup-pvc
      securityContext:
        fsGroup: 999
      imagePullSecrets:
      - name: pynomaly-prod-registry-secret
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
      labels:
        app: postgres
        component: database
        environment: production
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 100Gi
      storageClassName: fast-ssd

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-prod-service
  namespace: pynomaly-prod
  labels:
    app: postgres
    component: database
    environment: production
spec:
  selector:
    app: postgres
    component: database
    environment: production
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  - port: 9187
    targetPort: 9187
    protocol: TCP
    name: metrics
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-backup-pvc
  namespace: pynomaly-prod
  labels:
    app: postgres
    component: backup
    environment: production
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: standard

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-prod-config
  namespace: pynomaly-prod
  labels:
    app: redis
    component: cache
    environment: production
data:
  redis.conf: |
    # Redis production configuration
    bind 0.0.0.0
    port 6379
    tcp-backlog 511
    timeout 0
    tcp-keepalive 300
    
    # Memory configuration
    maxmemory 2gb
    maxmemory-policy allkeys-lru
    
    # Persistence
    save 900 1
    save 300 10
    save 60 10000
    
    # Security
    requirepass ${REDIS_PASSWORD}
    
    # Logging
    loglevel notice
    logfile ""
    
    # Performance
    databases 16
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    
    # Replication
    replica-serve-stale-data yes
    replica-read-only yes
    
    # Limits
    maxclients 10000

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-prod
  namespace: pynomaly-prod
  labels:
    app: redis
    component: cache
    environment: production
spec:
  serviceName: redis-prod-service
  replicas: 1
  selector:
    matchLabels:
      app: redis
      component: cache
      environment: production
  template:
    metadata:
      labels:
        app: redis
        component: cache
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        envFrom:
        - secretRef:
            name: pynomaly-prod-secrets
        command:
        - redis-server
        - /etc/redis/redis.conf
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "500m"
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis
        - name: redis-data
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - name: redis-exporter
        image: oliver006/redis_exporter:latest
        ports:
        - containerPort: 9121
          name: metrics
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pynomaly-prod-secrets
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: redis-config
        configMap:
          name: redis-prod-config
      securityContext:
        fsGroup: 999
      imagePullSecrets:
      - name: pynomaly-prod-registry-secret
  volumeClaimTemplates:
  - metadata:
      name: redis-data
      labels:
        app: redis
        component: cache
        environment: production
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
      storageClassName: fast-ssd

---
apiVersion: v1
kind: Service
metadata:
  name: redis-prod-service
  namespace: pynomaly-prod
  labels:
    app: redis
    component: cache
    environment: production
spec:
  selector:
    app: redis
    component: cache
    environment: production
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  - port: 9121
    targetPort: 9121
    protocol: TCP
    name: metrics
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-prod-config
  namespace: pynomaly-prod
  labels:
    app: mongodb
    component: database
    environment: production
data:
  mongod.conf: |
    # MongoDB production configuration
    storage:
      dbPath: /data/db
      journal:
        enabled: true
      wiredTiger:
        engineConfig:
          cacheSizeGB: 1
        collectionConfig:
          blockCompressor: snappy
    
    systemLog:
      destination: file
      logAppend: true
      path: /var/log/mongodb/mongod.log
      logRotate: reopen
    
    net:
      port: 27017
      bindIpAll: true
    
    processManagement:
      fork: false
      pidFilePath: /var/run/mongodb/mongod.pid
    
    security:
      authorization: enabled
    
    operationProfiling:
      slowOpThresholdMs: 100
      mode: slowOp
    
    replication:
      replSetName: pynomaly-prod-rs

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb-prod
  namespace: pynomaly-prod
  labels:
    app: mongodb
    component: database
    environment: production
spec:
  serviceName: mongodb-prod-service
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
      component: database
      environment: production
  template:
    metadata:
      labels:
        app: mongodb
        component: database
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9216"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: mongodb
        image: mongo:6.0
        ports:
        - containerPort: 27017
          name: mongodb
        envFrom:
        - secretRef:
            name: pynomaly-prod-secrets
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "admin"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pynomaly-prod-secrets
              key: MONGODB_PASSWORD
        - name: MONGO_INITDB_DATABASE
          value: "pynomaly_prod"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-config
          mountPath: /etc/mongod.conf
          subPath: mongod.conf
        - name: mongodb-logs
          mountPath: /var/log/mongodb
        livenessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - name: mongodb-exporter
        image: percona/mongodb_exporter:latest
        ports:
        - containerPort: 9216
          name: metrics
        env:
        - name: MONGODB_URI
          value: "mongodb://admin:$(MONGODB_PASSWORD)@localhost:27017/admin"
        envFrom:
        - secretRef:
            name: pynomaly-prod-secrets
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: mongodb-config
        configMap:
          name: mongodb-prod-config
      - name: mongodb-logs
        emptyDir: {}
      securityContext:
        fsGroup: 999
      imagePullSecrets:
      - name: pynomaly-prod-registry-secret
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
      labels:
        app: mongodb
        component: database
        environment: production
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 50Gi
      storageClassName: fast-ssd

---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-prod-service
  namespace: pynomaly-prod
  labels:
    app: mongodb
    component: database
    environment: production
spec:
  selector:
    app: mongodb
    component: database
    environment: production
  ports:
  - port: 27017
    targetPort: 27017
    protocol: TCP
    name: mongodb
  - port: 9216
    targetPort: 9216
    protocol: TCP
    name: metrics
  type: ClusterIP
