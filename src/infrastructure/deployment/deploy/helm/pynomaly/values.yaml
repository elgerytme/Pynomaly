# Default values for Pynomaly Helm chart
# This is a YAML-formatted file

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Application configuration
app:
  name: pynomaly
  version: "1.0.0"

# Image configuration
image:
  registry: docker.io
  repository: pynomaly/pynomaly
  tag: "1.0.0"
  pullPolicy: IfNotPresent
  pullSecrets: []

# Deployment configuration
replicaCount: 3

# Deployment strategy
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

# Service configuration
service:
  type: ClusterIP
  port: 8000
  targetPort: 8000
  annotations: {}

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: pynomaly.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: pynomaly-tls
      hosts:
        - pynomaly.example.com

# Resource configuration
resources:
  limits:
    cpu: 2000m
    memory: 4Gi
  requests:
    cpu: 500m
    memory: 1Gi

# Autoscaling configuration
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Security Context
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

containerSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  capabilities:
    drop:
      - ALL

# Health checks
healthChecks:
  livenessProbe:
    httpGet:
      path: /api/health
      port: 8000
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1
  
  readinessProbe:
    httpGet:
      path: /api/health/ready
      port: 8000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  
  startupProbe:
    httpGet:
      path: /api/health
      port: 8000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

# Environment configuration
env:
  PYNOMALY_ENVIRONMENT: "production"
  PYNOMALY_API_HOST: "0.0.0.0"
  PYNOMALY_API_PORT: "8000"
  PYNOMALY_LOG_LEVEL: "INFO"
  PYTHONOPTIMIZE: "2"
  PYTHONUNBUFFERED: "1"
  PYTHONDONTWRITEBYTECODE: "1"
  OMP_NUM_THREADS: "2"
  METRICS_ENABLED: "true"
  METRICS_PORT: "9090"
  SECURE_HEADERS_ENABLED: "true"
  CORS_ENABLED: "false"

# Secret configuration
secrets:
  create: true
  annotations: {}
  data:
    DATABASE_USER: "cHlub21hbHlfdXNlcg=="  # pynomaly_user (base64)
    DATABASE_PASSWORD: "UkVQTEFDRV9XSVRIX0FDVFVBTF9QQVNTV09SRA=="  # REPLACE_WITH_ACTUAL_PASSWORD (base64)
    REDIS_PASSWORD: "UkVQTEFDRV9XSVRIX0FDVFVBTF9SRURJU19QQVNTV09SRA=="  # REPLACE_WITH_ACTUAL_REDIS_PASSWORD (base64)
    JWT_SECRET_KEY: "UkVQTEFDRV9XSVRIX0FDVFVBTF9KV1RfU0VDUkVU"  # REPLACE_WITH_ACTUAL_JWT_SECRET (base64)
    API_SECRET_KEY: "UkVQTEFDRV9XSVRIX0FDVFVBTF9BUElfU0VDUkVU"  # REPLACE_WITH_ACTUAL_API_SECRET (base64)
    ENCRYPTION_KEY: "UkVQTEFDRV9XSVRIX0FDVFVBTF9FTkNSWVBUSU9OX0tFWQ=="  # REPLACE_WITH_ACTUAL_ENCRYPTION_KEY (base64)

# ConfigMap configuration
configMap:
  create: true
  annotations: {}

# Persistence configuration
persistence:
  enabled: true
  storageClass: ""
  accessModes:
    - ReadWriteMany
  size: 50Gi
  annotations: {}

# Worker configuration
worker:
  enabled: true
  replicaCount: 2
  image:
    repository: pynomaly/worker
    tag: "1.0.0"
    pullPolicy: IfNotPresent
  
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 500m
      memory: 1Gi
  
  env:
    CELERY_WORKER_CONCURRENCY: "4"
    CELERY_WORKER_QUEUE: "model_training,anomaly_detection"
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 8
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 85

# Scheduler configuration
scheduler:
  enabled: true
  image:
    repository: pynomaly/scheduler
    tag: "1.0.0"
    pullPolicy: IfNotPresent
  
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    username: pynomaly
    password: "REPLACE_WITH_ACTUAL_PASSWORD"
    database: pynomaly
  primary:
    persistence:
      enabled: true
      size: 20Gi
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 512Mi

# Redis configuration
redis:
  enabled: true
  auth:
    password: "REPLACE_WITH_ACTUAL_REDIS_PASSWORD"
  master:
    persistence:
      enabled: true
      size: 8Gi
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 256Mi

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s
    labels: {}
    annotations: {}

# Prometheus configuration
prometheus:
  enabled: true
  server:
    persistentVolume:
      enabled: true
      size: 50Gi
    retention: "30d"
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 512Mi

# Grafana configuration
grafana:
  enabled: true
  adminUser: admin
  adminPassword: "REPLACE_WITH_ACTUAL_GRAFANA_PASSWORD"
  persistence:
    enabled: true
    size: 10Gi
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 256Mi

# Service Account configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: false

# RBAC configuration
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["configmaps", "secrets"]
      verbs: ["get", "list"]
    - apiGroups: [""]
      resources: ["pods"]
      verbs: ["get", "list"]

# Network Policy configuration
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
  egress:
    - to: []

# Pod Anti-Affinity configuration
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - pynomaly
              - key: app.kubernetes.io/component
                operator: In
                values:
                  - api
          topologyKey: kubernetes.io/hostname

# Node selection and tolerations
nodeSelector:
  workload-type: "ml"

tolerations:
  - key: "workload"
    operator: "Equal"
    value: "ml"
    effect: "NoSchedule"

# Additional labels and annotations
labels: {}
annotations: {}

# Feature flags
features:
  mlops: true
  realTimeProcessing: true
  advancedAnalytics: true
  multiTenancy: false