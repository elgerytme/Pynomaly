# Pynomaly Deployment Configuration
# Comprehensive configuration for automated deployments

# Global deployment settings
global:
  project_name: "pynomaly"
  version: "1.0.0"
  docker_registry: "docker.io/pynomaly"
  git_repository: "https://github.com/your-org/pynomaly"
  
  # Build configuration
  build:
    dockerfile: "deploy/docker/Dockerfile.production"
    context: "."
    platforms:
      - "linux/amd64"
      - "linux/arm64"
    
  # Security settings
  security:
    scan_images: true
    vulnerability_threshold: "high"
    sign_images: true

# Environment-specific configurations
environments:
  development:
    platform: "docker_compose"
    strategy: "recreate"
    auto_deploy: true
    replicas: 1
    
    # Resource limits
    resources:
      limits:
        memory: "1Gi"
        cpu: "500m"
      requests:
        memory: "512Mi"
        cpu: "250m"
    
    # Health checks
    health_checks:
      enabled: true
      timeout: 180
      retry_interval: 15
      endpoints:
        - path: "/api/health"
          expected_status: 200
        - path: "/api/health/ready"
          expected_status: 200
    
    # Notifications
    notifications:
      channels: ["console"]
      on_success: true
      on_failure: true
    
    # Database
    database:
      host: "postgres"
      port: 5432
      name: "pynomaly_dev"
      backup_enabled: false
    
    # Cache
    redis:
      host: "redis"
      port: 6379
      db: 0

  staging:
    platform: "kubernetes"
    strategy: "rolling_update"
    auto_deploy: true
    replicas: 2
    namespace: "pynomaly-staging"
    
    # Resource limits
    resources:
      limits:
        memory: "2Gi"
        cpu: "1000m"
      requests:
        memory: "1Gi"
        cpu: "500m"
    
    # Autoscaling
    autoscaling:
      enabled: true
      min_replicas: 2
      max_replicas: 5
      target_cpu: 70
      target_memory: 80
    
    # Health checks
    health_checks:
      enabled: true
      timeout: 300
      retry_interval: 20
      endpoints:
        - path: "/api/health"
          expected_status: 200
        - path: "/api/health/ready"
          expected_status: 200
        - path: "/api/health/live"
          expected_status: 200
    
    # Integration tests
    integration_tests:
      enabled: true
      timeout: 600
      test_suites:
        - "api"
        - "end_to_end"
        - "performance"
    
    # Notifications
    notifications:
      channels: ["email", "slack"]
      on_success: true
      on_failure: true
      on_rollback: true
    
    # Database
    database:
      host: "pynomaly-staging-postgresql"
      port: 5432
      name: "pynomaly_staging"
      backup_enabled: true
      backup_retention: 7
    
    # Cache
    redis:
      host: "pynomaly-staging-redis-master"
      port: 6379
      db: 0

  production:
    platform: "kubernetes"
    strategy: "blue_green"
    auto_deploy: false
    approval_required: true
    replicas: 5
    namespace: "pynomaly-production"
    
    # Resource limits
    resources:
      limits:
        memory: "4Gi"
        cpu: "2000m"
      requests:
        memory: "2Gi"
        cpu: "1000m"
    
    # Autoscaling
    autoscaling:
      enabled: true
      min_replicas: 5
      max_replicas: 20
      target_cpu: 60
      target_memory: 70
      behavior:
        scale_up:
          stabilization_window: 60
          policies:
            - type: "Percent"
              value: 100
              period: 60
        scale_down:
          stabilization_window: 300
          policies:
            - type: "Percent"
              value: 50
              period: 60
    
    # Health checks
    health_checks:
      enabled: true
      timeout: 600
      retry_interval: 30
      endpoints:
        - path: "/api/health"
          expected_status: 200
        - path: "/api/health/ready"
          expected_status: 200
        - path: "/api/health/live"
          expected_status: 200
        - path: "/metrics"
          expected_status: 200
    
    # Integration tests
    integration_tests:
      enabled: true
      timeout: 900
      test_suites:
        - "api"
        - "end_to_end"
        - "performance"
        - "security"
        - "load"
    
    # Canary deployment settings
    canary:
      enabled: true
      initial_percentage: 5
      increments: [10, 25, 50, 100]
      increment_interval: 300  # 5 minutes
      success_threshold: 99.5
      error_threshold: 0.1
    
    # Blue-green deployment settings
    blue_green:
      health_check_duration: 300
      switch_traffic_delay: 60
      cleanup_delay: 900  # 15 minutes
    
    # Rollback settings
    rollback:
      auto_rollback: true
      health_check_failures: 3
      error_rate_threshold: 1.0
      response_time_threshold: 2000  # ms
    
    # Notifications
    notifications:
      channels: ["email", "slack", "pagerduty"]
      on_success: true
      on_failure: true
      on_rollback: true
      on_approval_request: true
    
    # Database
    database:
      host: "pynomaly-production-postgresql"
      port: 5432
      name: "pynomaly_production"
      backup_enabled: true
      backup_retention: 30
      backup_schedule: "0 2 * * *"  # Daily at 2 AM
    
    # Cache
    redis:
      host: "pynomaly-production-redis-master"
      port: 6379
      db: 0
    
    # Monitoring
    monitoring:
      prometheus:
        enabled: true
        retention: "30d"
        scrape_interval: "15s"
      grafana:
        enabled: true
        dashboards:
          - "pynomaly-overview"
          - "pynomaly-api-metrics"
          - "pynomaly-ml-metrics"
      alerting:
        enabled: true
        rules:
          - name: "high_error_rate"
            condition: "rate(http_requests_total{status=~'5..'}[5m]) > 0.01"
          - name: "high_response_time"
            condition: "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 2"
          - name: "low_availability"
            condition: "up == 0"

# Notification configuration
notifications:
  email:
    smtp_server: "${SMTP_SERVER}"
    smtp_port: 587
    username: "${SMTP_USERNAME}"
    password: "${SMTP_PASSWORD}"
    from_address: "deployments@pynomaly.io"
    recipients:
      - "team@pynomaly.io"
      - "ops@pynomaly.io"
    templates:
      deployment_start: |
        Subject: [Pynomaly] Deployment Started - {{environment}} ({{version}})
        
        Deployment to {{environment}} has started.
        
        Details:
        - Environment: {{environment}}
        - Version: {{version}}
        - Strategy: {{strategy}}
        - Timestamp: {{timestamp}}
        
        Monitor progress at: {{dashboard_url}}
      
      deployment_success: |
        Subject: [Pynomaly] Deployment Successful - {{environment}} ({{version}})
        
        Deployment to {{environment}} completed successfully!
        
        Details:
        - Environment: {{environment}}
        - Version: {{version}}
        - Duration: {{duration}}
        - Timestamp: {{timestamp}}
        
        Application URL: {{app_url}}
      
      deployment_failed: |
        Subject: [Pynomaly] Deployment Failed - {{environment}} ({{version}})
        
        Deployment to {{environment}} has failed.
        
        Details:
        - Environment: {{environment}}
        - Version: {{version}}
        - Reason: {{reason}}
        - Timestamp: {{timestamp}}
        
        Logs: {{logs_url}}

  slack:
    webhook_url: "${SLACK_WEBHOOK_URL}"
    channel: "#deployments"
    username: "Pynomaly Deployer"
    icon_emoji: ":rocket:"
    templates:
      deployment_start:
        text: "üöÄ Deployment started for {{environment}} ({{version}})"
        color: "#2196F3"
      deployment_success:
        text: "‚úÖ Deployment successful for {{environment}} ({{version}})"
        color: "#4CAF50"
      deployment_failed:
        text: "‚ùå Deployment failed for {{environment}} ({{version}})"
        color: "#F44336"

  pagerduty:
    api_key: "${PAGERDUTY_API_KEY}"
    service_key: "${PAGERDUTY_SERVICE_KEY}"
    severity_mapping:
      deployment_failed: "error"
      rollback_failed: "critical"
      health_check_failed: "warning"

# CI/CD Integration
ci_cd:
  github_actions:
    enabled: true
    workflow_file: ".github/workflows/deploy.yml"
    secrets:
      - "DOCKER_REGISTRY_USERNAME"
      - "DOCKER_REGISTRY_PASSWORD"
      - "KUBECONFIG"
      - "SLACK_WEBHOOK_URL"
      - "SMTP_PASSWORD"
  
  gitlab_ci:
    enabled: false
    pipeline_file: ".gitlab-ci.yml"
  
  jenkins:
    enabled: false
    job_name: "pynomaly-deploy"

# Security configuration
security:
  image_scanning:
    enabled: true
    registries:
      - "docker.io"
      - "quay.io"
    scanners:
      - "trivy"
      - "clair"
    fail_on:
      - "critical"
      - "high"
  
  secrets_management:
    provider: "kubernetes"  # or "vault", "aws_secrets_manager"
    rotation_enabled: true
    rotation_schedule: "0 0 1 * *"  # Monthly
  
  network_policies:
    enabled: true
    default_deny: true
    allowed_namespaces:
      - "monitoring"
      - "ingress-nginx"
      - "cert-manager"

# Backup and disaster recovery
backup:
  enabled: true
  schedule: "0 1 * * *"  # Daily at 1 AM
  retention:
    daily: 7
    weekly: 4
    monthly: 12
  storage:
    provider: "s3"  # or "gcs", "azure_blob"
    bucket: "${BACKUP_BUCKET}"
    encryption: true
  components:
    - "database"
    - "redis"
    - "application_data"
    - "configuration"

# Monitoring and observability
observability:
  tracing:
    enabled: true
    provider: "jaeger"  # or "zipkin", "datadog"
    sampling_rate: 0.1
  
  logging:
    enabled: true
    provider: "elasticsearch"  # or "splunk", "datadog"
    retention: "30d"
    log_level: "INFO"
  
  metrics:
    enabled: true
    provider: "prometheus"
    custom_metrics:
      - "pynomaly_anomalies_detected_total"
      - "pynomaly_model_training_duration_seconds"
      - "pynomaly_prediction_accuracy"