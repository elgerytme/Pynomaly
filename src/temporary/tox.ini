[tox]
# Test environments configuration for reproducible CI/CD
envlist = lint,type,unit,integration,mutation,e2e-ui
skip_missing_interpreters = true
isolated_build = true
minversion = 4.0

[gh-actions]
# GitHub Actions Python version mapping
python =
    3.11: py311-unit,lint,type
    3.12: py312-unit,integration
    3.13: py313-unit,mutation

[testenv]
# Base configuration for all test environments
deps =
    -r{toxinidir}/requirements.lock
    pytest>=8.0.0
    pytest-cov>=6.0.0
    pytest-asyncio>=0.24.0
    pytest-xdist>=3.6.0
    hypothesis>=6.115.0
    factory-boy>=3.3.1
    faker>=33.1.0

extras = 
    test
    minimal

setenv =
    PYTHONPATH = {toxinidir}/src
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}/.coverage.{envname}}
    PY_COLORS = 1
    PYNOMALY_ENVIRONMENT = testing
    PYNOMALY_LOG_LEVEL = INFO
    PYNOMALY_CACHE_ENABLED = false

commands =
    pytest {posargs:tests/unit/} \
        --cov=pynomaly \
        --cov-config=pyproject.toml \
        --cov-report=term-missing:skip-covered \
        --cov-report=html:{envtmpdir}/htmlcov \
        --cov-report=xml:{envtmpdir}/coverage.xml \
        --junitxml={envtmpdir}/junit.xml \
        --timeout=300 \
        --maxfail=5 \
        --tb=short \
        -v

[testenv:lint]
# Code quality and linting checks
basepython = python3.11
deps =
    -r{toxinidir}/requirements-dev.lock
    ruff>=0.8.0
    black>=24.0.0
    isort>=5.13.0
    bandit>=1.8.0
    flake8>=7.0.0
    flake8-docstrings>=1.7.0
    flake8-black>=0.3.0
    flake8-isort>=6.0.0
    pre-commit>=4.0.0

commands =
    # Code formatting checks
    black --check --diff src/ tests/
    isort --check-only --diff src/ tests/
    
    # Linting checks
    ruff check src/ tests/
    
    # Security checks
    bandit -r src/ -ll --skip B101,B601
    
    # Additional linting
    flake8 src/ tests/ \
        --max-line-length=88 \
        --ignore=E203,W503,D100,D101,D102,D103 \
        --exclude=__pycache__,*.pyc,.git,.tox,dist,build

[testenv:type]
# Type checking with mypy
basepython = python3.11
deps =
    -r{toxinidir}/requirements-dev.lock
    mypy>=1.13.0
    types-requests
    types-setuptools
    pandas-stubs

commands =
    mypy src/pynomaly/ \
        --config-file=pyproject.toml \
        --show-error-codes \
        --pretty \
        --error-summary

[testenv:unit]
# Unit testing environment
basepython = python3.11
deps =
    -r{toxinidir}/requirements-dev.lock
    pytest>=8.0.0
    pytest-cov>=6.0.0
    pytest-asyncio>=0.24.0
    pytest-xdist>=3.6.0
    pytest-timeout>=2.1.0
    pytest-mock>=3.10.0
    hypothesis>=6.115.0
    factory-boy>=3.3.1
    faker>=33.1.0

commands =
    pytest tests/unit/ {posargs} \
        --cov=pynomaly \
        --cov-report=term-missing \
        --cov-report=html:{envtmpdir}/htmlcov \
        --cov-report=xml:{envtmpdir}/coverage.xml \
        --junitxml={envtmpdir}/junit.xml \
        --timeout=300 \
        --maxfail=10 \
        --tb=short \
        -v \
        -n auto \
        -m "unit"

[testenv:integration]
# Integration testing environment
basepython = python3.11
deps =
    -r{toxinidir}/requirements-dev.lock
    pytest>=8.0.0
    pytest-cov>=6.0.0
    pytest-asyncio>=0.24.0
    pytest-xdist>=3.6.0
    pytest-timeout>=2.1.0
    httpx>=0.28.1
    requests>=2.32.3
    docker>=6.0.0

extras = 
    test
    api
    server

setenv =
    {[testenv]setenv}
    PYNOMALY_ENVIRONMENT = integration
    PYNOMALY_LOG_LEVEL = DEBUG
    PYNOMALY_API_BASE_URL = http://localhost:8000
    PYNOMALY_TEST_TIMEOUT = 600

commands =
    pytest tests/integration/ {posargs} \
        --cov=pynomaly \
        --cov-report=term-missing \
        --cov-report=html:{envtmpdir}/htmlcov \
        --cov-report=xml:{envtmpdir}/coverage.xml \
        --junitxml={envtmpdir}/junit.xml \
        --timeout=600 \
        --maxfail=5 \
        --tb=line \
        -v \
        -m "integration"

[testenv:mutation]
# Mutation testing environment
basepython = python3.11
deps =
    -r{toxinidir}/requirements-dev.lock
    pytest>=8.0.0
    pytest-timeout>=2.1.0
    mutmut>=2.4.0
    cosmic-ray>=8.3.0

commands =
    # Run mutation testing with mutmut
    python -c "
    import subprocess
    import sys
    from pathlib import Path
    
    print('Running mutation testing...')
    
    # Run mutmut if available
    try:
        result = subprocess.run([
            sys.executable, '-m', 'mutmut', 'run',
            '--paths-to-mutate=src/pynomaly',
            '--tests-dir=tests/unit',
            '--runner=pytest',
            '--timeout-factor=2.0'
        ], capture_output=True, text=True, timeout=1800)
        
        if result.returncode == 0:
            print('Mutation testing completed successfully')
            print(result.stdout)
        else:
            print('Mutation testing completed with issues')
            print(result.stdout)
            print(result.stderr)
            
        # Show results
        subprocess.run([sys.executable, '-m', 'mutmut', 'results'])
        
    except subprocess.TimeoutExpired:
        print('Mutation testing timed out after 30 minutes')
    except Exception as e:
        print(f'Mutation testing failed: {e}')
        print('Running basic test validation instead...')
        
        # Fall back to basic test validation
        subprocess.run([
            sys.executable, '-m', 'pytest', 
            'tests/unit/', 
            '--tb=short', 
            '-v'
        ])
    "

[testenv:e2e-ui]
# End-to-end UI testing environment
basepython = python3.11
deps =
    -r{toxinidir}/requirements-dev.lock
    pytest>=8.0.0
    pytest-asyncio>=0.24.0
    pytest-xdist>=3.6.0
    pytest-timeout>=2.1.0
    pytest-html>=4.1.0
    pytest-benchmark>=4.0.0
    playwright>=1.40.0
    pytest-playwright>=0.4.3
    pillow>=10.0.0
    percy-playwright>=1.0.4
    axe-playwright-python>=0.1.3
    selenium>=4.15.0
    pytest-selenium>=4.1.0

extras = 
    test
    ui-test
    api
    server

setenv =
    {[testenv]setenv}
    PYNOMALY_ENVIRONMENT = e2e
    PYNOMALY_LOG_LEVEL = DEBUG
    PYNOMALY_API_BASE_URL = http://localhost:8000
    PYNOMALY_WEB_BASE_URL = http://localhost:3000
    PYNOMALY_TEST_TIMEOUT = 900
    PLAYWRIGHT_BROWSERS_PATH = {envtmpdir}/browsers
    HEADLESS = true

commands_pre =
    # Install Playwright browsers
    playwright install chromium firefox webkit
    
    # Start test services (API and Web)
    python -c "
    import subprocess
    import time
    import requests
    import sys
    from pathlib import Path
    
    print('Starting test services...')
    
    # Start API server in background
    api_process = subprocess.Popen([
        sys.executable, '-m', 'uvicorn', 
        'pynomaly.presentation.api.app:app',
        '--host', '0.0.0.0',
        '--port', '8000',
        '--reload'
    ])
    
    # Wait for API to be ready
    for i in range(30):
        try:
            response = requests.get('http://localhost:8000/health')
            if response.status_code == 200:
                print('API server is ready')
                break
        except:
            time.sleep(1)
    else:
        print('API server failed to start')
        api_process.terminate()
        sys.exit(1)
    
    # Store process ID for cleanup
    Path('{envtmpdir}/api_pid').write_text(str(api_process.pid))
    print('Test services started successfully')
    "

commands =
    pytest tests/e2e/ {posargs} \
        --browser=chromium \
        --browser=firefox \
        --browser=webkit \
        --headed={env:HEADED:false} \
        --base-url=http://localhost:3000 \
        --api-url=http://localhost:8000 \
        --timeout=900 \
        --maxfail=3 \
        --tb=short \
        --html={envtmpdir}/e2e_report.html \
        --self-contained-html \
        -v \
        -m "e2e or ui"

commands_post =
    # Cleanup test services
    python -c "
    import subprocess
    import sys
    from pathlib import Path
    
    print('Cleaning up test services...')
    
    # Stop API server
    pid_file = Path('{envtmpdir}/api_pid')
    if pid_file.exists():
        try:
            pid = int(pid_file.read_text())
            subprocess.run(['kill', str(pid)], check=False)
            print('API server stopped')
        except:
            print('Failed to stop API server')
    
    print('Cleanup completed')
    "

[testenv:py311-unit]
# Python 3.11 specific unit tests
basepython = python3.11
deps = {[testenv:unit]deps}
commands = {[testenv:unit]commands}

[testenv:py312-unit]
# Python 3.12 specific unit tests
basepython = python3.12
deps = {[testenv:unit]deps}
commands = {[testenv:unit]commands}

[testenv:py313-unit]
# Python 3.13 specific unit tests
basepython = python3.13
deps = {[testenv:unit]deps}
commands = {[testenv:unit]commands}

[testenv:coverage]
# Coverage reporting environment
basepython = python3.11
deps =
    -r{toxinidir}/requirements-dev.lock
    coverage[toml]>=7.0.0
    pytest>=8.0.0
    pytest-cov>=6.0.0

depends = py311-unit,py312-unit,py313-unit

setenv =
    COVERAGE_FILE = {toxworkdir}/.coverage

commands =
    coverage combine {toxworkdir}/.coverage.*
    coverage report --show-missing --skip-covered
    coverage html --directory={envtmpdir}/htmlcov
    coverage xml --output={envtmpdir}/coverage.xml
    coverage json --output={envtmpdir}/coverage.json

[testenv:security]
# Security scanning environment
basepython = python3.11
deps =
    -r{toxinidir}/requirements-dev.lock
    bandit[toml]>=1.8.0
    safety>=4.0.0
    pip-audit>=2.6.0

commands =
    bandit -r src/ -f json -o {envtmpdir}/bandit-report.json -ll --skip B101,B601
    safety check --json --output {envtmpdir}/safety-report.json --continue-on-error
    pip-audit --format=json --output={envtmpdir}/pip-audit-report.json

[testenv:performance]
# Performance testing environment
basepython = python3.11
deps =
    -r{toxinidir}/requirements-dev.lock
    pytest>=8.0.0
    pytest-benchmark>=4.0.0
    memory-profiler>=0.61.0
    psutil>=6.1.0

commands =
    pytest tests/performance/ {posargs} \
        --benchmark-only \
        --benchmark-sort=mean \
        --benchmark-json={envtmpdir}/benchmark.json \
        --junitxml={envtmpdir}/performance-junit.xml \
        -v \
        -m "performance"

[testenv:clean]
# Clean build artifacts and cache
allowlist_externals =
    rm
    find
    echo
    powershell

commands =
    python -c "
    import shutil
    import os
    from pathlib import Path
    
    print('Cleaning build artifacts and cache...')
    
    # Define paths to clean
    paths_to_clean = [
        'build',
        'dist',
        'src/pynomaly.egg-info',
        'htmlcov',
        '.coverage',
        '.coverage.*',
        '.pytest_cache',
        '.mypy_cache',
        '.tox',
        '.mutmut-cache',
        'reports',
        'test_reports'
    ]
    
    for path in paths_to_clean:
        full_path = Path(path)
        if full_path.exists():
            if full_path.is_dir():
                shutil.rmtree(full_path)
                print(f'Removed directory: {path}')
            else:
                full_path.unlink()
                print(f'Removed file: {path}')
    
    # Clean __pycache__ directories
    for root, dirs, files in os.walk('.'):
        for dir_name in dirs:
            if dir_name == '__pycache__':
                cache_path = Path(root) / dir_name
                shutil.rmtree(cache_path)
                print(f'Removed cache: {cache_path}')
    
    print('✓ Cleanup completed')
    "

# Tool configuration
[flake8]
max-line-length = 88
ignore = E203,W503,D100,D101,D102,D103
exclude = __pycache__,*.pyc,.git,.tox,dist,build,environments,.env*,.venv*

[coverage:run]
source = src/pynomaly
branch = true
omit =
    */tests/*
    */test_*
    */__pycache__/*
    */environments/*
    */build/*
    */dist/*
    */.tox/*

[coverage:report]
show_missing = true
skip_covered = true
precision = 2
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    pass
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
