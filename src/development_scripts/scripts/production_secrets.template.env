# =============================================================================
# Pynomaly Production Secrets Template
# =============================================================================
# IMPORTANT: This is a template file. Copy to .env or production.env and
# replace all placeholder values with actual production secrets.
# NEVER commit actual secrets to version control.
# =============================================================================

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
DATABASE_USER=pynomaly_user
DATABASE_PASSWORD=REPLACE_WITH_STRONG_DATABASE_PASSWORD
DATABASE_NAME=pynomaly_prod
DATABASE_HOST=postgres
DATABASE_PORT=5432

# Full database URL (auto-constructed)
DATABASE_URL=postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}

# =============================================================================
# REDIS CONFIGURATION
# =============================================================================
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=REPLACE_WITH_STRONG_REDIS_PASSWORD

# Full Redis URL (auto-constructed)
REDIS_URL=redis://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB}

# =============================================================================
# SECURITY KEYS
# =============================================================================
# JWT Secret Key - Generate with: openssl rand -hex 32
JWT_SECRET_KEY=REPLACE_WITH_STRONG_JWT_SECRET_KEY

# API Secret Key - Generate with: openssl rand -hex 32
API_SECRET_KEY=REPLACE_WITH_STRONG_API_SECRET_KEY

# Session Secret Key - Generate with: openssl rand -hex 32
SESSION_SECRET_KEY=REPLACE_WITH_STRONG_SESSION_SECRET_KEY

# Encryption Key - Generate with: openssl rand -hex 32
ENCRYPTION_KEY=REPLACE_WITH_STRONG_ENCRYPTION_KEY

# Password salt - Generate with: openssl rand -hex 16
PASSWORD_SALT=REPLACE_WITH_STRONG_PASSWORD_SALT

# =============================================================================
# EXTERNAL SERVICES
# =============================================================================
# Email/SMTP Configuration
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=alerts@pynomaly.ai
SMTP_PASSWORD=REPLACE_WITH_SMTP_PASSWORD
SMTP_FROM=alerts@pynomaly.ai

# Slack Webhook for Monitoring Alerts
SLACK_WEBHOOK_URL=REPLACE_WITH_SLACK_WEBHOOK_URL

# PagerDuty Integration
PAGERDUTY_ROUTING_KEY=REPLACE_WITH_PAGERDUTY_ROUTING_KEY

# Grafana Admin Password
GRAFANA_ADMIN_PASSWORD=REPLACE_WITH_GRAFANA_ADMIN_PASSWORD

# =============================================================================
# MONITORING & WEBHOOKS
# =============================================================================
# Webhook token for alert notifications
WEBHOOK_TOKEN=REPLACE_WITH_WEBHOOK_TOKEN

# Monitoring webhook URL
MONITORING_WEBHOOK_URL=REPLACE_WITH_MONITORING_WEBHOOK_URL

# =============================================================================
# CLOUD PROVIDER SECRETS (if applicable)
# =============================================================================
# AWS Credentials (if using AWS services)
AWS_ACCESS_KEY_ID=REPLACE_WITH_AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY=REPLACE_WITH_AWS_SECRET_ACCESS_KEY
AWS_REGION=us-east-1

# Azure Credentials (if using Azure services)
AZURE_CLIENT_ID=REPLACE_WITH_AZURE_CLIENT_ID
AZURE_CLIENT_SECRET=REPLACE_WITH_AZURE_CLIENT_SECRET
AZURE_TENANT_ID=REPLACE_WITH_AZURE_TENANT_ID

# Google Cloud Credentials (if using GCP services)
GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json
GOOGLE_PROJECT_ID=REPLACE_WITH_GOOGLE_PROJECT_ID

# =============================================================================
# KUBERNETES SECRETS (if applicable)
# =============================================================================
# Kubernetes configuration for deployment
KUBE_CONFIG_STAGING=REPLACE_WITH_BASE64_ENCODED_STAGING_KUBECONFIG
KUBE_CONFIG_PRODUCTION=REPLACE_WITH_BASE64_ENCODED_PRODUCTION_KUBECONFIG

# =============================================================================
# THIRD-PARTY INTEGRATIONS
# =============================================================================
# ML Model Registry (if using external registry)
MODEL_REGISTRY_URL=REPLACE_WITH_MODEL_REGISTRY_URL
MODEL_REGISTRY_TOKEN=REPLACE_WITH_MODEL_REGISTRY_TOKEN

# Feature Store (if using external feature store)
FEATURE_STORE_URL=REPLACE_WITH_FEATURE_STORE_URL
FEATURE_STORE_TOKEN=REPLACE_WITH_FEATURE_STORE_TOKEN

# =============================================================================
# DEPLOYMENT METADATA
# =============================================================================
# Build information
BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
VCS_REF=$(git rev-parse --short HEAD)
VERSION=2.0.0

# =============================================================================
# SECURITY NOTES
# =============================================================================
# 1. Generate strong, unique passwords for all services
# 2. Use environment-specific secrets (staging vs production)
# 3. Rotate secrets regularly (quarterly recommended)
# 4. Store secrets in secure secret management systems:
#    - AWS Secrets Manager
#    - Azure Key Vault
#    - Google Secret Manager
#    - HashiCorp Vault
#    - Kubernetes Secrets
# 5. Never log or expose secrets in application code
# 6. Use least-privilege access for all service accounts
# 7. Enable audit logging for secret access
# 8. Implement secret scanning in CI/CD pipelines

# =============================================================================
# GENERATION COMMANDS
# =============================================================================
# Generate strong secrets using these commands:
# openssl rand -hex 32  # For 32-byte hex keys
# openssl rand -base64 32  # For base64-encoded keys
# uuidgen  # For UUID-based keys
# python -c "import secrets; print(secrets.token_urlsafe(32))"  # For URL-safe tokens

# =============================================================================
# DEPLOYMENT CHECKLIST
# =============================================================================
# [ ] All REPLACE_WITH_* values have been replaced with actual secrets
# [ ] Database passwords are strong and unique
# [ ] JWT secrets are cryptographically secure
# [ ] External service credentials are valid and tested
# [ ] Cloud provider credentials have appropriate permissions
# [ ] Monitoring alerts are configured and tested
# [ ] Backup and recovery procedures are in place
# [ ] Security scanning has been performed
# [ ] Secrets are stored in secure secret management system
# [ ] Access to secrets is logged and audited
