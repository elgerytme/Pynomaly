load("@prelude//python:defs.bzl", "python_library", "python_binary", "python_test")

python_library(
    name = "infrastructure",
    srcs = glob(["src/infrastructure/**/*.py"]),
    deps = [
        "//third-party/python:click",
        "//third-party/python:pydantic",
        "//third-party/python:pyyaml",
        "//third-party/python:jinja2",
        "//third-party/python:requests",
        "//third-party/python:docker",
        "//third-party/python:kubernetes",
        "//third-party/python:boto3",
        "//third-party/python:prometheus-client",
        "//third-party/python:redis",
        "//third-party/python:psycopg2-binary",
        "//third-party/python:structlog",
        "//third-party/python:rich",
        "//third-party/python:typer",
    ],
    visibility = ["PUBLIC"],
)

python_binary(
    name = "pynomaly_infra",
    main = "src/infrastructure/cli.py",
    deps = [":infrastructure"],
    visibility = ["PUBLIC"],
)

python_binary(
    name = "pynomaly_deploy",
    main = "src/infrastructure/deployment/cli.py",
    deps = [":infrastructure"],
    visibility = ["PUBLIC"],
)

python_binary(
    name = "pynomaly_monitor",
    main = "src/infrastructure/monitoring/cli.py",
    deps = [":infrastructure"],
    visibility = ["PUBLIC"],
)

python_test(
    name = "infrastructure_tests",
    srcs = glob(["tests/**/*.py"]),
    deps = [
        ":infrastructure",
        "//third-party/python:pytest",
        "//third-party/python:pytest-asyncio",
        "//third-party/python:pytest-cov",
        "//third-party/python:pytest-docker",
    ],
    visibility = ["PUBLIC"],
)

# Unit tests
python_test(
    name = "unit_tests",
    srcs = glob(["tests/unit/**/*.py"]),
    deps = [
        ":infrastructure",
        "//third-party/python:pytest",
        "//third-party/python:pytest-asyncio",
    ],
    labels = ["unit"],
    visibility = ["PUBLIC"],
)

# Integration tests
python_test(
    name = "integration_tests",
    srcs = glob(["tests/integration/**/*.py"]),
    deps = [
        ":infrastructure",
        "//third-party/python:pytest",
        "//third-party/python:pytest-asyncio",
        "//third-party/python:pytest-docker",
    ],
    labels = ["integration"],
    visibility = ["PUBLIC"],
)

# AWS-specific tests
python_test(
    name = "aws_tests",
    srcs = glob(["tests/aws/**/*.py"]),
    deps = [
        ":infrastructure",
        "//third-party/python:pytest",
        "//third-party/python:boto3",
        "//third-party/python:moto",
    ],
    labels = ["aws"],
    visibility = ["PUBLIC"],
)

# Kubernetes tests
python_test(
    name = "kubernetes_tests",
    srcs = glob(["tests/kubernetes/**/*.py"]),
    deps = [
        ":infrastructure",
        "//third-party/python:pytest",
        "//third-party/python:kubernetes",
    ],
    labels = ["kubernetes"],
    visibility = ["PUBLIC"],
)

# Docker tests
python_test(
    name = "docker_tests",
    srcs = glob(["tests/docker/**/*.py"]),
    deps = [
        ":infrastructure",
        "//third-party/python:pytest",
        "//third-party/python:docker",
        "//third-party/python:pytest-docker",
    ],
    labels = ["docker"],
    visibility = ["PUBLIC"],
)

# Example scripts
python_binary(
    name = "deployment_example",
    main = "examples/deployment_example.py",
    deps = [":infrastructure"],
    visibility = ["PUBLIC"],
)

python_binary(
    name = "monitoring_example",
    main = "examples/monitoring_example.py",
    deps = [":infrastructure"],
    visibility = ["PUBLIC"],
)

# Configuration templates
filegroup(
    name = "templates",
    srcs = glob(["templates/**/*.yaml", "templates/**/*.yml", "templates/**/*.json"]),
    visibility = ["PUBLIC"],
)

# Deployment scripts
filegroup(
    name = "scripts",
    srcs = glob(["scripts/**/*.sh", "scripts/**/*.py"]),
    visibility = ["PUBLIC"],
)

# Documentation generation
genrule(
    name = "docs",
    srcs = glob(["docs/**/*.md", "docs/**/*.rst"]),
    out = "docs-html",
    cmd = "sphinx-build -b html docs/ $OUT",
    visibility = ["PUBLIC"],
)