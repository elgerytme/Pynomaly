apiVersion: v1
kind: Secret
metadata:
  name: pynomaly-production-secrets
  namespace: pynomaly-production
  labels:
    app: pynomaly
    component: secrets
    environment: production
  annotations:
    kubernetes.io/description: "Production secrets for Pynomaly application"
    pynomaly.io/secret-rotation: "enabled"
    pynomaly.io/encryption: "aes-256-gcm"
type: Opaque
stringData:
  # Database Configuration
  DATABASE_URL: "postgresql://pynomaly_user:${POSTGRES_PASSWORD}@postgres-service:5432/pynomaly_prod"
  POSTGRES_HOST: "postgres-service.pynomaly-production.svc.cluster.local"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "pynomaly_prod"
  POSTGRES_USER: "pynomaly_user"
  POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
  
  # Redis Configuration
  REDIS_URL: "redis://:${REDIS_PASSWORD}@redis-service:6379/0"
  REDIS_HOST: "redis-service.pynomaly-production.svc.cluster.local"
  REDIS_PORT: "6379"
  REDIS_PASSWORD: "${REDIS_PASSWORD}"
  
  # Application Security
  SECRET_KEY: "${APP_SECRET_KEY}"
  JWT_SECRET_KEY: "${JWT_SECRET_KEY}"
  JWT_REFRESH_SECRET_KEY: "${JWT_REFRESH_SECRET_KEY}"
  ENCRYPTION_KEY: "${ENCRYPTION_KEY}"
  
  # External Services
  OPENAI_API_KEY: "${OPENAI_API_KEY}"
  SENTRY_DSN: "${SENTRY_DSN}"
  MONITORING_API_KEY: "${MONITORING_API_KEY}"
  
  # Cloud Provider Credentials
  AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
  AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
  AWS_REGION: "us-west-2"
  S3_BUCKET_NAME: "pynomaly-production-storage"
  
  # Monitoring & Observability
  PROMETHEUS_PASSWORD: "${PROMETHEUS_PASSWORD}"
  GRAFANA_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD}"
  DATADOG_API_KEY: "${DATADOG_API_KEY}"
  NEWRELIC_LICENSE_KEY: "${NEWRELIC_LICENSE_KEY}"

---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: pynomaly-secret-store
  namespace: pynomaly-production
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        serviceAccount:
          name: pynomaly-secrets-sa

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: pynomaly-external-secrets
  namespace: pynomaly-production
  labels:
    app: pynomaly
    component: secrets
    environment: production
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: pynomaly-secret-store
    kind: SecretStore
  target:
    name: pynomaly-production-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      engineVersion: v2
      data:
        DATABASE_URL: "postgresql://{{ .POSTGRES_USER }}:{{ .POSTGRES_PASSWORD }}@postgres-service:5432/{{ .POSTGRES_DB }}"
        REDIS_URL: "redis://:{{ .REDIS_PASSWORD }}@redis-service:6379/0"
  data:
  - secretKey: POSTGRES_PASSWORD
    remoteRef:
      key: pynomaly/production/database
      property: password
  - secretKey: POSTGRES_USER
    remoteRef:
      key: pynomaly/production/database
      property: username
  - secretKey: POSTGRES_DB
    remoteRef:
      key: pynomaly/production/database
      property: database
  - secretKey: REDIS_PASSWORD
    remoteRef:
      key: pynomaly/production/redis
      property: password
  - secretKey: SECRET_KEY
    remoteRef:
      key: pynomaly/production/app
      property: secret_key
  - secretKey: JWT_SECRET_KEY
    remoteRef:
      key: pynomaly/production/app
      property: jwt_secret_key
  - secretKey: JWT_REFRESH_SECRET_KEY
    remoteRef:
      key: pynomaly/production/app
      property: jwt_refresh_secret_key
  - secretKey: ENCRYPTION_KEY
    remoteRef:
      key: pynomaly/production/app
      property: encryption_key
  - secretKey: OPENAI_API_KEY
    remoteRef:
      key: pynomaly/production/external
      property: openai_api_key
  - secretKey: SENTRY_DSN
    remoteRef:
      key: pynomaly/production/external
      property: sentry_dsn
  - secretKey: AWS_ACCESS_KEY_ID
    remoteRef:
      key: pynomaly/production/aws
      property: access_key_id
  - secretKey: AWS_SECRET_ACCESS_KEY
    remoteRef:
      key: pynomaly/production/aws
      property: secret_access_key
  - secretKey: MONITORING_API_KEY
    remoteRef:
      key: pynomaly/production/monitoring
      property: api_key

---
apiVersion: v1
kind: Secret
metadata:
  name: pynomaly-tls-certificates
  namespace: pynomaly-production
  labels:
    app: pynomaly
    component: tls
    environment: production
type: kubernetes.io/tls
data:
  tls.crt: ${TLS_CERTIFICATE_BASE64}
  tls.key: ${TLS_PRIVATE_KEY_BASE64}

---
apiVersion: v1
kind: Secret
metadata:
  name: pynomaly-registry-credentials
  namespace: pynomaly-production
  labels:
    app: pynomaly
    component: registry
    environment: production
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: ${DOCKER_CONFIG_JSON_BASE64}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pynomaly-secrets-sa
  namespace: pynomaly-production
  labels:
    app: pynomaly
    component: secrets
    environment: production
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::${AWS_ACCOUNT_ID}:role/pynomaly-secrets-role

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pynomaly-secrets-role
  namespace: pynomaly-production
  labels:
    app: pynomaly
    component: secrets
    environment: production
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch"]
- apiGroups: ["external-secrets.io"]
  resources: ["externalsecrets", "secretstores"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pynomaly-secrets-binding
  namespace: pynomaly-production
  labels:
    app: pynomaly
    component: secrets
    environment: production
subjects:
- kind: ServiceAccount
  name: pynomaly-secrets-sa
  namespace: pynomaly-production
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: pynomaly-secrets-role

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: pynomaly-secret-rotation
  namespace: pynomaly-production
  labels:
    app: pynomaly
    component: secret-rotation
    environment: production
spec:
  schedule: "0 2 * * 0"  # Weekly on Sunday at 2 AM
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 3
  successfulJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: pynomaly
            component: secret-rotation
            job: rotation
        spec:
          serviceAccountName: pynomaly-secrets-sa
          restartPolicy: OnFailure
          containers:
          - name: secret-rotator
            image: ghcr.io/pynomaly/secret-rotator:latest
            imagePullPolicy: IfNotPresent
            env:
            - name: AWS_REGION
              value: "us-west-2"
            - name: NAMESPACE
              value: "pynomaly-production"
            - name: SECRET_PREFIX
              value: "pynomaly/production"
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting secret rotation..."
              
              # Rotate database password
              NEW_DB_PASSWORD=$(openssl rand -base64 32)
              aws secretsmanager put-secret-value \
                --secret-id pynomaly/production/database \
                --secret-string "{\"password\":\"$NEW_DB_PASSWORD\",\"username\":\"pynomaly_user\",\"database\":\"pynomaly_prod\"}"
              
              # Rotate Redis password
              NEW_REDIS_PASSWORD=$(openssl rand -base64 32)
              aws secretsmanager put-secret-value \
                --secret-id pynomaly/production/redis \
                --secret-string "{\"password\":\"$NEW_REDIS_PASSWORD\"}"
              
              # Rotate JWT secrets
              NEW_JWT_SECRET=$(openssl rand -base64 64)
              NEW_JWT_REFRESH_SECRET=$(openssl rand -base64 64)
              aws secretsmanager put-secret-value \
                --secret-id pynomaly/production/app \
                --secret-string "{\"jwt_secret_key\":\"$NEW_JWT_SECRET\",\"jwt_refresh_secret_key\":\"$NEW_JWT_REFRESH_SECRET\"}"
              
              echo "Secret rotation completed successfully"
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "256Mi"
                cpu: "200m"
            securityContext:
              runAsNonRoot: true
              runAsUser: 65534
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: pynomaly-secrets-network-policy
  namespace: pynomaly-production
  labels:
    app: pynomaly
    component: secrets
    environment: production
spec:
  podSelector:
    matchLabels:
      component: secret-rotation
  policyTypes:
  - Egress
  egress:
  - to: []
    ports:
    - port: 443
      protocol: TCP
    - port: 53
      protocol: UDP
