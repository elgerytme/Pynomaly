apiVersion: apps/v1
kind: Deployment
metadata:
  name: pynomaly-api-production
  namespace: pynomaly-production
  labels:
    app: pynomaly
    component: api
    environment: production
    version: "1.0.0"
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubernetes.io/description: "Production Pynomaly API deployment with enhanced security"
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: pynomaly
      component: api
      environment: production
  template:
    metadata:
      labels:
        app: pynomaly
        component: api
        environment: production
        version: "1.0.0"
      annotations:
        # Prometheus monitoring
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        # Security annotations
        container.apparmor.security.beta.kubernetes.io/pynomaly-api: runtime/default
        seccomp.security.alpha.kubernetes.io/pod: runtime/default
        # Performance annotations
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      # Security Context for Pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: [65532]
      
      # Service Account with minimal permissions
      serviceAccountName: pynomaly-api-sa
      automountServiceAccountToken: false
      
      # DNS Configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      
      # Container specification
      containers:
      - name: pynomaly-api
        image: ghcr.io/pynomaly/pynomaly:production-latest
        imagePullPolicy: Always
        
        # Ports
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        # Environment variables
        env:
        - name: PYNOMALY_ENVIRONMENT
          value: "production"
        - name: PYNOMALY_LOG_LEVEL
          value: "INFO"
        - name: PYTHONOPTIMIZE
          value: "2"
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: PYTHONDONTWRITEBYTECODE
          value: "1"
        - name: MALLOC_TRIM_THRESHOLD_
          value: "0"
        
        # Pod information
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        
        # Configuration from ConfigMaps
        envFrom:
        - configMapRef:
            name: pynomaly-config
        - secretRef:
            name: pynomaly-secrets
        
        # Resource limits and requests
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "2Gi"
        
        # Enhanced Health Checks
        livenessProbe:
          httpGet:
            path: /api/health/live
            port: 8000
            scheme: HTTP
            httpHeaders:
            - name: User-Agent
              value: "Kubernetes-LivenessProbe"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /api/health/ready
            port: 8000
            scheme: HTTP
            httpHeaders:
            - name: User-Agent
              value: "Kubernetes-ReadinessProbe"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        startupProbe:
          httpGet:
            path: /api/health/startup
            port: 8000
            scheme: HTTP
            httpHeaders:
            - name: User-Agent
              value: "Kubernetes-StartupProbe"
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
          successThreshold: 1
        
        # Volume mounts
        volumeMounts:
        - name: storage
          mountPath: /app/storage
        - name: logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: secrets
          mountPath: /app/secrets
          readOnly: true
        - name: temp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
        
        # Security context for container
        securityContext:
          runAsNonRoot: true
          runAsUser: 65532
          runAsGroup: 65532
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
          seccompProfile:
            type: RuntimeDefault
        
        # Lifecycle hooks
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - "sleep 15 && kill -TERM 1"
      
      # Sidecar container for log collection
      - name: log-forwarder
        image: fluent/fluent-bit:2.2.0
        imagePullPolicy: IfNotPresent
        
        ports:
        - name: metrics
          containerPort: 2020
          protocol: TCP
        
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        
        volumeMounts:
        - name: logs
          mountPath: /var/log/app
          readOnly: true
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc
          readOnly: true
        
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      
      # Volumes
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: pynomaly-storage-pvc
      - name: logs
        emptyDir:
          sizeLimit: "1Gi"
      - name: config
        configMap:
          name: pynomaly-config
          defaultMode: 0444
      - name: secrets
        secret:
          secretName: pynomaly-secrets
          defaultMode: 0400
      - name: temp
        emptyDir:
          sizeLimit: "2Gi"
          medium: Memory
      - name: cache
        emptyDir:
          sizeLimit: "5Gi"
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-config
          defaultMode: 0444
      
      # Image pull secrets
      imagePullSecrets:
      - name: pynomaly-registry-secret
      
      # Node selection and affinity
      nodeSelector:
        kubernetes.io/arch: amd64
        node-type: application
      
      tolerations:
      - key: "node-type"
        operator: "Equal"
        value: "application"
        effect: "NoSchedule"
      
      affinity:
        # Anti-affinity to spread pods across nodes
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: [pynomaly]
              - key: component
                operator: In
                values: [api]
            topologyKey: kubernetes.io/hostname
        # Preferred node affinity
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values: [application]
          - weight: 50
            preference:
              matchExpressions:
              - key: zone
                operator: In
                values: [us-west-2a, us-west-2b, us-west-2c]
      
      # Pod termination
      terminationGracePeriodSeconds: 30
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: pynomaly-api-service
  namespace: pynomaly-production
  labels:
    app: pynomaly
    component: api
    environment: production
  annotations:
    # Prometheus monitoring
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
    # Load balancer configuration
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-west-2:123456789012:certificate/12345678-1234-1234-1234-123456789012"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
spec:
  selector:
    app: pynomaly
    component: api
    environment: production
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    protocol: TCP
  - name: https
    port: 8443
    targetPort: 8000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP
  sessionAffinity: None

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: pynomaly-api-hpa
  namespace: pynomaly-production
  labels:
    app: pynomaly
    component: api
    environment: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pynomaly-api-production
  minReplicas: 5
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "1000"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 10
        periodSeconds: 15
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Min

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: pynomaly-api-pdb
  namespace: pynomaly-production
  labels:
    app: pynomaly
    component: api
    environment: production
spec:
  minAvailable: 3
  selector:
    matchLabels:
      app: pynomaly
      component: api
      environment: production

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: pynomaly-api-network-policy
  namespace: pynomaly-production
  labels:
    app: pynomaly
    component: api
    environment: production
spec:
  podSelector:
    matchLabels:
      app: pynomaly
      component: api
      environment: production
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: pynomaly-production
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - port: 8000
      protocol: TCP
    - port: 9090
      protocol: TCP
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: pynomaly-production
    ports:
    - port: 5432
      protocol: TCP
    - port: 6379
      protocol: TCP
    - port: 27017
      protocol: TCP
  - to: []
    ports:
    - port: 53
      protocol: UDP
    - port: 443
      protocol: TCP
