# Kubernetes Ingress configuration for Pynomaly
# External access configuration with SSL termination and routing

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pynomaly-ingress
  namespace: pynomaly
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/component: ingress
    app.kubernetes.io/instance: production
  annotations:
    # Ingress controller specific annotations
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"

    # Request size limits
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/client-max-body-size: "100m"

    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"

    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Content-Type-Options nosniff;
      add_header X-Frame-Options DENY;
      add_header X-XSS-Protection "1; mode=block";
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin";
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self';";

    # SSL certificate management (cert-manager)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: "http01"

    # CORS configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://pynomaly.local,https://grafana.pynomaly.local"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type, X-Requested-With"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"

    # Load balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/affinity-mode: "persistent"

    # Health check
    nginx.ingress.kubernetes.io/health-check-path: "/api/health"
    nginx.ingress.kubernetes.io/health-check-interval: "30s"
spec:
  tls:
  - hosts:
    - pynomaly.local
    - api.pynomaly.local
    secretName: pynomaly-tls
  rules:
  # Main application interface
  - host: pynomaly.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pynomaly-api-service
            port:
              number: 80
  # API-specific subdomain
  - host: api.pynomaly.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pynomaly-api-service
            port:
              number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pynomaly-monitoring-ingress
  namespace: pynomaly
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/component: monitoring-ingress
    app.kubernetes.io/instance: production
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

    # Authentication for monitoring services
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: pynomaly-monitoring-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Pynomaly Monitoring - Authentication Required'

    # Rate limiting for monitoring
    nginx.ingress.kubernetes.io/rate-limit: "50"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"

    # SSL certificate management
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: "http01"

    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Content-Type-Options nosniff;
      add_header X-Frame-Options SAMEORIGIN;
      add_header X-XSS-Protection "1; mode=block";
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
spec:
  tls:
  - hosts:
    - grafana.pynomaly.local
    - prometheus.pynomaly.local
    - alertmanager.pynomaly.local
    secretName: pynomaly-monitoring-tls
  rules:
  # Grafana dashboard
  - host: grafana.pynomaly.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pynomaly-grafana-service
            port:
              number: 80
  # Prometheus metrics and interface
  - host: prometheus.pynomaly.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pynomaly-prometheus-service
            port:
              number: 80
  # Alertmanager interface
  - host: alertmanager.pynomaly.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pynomaly-alertmanager-service
            port:
              number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pynomaly-admin-ingress
  namespace: pynomaly
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/component: admin-ingress
    app.kubernetes.io/instance: production
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

    # Strong authentication for admin services
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: pynomaly-admin-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Pynomaly Admin - Administrator Access Required'

    # Strict rate limiting for admin
    nginx.ingress.kubernetes.io/rate-limit: "20"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"

    # IP whitelist for admin access (customize for your environment)
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"

    # SSL certificate management
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: "http01"

    # Additional security headers for admin
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Content-Type-Options nosniff;
      add_header X-Frame-Options DENY;
      add_header X-XSS-Protection "1; mode=block";
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header Referrer-Policy "no-referrer";
      add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self'; font-src 'self';";
spec:
  tls:
  - hosts:
    - flower.pynomaly.local
    secretName: pynomaly-admin-tls
  rules:
  # Flower (Celery monitoring)
  - host: flower.pynomaly.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pynomaly-flower-service
            port:
              number: 80
---
# NetworkPolicy for ingress traffic control
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: pynomaly-ingress-policy
  namespace: pynomaly
  labels:
    app.kubernetes.io/name: pynomaly
    app.kubernetes.io/component: network-policy
    app.kubernetes.io/instance: production
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: pynomaly
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from nginx ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 9093
    - protocol: TCP
      port: 5555
  # Allow ingress from same namespace (inter-service communication)
  - from:
    - namespaceSelector:
        matchLabels:
          name: pynomaly
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 4317
    - protocol: TCP
      port: 4318
  egress:
  # Allow egress to same namespace
  - to:
    - namespaceSelector:
        matchLabels:
          name: pynomaly
  # Allow egress to DNS
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow egress to external services (HTTPS)
  - to: []
    ports:
    - protocol: TCP
      port: 443
