services:
  # Main Pynomaly Application
  pynomaly-api:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    image: pynomaly:production
    container_name: pynomaly-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://pynomaly:${POSTGRES_PASSWORD}@postgres:5432/pynomaly_prod
      - REDIS_URL=redis://redis-cluster:6379
      - LOG_LEVEL=INFO
      - WORKERS=4
    depends_on:
      - postgres
      - redis-cluster
    networks:
      - pynomaly-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pynomaly-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=pynomaly_prod
      - POSTGRES_USER=pynomaly
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - pynomaly-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pynomaly -d pynomaly_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cluster
  redis-cluster:
    image: redis:7-alpine
    container_name: pynomaly-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - pynomaly-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: pynomaly-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - pynomaly-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: pynomaly-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - pynomaly-network
    depends_on:
      - prometheus

networks:
  pynomaly-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:
