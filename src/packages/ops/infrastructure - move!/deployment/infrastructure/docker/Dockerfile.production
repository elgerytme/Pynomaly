# Multi-stage Dockerfile for Production Deployment
FROM python:3.11-slim as base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libc6-dev \
    libffi-dev \
    libssl-dev \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create application user
RUN groupadd -r pynomaly && useradd -r -g pynomaly pynomaly

# Set work directory
WORKDIR /app

# Copy requirements
COPY requirements.txt requirements-prod.txt ./
COPY pyproject.toml ./

# Install Python dependencies
RUN pip install --upgrade pip && \
    pip install -r requirements-prod.txt

# Copy application code
COPY src/ ./src/
COPY scripts/ ./scripts/
COPY config/ ./config/

# Create necessary directories
RUN mkdir -p /app/models /app/features /app/logs /app/data && \
    chown -R pynomaly:pynomaly /app

# Production stage
FROM base as production

# Copy production configuration
COPY config/production.yml /app/config/

# Set user
USER pynomaly

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Run application
CMD ["python", "-m", "uvicorn", "src.pynomaly.presentation.web.simple_app:create_app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--workers", "4", \
     "--log-level", "info"]

# Streaming service stage
FROM base as streaming

# Copy streaming configuration
COPY config/streaming.yml /app/config/

# Set user
USER pynomaly

# Run streaming service
CMD ["python", "-m", "src.pynomaly.features.real_time_processing", \
     "--config", "/app/config/streaming.yml", \
     "--workers", "8", \
     "--log-level", "info"]

# Model training stage
FROM base as trainer

# Install additional ML dependencies
RUN pip install \
    scikit-learn==1.3.0 \
    xgboost==1.7.6 \
    lightgbm==4.0.0 \
    optuna==3.3.0

# Copy training configuration
COPY config/training.yml /app/config/
COPY scripts/training/ ./scripts/training/

# Set user
USER pynomaly

# Run training service
CMD ["python", "-m", "src.pynomaly.application.services.automl_service", \
     "--config", "/app/config/training.yml", \
     "--mode", "production"]

# Development stage
FROM base as development

# Install development dependencies
RUN pip install \
    pytest==7.4.0 \
    pytest-asyncio==0.21.1 \
    pytest-cov==4.1.0 \
    black==23.7.0 \
    isort==5.12.0 \
    flake8==6.0.0 \
    mypy==1.5.1 \
    pre-commit==3.3.3

# Copy development configuration
COPY config/development.yml /app/config/
COPY tests/ ./tests/

# Set user
USER pynomaly

# Run development server
CMD ["python", "-m", "uvicorn", "src.pynomaly.presentation.web.app:create_app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--reload", \
     "--log-level", "debug"]

# Testing stage
FROM development as testing

# Run tests
CMD ["python", "-m", "pytest", "tests/", "-v", "--cov=src/pynomaly", "--cov-report=html", "--cov-report=term"]
