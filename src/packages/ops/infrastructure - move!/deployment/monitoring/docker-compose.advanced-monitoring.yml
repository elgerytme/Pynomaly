version: '3.8'

services:
  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.42
    container_name: pynomaly-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "14250:14250"  # Jaeger collector gRPC
      - "6831:6831/udp"  # Jaeger agent UDP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=Host(`jaeger.pynomaly.local`)"
      - "traefik.http.services.jaeger.loadbalancer.server.port=16686"

  # Elasticsearch for log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0
    container_name: pynomaly-elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=pynomaly-logs
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.6.0
    container_name: pynomaly-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana.pynomaly.local
      - SERVER_BASEPATH=/kibana
    ports:
      - "5601:5601"
    networks:
      - monitoring
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=Host(`kibana.pynomaly.local`)"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"

  # Logstash for log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.6.0
    container_name: pynomaly-logstash
    volumes:
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./config/logstash/config:/usr/share/logstash/config:ro
      - ./logs:/var/log/pynomaly:ro
    ports:
      - "5044:5044"  # Beats input
      - "5000:5000/tcp"  # TCP input
      - "5000:5000/udp"  # UDP input
      - "9600:9600"  # API
    environment:
      - LS_JAVA_OPTS=-Xmx1g -Xms1g
      - PIPELINE_WORKERS=2
      - PIPELINE_BATCH_SIZE=125
      - PIPELINE_BATCH_DELAY=50
    networks:
      - monitoring
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

  # Filebeat for log shipping
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.6.0
    container_name: pynomaly-filebeat
    user: root
    volumes:
      - ./config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/pynomaly:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - LOGSTASH_HOST=logstash:5044
    networks:
      - monitoring
    depends_on:
      - logstash
    restart: unless-stopped

  # Advanced monitoring service
  pynomaly-advanced-monitoring:
    build:
      context: ../../
      dockerfile: deployment/monitoring/Dockerfile.advanced-monitoring
    container_name: pynomaly-advanced-monitoring
    environment:
      - PYTHONPATH=/app
      - PROMETHEUS_HOST=prometheus:9090
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://pynomaly:password@postgres:5432/pynomaly_monitoring
    ports:
      - "8090:8090"  # Advanced monitoring API
      - "8091:8091"  # Business Intelligence Dashboard
    volumes:
      - ./config/advanced_monitoring.yml:/app/config/advanced_monitoring.yml:ro
      - ./logs:/app/logs
      - monitoring_data:/app/data
    networks:
      - monitoring
      - pynomaly-network
    depends_on:
      - prometheus
      - elasticsearch
      - jaeger
      - redis
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.advanced-monitoring.rule=Host(`monitoring.pynomaly.local`)"
      - "traefik.http.services.advanced-monitoring.loadbalancer.server.port=8090"

  # ML-based anomaly detection service
  anomaly-detector:
    build:
      context: ../../
      dockerfile: deployment/monitoring/Dockerfile.anomaly-detector
    container_name: pynomaly-anomaly-detector
    environment:
      - PYTHONPATH=/app
      - PROMETHEUS_HOST=prometheus:9090
      - MODEL_UPDATE_INTERVAL=3600  # 1 hour
      - ANOMALY_THRESHOLD=0.8
    volumes:
      - anomaly_models:/app/models
      - ./config/anomaly_detection.yml:/app/config/anomaly_detection.yml:ro
    networks:
      - monitoring
    depends_on:
      - prometheus
    restart: unless-stopped

  # Capacity planning service
  capacity-planner:
    build:
      context: ../../
      dockerfile: deployment/monitoring/Dockerfile.capacity-planner
    container_name: pynomaly-capacity-planner
    environment:
      - PYTHONPATH=/app
      - PROMETHEUS_HOST=prometheus:9090
      - FORECAST_DAYS=30
      - UPDATE_INTERVAL=1800  # 30 minutes
    volumes:
      - capacity_data:/app/data
      - ./config/capacity_planning.yml:/app/config/capacity_planning.yml:ro
    networks:
      - monitoring
    depends_on:
      - prometheus
    restart: unless-stopped

  # SLO monitoring service
  slo-monitor:
    build:
      context: ../../
      dockerfile: deployment/monitoring/Dockerfile.slo-monitor
    container_name: pynomaly-slo-monitor
    environment:
      - PYTHONPATH=/app
      - PROMETHEUS_HOST=prometheus:9090
      - ALERTMANAGER_HOST=alertmanager:9093
    volumes:
      - ./config/slos.yml:/app/config/slos.yml:ro
      - slo_data:/app/data
    networks:
      - monitoring
    depends_on:
      - prometheus
      - alertmanager
    restart: unless-stopped

  # Business Intelligence Dashboard
  bi-dashboard:
    build:
      context: ../../
      dockerfile: deployment/monitoring/Dockerfile.bi-dashboard
    container_name: pynomaly-bi-dashboard
    environment:
      - PYTHONPATH=/app
      - ADVANCED_MONITORING_URL=http://pynomaly-advanced-monitoring:8090
      - WEBSOCKET_ENABLED=true
    ports:
      - "8080:8080"  # BI Dashboard
    volumes:
      - ./templates:/app/templates:ro
      - dashboard_data:/app/data
    networks:
      - monitoring
    depends_on:
      - pynomaly-advanced-monitoring
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bi-dashboard.rule=Host(`dashboard.pynomaly.local`)"
      - "traefik.http.services.bi-dashboard.loadbalancer.server.port=8080"

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: pynomaly-redis-monitoring
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for monitoring metadata
  postgres-monitoring:
    image: postgres:15-alpine
    container_name: pynomaly-postgres-monitoring
    environment:
      - POSTGRES_DB=pynomaly_monitoring
      - POSTGRES_USER=pynomaly
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_monitoring_data:/var/lib/postgresql/data
      - ./config/init-monitoring-db.sql:/docker-entrypoint-initdb.d/init-monitoring-db.sql:ro
    ports:
      - "5433:5432"
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pynomaly -d pynomaly_monitoring"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Traefik for reverse proxy and load balancing
  traefik:
    image: traefik:v2.9
    container_name: pynomaly-traefik
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencrypt.acme.email=admin@pynomaly.com
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/letsencrypt
    networks:
      - monitoring
    restart: unless-stopped

  # Nginx for serving static assets and reverse proxy
  nginx:
    image: nginx:alpine
    container_name: pynomaly-nginx-monitoring
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./static:/usr/share/nginx/html/static:ro
    ports:
      - "8082:80"
    networks:
      - monitoring
    restart: unless-stopped

networks:
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  pynomaly-network:
    external: true

volumes:
  elasticsearch_data:
    driver: local
  redis_data:
    driver: local
  postgres_monitoring_data:
    driver: local
  monitoring_data:
    driver: local
  anomaly_models:
    driver: local
  capacity_data:
    driver: local
  slo_data:
    driver: local
  dashboard_data:
    driver: local
  traefik_data:
    driver: local
