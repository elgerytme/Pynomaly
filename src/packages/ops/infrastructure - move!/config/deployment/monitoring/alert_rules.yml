# Prometheus Alert Rules for Pynomaly
# Following alerting best practices from RULES.md

groups:
  # Application Performance Monitoring
  - name: pynomaly.application
    interval: 30s
    rules:
      # API Health and Performance
      - alert: PynormalyAPIDown
        expr: up{job="pynomaly-api"} == 0
        for: 1m
        labels:
          severity: critical
          service: pynomaly-api
        annotations:
          summary: "Pynomaly API is down"
          description: "Pynomaly API has been down for more than 1 minute"
          runbook_url: "https://docs.pynomaly.io/runbooks/api-down"

      - alert: PynormalyHighLatency
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job="pynomaly-api"}[5m])) > 5
        for: 5m
        labels:
          severity: warning
          service: pynomaly-api
        annotations:
          summary: "High API latency detected"
          description: "95th percentile latency is {{ $value }}s for 5 minutes"
          runbook_url: "https://docs.pynomaly.io/runbooks/high-latency"

      - alert: PynormalyHighErrorRate
        expr: rate(http_requests_total{job="pynomaly-api",status=~"5.."}[5m]) / rate(http_requests_total{job="pynomaly-api"}[5m]) > 0.05
        for: 2m
        labels:
          severity: warning
          service: pynomaly-api
        annotations:
          summary: "High error rate detected"
          description: "Error rate is {{ $value | humanizePercentage }} for 2 minutes"

      # Detection Performance
      - alert: PynormalyDetectionFailures
        expr: rate(pynomaly_detection_failures_total[10m]) > 0.1
        for: 5m
        labels:
          severity: warning
          service: pynomaly-detection
        annotations:
          summary: "High detection failure rate"
          description: "Detection failure rate is {{ $value }} per second"

      - alert: PynormalyDetectionLatency
        expr: histogram_quantile(0.95, rate(pynomaly_detection_duration_seconds_bucket[5m])) > 10
        for: 5m
        labels:
          severity: warning
          service: pynomaly-detection
        annotations:
          summary: "High detection latency"
          description: "95th percentile detection time is {{ $value }}s"

  # Resource Monitoring
  - name: pynomaly.resources
    interval: 30s
    rules:
      # Memory Usage
      - alert: PynormalyHighMemoryUsage
        expr: (process_resident_memory_bytes{job="pynomaly-api"} / 1024 / 1024 / 1024) > 4
        for: 5m
        labels:
          severity: warning
          service: pynomaly-api
        annotations:
          summary: "High memory usage"
          description: "Memory usage is {{ $value | humanize }}GB for 5 minutes"

      # CPU Usage
      - alert: PynormalyHighCPUUsage
        expr: rate(process_cpu_seconds_total{job="pynomaly-api"}[5m]) * 100 > 80
        for: 10m
        labels:
          severity: warning
          service: pynomaly-api
        annotations:
          summary: "High CPU usage"
          description: "CPU usage is {{ $value | humanizePercentage }} for 10 minutes"

      # Disk Usage
      - alert: PynormalyLowDiskSpace
        expr: (node_filesystem_free_bytes{mountpoint="/app/storage"} / node_filesystem_size_bytes{mountpoint="/app/storage"}) * 100 < 20
        for: 5m
        labels:
          severity: warning
          service: pynomaly-storage
        annotations:
          summary: "Low disk space"
          description: "Only {{ $value | humanizePercentage }} disk space remaining"

  # Business Metrics
  - name: pynomaly.business
    interval: 60s
    rules:
      # Model Performance Drift
      - alert: PynormalyModelDrift
        expr: pynomaly_model_accuracy{job="pynomaly-api"} < 0.8
        for: 15m
        labels:
          severity: warning
          service: pynomaly-ml
        annotations:
          summary: "Model performance degradation detected"
          description: "Model accuracy has dropped to {{ $value | humanizePercentage }}"

      # High Anomaly Rate
      - alert: PynormalyHighAnomalyRate
        expr: rate(pynomaly_anomalies_detected_total[1h]) > 0.5
        for: 30m
        labels:
          severity: info
          service: pynomaly-detection
        annotations:
          summary: "Unusually high anomaly detection rate"
          description: "Anomaly rate is {{ $value }} per second for 30 minutes"

      # Low Detection Volume
      - alert: PynormalyLowDetectionVolume
        expr: rate(pynomaly_detections_total[1h]) < 0.1
        for: 1h
        labels:
          severity: info
          service: pynomaly-detection
        annotations:
          summary: "Low detection volume"
          description: "Detection rate is only {{ $value }} per second for 1 hour"

  # Infrastructure Monitoring
  - name: pynomaly.infrastructure
    interval: 30s
    rules:
      # Database Connection
      - alert: PynormalyDatabaseConnectionFailure
        expr: pynomaly_database_connections_failed_total > 10
        for: 2m
        labels:
          severity: critical
          service: pynomaly-database
        annotations:
          summary: "Database connection failures"
          description: "{{ $value }} database connection failures detected"

      # Cache Performance
      - alert: PynormalyCacheHitRateLow
        expr: (redis_keyspace_hits / (redis_keyspace_hits + redis_keyspace_misses)) < 0.8
        for: 10m
        labels:
          severity: warning
          service: pynomaly-cache
        annotations:
          summary: "Low cache hit rate"
          description: "Cache hit rate is {{ $value | humanizePercentage }}"

      # Queue Backlog
      - alert: PynormalyQueueBacklog
        expr: pynomaly_queue_size > 100
        for: 5m
        labels:
          severity: warning
          service: pynomaly-queue
        annotations:
          summary: "Queue backlog detected"
          description: "Queue size is {{ $value }} items"

  # Security Monitoring
  - name: pynomaly.security
    interval: 30s
    rules:
      # Authentication Failures
      - alert: PynormalyHighAuthFailures
        expr: rate(pynomaly_auth_failures_total[5m]) > 0.1
        for: 2m
        labels:
          severity: warning
          service: pynomaly-auth
        annotations:
          summary: "High authentication failure rate"
          description: "Auth failure rate is {{ $value }} per second"

      # Suspicious API Activity
      - alert: PynormalySuspiciousAPIActivity
        expr: rate(http_requests_total{job="pynomaly-api",status="429"}[5m]) > 0.05
        for: 1m
        labels:
          severity: warning
          service: pynomaly-security
        annotations:
          summary: "High rate limiting activity"
          description: "Rate limiting triggered {{ $value }} times per second"
