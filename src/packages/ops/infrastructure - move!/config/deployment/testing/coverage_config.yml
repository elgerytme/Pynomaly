# Enhanced Test Coverage Configuration for Issue #93
# Comprehensive Coverage Monitoring & Automation Setup

# Coverage Targets and Thresholds
coverage:
  targets:
    overall: 100.0          # Ultimate goal: 100% coverage
    minimum_acceptable: 90.0  # Minimum for CI/CD passing
    warning_threshold: 95.0   # Warning level before target
    
  thresholds:
    per_file_minimum: 95.0    # Minimum coverage per file
    branch_coverage: 90.0     # Branch coverage minimum
    function_coverage: 100.0  # Function coverage target
    
  regression:
    detection_threshold: 0.1  # 0.1% regression triggers warning
    failure_threshold: 2.0    # 2% regression fails CI/CD

# Quality Gates Configuration
quality_gates:
  gates:
    - name: "overall_100_percent"
      type: "coverage"
      threshold: 100.0
      critical: false
      description: "Ultimate goal: 100% overall coverage"
      
    - name: "overall_95_percent"
      type: "coverage" 
      threshold: 95.0
      critical: true
      description: "Production readiness: 95% coverage minimum"
      
    - name: "overall_90_percent"
      type: "coverage"
      threshold: 90.0
      critical: true
      description: "Basic quality gate: 90% coverage minimum"
      
    - name: "no_regression"
      type: "regression"
      threshold: 0.1
      critical: true
      description: "No coverage regression > 0.1%"
      
    - name: "branch_coverage_90"
      type: "branch_coverage"
      threshold: 90.0
      critical: true
      description: "Branch coverage minimum 90%"

# Testing Configuration
testing:
  test_commands:
    unit: "pytest tests/unit/ --cov=src/pynomaly"
    integration: "pytest tests/integration/ --cov=src/pynomaly"
    full: "pytest tests/ --cov=src/pynomaly --cov-report=xml --cov-report=html --cov-report=json --cov-branch"
    
  coverage_options:
    - "--cov-report=xml"      # For Codecov integration
    - "--cov-report=html"     # For human-readable reports  
    - "--cov-report=json"     # For automated parsing
    - "--cov-report=term-missing"  # Terminal output
    - "--cov-branch"          # Enable branch coverage
    - "--cov-fail-under=0"    # Don't fail on coverage (handled by quality gates)
    
  pytest_options:
    - "--tb=short"            # Short traceback format
    - "--strict-markers"      # Strict marker validation
    - "--strict-config"       # Strict configuration
    - "-v"                    # Verbose output

# Mutation Testing Configuration  
mutation_testing:
  enabled: true
  tools:
    - name: "mutmut"
      timeout: 1800           # 30 minutes timeout
      targets: ["src/pynomaly"]
      test_command: "pytest tests/"
      
  thresholds:
    minimum_score: 70.0       # Minimum mutation score
    target_score: 90.0        # Target mutation score
    excellent_score: 95.0     # Excellent mutation score

# Reporting Configuration
reporting:
  output_formats:
    - "html"                  # Enhanced HTML reports
    - "json"                  # Machine-readable JSON
    - "badge"                 # Coverage badges
    - "markdown"              # Markdown summaries for PRs
    
  report_locations:
    html: "reports/coverage/enhanced_coverage_report.html"
    json: "reports/coverage/coverage_summary.json"
    badge: "reports/coverage/coverage_badge.json"
    markdown: "reports/coverage/pr_status_message.md"
    
  historical_data:
    database: "coverage_history.db"
    retention_days: 90        # Keep 90 days of history
    trend_analysis: true      # Enable trend analysis

# CI/CD Integration
cicd:
  github_actions:
    codecov:
      enabled: true
      token_env: "CODECOV_TOKEN"
      flags: ["unittests"]
      fail_ci_if_error: false
      
    artifacts:
      retention_days: 30
      include:
        - "test-results-*.xml"
        - "htmlcov/"
        - "coverage.xml"
        - "coverage.json"
        - "reports/coverage/"
        - "coverage_history.db"
        
    pr_comments:
      enabled: true
      template: "reports/coverage/pr_status_message.md"
      
  quality_gates_enforcement:
    block_pr_on_regression: true
    require_critical_gates: true
    allow_temporary_exceptions: false

# Automation Features
automation:
  coverage_monitoring:
    real_time_tracking: true
    trend_analysis: true
    regression_detection: true
    automated_reporting: true
    
  notifications:
    regression_alerts: true
    goal_achievement: true
    quality_gate_failures: true
    
  badge_generation:
    auto_update: true
    shields_io_format: true
    colors:
      excellent: "brightgreen"    # >= 100%
      good: "green"              # >= 95%
      acceptable: "yellowgreen"   # >= 90%
      warning: "yellow"          # >= 80%
      poor: "orange"             # >= 70%
      critical: "red"            # < 70%

# Module-Specific Configuration
modules:
  critical_paths:
    - "src/pynomaly/domain/"      # Domain layer - 100% required
    - "src/pynomaly/application/" # Application layer - 100% required
    
  coverage_exceptions:
    # Files that may have lower coverage requirements
    - path: "src/pynomaly/presentation/cli/"
      threshold: 85.0
      reason: "CLI interface - some paths hard to test"
      
    - path: "src/pynomaly/__main__.py"
      threshold: 0.0  
      reason: "Entry point - excluded from coverage"

# Tool Dependencies
dependencies:
  required:
    - "pytest>=8.0.0"
    - "pytest-cov>=6.0.0" 
    - "coverage>=7.0.0"
    - "click>=8.0.0"
    
  optional:
    - "mutmut>=2.4.4"         # Mutation testing
    - "cosmic-ray>=8.3.7"     # Alternative mutation testing
    - "hypothesis>=6.115.0"   # Property-based testing
    - "codecov>=2.1.0"        # Codecov integration

# Success Criteria for Issue #93
success_criteria:
  coverage_monitoring:
    description: "Automated coverage tracking on every commit"
    status: "implemented"
    
  regression_prevention:
    description: "Coverage cannot decrease without explicit approval"  
    status: "implemented"
    
  visibility:
    description: "Coverage status visible in PRs and dashboards"
    status: "implemented"
    
  quality_gates:
    description: "Coverage thresholds enforced in CI/CD"
    status: "implemented"
    
  developer_experience:
    description: "Easy to run coverage locally"
    status: "implemented"
    
  foundation_for_100_percent:
    description: "Infrastructure ready for 100% coverage achievement"
    status: "implemented"

# Timeline and Milestones
timeline:
  week_1:
    - "✅ Basic coverage setup and CI/CD integration"
    - "✅ Enhanced coverage monitoring script"
    - "✅ Quality gates implementation"
    
  week_2:
    - "✅ Advanced monitoring and reporting"
    - "✅ Mutation testing integration"
    - "✅ Regression detection system"
    
  week_3:
    - "✅ Developer tools and documentation"
    - "✅ Comprehensive test orchestrator"
    - "✅ Badge generation and PR integration"
    
  week_4:
    - "⏳ Quality gates and automation refinement"
    - "⏳ Final testing and validation"
    - "⏳ Documentation completion"
