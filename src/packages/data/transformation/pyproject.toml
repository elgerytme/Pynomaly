[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pynomaly-data-transformation"
dynamic = ["version"]
description = "Advanced data transformation and feature engineering for anomaly detection"
authors = [{name = "Anomaly Detection Team", email = "team@pynomaly.io"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
keywords = ["data-transformation", "feature-engineering", "data-processing", "anomaly-detection"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Typing :: Typed",
]

dependencies = [
    "pandas>=2.1.0",
    "polars>=0.20.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "pydantic>=2.10.4",
    "structlog>=24.4.0",
    "dependency-injector>=4.42.0",
    "pyarrow>=14.0.0",
    "dask[dataframe]>=2024.1.0",
]

[project.optional-dependencies]
# Enhanced data processing capabilities
enhanced = [
    "vaex>=4.16.0",
    "modin[ray]>=0.25.0",
    "cudf>=23.12.0",  # GPU acceleration
    "rapids-cuml>=23.12.0",
]

# Database connectors
database = [
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "pymongo>=4.6.0",
    "redis>=5.0.0",
    "clickhouse-driver>=0.2.0",
]

# Cloud storage
cloud = [
    "boto3>=1.34.0",
    "google-cloud-storage>=2.10.0",
    "azure-storage-blob>=12.19.0",
    "s3fs>=2024.1.0",
    "gcsfs>=2024.1.0",
]

# Streaming
streaming = [
    "kafka-python>=2.0.2",
    "aiokafka>=0.10.0",
    "apache-beam[gcp]>=2.53.0",
    "pyspark>=3.5.0",
]

# Feature engineering
feature-engineering = [
    "featuretools>=1.30.0",
    "tsfresh>=0.20.0",
    "category_encoders>=2.6.0",
    "optuna>=3.5.0",
]

# Validation and quality
quality = [
    "great-expectations>=0.18.0",
    "pandera>=0.18.0",
    "pydantic-extra-types>=2.5.0",
    "evidently>=0.4.0",
]

dev = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.115.0",
    "factory-boy>=3.3.1",
    "faker>=33.1.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

test = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.115.0",
    "factory-boy>=3.3.1",
    "faker>=33.1.0",
]

all = [
    "pynomaly-data-transformation[enhanced,database,cloud,streaming,feature-engineering,quality]"
]

[tool.hatch.version]
source = "vcs"
root = "../../.."

[tool.hatch.build.targets.wheel]
packages = ["."]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = ["E", "W", "F", "I", "B", "C4", "UP", "SIM", "TCH"]
ignore = ["B008", "E501"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "ARG"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--disable-warnings",
    "--color=yes",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "performance: Performance tests",
    "slow: Slow running tests",
    "gpu: Tests requiring GPU",
    "cloud: Tests requiring cloud access",
]