name: Pynomaly Detection CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/packages/data/anomaly_detection/**'
      - '.github/workflows/**'
      - 'requirements*.txt'
      - 'setup.py'
      - 'pyproject.toml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/packages/data/anomaly_detection/**'
      - '.github/workflows/**'
      - 'requirements*.txt'
      - 'setup.py'
      - 'pyproject.toml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/pynomaly-detection
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .
    
    - name: Run code quality checks
      run: |
        # Black formatting check
        black --check src/packages/data/anomaly_detection/
        
        # Flake8 linting
        flake8 src/packages/data/anomaly_detection/
        
        # MyPy type checking
        mypy src/packages/data/anomaly_detection/
    
    - name: Run security checks
      run: |
        # Bandit security linting
        bandit -r src/packages/data/anomaly_detection/
        
        # Safety check for vulnerable dependencies
        safety check
    
    - name: Run tests with coverage
      run: |
        cd src/packages/data/anomaly_detection
        pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing
        
        # Check minimum coverage threshold
        coverage report --fail-under=85
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./src/packages/data/anomaly_detection/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
    
    - name: Run performance benchmarks
      run: |
        cd src/packages/data/anomaly_detection
        python -m pytest tests/test_performance.py -v --benchmark-only
    
    - name: Store test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          src/packages/data/anomaly_detection/coverage.xml
          src/packages/data/anomaly_detection/htmlcov/
          src/packages/data/anomaly_detection/.pytest_cache/

  build:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=main-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: src/packages/data/anomaly_detection
        file: src/packages/data/anomaly_detection/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Run security scan on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Update EKS kubeconfig
      run: |
        aws eks update-kubeconfig --name pynomaly-staging --region us-east-1
    
    - name: Deploy to staging
      run: |
        # Update image tag in kustomization
        cd src/packages/data/anomaly_detection/k8s/overlays/staging
        kustomize edit set image pynomaly/detection=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}
        
        # Apply manifests
        kubectl apply -k .
        
        # Wait for rollout
        kubectl rollout status deployment/pynomaly-detection -n pynomaly-staging --timeout=300s
    
    - name: Run smoke tests
      run: |
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=pynomaly-detection -n pynomaly-staging --timeout=300s
        
        # Run health check
        kubectl exec -n pynomaly-staging deployment/pynomaly-detection -- python healthcheck.py
        
        # Run API tests
        python tests/integration/test_api_endpoints.py --env staging
    
    - name: Update deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ Staging deployment successful"
        else
          echo "‚ùå Staging deployment failed"
        fi

  deploy-production:
    name: Deploy to Production
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Update EKS kubeconfig
      run: |
        aws eks update-kubeconfig --name pynomaly-production --region us-east-1
    
    - name: Deploy to production
      run: |
        # Update image tag in kustomization
        cd src/packages/data/anomaly_detection/k8s/overlays/production
        kustomize edit set image pynomaly/detection=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}
        
        # Apply manifests
        kubectl apply -k .
        
        # Wait for rollout with longer timeout for production
        kubectl rollout status deployment/pynomaly-detection -n pynomaly-production --timeout=600s
    
    - name: Run production health checks
      run: |
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=pynomaly-detection -n pynomaly-production --timeout=600s
        
        # Run comprehensive health check
        kubectl exec -n pynomaly-production deployment/pynomaly-detection -- python healthcheck.py
        
        # Run production API tests
        python tests/integration/test_api_endpoints.py --env production
        
        # Run performance validation
        python tests/performance/test_production_performance.py
    
    - name: Update deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "üöÄ Production deployment successful"
          # Send success notification
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚úÖ Pynomaly Detection successfully deployed to production"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        else
          echo "üí• Production deployment failed"
          # Send failure notification
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚ùå Pynomaly Detection production deployment failed"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        fi

  cleanup:
    name: Cleanup
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Cleanup old images
      uses: actions/github-script@v7
      with:
        script: |
          const { data: packages } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
            package_type: 'container',
            package_name: 'pynomaly-detection',
            org: context.repo.owner,
          });
          
          // Keep only the 10 most recent images
          const oldPackages = packages.slice(10);
          
          for (const pkg of oldPackages) {
            await github.rest.packages.deletePackageVersionForOrg({
              package_type: 'container',
              package_name: 'pynomaly-detection',
              org: context.repo.owner,
              package_version_id: pkg.id,
            });
          }
    
    - name: Generate deployment report
      run: |
        echo "# Pynomaly Detection Deployment Report" > deployment-report.md
        echo "- **Date**: $(date)" >> deployment-report.md
        echo "- **Commit**: ${{ github.sha }}" >> deployment-report.md
        echo "- **Branch**: ${{ github.ref_name }}" >> deployment-report.md
        echo "- **Tests**: ${{ needs.test.result }}" >> deployment-report.md
        echo "- **Build**: ${{ needs.build.result }}" >> deployment-report.md
        echo "- **Staging**: ${{ needs.deploy-staging.result }}" >> deployment-report.md
        echo "- **Production**: ${{ needs.deploy-production.result }}" >> deployment-report.md
    
    - name: Upload deployment report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report
        path: deployment-report.md