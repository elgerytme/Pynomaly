apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pynomaly-detection-ingress
  labels:
    app: pynomaly-detection
    version: v0.2.0
  annotations:
    # NGINX Ingress Controller
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-rps: "5"
    
    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    
    # Body size
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    
    # CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Content-Type, Authorization, X-API-Key"
    
    # Security headers
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Frame-Options SAMEORIGIN always;
      add_header X-Content-Type-Options nosniff always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'" always;
      
    # AWS Load Balancer Controller (alternative)
    alb.ingress.kubernetes.io/load-balancer-name: pynomaly-detection-alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "30"
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "10"
    alb.ingress.kubernetes.io/healthy-threshold-count: "2"
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "3"
    
    # Certificate Manager
    cert-manager.io/cluster-issuer: letsencrypt-prod
    
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - api.pynomaly-detection.io
    - pynomaly-detection.io
    secretName: pynomaly-tls-secret
  rules:
  - host: api.pynomaly-detection.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pynomaly-detection-service
            port:
              number: 80
      - path: /api/v1
        pathType: Prefix
        backend:
          service:
            name: pynomaly-detection-service
            port:
              number: 80
      - path: /health
        pathType: Exact
        backend:
          service:
            name: pynomaly-detection-service
            port:
              number: 80
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: pynomaly-detection-service
            port:
              number: 9090
  - host: pynomaly-detection.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pynomaly-detection-service
            port:
              number: 80
              
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: pynomaly-detection-netpol
  labels:
    app: pynomaly-detection
    version: v0.2.0
spec:
  podSelector:
    matchLabels:
      app: pynomaly-detection
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: nginx-ingress
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis
    - podSelector:
        matchLabels:
          app: postgresql
    ports:
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 5432
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80