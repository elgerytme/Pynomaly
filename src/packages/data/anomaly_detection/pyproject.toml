[build-system]
requires = [
    "hatchling",
]
build-backend = "hatchling.build"

[project]
name = "anomaly-detection"
version = "0.3.0"
description = "Domain-focused anomaly detection package with ML integration"
authors = [{name = "Pynomaly Team", email = "team@pynomaly.io"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9"
keywords = [
    "anomaly-detection", 
    "outlier-detection", 
    "machine-learning",
    "domain-specific",
    "clean-architecture",
    "production-ready"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

# Core dependencies
dependencies = [
    "numpy>=1.24.0",
    "pandas>=2.0.0", 
    "scikit-learn>=1.3.0",
    "scipy>=1.10.0",
]

[project.urls]
Homepage = "https://github.com/elgerytme/Pynomaly"
Repository = "https://github.com/elgerytme/Pynomaly"
Documentation = "https://github.com/elgerytme/Pynomaly/blob/main/docs/"
Issues = "https://github.com/elgerytme/Pynomaly/issues"

[project.optional-dependencies]
# Algorithm adapters
pyod = ["pyod>=2.0.0"]
deeplearning = [
    "tensorflow>=2.13.0",
    "torch>=2.0.0"
]

# ML integration (depends on AI packages)
ml = [
    # These would typically be internal dependencies to other packages
    # "pynomaly-ai-ml>=0.1.0",  # When packaged separately
]

# Development and testing
test = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.115.0",
]

lint = [
    "ruff>=0.8.0",
    "black>=24.0.0",
    "mypy>=1.13.0",
]

# Comprehensive installations
full = [
    "pyod>=2.0.0",
    "tensorflow>=2.13.0",
    "torch>=2.0.0",
]

[tool.hatch.build]
include = [
    "anomaly_detection/**/*.py",
    "anomaly_detection/**/*.pyi", 
    "anomaly_detection/py.typed",
]
exclude = [
    "anomaly_detection/**/*_test.py",
    "anomaly_detection/**/test_*.py",
]

[tool.hatch.build.targets.wheel]
packages = ["anomaly_detection"]

[tool.ruff]
target-version = "py39"
line-length = 88
src = ["anomaly_detection"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]

[tool.black]
target-version = ["py39"]
line-length = 88
include = '\.pyi?$'

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--tb=short",
    "--disable-warnings",
    "--color=yes",
    "--cov=anomaly_detection",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]