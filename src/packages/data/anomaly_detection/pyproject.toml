[build-system]
requires = [
    "hatchling",
]
build-backend = "hatchling.build"

[project]
name = "pynomaly-detection"
version = "0.1.0"
description = "Production-ready Python anomaly detection library with clean architecture, AutoML, and 40+ algorithms"
authors = [{name = "Pynomaly Team", email = "team@pynomaly.io"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9"
keywords = [
    "anomaly-detection", 
    "outlier-detection", 
    "machine-learning", 
    "automl", 
    "pyod", 
    "clean-architecture",
    "scikit-learn",
    "production-ready",
    "enterprise"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering",
    "Typing :: Typed",
]

# Core dependencies for anomaly detection
dependencies = [
    "numpy>=1.24.0",
    "pandas>=2.0.0", 
    "scikit-learn>=1.3.0",
    "scipy>=1.10.0",
]

[project.urls]
Homepage = "https://github.com/elgerytme/Pynomaly"
Repository = "https://github.com/elgerytme/Pynomaly"
Documentation = "https://github.com/elgerytme/Pynomaly/blob/main/docs/"
Issues = "https://github.com/elgerytme/Pynomaly/issues"
"Bug Tracker" = "https://github.com/elgerytme/Pynomaly/issues"
"Source Code" = "https://github.com/elgerytme/Pynomaly"

[project.optional-dependencies]
# Enhanced ML features
extended = [
    "pyod>=2.0.0",
    "pydantic>=2.0.0",
    "structlog>=23.0.0",
]
automl = [
    "optuna>=3.0.0",
    "hyperopt>=0.2.7",
]

# Deep learning backends  
torch = ["torch>=2.0.0"]
tensorflow = ["tensorflow>=2.13.0"]
jax = ["jax>=0.4.0", "jaxlib>=0.4.0"]

# Specialized algorithms
graph = ["pygod>=1.1.0", "torch-geometric>=2.6.1"]
text = [
    "transformers>=4.45.0",
    "sentence-transformers>=3.3.0",
    "textdistance>=4.6.0",
]

# Explainability
explainability = ["shap>=0.46.0", "lime>=0.2.0.1"]

# Data processing
data = [
    "pyarrow>=18.1.0",
    "polars>=1.19.0",
    "fastparquet>=2024.11.0",
]

# Monitoring and production
monitoring = [
    "prometheus-client>=0.21.1",
    "psutil>=6.1.1",
]

# Development and testing
test = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-xdist>=3.6.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.115.0",
    "factory-boy>=3.3.1",
    "faker>=33.1.0",
]

lint = [
    "ruff>=0.8.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "mypy>=1.13.0",
]

docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autodoc-typehints>=1.20.0",
    "myst-parser>=0.18.0",
    "sphinx-click>=4.0.0",
    "nbsphinx>=0.8.0",
]

# Comprehensive installations
all = [
    "pyod>=2.0.0",
    "pydantic>=2.0.0",
    "structlog>=23.0.0",
    "torch>=2.0.0",
    "optuna>=3.0.0",
    "shap>=0.40.0",
    "lime>=0.2.0",
]

# CLI entry point (optional)
# [project.scripts]
# pynomaly-detect = "pynomaly_detection.cli:main"

# Hatch configuration

[tool.hatch.build]
include = [
    "src/pynomaly_detection/**/*.py",
    "src/pynomaly_detection/**/*.pyi",
    "src/pynomaly_detection/py.typed",
]
exclude = [
    "src/pynomaly_detection/**/*_test.py",
    "src/pynomaly_detection/**/test_*.py",
    "src/pynomaly_detection/**/BUCK",
    "src/pynomaly_detection/**/project.json",
]

[tool.hatch.build.targets.wheel]
packages = ["src/pynomaly_detection"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
]

# Tool configuration
[tool.ruff]
target-version = "py311"
line-length = 88
src = ["src"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "B008",  # Allow function calls in argument defaults
]

[tool.black]
target-version = ["py311"]
line-length = 88
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["pynomaly_detection"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--tb=short",
    "--disable-warnings",
    "--color=yes",
    "--durations=10",
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning", 
    "ignore::FutureWarning",
    "ignore::UserWarning:pydantic.*",
    "ignore::UserWarning:sklearn.*",
]

[tool.coverage.run]
source = ["src/pynomaly_detection"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/*_test.py",
    "*/conftest.py",
    "*/cli/*",
    "*/web_api.py",
    "*/algorithms/pyod_adapter.py",
    "*/algorithms/sklearn_adapter.py",
]

[tool.coverage.report]
show_missing = true
fail_under = 80
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]