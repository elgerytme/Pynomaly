# GitLab CI/CD Pipeline for Anomaly Detection Service
stages:
  - quality
  - test
  - build
  - security
  - deploy-dev
  - deploy-staging
  - deploy-prod
  - notify

variables:
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY: "$CI_REGISTRY"
  IMAGE_NAME: "$CI_REGISTRY_IMAGE/anomaly-detection"
  KUBECONFIG: /tmp/kubeconfig

# Cache configuration
cache:
  paths:
    - .cache/pip
    - venv/
    - node_modules/

# Quality Checks Stage
code-quality:
  stage: quality
  image: python:$PYTHON_VERSION
  before_script:
    - cd src/packages/data/anomaly_detection
    - python -m pip install --upgrade pip
    - pip install -r requirements-dev.txt
  script:
    - echo "🔍 Running code quality checks..."
    - black --check --diff .
    - isort --check-only --diff .
    - flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - mypy --config-file pyproject.toml .
  artifacts:
    reports:
      junit: src/packages/data/anomaly_detection/quality-report.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

security-scan:
  stage: quality
  image: python:$PYTHON_VERSION
  before_script:
    - cd src/packages/data/anomaly_detection
    - python -m pip install --upgrade pip
    - pip install bandit safety
  script:
    - echo "🔒 Running security scans..."
    - bandit -r . -f json -o bandit-report.json
    - safety check --json --output safety-report.json
  artifacts:
    reports:
      junit: src/packages/data/anomaly_detection/security-report.xml
    paths:
      - src/packages/data/anomaly_detection/bandit-report.json
      - src/packages/data/anomaly_detection/safety-report.json
    expire_in: 1 week
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

# Test Stage
unit-tests:
  stage: test
  image: python:$PYTHON_VERSION
  services:
    - name: postgres:15
      alias: postgres
      variables:
        POSTGRES_DB: anomaly_detection_test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
    - name: redis:7
      alias: redis
  variables:
    ANOMALY_DETECTION_DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/anomaly_detection_test"
    ANOMALY_DETECTION_REDIS_URL: "redis://redis:6379/0"
    ANOMALY_DETECTION_ENV: "testing"
  before_script:
    - cd src/packages/data/anomaly_detection
    - python -m pip install --upgrade pip
    - pip install -r requirements-dev.txt
  script:
    - echo "🧪 Running unit tests..."
    - pytest tests/unit/ \
        --cov=anomaly_detection \
        --cov-report=xml \
        --cov-report=html \
        --cov-report=term \
        --cov-fail-under=85 \
        --junit-xml=test-results.xml \
        -v
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      junit: src/packages/data/anomaly_detection/test-results.xml
      coverage_report:
        coverage_format: cobertura
        path: src/packages/data/anomaly_detection/coverage.xml
    paths:
      - src/packages/data/anomaly_detection/htmlcov/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

integration-tests:
  stage: test
  image: python:$PYTHON_VERSION
  services:
    - name: postgres:15
      alias: postgres
      variables:
        POSTGRES_DB: anomaly_detection_test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
    - name: redis:7
      alias: redis
  variables:
    ANOMALY_DETECTION_DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/anomaly_detection_test"
    ANOMALY_DETECTION_REDIS_URL: "redis://redis:6379/0"
    ANOMALY_DETECTION_ENV: "testing"
  before_script:
    - cd src/packages/data/anomaly_detection
    - python -m pip install --upgrade pip
    - pip install -r requirements-dev.txt
  script:
    - echo "🔗 Running integration tests..."
    - pytest tests/integration/ \
        --junit-xml=integration-test-results.xml \
        -v
  artifacts:
    reports:
      junit: src/packages/data/anomaly_detection/integration-test-results.xml
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

performance-tests:
  stage: test
  image: python:$PYTHON_VERSION
  services:
    - name: postgres:15
      alias: postgres
      variables:
        POSTGRES_DB: anomaly_detection_test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
    - name: redis:7
      alias: redis
  variables:
    ANOMALY_DETECTION_DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/anomaly_detection_test"
    ANOMALY_DETECTION_REDIS_URL: "redis://redis:6379/0"
    ANOMALY_DETECTION_ENV: "testing"
  before_script:
    - cd src/packages/data/anomaly_detection
    - python -m pip install --upgrade pip
    - pip install -r requirements-dev.txt
  script:
    - echo "⚡ Running performance tests..."
    - pytest tests/performance/ \
        --benchmark-only \
        --benchmark-json=benchmark-results.json \
        -v
  artifacts:
    paths:
      - src/packages/data/anomaly_detection/benchmark-results.json
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

# Build Stage
build-image:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_IMAGE_TAG: "$IMAGE_NAME:$CI_COMMIT_SHA"
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  script:
    - echo "🐳 Building Docker image..."
    - cd src/packages/data/anomaly_detection
    - |
      docker build \
        --build-arg BUILD_VERSION="$CI_COMMIT_REF_NAME" \
        --build-arg BUILD_DATE="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
        --build-arg VCS_REF="$CI_COMMIT_SHA" \
        --tag "$DOCKER_IMAGE_TAG" \
        --tag "$IMAGE_NAME:latest" \
        .
    - docker push "$DOCKER_IMAGE_TAG"
    - docker push "$IMAGE_NAME:latest"
    - echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" > build.env
  artifacts:
    reports:
      dotenv: src/packages/data/anomaly_detection/build.env
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_TAG

# Security Stage
container-security:
  stage: security
  image: aquasec/trivy:latest
  script:
    - echo "🔒 Scanning container for vulnerabilities..."
    - trivy image --format json --output trivy-report.json "$DOCKER_IMAGE_TAG"
    - trivy image --format template --template "@contrib/sarif.tpl" --output trivy-report.sarif "$DOCKER_IMAGE_TAG"
  artifacts:
    paths:
      - trivy-report.json
      - trivy-report.sarif
    expire_in: 1 week
    reports:
      sast: trivy-report.sarif
  dependencies:
    - build-image
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_TAG

# Deployment Stages
deploy-development:
  stage: deploy-dev
  image: bitnami/kubectl:latest
  environment:
    name: development
    url: https://anomaly-detection-dev.company.com
  variables:
    KUBE_NAMESPACE: anomaly-detection-dev
  before_script:
    - echo "$KUBE_CONFIG_DEV" | base64 -d > "$KUBECONFIG"
    - kubectl config use-context dev-cluster
  script:
    - echo "🚀 Deploying to development..."
    - cd src/packages/data/anomaly_detection/k8s/overlays/development
    - kubectl kustomize . | envsubst | kubectl apply -f -
    - kubectl rollout status deployment/anomaly-detection-api -n "$KUBE_NAMESPACE" --timeout=600s
    - kubectl rollout status deployment/anomaly-detection-worker -n "$KUBE_NAMESPACE" --timeout=600s
    - echo "✅ Development deployment completed"
  dependencies:
    - build-image
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"

deploy-staging:
  stage: deploy-staging
  image: bitnami/kubectl:latest
  environment:
    name: staging
    url: https://anomaly-detection-staging.company.com
  variables:
    KUBE_NAMESPACE: anomaly-detection-staging
  before_script:
    - echo "$KUBE_CONFIG_STAGING" | base64 -d > "$KUBECONFIG"
    - kubectl config use-context staging-cluster
  script:
    - echo "🚀 Deploying to staging..."
    - cd src/packages/data/anomaly_detection/k8s/overlays/staging
    - kubectl kustomize . | envsubst | kubectl apply -f -
    - kubectl rollout status deployment/anomaly-detection-api -n "$KUBE_NAMESPACE" --timeout=600s
    - kubectl rollout status deployment/anomaly-detection-worker -n "$KUBE_NAMESPACE" --timeout=600s
    - echo "✅ Staging deployment completed"
  dependencies:
    - build-image
    - container-security
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

deploy-production:
  stage: deploy-prod
  image: bitnami/kubectl:latest
  environment:
    name: production
    url: https://anomaly-detection.company.com
  variables:
    KUBE_NAMESPACE: anomaly-detection
  before_script:
    - echo "$KUBE_CONFIG_PROD" | base64 -d > "$KUBECONFIG"
    - kubectl config use-context prod-cluster
  script:
    - echo "🚀 Deploying to production..."
    - cd src/packages/data/anomaly_detection/k8s/overlays/production
    - kubectl kustomize . | envsubst | kubectl apply -f -
    - kubectl rollout status deployment/anomaly-detection-api -n "$KUBE_NAMESPACE" --timeout=900s
    - kubectl rollout status deployment/anomaly-detection-worker -n "$KUBE_NAMESPACE" --timeout=900s
    - echo "✅ Production deployment completed"
  dependencies:
    - build-image
    - container-security
  when: manual
  rules:
    - if: $CI_COMMIT_TAG

# Notification Stage
slack-notification:
  stage: notify
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - |
      if [ "$CI_JOB_STATUS" = "success" ]; then
        MESSAGE="✅ Anomaly Detection Service deployment successful!\n- Version: $CI_COMMIT_REF_NAME\n- Commit: $CI_COMMIT_SHA\n- Environment: $CI_ENVIRONMENT_NAME"
      else
        MESSAGE="❌ Anomaly Detection Service deployment failed!\n- Version: $CI_COMMIT_REF_NAME\n- Commit: $CI_COMMIT_SHA\n- Pipeline: $CI_PIPELINE_URL"
      fi
    - |
      curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"$MESSAGE\"}" \
        "$SLACK_WEBHOOK_URL"
  dependencies: []
  when: always
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_TAG

# Cleanup job
cleanup:
  stage: .post
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  script:
    - echo "🧹 Cleaning up Docker resources..."
    - docker system prune -af
  when: always
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_TAG