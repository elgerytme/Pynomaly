# Docker Compose configuration for Anomaly Detection Service
version: '3.8'

services:
  # Main API Service - Domain-Driven Architecture
  anomaly-detection-api:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      args:
        BUILD_VERSION: ${BUILD_VERSION:-1.0.0}
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
    image: anomaly-detection:${TAG:-latest}
    container_name: anomaly-detection-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - ANOMALY_DETECTION_ENV=production
      - ANOMALY_DETECTION_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ANOMALY_DETECTION_DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-anomaly123}@postgres:5432/${POSTGRES_DB:-anomaly_detection}
      - ANOMALY_DETECTION_REDIS_URL=redis://redis:6379/0
      - ANOMALY_DETECTION_KAFKA_BROKERS=kafka:9092
      - ANOMALY_DETECTION_DOMAIN_MODE=enabled
      - ANOMALY_DETECTION_FALLBACK_IMPORTS=enabled
    volumes:
      - anomaly_data:/app/data
      - anomaly_models:/app/models
      - anomaly_logs:/app/logs
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - anomaly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Worker Service for Background Processing - Domain-Optimized
  anomaly-detection-worker:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      args:
        BUILD_VERSION: ${BUILD_VERSION:-1.0.0}
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
    image: anomaly-detection:${TAG:-latest}
    container_name: anomaly-detection-worker
    restart: unless-stopped
    command: ["python", "-m", "anomaly_detection.worker"]
    environment:
      - ANOMALY_DETECTION_ENV=production
      - ANOMALY_DETECTION_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ANOMALY_DETECTION_DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-anomaly123}@postgres:5432/${POSTGRES_DB:-anomaly_detection}
      - ANOMALY_DETECTION_REDIS_URL=redis://redis:6379/0
      - ANOMALY_DETECTION_KAFKA_BROKERS=kafka:9092
      - ANOMALY_DETECTION_WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-4}
      - ANOMALY_DETECTION_DOMAIN_MODE=enabled
      - ANOMALY_DETECTION_FALLBACK_IMPORTS=enabled
    volumes:
      - anomaly_data:/app/data
      - anomaly_models:/app/models
      - anomaly_logs:/app/logs
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - anomaly-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: anomaly-detection-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-anomaly_detection}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-anomaly123}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - anomaly-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-anomaly_detection}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache and Session Store
  redis:
    image: redis:7-alpine
    container_name: anomaly-detection-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - anomaly-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Apache Kafka for Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: anomaly-detection-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - anomaly-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: anomaly-detection-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - anomaly-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: anomaly-detection-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - anomaly-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.0.0
    container_name: anomaly-detection-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - anomaly-network

  # Nginx Reverse Proxy and Load Balancer
  nginx:
    image: nginx:alpine
    container_name: anomaly-detection-nginx
    restart: unless-stopped
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - nginx_logs:/var/log/nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    depends_on:
      - anomaly-detection-api
    networks:
      - anomaly-network

volumes:
  anomaly_data:
    driver: local
  anomaly_models:
    driver: local
  anomaly_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  anomaly-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16