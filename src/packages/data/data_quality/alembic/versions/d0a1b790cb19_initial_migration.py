"""Initial migration

Revision ID: d0a1b790cb19
Revises: 
Create Date: 2025-07-23 16:44:16.184606

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'd0a1b790cb19'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('data_profiles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('dataset_name', sa.String(), nullable=False),
    sa.Column('table_name', sa.String(), nullable=True),
    sa.Column('schema_name', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('version', sa.String(), nullable=True),
    sa.Column('total_rows', sa.Integer(), nullable=True),
    sa.Column('total_columns', sa.Integer(), nullable=True),
    sa.Column('file_size_bytes', sa.Integer(), nullable=True),
    sa.Column('column_profiles', sa.JSON(), nullable=True),
    sa.Column('completeness_score', sa.Float(), nullable=True),
    sa.Column('uniqueness_score', sa.Float(), nullable=True),
    sa.Column('validity_score', sa.Float(), nullable=True),
    sa.Column('overall_quality_score', sa.Float(), nullable=True),
    sa.Column('primary_keys', sa.JSON(), nullable=True),
    sa.Column('foreign_keys', sa.JSON(), nullable=True),
    sa.Column('relationships', sa.JSON(), nullable=True),
    sa.Column('profiling_started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('profiling_completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('profiling_duration_ms', sa.Float(), nullable=True),
    sa.Column('sample_size', sa.Integer(), nullable=True),
    sa.Column('sampling_method', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('created_by', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_by', sa.String(), nullable=True),
    sa.Column('config', sa.JSON(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('data_quality_checks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('check_type', sa.String(), nullable=False),
    sa.Column('dataset_name', sa.String(), nullable=False),
    sa.Column('column_name', sa.String(), nullable=True),
    sa.Column('schema_name', sa.String(), nullable=True),
    sa.Column('table_name', sa.String(), nullable=True),
    sa.Column('query', sa.Text(), nullable=True),
    sa.Column('expression', sa.Text(), nullable=True),
    sa.Column('expected_value', sa.Text(), nullable=True),
    sa.Column('threshold', sa.Float(), nullable=True),
    sa.Column('tolerance', sa.Float(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('schedule_cron', sa.String(), nullable=True),
    sa.Column('timeout_seconds', sa.Integer(), nullable=True),
    sa.Column('retry_attempts', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('last_executed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('next_execution_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('execution_count', sa.Integer(), nullable=True),
    sa.Column('last_result', sa.JSON(), nullable=True),
    sa.Column('consecutive_failures', sa.Integer(), nullable=True),
    sa.Column('success_rate', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('created_by', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_by', sa.String(), nullable=True),
    sa.Column('config', sa.JSON(), nullable=True),
    sa.Column('environment_vars', sa.JSON(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('depends_on', sa.JSON(), nullable=True),
    sa.Column('blocks', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('data_quality_rules',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('rule_type', sa.String(), nullable=False),
    sa.Column('severity', sa.String(), nullable=True),
    sa.Column('dataset_name', sa.String(), nullable=False),
    sa.Column('table_name', sa.String(), nullable=True),
    sa.Column('schema_name', sa.String(), nullable=True),
    sa.Column('conditions', sa.JSON(), nullable=True),
    sa.Column('logical_operator', sa.String(), nullable=True),
    sa.Column('expression', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_blocking', sa.Boolean(), nullable=True),
    sa.Column('auto_fix', sa.Boolean(), nullable=True),
    sa.Column('fix_action', sa.Text(), nullable=True),
    sa.Column('violation_threshold', sa.Float(), nullable=True),
    sa.Column('sample_size', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('created_by', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_by', sa.String(), nullable=True),
    sa.Column('last_evaluated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('evaluation_count', sa.Integer(), nullable=True),
    sa.Column('violation_count', sa.Integer(), nullable=True),
    sa.Column('last_violation_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('config', sa.JSON(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('depends_on', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('data_quality_rules')
    op.drop_table('data_quality_checks')
    op.drop_table('data_profiles')
    # ### end Alembic commands ###
