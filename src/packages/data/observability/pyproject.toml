[project]
name = "data-observability"
version = "0.1.0"
description = "Data observability and monitoring package for data pipelines and quality assessment"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Data Observability Team", email = "team@dataobs.com"},
]
maintainers = [
    {name = "Data Observability Team", email = "team@dataobs.com"},
]
keywords = [
    "data-observability",
    "data-monitoring",
    "data-quality",
    "pipeline-health",
    "data-lineage",
    "data-catalog",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Data Engineers",
    "Intended Audience :: Data Scientists",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Monitoring",
]
requires-python = ">=3.8"
dependencies = [
    # Core dependencies
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
    
    # Web framework and API
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    
    # CLI framework
    "click>=8.1.0",
    
    # Dependency injection
    "dependency-injector>=4.41.0",
    
    # Task scheduling
    "schedule>=1.2.0",
    
    # Database and persistence
    "psycopg2-binary>=2.9.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    
    # Async support
    "asyncpg>=0.29.0",
    
    # Validation and serialization
    "python-multipart>=0.0.6",
    
    # Logging and monitoring
    "structlog>=23.1.0",
    "prometheus-client>=0.19.0",
    
    # Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    
    # Configuration
    "pydantic-settings>=2.0.0",
    
    # HTTP client for integrations
    "httpx>=0.25.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
    "factory-boy>=3.3.0",
    "httpx>=0.25.0",
    "mypy>=1.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.0.280",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=0.18.0",
]
monitoring = [
    "grafana-api>=1.0.0",
    "elasticsearch>=8.0.0",
    "kibana-api>=0.1.0",
]
cloud = [
    "boto3>=1.26.0",
    "azure-storage-blob>=12.0.0",
    "google-cloud-storage>=2.7.0",
]

[project.urls]
homepage = "https://github.com/dataobs/data-observability"
repository = "https://github.com/dataobs/data-observability"
documentation = "https://data-observability.readthedocs.io"
changelog = "https://github.com/dataobs/data-observability/blob/main/CHANGELOG.md"

[project.scripts]
data-observability = "data_observability.cli:main"


[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
]

[tool.hatch.build.targets.wheel]
packages = ["src/data_observability"]

# Testing configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=data_observability",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
    "-v",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Code formatting
[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

# Linting configuration
[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
]

[tool.ruff.per-file-ignores]
"tests/*" = ["ARG", "S101", "PLR2004"]

# Type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
extra_checks = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "numpy.*",
    "sqlalchemy.*",
    "prometheus_client.*",
    "schedule.*",
    "redis.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
where = ["src"]
