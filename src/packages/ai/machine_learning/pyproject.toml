[project]
name = "machine_learning"
version = "0.1.0"
description = "Machine learning operations, training, and lifecycle management package"
authors = [
    {name = "Machine Learning Team", email = "team@machine_learning.io"}
]
license = {text = "MIT"}
readme = "docs/README.md"
requires-python = ">=3.11"
keywords = ["machine_learning", "self-contained", "microservice", "ddd"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

# Production dependencies
dependencies = [
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
    "structlog>=23.0.0",
    "click>=8.0.0",
    "httpx>=0.25.0",
    "uvicorn[standard]>=0.24.0",
    "fastapi>=0.104.0",
    "scikit-learn>=1.3.0",
    "optuna>=3.0.0",
    "mlflow>=2.0.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "hypothesis>=6.88.0",
    "factory-boy>=3.3.0",
    "faker>=19.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
]

# Testing dependencies
test = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.11.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.3.0",
    "pytest-timeout>=2.1.0",
    "pytest-randomly>=3.12.0",
    "hypothesis>=6.115.0",
    "factory-boy>=3.3.1",
    "faker>=33.1.0",
    "httpx>=0.25.0",
    "testcontainers>=3.7.0",
    "test_utilities @ file:///src/shared/test_utilities",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocstrings[python]>=0.24.0",
    "mike>=2.0.0",
]

# Performance testing
performance = [
    "locust>=2.17.0",
    "memory-profiler>=0.61.0",
    "py-spy>=0.3.14",
    "psutil>=5.9.0",
]

# Security testing
security = [
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "semgrep>=1.45.0",
    "pip-audit>=2.6.1",
]

# Monitoring and observability
monitoring = [
    "prometheus-client>=0.18.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-exporter-prometheus>=1.12.0rc1",
]

# ML-specific dependencies
ml_algorithms = [
    "torch>=2.0.0",
    "tensorflow>=2.13.0",
    "xgboost>=1.7.0",
    "lightgbm>=4.0.0",
]

tracking = [
    "wandb>=0.15.0",
    "tensorboard>=2.13.0",
]

distributed = [
    "ray>=2.6.0",
    "dask>=2023.8.0",
]

# All optional dependencies
all = [
    "machine_learning[dev,test,docs,performance,security,monitoring,ml_algorithms,tracking,distributed]"
]

[project.urls]
Homepage = "https://github.com/monorepo/machine_learning"
Documentation = "https://github.com/monorepo/machine_learning/tree/main/docs"
Repository = "https://github.com/monorepo/machine_learning"
"Bug Tracker" = "https://github.com/monorepo/machine_learning/issues"
Changelog = "https://github.com/monorepo/machine_learning/blob/main/docs/CHANGELOG.md"

[project.scripts]
machine_learning = "machine_learning.cli:main"
machine_learning-server = "machine_learning.server:main"
machine_learning-worker = "machine_learning.worker:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.version]
path = "src/machine_learning/__init__.py"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line-length = 88
known_first_party = ["machine_learning"]
skip_glob = ["*/migrations/*"]

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-argument
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # ruff-specific rules
]
ignore = [
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "E501", # line too long, handled by black
    "F401", # unused import
    "F841", # unused variable
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG001", "FLY"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "examples.*",
]
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.4"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src/machine_learning",
    "--cov-report=html:reports/coverage",
    "--cov-report=term-missing",
    "--cov-report=xml:reports/coverage.xml",
    "--cov-fail-under=95",
    "--junit-xml=reports/pytest.xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "performance: Performance tests",
    "security: Security tests",
    "slow: Slow running tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/machine_learning"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/migrations/*",
    "*/venv/*",
    "*/virtualenv/*",
    "*/scripts/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "reports/coverage"

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101"]

# Performance profiling
[tool.py-spy]
format = "flamegraph"
output = "reports/profile.svg"
