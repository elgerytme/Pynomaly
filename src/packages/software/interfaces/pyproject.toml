[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pynomaly-interfaces"
version = "0.1.0"
description = "Unified interface layer for Pynomaly platform including CLI, API, Web, and SDK components"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Pynomaly Team", email = "team@pynomaly.com"},
]
maintainers = [
    {name = "Pynomaly Team", email = "team@pynomaly.com"},
]
keywords = [
    "interfaces",
    "api",
    "cli",
    "web",
    "sdk",
    "client",
    "anomaly-detection",
    "machine-learning",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Data Scientists",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: System :: Systems Administration",
]
requires-python = ">=3.8"
dependencies = [
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "httpx>=0.24.0",
    "mypy>=1.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.0.280",
    "pre-commit>=3.0.0",
]
cli = [
    "click>=8.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "tabulate>=0.9.0",
    "questionary>=1.10.0",
    "colorama>=0.4.6",
]
web = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",
    "jinja2>=3.0.0",
    "python-multipart>=0.0.6",
    "aiofiles>=23.0.0",
    "websockets>=11.0.0",
    "sse-starlette>=1.6.0",
]
api = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "sqlalchemy>=1.4.0",
    "alembic>=1.10.0",
    "redis>=4.5.0",
]
sdk = [
    "requests>=2.28.0",
    "httpx>=0.24.0",
    "websockets>=11.0.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-click>=4.0.0",
    "myst-parser>=0.18.0",
    "sphinx-autodoc-typehints>=1.20.0",
]
testing = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "httpx>=0.24.0",
    "starlette[testing]>=0.27.0",
]
monitoring = [
    "prometheus-client>=0.15.0",
    "opentelemetry-api>=1.15.0",
    "opentelemetry-sdk>=1.15.0",
    "opentelemetry-instrumentation-fastapi>=0.36b0",
    "opentelemetry-instrumentation-requests>=0.36b0",
]

[project.urls]
homepage = "https://github.com/pynomaly/interfaces"
repository = "https://github.com/pynomaly/interfaces"
documentation = "https://interfaces.pynomaly.com"
changelog = "https://github.com/pynomaly/interfaces/blob/main/CHANGELOG.md"

# [project.scripts]
# pynomaly = "interfaces.cli:main"
# pynomaly-api = "interfaces.api:main"
# pynomaly-web = "interfaces.web:main"


[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/api",
    "/cli",
    "/web",
    "/sdk",
    "/python_sdk",
]

[tool.hatch.build.targets.wheel]
packages = ["src/interfaces"]

# Testing configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=interfaces",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
    "-v",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests for API components",
    "cli: marks tests for CLI components",
    "web: marks tests for web components",
    "sdk: marks tests for SDK components",
]

# Code formatting
[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | node_modules
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests", "api", "cli", "web", "sdk"]

# Linting configuration
[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
]

[tool.ruff.per-file-ignores]
"tests/*" = ["ARG", "S101", "PLR2004"]
"cli/*" = ["T201"]  # print statements allowed in CLI
"examples/*" = ["T201"]  # print statements allowed in examples

# Type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
extra_checks = true

[[tool.mypy.overrides]]
module = [
    "click.*",
    "typer.*",
    "rich.*",
    "fastapi.*",
    "uvicorn.*",
    "jinja2.*",
    "websockets.*",
    "prometheus_client.*",
    "questionary.*",
    "tabulate.*",
    "colorama.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src", "api", "cli", "web", "sdk"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/node_modules/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]