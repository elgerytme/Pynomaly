openapi: 3.0.3
info:
  title: Software API
  version: 1.0.0
  description: "\n# Software - Enterprise Anomaly Processing Platform\n\nA comprehensive,\
    \ production-ready anomaly processing system with enterprise-grade features.\n\n\
    ## Features\n\n### Core Processing\n- **Anomaly Processing**: Detect anomalies in\
    \ time series, tabular, and streaming data\n- **Multiple Algorithms**: Support\
    \ for Isolation Forest, One-Class SVM, LSTM Autoencoders, and custom models\n\
    - **Ensemble Methods**: Combine multiple processing algorithms for improved accuracy\n\
    - **Real-time Processing**: Stream processing for continuous anomaly processing\n\
    \n### MLOps Platform\n- **Processor Registry**: Centralized processor management with\
    \ versioning and metadata\n- **Experiment Tracking**: Track experiments, parameters,\
    \ and measurements\n- **Processor Deployment**: Deploy models to development, staging,\
    \ and production environments\n- **Automated Retraining**: Automatic processor retraining\
    \ based on data drift and performance degradation\n\n### Enterprise Features\n\
    - **Multi-tenancy**: Complete tenant isolation with role-based access control\n\
    - **Audit Logging**: Comprehensive audit trails with compliance support (GDPR,\
    \ HIPAA, SOX)\n- **Security**: JWT authentication, data encryption, and tamper\
    \ processing\n- **Analytics Dashboard**: Real-time insights and business measurements\n\
    \n### Monitoring & Observability\n- **Health Monitoring**: System health checks\
    \ and performance measurements\n- **Alerting**: Real-time alerts for anomalies and\
    \ system issues\n- **Compliance Reporting**: Generate compliance reports for regulatory\
    \ requirements\n- **Performance Tracking**: Track processor performance and system\
    \ measurements\n\n## Quick Start\n\n### 1. Authentication\n```bash\n# Get JWT token\n\
    curl -X POST \"https://api.pynomaly.com/api/v1/auth/login\" \\\n  -H \"Content-Type:\
    \ application/json\" \\\n  -d '{\"username\": \"your_username\", \"password\"\
    : \"your_password\"}'\n```\n\n### 2. Basic Anomaly Processing\n```bash\n# Detect\
    \ anomalies in data\ncurl -X POST \"https://api.pynomaly.com/api/v1/processing/detect\"\
    \ \\\n  -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\\n  -H \"Content-Type: application/json\"\
    \ \\\n  -d '{\n    \"data\": [1.0, 2.0, 3.0, 100.0, 4.0, 5.0],\n    \"algorithm\"\
    : \"isolation_forest\",\n    \"parameters\": {\"contamination\": 0.1}\n  }'\n\
    ```\n\n### 3. Train Custom Processor\n```bash\n# Train a new model\ncurl -X POST \"\
    https://api.pynomaly.com/api/v1/processing/train\" \\\n  -H \"Authorization: Bearer\
    \ YOUR_JWT_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n \
    \   \"training_data\": \"path/to/training/data.csv\",\n    \"algorithm\": \"lstm_autoencoder\"\
    ,\n    \"parameters\": {\"epochs\": 100, \"batch_size\": 32}\n  }'\n```\n\n##\
    \ Authentication\n\nMost endpoints require authentication using JWT tokens. Include\
    \ the token in the Authorization header:\n\n```\nAuthorization: Bearer <your-jwt-token>\n\
    ```\n\n### API Key Authentication\nFor service-to-service authentication, use\
    \ API keys:\n\n```\nX-API-Key: <your-api-key>\n```\n\n## Rate Limiting\n\nAPI\
    \ calls are rate-limited to ensure fair usage and system stability:\n- **Standard\
    \ users**: 1000 requests per hour\n- **Enterprise users**: 10000 requests per\
    \ hour\n- **Internal services**: Unlimited\n\n## Error Handling\n\nThe API uses\
    \ standard HTTP status codes and returns detailed error messages following RFC\
    \ 7807:\n\n```json\n{\n  \"type\": \"https://pynomaly.com/errors/validation-error\"\
    ,\n  \"title\": \"Validation Error\",\n  \"status\": 422,\n  \"detail\": \"The\
    \ request data is invalid\",\n  \"instance\": \"/api/v1/processing/detect\",\n\
    \  \"errors\": [\n    {\n      \"field\": \"data\",\n      \"message\": \"Field\
    \ required\"\n    }\n  ]\n}\n```\n\n## Support\n\n- **Documentation**: https://docs.pynomaly.com\n\
    - **Support**: support@pynomaly.com\n- **Community**: https://community.pynomaly.com\n"
  contact:
    name: Pynomaly Support
    url: https://pynomaly.com/support
    email: support@software.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
servers:
- url: https://api.pynomaly.com
  description: Production server
- url: https://staging-api.pynomaly.com
  description: Staging server
- url: http://localhost:8000
  description: Development server
tags:
- name: Authentication
  description: User authentication and authorization
  externalDocs:
    description: Authentication Guide
    url: https://docs.pynomaly.com/authentication
- name: Anomaly Processing
  description: Core anomaly processing capabilities
  externalDocs:
    description: Detection Guide
    url: https://docs.pynomaly.com/detection
- name: Processor Management
  description: Processor lifecycle management and deployment
  externalDocs:
    description: Processor Management Guide
    url: https://docs.pynomaly.com/models
- name: MLOps
  description: MLOps platform features
  externalDocs:
    description: MLOps Guide
    url: https://docs.pynomaly.com/mlops
- name: Enterprise
  description: Enterprise features and multi-tenancy
  externalDocs:
    description: Enterprise Guide
    url: https://docs.pynomaly.com/enterprise
- name: Monitoring
  description: System monitoring and health checks
  externalDocs:
    description: Monitoring Guide
    url: https://docs.pynomaly.com/monitoring
- name: Analytics
  description: Analytics dashboard and insights
  externalDocs:
    description: Analytics Guide
    url: https://docs.pynomaly.com/analytics
- name: Compliance
  description: Audit logging and compliance reporting
  externalDocs:
    description: Compliance Guide
    url: https://docs.pynomaly.com/compliance
paths:
  /api/v1/auth/login:
    post:
      tags:
      - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      operationId: login
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        '200':
          $ref: '#/components/responses/LoginResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'
  /api/v1/auth/refresh:
    post:
      tags:
      - Authentication
      summary: Refresh JWT token
      description: Refresh an existing JWT token
      operationId: refresh_token
      security:
      - BearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/TokenResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/v1/auth/me:
    get:
      tags:
      - Authentication
      summary: Get current user profile
      description: Get the current authenticated user's profile
      operationId: get_current_user
      security:
      - BearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/UserProfile'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/v1/processing/detect:
    post:
      tags:
      - Anomaly Processing
      summary: Detect anomalies in data
      description: Detect anomalies in the provided data_collection using the specified algorithm
      operationId: detect_anomalies
      security:
      - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/DetectionRequest'
      responses:
        '200':
          $ref: '#/components/responses/DetectionResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'
  /api/v1/processing/train:
    post:
      tags:
      - Anomaly Processing
      summary: Train anomaly processing processor
      description: Train a new anomaly processing processor with the provided data
      operationId: train_processor
      security:
      - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TrainingRequest'
      responses:
        '201':
          $ref: '#/components/responses/TrainingResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'
  /api/v1/processing/batch:
    post:
      tags:
      - Anomaly Processing
      summary: Batch anomaly processing
      description: Perform batch anomaly processing with multiple detectors
      operationId: batch_detect
      security:
      - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/BatchDetectionRequest'
      responses:
        '200':
          $ref: '#/components/responses/BatchDetectionResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/v1/models:
    get:
      tags:
      - Processor Management
      summary: List models
      description: Get a list of all available models
      operationId: list_processors
      security:
      - BearerAuth: []
      parameters:
      - $ref: '#/components/parameters/PageParameter'
      - $ref: '#/components/parameters/SizeParameter'
      responses:
        '200':
          $ref: '#/components/responses/ModelListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/v1/models/{processor_id}:
    get:
      tags:
      - Processor Management
      summary: Get processor details
      description: Get detailed information about a specific processor
      operationId: get_processor
      security:
      - BearerAuth: []
      parameters:
      - $ref: '#/components/parameters/ModelIdParameter'
      responses:
        '200':
          $ref: '#/components/responses/ModelDetailsResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/v1/health:
    get:
      tags:
      - Monitoring
      summary: Health check
      description: Get system health status
      operationId: health_check
      responses:
        '200':
          $ref: '#/components/responses/HealthResponse'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
  /api/v1/health/measurements:
    get:
      tags:
      - Monitoring
      summary: System measurements
      description: Get detailed system measurements
      operationId: get_measurements
      security:
      - BearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/MetricsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
components:
  schemas:
    LoginRequest:
      type: object
      required:
      - username
      - password
      properties:
        username:
          type: string
          description: Username or email address
          example: user@example.com
        password:
          type: string
          format: password
          description: User password
          example: secretpassword123
    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
          description: JWT refresh token
        token_type:
          type: string
          description: Token type
          example: bearer
        expires_in:
          type: integer
          description: Token expiration time in seconds
          example: 3600
    DetectionRequest:
      type: object
      required:
      - data
      - algorithm
      properties:
        data:
          type: array
          items:
            type: number
          description: Input data for anomaly processing
          example:
          - 1.0
          - 2.0
          - 3.0
          - 100.0
          - 4.0
          - 5.0
        algorithm:
          type: string
          enum:
          - isolation_forest
          - one_class_svm
          - lstm_autoencoder
          - ensemble
          description: Anomaly processing algorithm
          example: isolation_forest
        parameters:
          type: object
          description: Algorithm-specific parameters
          example:
            contamination: 0.1
            n_estimators: 100
    DetectionResponse:
      type: object
      properties:
        anomalies:
          type: array
          items:
            type: integer
          description: Indices of detected anomalies
          example:
          - 3
        scores:
          type: array
          items:
            type: number
          description: Anomaly scores for each data point
          example:
          - 0.1
          - 0.2
          - 0.15
          - 0.95
          - 0.18
          - 0.12
        threshold:
          type: number
          description: Anomaly processing threshold
          example: 0.5
        processor_id:
          type: string
          description: ID of the processor used for processing
          example: isolation_forest_20240101_001
        processing_time_ms:
          type: number
          description: Processing time in milliseconds
          example: 45.6
    TrainingRequest:
      type: object
      required:
      - training_data
      - algorithm
      properties:
        training_data:
          type: string
          description: Path to training data file or inline data
          example: path/to/training/data.csv
        algorithm:
          type: string
          enum:
          - isolation_forest
          - one_class_svm
          - lstm_autoencoder
          - ensemble
          description: Algorithm to train
          example: lstm_autoencoder
        parameters:
          type: object
          description: Training parameters
          example:
            epochs: 100
            batch_size: 32
            learning_rate: 0.001
        processor_name:
          type: string
          description: Name for the trained processor
          example: production_processor_v1
    TrainingResponse:
      type: object
      properties:
        processor_id:
          type: string
          description: ID of the trained processor
          example: lstm_autoencoder_20240101_001
        processor_name:
          type: string
          description: Name of the trained processor
          example: production_processor_v1
        training_measurements:
          type: object
          description: Training performance measurements
          example:
            loss: 0.0234
            accuracy: 0.967
            precision: 0.923
            recall: 0.889
        training_time_ms:
          type: number
          description: Training time in milliseconds
          example: 45600.0
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - healthy
          - unhealthy
          - degraded
          description: Overall system health status
          example: healthy
        timestamp:
          type: string
          format: date-time
          description: Health check timestamp
          example: '2024-01-01T12:00:00Z'
        version:
          type: string
          description: Application version
          example: 1.0.0
        services:
          type: object
          description: Individual service health statuses
          example:
            database: healthy
            cache: healthy
            processor_registry: healthy
    ErrorResponse:
      type: object
      properties:
        type:
          type: string
          description: Error type URI
          example: https://pynomaly.com/errors/validation-error
        title:
          type: string
          description: Error title
          example: Validation Error
        status:
          type: integer
          description: HTTP status code
          example: 422
        detail:
          type: string
          description: Error details
          example: The request data is invalid
        instance:
          type: string
          description: Request instance that caused the error
          example: /api/v1/processing/detect
  responses:
    LoginResponse:
      description: Successful login response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenResponse'
    TokenResponse:
      description: JWT token response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenResponse'
    DetectionResponse:
      description: Anomaly processing response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DetectionResponse'
    TrainingResponse:
      description: Processor training response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TrainingResponse'
    HealthResponse:
      description: System health response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HealthResponse'
    BadRequestError:
      description: Bad request error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: https://pynomaly.com/errors/bad-request
            title: Bad Request
            status: 400
            detail: Invalid request parameters
    UnauthorizedError:
      description: Unauthorized error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: https://pynomaly.com/errors/unauthorized
            title: Unauthorized
            status: 401
            detail: Authentication required
    NotFoundError:
      description: Resource not found error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: https://pynomaly.com/errors/not-found
            title: Not Found
            status: 404
            detail: Resource not found
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: https://pynomaly.com/errors/validation-error
            title: Validation Error
            status: 422
            detail: The request data is invalid
    ServiceUnavailableError:
      description: Service unavailable error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: https://pynomaly.com/errors/service-unavailable
            title: Service Unavailable
            status: 503
            detail: Service temporarily unavailable
  parameters:
    PageParameter:
      name: page
      in: query
      description: Page number for pagination
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    SizeParameter:
      name: size
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    ModelIdParameter:
      name: processor_id
      in: path
      description: Unique processor identifier
      required: true
      schema:
        type: string
        format: uuid
  examples:
    SimpleDetectionRequest:
      summary: Simple anomaly processing
      description: Basic anomaly processing with Isolation Forest
      value:
        data:
        - 1.0
        - 2.0
        - 3.0
        - 100.0
        - 4.0
        - 5.0
        algorithm: isolation_forest
        parameters:
          contamination: 0.1
          n_estimators: 100
    TimeSeriesDetectionRequest:
      summary: Time series anomaly processing
      description: Anomaly processing for time series data
      value:
        data:
        - 1.0
        - 1.1
        - 1.2
        - 1.1
        - 1.0
        - 5.0
        - 1.1
        - 1.2
        algorithm: lstm_autoencoder
        parameters:
          sequence_length: 10
          epochs: 50
    ModelTrainingRequest:
      summary: Processor training example
      description: Training a custom LSTM autoencoder processor
      value:
        training_data: s3://software-data/training/timeseries.csv
        algorithm: lstm_autoencoder
        parameters:
          epochs: 100
          batch_size: 32
          learning_rate: 0.001
          hidden_units: 64
        processor_name: production_lstm_v1
  requestBodies:
    LoginRequest:
      description: User login credentials
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginRequest'
      required: true
    DetectionRequest:
      description: Anomaly processing request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DetectionRequest'
          examples:
            simple:
              $ref: '#/components/examples/SimpleDetectionRequest'
            timeseries:
              $ref: '#/components/examples/TimeSeriesDetectionRequest'
      required: true
    TrainingRequest:
      description: Processor training request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TrainingRequest'
          examples:
            lstm_training:
              $ref: '#/components/examples/ModelTrainingRequest'
      required: true
  headers:
    X-Request-ID:
      description: Unique request identifier
      schema:
        type: string
        format: uuid
    X-Rate-Limit-Remaining:
      description: Number of requests remaining in current window
      schema:
        type: integer
    X-Rate-Limit-Reset:
      description: Time when rate limit resets
      schema:
        type: integer
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from the authentication endpoint
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for service-to-service authentication
security:
- BearerAuth: []
- ApiKeyAuth: []
externalDocs:
  description: Pynomaly Documentation
  url: https://docs.pynomaly.com
