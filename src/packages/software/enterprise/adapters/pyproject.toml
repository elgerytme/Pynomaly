[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "enterprise-adapters"
dynamic = ["version"]
description = "Universal adapter patterns for external services and frameworks"
authors = [{name = "Enterprise Packages Team", email = "team@enterprise-packages.io"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
keywords = ["enterprise", "adapters", "external-services", "integration"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

dependencies = [
    "enterprise-core",
    "pydantic>=2.10.4",
    "structlog>=24.4.0",
    "httpx>=0.28.1",
    "tenacity>=9.0.0",
]

[project.optional-dependencies]
# Database adapters
database = [
    "sqlalchemy>=2.0.36",
    "psycopg2-binary>=2.9.10",
    "asyncpg>=0.29.0",
    "pymongo>=4.10.1",
]

# Cache adapters
cache = [
    "redis>=5.2.1",
    "memcached>=1.59",
]

# Message queue adapters
messaging = [
    "pika>=1.3.0",  # RabbitMQ
    "kafka-python>=2.0.2",  # Apache Kafka
    "boto3>=1.35.69",  # AWS SQS/SNS
]

# Cloud storage adapters
storage = [
    "boto3>=1.35.69",  # AWS S3
    "azure-storage-blob>=12.24.0",  # Azure Blob
    "google-cloud-storage>=2.18.0",  # Google Cloud Storage
]

# ML framework adapters
ml = [
    "scikit-learn>=1.6.0",
    "torch>=2.5.1",
    "tensorflow>=2.18.0,<2.20.0",
    "jax>=0.4.37",
    "jaxlib>=0.4.37",
    "pyod>=2.0.5",
]

# Search engine adapters
search = [
    "elasticsearch>=8.16.0",
    "opensearch-py>=2.8.0",
]

# Monitoring adapters
monitoring = [
    "prometheus-client>=0.21.1",
    "opentelemetry-api>=1.29.0",
    "opentelemetry-sdk>=1.29.0",
]

# Email adapters
email = [
    "sendgrid>=6.11.0",
    "boto3>=1.35.69",  # AWS SES
]

# Development dependencies
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.14.0",
    "hypothesis>=6.115.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
]

# All optional dependencies
all = [
    "sqlalchemy>=2.0.36",
    "psycopg2-binary>=2.9.10",
    "asyncpg>=0.29.0",
    "pymongo>=4.10.1",
    "redis>=5.2.1",
    "pika>=1.3.0",
    "kafka-python>=2.0.2",
    "boto3>=1.35.69",
    "azure-storage-blob>=12.24.0",
    "google-cloud-storage>=2.18.0",
    "scikit-learn>=1.6.0",
    "elasticsearch>=8.16.0",
    "prometheus-client>=0.21.1",
    "sendgrid>=6.11.0",
]

[project.urls]
Homepage = "https://github.com/enterprise-packages/enterprise-adapters"
Repository = "https://github.com/enterprise-packages/enterprise-adapters"
Documentation = "https://enterprise-packages.readthedocs.io/adapters"
Issues = "https://github.com/enterprise-packages/enterprise-adapters/issues"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = ["src/enterprise_adapters"]

[tool.hatch.envs.default]
dependencies = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.14.0",
    "hypothesis>=6.115.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=enterprise_adapters --cov-report=term-missing {args:tests}"
lint = "ruff check src tests"
format = "ruff format src tests"
type-check = "mypy src"

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by formatter
    "B008", # do not perform function calls in argument defaults
]

[tool.mypy]
python_version = "3.11"
strict = true
warn_unreachable = true
warn_unused_ignores = true
