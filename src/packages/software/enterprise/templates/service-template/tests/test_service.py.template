"""Tests for {{package_title}} service."""

import pytest
from unittest.mock import AsyncMock, Mock
from {{package_module}} import {{package_module|title}}Service, {{package_module|title}}Config


@pytest.fixture
def config():
    """Test configuration."""
    return {{package_module|title}}Config(
        database_url="sqlite:///:memory:",
        cache_enabled=False,
        metrics_enabled=False,
    )


@pytest.fixture
def service(config):
    """Test service instance."""
    return {{package_module|title}}Service(config)


@pytest.mark.asyncio
async def test_service_start_stop(service):
    """Test service start and stop."""
    assert not service._is_running

    await service.start()
    assert service._is_running

    await service.stop()
    assert not service._is_running


@pytest.mark.asyncio
async def test_process_request_success(service):
    """Test successful request processing."""
    await service.start()

    data = {"id": "test-123", "type": "test"}
    result = await service.process_request(data)

    assert result["id"] == "test-123"
    assert "processed_at" in result
    assert result["metadata"]["service"] == "{{package_name}}"

    await service.stop()


@pytest.mark.asyncio
async def test_process_request_validation_error(service):
    """Test request validation error."""
    await service.start()

    # Missing required field
    data = {"type": "test"}

    with pytest.raises(ValueError, match="Missing required field: id"):
        await service.process_request(data)

    await service.stop()


@pytest.mark.asyncio
async def test_process_request_service_not_running(service):
    """Test processing request when service is not running."""
    data = {"id": "test-123", "type": "test"}

    with pytest.raises(RuntimeError, match="Service is not running"):
        await service.process_request(data)


@pytest.mark.asyncio
async def test_health_check(service):
    """Test health check."""
    # When stopped
    health = await service.health_check()
    assert health["status"] == "unhealthy"
    assert health["service"] == "{{package_name}}"

    # When running
    await service.start()
    health = await service.health_check()
    assert health["status"] == "healthy"

    await service.stop()


@pytest.mark.asyncio
async def test_get_metrics(service):
    """Test metrics retrieval."""
    metrics = await service.get_metrics()

    # Should return empty dict when metrics disabled
    assert metrics == {}


def test_validate_request_data(service):
    """Test request data validation."""
    # Valid data
    data = {"id": "test-123", "type": "test"}
    service._validate_request_data(data)  # Should not raise

    # Invalid type
    with pytest.raises(ValueError, match="Request data must be a dictionary"):
        service._validate_request_data("not a dict")

    # Missing required field
    with pytest.raises(ValueError, match="Missing required field: id"):
        service._validate_request_data({"type": "test"})
