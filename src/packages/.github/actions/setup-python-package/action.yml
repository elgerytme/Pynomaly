name: 'Setup Python for Package'
description: 'Sets up Python with optimized caching for monorepo packages'
inputs:
  python-version:
    description: 'Python version to set up'
    required: true
  package-path:
    description: 'Path to the package directory'
    required: true
  cache-key-suffix:
    description: 'Additional suffix for cache key uniqueness'
    required: false
    default: ''
  install-dependencies:
    description: 'Whether to install package dependencies'
    required: false
    default: 'true'
  dependency-groups:
    description: 'Comma-separated list of dependency groups to install (e.g., "dev,test")'
    required: false
    default: 'dev,test'

outputs:
  cache-hit:
    description: 'Whether the cache was hit'
    value: ${{ steps.cache.outputs.cache-hit }}
  python-path:
    description: 'Path to the Python executable'
    value: ${{ steps.setup.outputs.python-path }}

runs:
  using: 'composite'
  steps:
    - name: Set up Python ${{ inputs.python-version }}
      id: setup
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Generate cache key
      id: cache-key
      shell: bash
      run: |
        # Generate hash of package dependencies
        PACKAGE_HASH=""
        if [ -f "${{ inputs.package-path }}/pyproject.toml" ]; then
          PACKAGE_HASH=$(sha256sum "${{ inputs.package-path }}/pyproject.toml" | cut -d' ' -f1)
        elif [ -f "${{ inputs.package-path }}/requirements.txt" ]; then
          PACKAGE_HASH=$(sha256sum "${{ inputs.package-path }}/requirements.txt" | cut -d' ' -f1)
        elif [ -f "${{ inputs.package-path }}/setup.py" ]; then
          PACKAGE_HASH=$(sha256sum "${{ inputs.package-path }}/setup.py" | cut -d' ' -f1)
        fi
        
        # Create comprehensive cache key
        CACHE_KEY="python-${{ inputs.python-version }}-$(basename ${{ inputs.package-path }})-${PACKAGE_HASH}"
        if [ -n "${{ inputs.cache-key-suffix }}" ]; then
          CACHE_KEY="${CACHE_KEY}-${{ inputs.cache-key-suffix }}"
        fi
        
        echo "cache-key=${CACHE_KEY}" >> $GITHUB_OUTPUT
        echo "📦 Cache key: ${CACHE_KEY}"

    - name: Cache Python dependencies
      id: cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ inputs.python-version }}/site-packages
          ${{ inputs.package-path }}/.venv
        key: ${{ steps.cache-key.outputs.cache-key }}
        restore-keys: |
          python-${{ inputs.python-version }}-$(basename ${{ inputs.package-path }})-
          python-${{ inputs.python-version }}-

    - name: Upgrade pip and setuptools
      shell: bash
      run: |
        python -m pip install --upgrade pip setuptools wheel
        echo "📈 Upgraded pip to $(pip --version)"

    - name: Install package dependencies
      if: inputs.install-dependencies == 'true'
      shell: bash
      working-directory: ${{ inputs.package-path }}
      run: |
        set -euo pipefail
        
        echo "🔧 Installing dependencies for package: $(basename ${{ inputs.package-path }})"
        
        # Determine dependency groups
        GROUPS="${{ inputs.dependency-groups }}"
        if [ -n "$GROUPS" ]; then
          # Convert comma-separated to array
          IFS=',' read -ra GROUP_ARRAY <<< "$GROUPS"
          INSTALL_EXTRAS=""
          for group in "${GROUP_ARRAY[@]}"; do
            group=$(echo "$group" | xargs)  # trim whitespace
            if [ -n "$INSTALL_EXTRAS" ]; then
              INSTALL_EXTRAS="${INSTALL_EXTRAS},$group"
            else
              INSTALL_EXTRAS="$group"
            fi
          done
          
          echo "📦 Installing package with extras: [$INSTALL_EXTRAS]"
          pip install -e ".[$INSTALL_EXTRAS]"
        else
          echo "📦 Installing package without extras"
          pip install -e .
        fi
        
        # Show installed packages for debugging
        echo "📋 Installed packages:"
        pip list | head -20

    - name: Verify installation
      if: inputs.install-dependencies == 'true'
      shell: bash
      working-directory: ${{ inputs.package-path }}
      run: |
        # Try to import the package
        PACKAGE_NAME=$(python -c "
        import tomllib
        try:
            with open('pyproject.toml', 'rb') as f:
                data = tomllib.load(f)
            name = data['project']['name'].replace('-', '_')
            print(name)
        except:
            import os
            print(os.path.basename(os.getcwd()))
        " 2>/dev/null || echo "$(basename ${{ inputs.package-path }})")
        
        echo "🧪 Verifying package import: $PACKAGE_NAME"
        python -c "
        try:
            import sys
            sys.path.insert(0, 'src')
            __import__('$PACKAGE_NAME')
            print('✅ Package import successful')
        except ImportError as e:
            print(f'⚠️  Package import failed: {e}')
            print('📁 Available modules in src/:')
            import os
            if os.path.exists('src'):
                for item in os.listdir('src'):
                    print(f'  - {item}')
        except Exception as e:
            print(f'⚠️  Unexpected error: {e}')
        "

    - name: Cache statistics
      shell: bash
      run: |
        if [ "${{ steps.cache.outputs.cache-hit }}" = "true" ]; then
          echo "🎯 Cache hit! Dependencies loaded from cache."
        else
          echo "⏬ Cache miss. Dependencies installed and cached for next run."
        fi
        
        echo "💾 Cache key: ${{ steps.cache-key.outputs.cache-key }}"