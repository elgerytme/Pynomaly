name: Generate and Deploy Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [
          "ai/mlops",
          "data/anomaly_detection", 
          "data/data_observability",
          "formal_sciences/mathematics",
          "ops/infrastructure",
          "ops/people_ops",
          "software/core",
          "software/interfaces"
        ]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd src/packages/${{ matrix.package }}
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
        pip install sphinx-apidoc sphinx-autodoc-typehints
    
    - name: Generate API documentation
      run: |
        cd src/packages/${{ matrix.package }}
        # Create docs directory if it doesn't exist
        mkdir -p docs
        
        # Generate API documentation
        if [ -f "pyproject.toml" ]; then
          # Extract package name from pyproject.toml
          PACKAGE_NAME=$(grep -E "^name = " pyproject.toml | cut -d'"' -f2)
          
          # Generate Sphinx documentation
          sphinx-apidoc -o docs/api src/ --force --module-first
          
          # Generate OpenAPI spec if FastAPI is detected
          if grep -q "fastapi" pyproject.toml; then
            python -c "
import sys
import os
sys.path.insert(0, 'src')
try:
    from fastapi import FastAPI
    from fastapi.openapi.utils import get_openapi
    import json
    
    # Try to import the FastAPI app
    app = None
    for root, dirs, files in os.walk('src'):
        for file in files:
            if file.endswith('.py'):
                filepath = os.path.join(root, file)
                try:
                    with open(filepath, 'r') as f:
                        content = f.read()
                        if 'FastAPI(' in content:
                            print(f'Found FastAPI app in {filepath}')
                            break
                except:
                    continue
    
    if app:
        openapi_schema = get_openapi(
            title='${{ matrix.package }} API',
            version='0.1.0',
            description='Auto-generated API documentation',
            routes=app.routes,
        )
        
        with open('docs/openapi.json', 'w') as f:
            json.dump(openapi_schema, f, indent=2)
        
        print('OpenAPI specification generated at docs/openapi.json')
    
except Exception as e:
    print(f'Could not generate OpenAPI spec: {e}')
"
          fi
        fi
    
    - name: Build documentation
      run: |
        cd src/packages/${{ matrix.package }}
        if [ -f "docs/conf.py" ]; then
          sphinx-build -b html docs docs/_build/html
        elif [ -f "mkdocs.yml" ]; then
          mkdocs build
        fi
    
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: docs-${{ matrix.package }}
        path: src/packages/${{ matrix.package }}/docs/_build/html/
        if-no-files-found: ignore

  deploy-docs:
    needs: generate-docs
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all documentation artifacts
      uses: actions/download-artifact@v3
      with:
        path: docs-artifacts
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs-artifacts
        destination_dir: api-docs