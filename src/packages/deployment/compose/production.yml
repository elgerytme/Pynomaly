version: '3.8'

# Production Docker Compose Configuration
# Orchestrates all hexagonal architecture services

services:
  # Data Quality Service
  data-quality:
    build:
      context: ../..
      dockerfile: deployment/docker/data-quality/Dockerfile
      target: production
    container_name: data-quality-prod
    ports:
      - "8000:8000"
    environment:
      - DATA_QUALITY_ENVIRONMENT=production
      - DATA_QUALITY_STORAGE_PATH=/app/data
      - DATA_QUALITY_LOG_LEVEL=INFO
      - DATA_QUALITY_ENABLE_FILE_DATA_PROCESSING=true
      - DATA_QUALITY_ENABLE_STATISTICAL_ANALYSIS=true
    volumes:
      - data_quality_storage:/app/data
      - shared_logs:/app/logs
    networks:
      - hexagonal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MLOps Experiment Tracking
  mlops-experiments:
    build:
      context: ../..
      dockerfile: deployment/docker/mlops/Dockerfile
      target: production
    container_name: mlops-experiments-prod
    ports:
      - "8001:8001"
    environment:
      - MLOPS_ENVIRONMENT=production
      - MLOPS_SERVICE_NAME=experiment_tracking
      - MLOPS_STORAGE_PATH=/app/data
      - MLOPS_LOG_LEVEL=INFO
      - MLOPS_ENABLE_FILE_EXPERIMENT_TRACKING=true
      - MLOPS_ENABLE_FILE_SERVICE_DISCOVERY=true
    volumes:
      - mlops_experiments:/app/data/experiments
      - mlops_service_discovery:/app/data/service_discovery
      - shared_logs:/app/logs
    networks:
      - hexagonal-network
    restart: unless-stopped

  # MLOps Model Registry
  mlops-registry:
    build:
      context: ../..
      dockerfile: deployment/docker/mlops/Dockerfile
      target: production
    container_name: mlops-registry-prod
    ports:
      - "8002:8001"
    environment:
      - MLOPS_ENVIRONMENT=production
      - MLOPS_SERVICE_NAME=model_registry
      - MLOPS_STORAGE_PATH=/app/data
      - MLOPS_LOG_LEVEL=INFO
      - MLOPS_ENABLE_LOCAL_MODEL_REGISTRY=true
      - MLOPS_ENABLE_FILE_SERVICE_DISCOVERY=true
    volumes:
      - mlops_models:/app/data/models
      - mlops_service_discovery:/app/data/service_discovery
      - shared_logs:/app/logs
    networks:
      - hexagonal-network
    restart: unless-stopped
    depends_on:
      - mlops-experiments

  # MLOps Configuration Management
  mlops-config:
    build:
      context: ../..
      dockerfile: deployment/docker/mlops/Dockerfile
      target: production
    container_name: mlops-config-prod
    ports:
      - "8003:8001"
    environment:
      - MLOPS_ENVIRONMENT=production
      - MLOPS_SERVICE_NAME=configuration_management
      - MLOPS_STORAGE_PATH=/app/data
      - MLOPS_LOG_LEVEL=INFO
      - MLOPS_ENABLE_FILE_CONFIGURATION=true
      - MLOPS_ENABLE_FILE_SERVICE_DISCOVERY=true
    volumes:
      - mlops_configurations:/app/data/configurations
      - mlops_service_discovery:/app/data/service_discovery
      - shared_logs:/app/logs
    networks:
      - hexagonal-network
    restart: unless-stopped
    depends_on:
      - mlops-experiments

  # Machine Learning Training Service
  ml-training:
    build:
      context: ../..
      dockerfile: deployment/docker/machine-learning/Dockerfile
      target: production
    container_name: ml-training-prod
    ports:
      - "8004:8004"
    environment:
      - ML_ENVIRONMENT=production
      - ML_SERVICE_NAME=training
      - ML_STORAGE_PATH=/app/data
      - ML_LOG_LEVEL=INFO
      - ML_ENABLE_FILE_MODEL_STORAGE=true
      - ML_ENABLE_DISTRIBUTED_TRAINING=false
    volumes:
      - ml_models:/app/data/models
      - ml_training_jobs:/app/data/training_jobs
      - shared_logs:/app/logs
    networks:
      - hexagonal-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    depends_on:
      - mlops-registry
      - data-quality

  # Machine Learning Prediction Service
  ml-prediction:
    build:
      context: ../..
      dockerfile: deployment/docker/machine-learning/Dockerfile
      target: production
    container_name: ml-prediction-prod
    ports:
      - "8005:8004"
    environment:
      - ML_ENVIRONMENT=production
      - ML_SERVICE_NAME=prediction
      - ML_STORAGE_PATH=/app/data
      - ML_LOG_LEVEL=INFO
      - ML_ENABLE_FILE_MODEL_STORAGE=true
    volumes:
      - ml_models:/app/data/models:ro
      - ml_predictions:/app/data/predictions
      - shared_logs:/app/logs
    networks:
      - hexagonal-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    depends_on:
      - ml-training

  # Anomaly Detection Service
  anomaly-detection:
    build:
      context: ../..
      dockerfile: deployment/docker/anomaly-detection/Dockerfile
      target: production
    container_name: anomaly-detection-prod
    ports:
      - "8007:8007"
    environment:
      - ANOMALY_DETECTION_ENVIRONMENT=production
      - ANOMALY_DETECTION_STORAGE_PATH=/app/data
      - ANOMALY_DETECTION_LOG_LEVEL=INFO
      - ANOMALY_DETECTION_ENABLE_CACHING=true
      - ANOMALY_DETECTION_CACHE_TTL=3600
    volumes:
      - anomaly_detection_models:/app/data/models
      - anomaly_detection_results:/app/data/detection_results
      - anomaly_detection_cache:/app/data/cache
      - shared_logs:/app/logs
    networks:
      - hexagonal-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '1.5'
        reservations:
          memory: 1.5G
          cpus: '0.75'
    depends_on:
      - data-quality
      - ml-prediction

  # Monitoring and Observability (Prometheus + Grafana)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - hexagonal-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - hexagonal-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  # Data Quality
  data_quality_storage:
    driver: local
  
  # MLOps
  mlops_experiments:
    driver: local
  mlops_models:
    driver: local
  mlops_configurations:
    driver: local
  mlops_service_discovery:
    driver: local
  
  # Machine Learning
  ml_models:
    driver: local
  ml_training_jobs:
    driver: local
  ml_predictions:
    driver: local
  
  # Anomaly Detection
  anomaly_detection_models:
    driver: local
  anomaly_detection_results:
    driver: local
  anomaly_detection_cache:
    driver: local
  
  # Monitoring
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  
  # Shared
  shared_logs:
    driver: local

networks:
  hexagonal-network:
    driver: bridge
    name: hexagonal-architecture-network