load("@prelude//python:defs.bzl", "python_library", "python_binary", "python_test")

python_library(
    name = "mathematics",
    srcs = glob(["src/mathematics/**/*.py"]),
    deps = [
        "//third-party/python:numpy",
        "//third-party/python:scipy",
        "//third-party/python:sympy",
        "//third-party/python:matplotlib",
        "//third-party/python:pandas",
        "//third-party/python:fastapi",
        "//third-party/python:click",
        "//third-party/python:pydantic",
        "//third-party/python:typing-extensions",
        "//third-party/python:aiohttp",
        "//third-party/python:numba",
    ],
    visibility = ["PUBLIC"],
)

python_binary(
    name = "math_cli",
    main = "src/mathematics/presentation/cli/math_cli.py",
    deps = [":mathematics"],
    visibility = ["PUBLIC"],
)

python_test(
    name = "mathematics_tests",
    srcs = glob(["tests/**/*.py"]),
    deps = [
        ":mathematics",
        "//third-party/python:pytest",
        "//third-party/python:pytest-asyncio",
        "//third-party/python:pytest-cov",
        "//third-party/python:pytest-mock",
        "//third-party/python:pytest-benchmark",
        "//third-party/python:hypothesis",
    ],
    visibility = ["PUBLIC"],
)

# Unit tests
python_test(
    name = "unit_tests",
    srcs = glob(["tests/unit/**/*.py"]),
    deps = [
        ":mathematics",
        "//third-party/python:pytest",
        "//third-party/python:pytest-asyncio",
        "//third-party/python:hypothesis",
    ],
    labels = ["unit"],
    visibility = ["PUBLIC"],
)

# Integration tests
python_test(
    name = "integration_tests",
    srcs = glob(["tests/integration/**/*.py"]),
    deps = [
        ":mathematics",
        "//third-party/python:pytest",
        "//third-party/python:pytest-asyncio",
    ],
    labels = ["integration"],
    visibility = ["PUBLIC"],
)

# Benchmark tests
python_test(
    name = "benchmark_tests",
    srcs = glob(["tests/benchmark/**/*.py"]),
    deps = [
        ":mathematics",
        "//third-party/python:pytest",
        "//third-party/python:pytest-benchmark",
    ],
    labels = ["benchmark"],
    visibility = ["PUBLIC"],
)

# GPU tests (if available)
python_test(
    name = "gpu_tests",
    srcs = glob(["tests/gpu/**/*.py"]),
    deps = [
        ":mathematics",
        "//third-party/python:pytest",
        "//third-party/python:cupy",
    ],
    labels = ["gpu"],
    visibility = ["PUBLIC"],
)

# Core domain entities
python_library(
    name = "domain_entities",
    srcs = glob(["src/mathematics/domain/entities/**/*.py"]),
    deps = [
        "//third-party/python:numpy",
        "//third-party/python:scipy",
        "//third-party/python:pydantic",
    ],
    visibility = ["PUBLIC"],
)

# Mathematical services
python_library(
    name = "math_services",
    srcs = glob(["src/mathematics/domain/services/**/*.py"]),
    deps = [
        ":domain_entities",
        "//third-party/python:numpy",
        "//third-party/python:scipy",
        "//third-party/python:sympy",
        "//third-party/python:numba",
    ],
    visibility = ["PUBLIC"],
)

# Linear algebra module
python_library(
    name = "linear_algebra",
    srcs = glob(["src/mathematics/linear_algebra/**/*.py"]),
    deps = [
        ":domain_entities",
        "//third-party/python:numpy",
        "//third-party/python:scipy",
    ],
    visibility = ["PUBLIC"],
)

# Calculus module
python_library(
    name = "calculus",
    srcs = glob(["src/mathematics/calculus/**/*.py"]),
    deps = [
        ":domain_entities",
        "//third-party/python:numpy",
        "//third-party/python:scipy",
        "//third-party/python:sympy",
    ],
    visibility = ["PUBLIC"],
)

# Optimization module
python_library(
    name = "optimization",
    srcs = glob(["src/mathematics/optimization/**/*.py"]),
    deps = [
        ":domain_entities",
        "//third-party/python:numpy",
        "//third-party/python:scipy",
        "//third-party/python:cvxpy",
    ],
    visibility = ["PUBLIC"],
)

# Category theory module
python_library(
    name = "category_theory",
    srcs = glob(["src/mathematics/category_theory/**/*.py"]),
    deps = [
        ":domain_entities",
        "//third-party/python:numpy",
        "//third-party/python:sympy",
    ],
    visibility = ["PUBLIC"],
)

# Example scripts
python_binary(
    name = "linear_algebra_example",
    main = "examples/linear_algebra_example.py",
    deps = [":mathematics"],
    visibility = ["PUBLIC"],
)

python_binary(
    name = "calculus_example",
    main = "examples/calculus_example.py",
    deps = [":mathematics"],
    visibility = ["PUBLIC"],
)

python_binary(
    name = "optimization_example",
    main = "examples/optimization_example.py",
    deps = [":mathematics"],
    visibility = ["PUBLIC"],
)

# Documentation generation
genrule(
    name = "docs",
    srcs = glob(["docs/**/*.md", "docs/**/*.rst"]),
    out = "docs-html",
    cmd = "sphinx-build -b html docs/ $OUT",
    visibility = ["PUBLIC"],
)

# Jupyter notebook examples
filegroup(
    name = "notebooks",
    srcs = glob(["examples/**/*.ipynb"]),
    visibility = ["PUBLIC"],
)