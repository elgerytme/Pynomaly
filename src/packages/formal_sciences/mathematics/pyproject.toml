[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "pynomaly-mathematics"
version = "0.1.0"
description = "Comprehensive mathematics package providing core mathematical functions, linear algebra, calculus, and numerical methods for the Pynomaly ecosystem"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Pynomaly Team", email = "support@pynomaly.com"},
]
maintainers = [
    {name = "Pynomaly Team", email = "support@pynomaly.com"},
]
keywords = [
    "mathematics",
    "linear-algebra",
    "calculus",
    "numerical-methods",
    "optimization",
    "scientific-computing",
    "symbolic-math",
    "numpy",
    "scipy",
    "high-performance",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
requires-python = ">=3.9"
dependencies = [
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
gpu = [
    "cupy>=11.0.0",
    "cuda-python>=11.7.0",
]
symbolic = [
    "sympy>=1.11.0",
    "mpmath>=1.2.0",
]
optimization = [
    "cvxpy>=1.3.0",
    "pyomo>=6.4.0",
    "optuna>=3.0.0",
]
visualization = [
    "matplotlib>=3.5.0",
    "plotly>=5.10.0",
    "bokeh>=2.4.0",
    "seaborn>=0.11.0",
]
dev = [
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
    "bandit>=1.7.4",
    "safety>=2.3.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
    "pytest-xdist>=3.0.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.54.0",
    "factory-boy>=3.2.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autodoc-typehints>=1.19.0",
    "myst-parser>=0.18.0",
    "nbsphinx>=0.8.0",
    "jupyter>=1.0.0",
]
all = [
    "pynomaly-mathematics[gpu,symbolic,optimization,visualization,dev,test,docs]",
]

[project.urls]
Homepage = "https://github.com/pynomaly/mathematics"
Documentation = "https://docs.pynomaly.com/mathematics"
Repository = "https://github.com/pynomaly/mathematics"
Issues = "https://github.com/pynomaly/mathematics/issues"
Changelog = "https://github.com/pynomaly/mathematics/blob/main/CHANGELOG.md"

# [project.scripts]
# pynomaly-math = "pynomaly_mathematics.presentation.cli.math_cli:main"


[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/examples",
    "/tests",
    "/.gitignore",
    "/.pre-commit-config.yaml",
    "/tox.ini",
    "/Makefile",
]

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
    "pytest-benchmark>=4.0.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=src/packages/mathematics --cov-report=html --cov-report=term {args:tests}"
test-cov-xml = "pytest --cov=src/packages/mathematics --cov-report=xml {args:tests}"
benchmark = "pytest --benchmark-only {args:tests}"

[tool.hatch.envs.lint]
dependencies = [
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "bandit>=1.7.4",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/packages/mathematics tests}"
style = [
    "flake8 {args:src/packages/mathematics tests}",
    "black --check --diff {args:src/packages/mathematics tests}",
    "isort --check-only --diff {args:src/packages/mathematics tests}",
]
fmt = [
    "isort {args:src/packages/mathematics tests}",
    "black {args:src/packages/mathematics tests}",
]
security = "bandit -r src/packages/mathematics"
all = [
    "style",
    "typing", 
    "security",
]

[tool.hatch.envs.docs]
dependencies = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autodoc-typehints>=1.19.0",
    "myst-parser>=0.18.0",
    "nbsphinx>=0.8.0",
]

[tool.hatch.envs.docs.scripts]
build = "sphinx-build -b html docs docs/_build/html"
serve = "python -m http.server 8000 --directory docs/_build/html"

# Tool configurations
[tool.black]
target-version = ["py39"]
line-length = 88
skip-string-normalization = true
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
known_first_party = ["pynomaly_mathematics"]
known_third_party = ["numpy", "scipy", "sympy", "matplotlib", "pandas", "fastapi", "click", "pydantic"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "scipy.*",
    "sympy.*",
    "matplotlib.*",
    "numba.*",
    "cupy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--disable-warnings",
    "--tb=short",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov=src/packages/mathematics",
    "--cov-fail-under=90",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as benchmark tests",
    "gpu: marks tests requiring GPU",
    "symbolic: marks tests requiring symbolic math",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::RuntimeWarning",
]

[tool.coverage.run]
source = ["src/packages/mathematics"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py", 
    "*/examples/*",
    "*/docs/*",
    "*/__pycache__/*",
    "*/build/*",
    "*/dist/*",
    "*/.venv/*",
    "*/.tox/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "TYPE_CHECKING",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long
    "W503",  # line break before binary operator
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "tests/*:S101",      # use of assert
]
max-complexity = 10
select = ["E", "W", "F", "C", "B", "S"]

[tool.bandit]
exclude_dirs = ["tests", "examples", "docs"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings  
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "RUF", # ruff specific
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101"]

[tool.ruff.isort]
known-first-party = ["pynomaly_mathematics"]

[tool.ruff.mccabe]
max-complexity = 10