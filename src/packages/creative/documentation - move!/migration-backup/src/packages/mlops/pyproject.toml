[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pynomaly-mlops"
dynamic = ["version"]
description = "MLOps package for Pynomaly - Comprehensive ML Operations platform"
readme = "README.md"
authors = [
    {name = "Pynomaly Team", email = "dev@pynomaly.io"},
]
license = {text = "MIT"}
keywords = [
    "mlops",
    "machine-learning",
    "ml-operations",
    "model-management",
    "deployment",
    "monitoring",
    "anomaly-detection",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "pynomaly-core",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "redis>=5.0.0",
    "celery>=5.3.0",
    "prometheus-client>=0.19.0",
    "mlflow>=2.8.0",
    "dvc>=3.35.0",
    "prefect>=2.14.0",
    "bentoml>=1.1.0",
    "optuna>=3.5.0",
    "wandb>=0.16.0",
    "apache-airflow>=2.8.0",
    "kubernetes>=28.1.0",
    "docker>=6.1.0",
    "boto3>=1.34.0",
    "azure-storage-blob>=12.19.0",
    "google-cloud-storage>=2.10.0",
    "evidently>=0.4.0",
    "great-expectations>=0.18.0",
    "whylogs>=1.3.0",
    "ray[serve]>=2.8.0",
    "seldon-core>=1.18.0",
    "kserve>=0.11.0",
    "feast>=0.35.0",
    "apache-kafka-python>=2.0.0",
    "streamlit>=1.29.0",
    "plotly>=5.17.0",
    "dash>=2.15.0",
    "grafana-api>=1.0.3",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "coverage>=7.3.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "locust>=2.17.0",
    "testcontainers>=3.7.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "testcontainers>=3.7.0",
    "hypothesis>=6.92.0",
    "factory-boy>=3.3.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocstrings[python]>=0.24.0",
]
monitoring = [
    "prometheus-client>=0.19.0",
    "grafana-api>=1.0.3",
    "elasticsearch>=8.11.0",
    "kibana>=8.11.0",
    "jaeger-client>=4.8.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
]
cloud = [
    "boto3>=1.34.0",
    "azure-identity>=1.15.0",
    "azure-mgmt-containerinstance>=10.1.0",
    "google-cloud-aiplatform>=1.38.0",
    "google-cloud-storage>=2.10.0",
    "kubernetes>=28.1.0",
    "terraform-python>=0.1.0",
]

[project.urls]
Homepage = "https://github.com/Distracted-E421/Pynomaly"
Documentation = "https://pynomaly.readthedocs.io/"
Repository = "https://github.com/Distracted-E421/Pynomaly"
"Bug Tracker" = "https://github.com/Distracted-E421/Pynomaly/issues"

[project.scripts]
pynomaly-mlops = "pynomaly_mlops.cli:main"

[tool.hatch.version]
path = "pynomaly_mlops/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["pynomaly_mlops"]

[tool.hatch.build.targets.sdist]
include = [
    "/pynomaly_mlops",
    "/tests",
    "/docs",
    "README.md",
    "LICENSE",
]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["pynomaly_mlops", "pynomaly_core"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "mlflow.*",
    "wandb.*",
    "prefect.*",
    "bentoml.*",
    "ray.*",
    "feast.*",
    "evidently.*",
    "whylogs.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=pynomaly_mlops",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "-ra",
]
testpaths = ["tests"]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "slow: marks tests as slow running",
    "gpu: marks tests that require GPU",
    "docker: marks tests that require Docker",
    "kubernetes: marks tests that require Kubernetes",
    "cloud: marks tests that require cloud resources",
]

[tool.coverage.run]
source = ["pynomaly_mlops"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]