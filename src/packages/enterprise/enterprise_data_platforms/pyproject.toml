[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "pynomaly-enterprise-data-platforms"
dynamic = ["version"]
description = "Enterprise data platform integrations with Snowflake, BigQuery, Databricks, and streaming platforms for Pynomaly"
authors = [{name = "Pynomaly Enterprise Team", email = "enterprise@pynomaly.org"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
keywords = [
    "data-platforms",
    "snowflake",
    "bigquery", 
    "databricks",
    "enterprise",
    "analytics",
    "data-lake",
    "data-warehouse"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Data Scientists", 
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12", 
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Typing :: Typed",
]

dependencies = [
    # Core dependencies
    "pydantic>=2.9.0",
    "structlog>=24.4.0",
    "dependency-injector>=4.42.0",
    
    # Async and concurrency
    "asyncio>=3.4.3",
    "aiofiles>=24.1.0", 
    "aiocache>=0.12.3",
    "aiohttp>=3.9.0",
    "asyncpg>=0.29.0",
    
    # Data processing
    "pandas>=2.0.0",
    "pyarrow>=14.0.0",
    "numpy>=1.24.0",
    
    # API Framework
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.34.0",
    
    # Database & Storage
    "sqlalchemy>=2.0.36",
    "redis>=5.2.1",
    
    # Utilities
    "python-dateutil>=2.8.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "pyyaml>=6.0",
    "jsonschema>=4.20.0",
    
    # HTTP clients
    "httpx>=0.28.1",
    "requests>=2.31.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0", 
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.12.0",
    "factory-boy>=3.3.1",
    "faker>=33.1.0",
    "httpx>=0.28.1",
]

# Testing dependencies
test = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0", 
    "pytest-mock>=3.12.0",
    "pytest-benchmark>=4.0.0",
    "factory-boy>=3.3.1",
    "faker>=33.1.0",
    "httpx>=0.28.1",
    "responses>=0.24.0",
    "testcontainers>=4.0.0",
]

# Linting and formatting
lint = [
    "ruff>=0.8.0",
    "black>=24.0.0",
    "mypy>=1.13.0", 
    "bandit>=1.8.0",
]

# Documentation
docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.27.0",
]

# Snowflake integration
snowflake = [
    "snowflake-connector-python>=3.7.0",
    "snowflake-sqlalchemy>=1.5.0",
    "cryptography>=41.0.0",
]

# Google BigQuery integration  
bigquery = [
    "google-cloud-bigquery>=3.15.0",
    "google-cloud-bigquery-storage>=2.24.0",
    "google-auth>=2.25.0",
    "google-auth-oauthlib>=1.2.0",
    "google-api-core>=2.15.0",
    "google-resumable-media>=2.6.0",
]

# Databricks integration
databricks = [
    "databricks-sdk>=0.18.0",
    "databricks-connect>=13.3.0",
    "pyspark>=3.5.0",
    "delta-spark>=2.4.0",
]

# Apache Kafka streaming
kafka = [
    "kafka-python>=2.0.2",
    "confluent-kafka>=2.3.0",
    "aiokafka>=0.10.0",
    "avro>=1.11.0",
    "fastavro>=1.9.0",
]

# Amazon Kinesis streaming
kinesis = [
    "boto3>=1.34.0",
    "botocore>=1.34.0", 
    "aiobotocore>=2.11.0",
    "kinesis-python>=0.2.1",
]

# Google Pub/Sub streaming
pubsub = [
    "google-cloud-pubsub>=2.21.0",
    "google-cloud-logging>=3.8.0",
]

# Apache Pulsar streaming
pulsar = [
    "pulsar-client>=3.4.0",
    "apache-pulsar-client>=3.4.0",
]

# Redis Streams
redis-streams = [
    "redis>=5.2.1",
    "aioredis>=2.0.1",
    "redisearch>=2.1.0",
]

# Data lake storage
datalake = [
    "adlfs>=2024.2.0",  # Azure Data Lake
    "s3fs>=2024.2.0",   # AWS S3
    "gcsfs>=2024.2.0",  # Google Cloud Storage
    "hdfs3>=0.3.1",     # Hadoop HDFS
]

# Data formats
formats = [
    "parquet>=1.3.0",
    "orc>=1.1.0", 
    "avro>=1.11.0",
    "protobuf>=4.25.0",
    "jsonlines>=4.0.0",
]

# Schema registry
schema = [
    "confluent-schema-registry>=0.1.0",
    "schema-registry-client>=2.5.0",
    "avro-python3>=1.11.0",
]

# Monitoring and observability
monitoring = [
    "prometheus-client>=0.21.1",
    "opentelemetry-api>=1.29.0",
    "opentelemetry-sdk>=1.29.0",
    "opentelemetry-instrumentation>=0.50b0",
]

# Security and encryption
security = [
    "cryptography>=41.0.0",
    "keyring>=25.0.0", 
    "azure-keyvault-secrets>=4.8.0",
    "google-cloud-secret-manager>=2.18.0",
    "boto3>=1.34.0",  # AWS Secrets Manager
]

# Data quality and validation
quality = [
    "great-expectations>=0.18.0",
    "pandera>=0.17.0",
    "pydantic-extra-types>=2.9.0",
    "cerberus>=1.3.5",
]

# Caching and performance
caching = [
    "redis>=5.2.1",
    "memcached>=1.6.0",
    "diskcache>=5.6.0",
    "cachetools>=5.3.0",
]

# Production extras
production = [
    "gunicorn>=21.2.0",
    "uvloop>=0.19.0",
    "orjson>=3.9.0", 
    "msgpack>=1.0.0",
    "lz4>=4.3.0",
    "zstandard>=0.22.0",
]

# All extras
all = [
    # Snowflake
    "snowflake-connector-python>=3.7.0",
    "snowflake-sqlalchemy>=1.5.0",
    
    # BigQuery
    "google-cloud-bigquery>=3.15.0",
    "google-cloud-bigquery-storage>=2.24.0",
    "google-auth>=2.25.0",
    
    # Databricks  
    "databricks-sdk>=0.18.0",
    "pyspark>=3.5.0",
    "delta-spark>=2.4.0",
    
    # Streaming
    "kafka-python>=2.0.2",
    "confluent-kafka>=2.3.0", 
    "boto3>=1.34.0",
    "google-cloud-pubsub>=2.21.0",
    
    # Data lake storage
    "adlfs>=2024.2.0",
    "s3fs>=2024.2.0",
    "gcsfs>=2024.2.0",
    
    # Data quality
    "great-expectations>=0.18.0",
    "pandera>=0.17.0",
    
    # Security
    "cryptography>=41.0.0",
    "azure-keyvault-secrets>=4.8.0",
    
    # Performance
    "uvloop>=0.19.0",
    "orjson>=3.9.0",
    "lz4>=4.3.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/pynomaly"
Repository = "https://github.com/yourusername/pynomaly" 
Documentation = "https://docs.pynomaly.org/enterprise/data-platforms"
Issues = "https://github.com/yourusername/pynomaly/issues"
Changelog = "https://github.com/yourusername/pynomaly/blob/main/src/packages/enterprise/enterprise_data_platforms/CHANGELOG.md"

[project.scripts]
pynomaly-enterprise-data-platforms = "enterprise_data_platforms.presentation.cli.main:app"
pynomaly-data-sync = "enterprise_data_platforms.presentation.cli.sync:app"

[tool.hatch.version]
source = "vcs"
root = "../../../../.."

[tool.hatch.build.targets.wheel]
packages = ["enterprise_data_platforms"]

# Tool configuration
[tool.ruff]
target-version = "py311"
line-length = 88
exclude = [
    "migrations",
    ".venv", 
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]

[tool.black]
target-version = ["py311"]
line-length = 88

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--tb=short", 
    "--disable-warnings",
    "--color=yes",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"] 
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "snowflake: Snowflake integration tests",
    "bigquery: BigQuery integration tests",
    "databricks: Databricks integration tests", 
    "streaming: Streaming platform tests",
    "performance: Performance tests",
    "security: Security tests",
    "slow: Slow-running tests",
]

[tool.coverage.run]
source = ["enterprise_data_platforms"]
branch = true
parallel = true

[tool.coverage.report]
show_missing = true
fail_under = 85
exclude_lines = [
    "pragma: no cover",
    "def __repr__", 
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]