"""Tests for {{package_title}} handlers."""

import pytest
from unittest.mock import AsyncMock, Mock
from enterprise_core import DomainEvent
from {{package_module}} import {{package_module|title}}Handler, {{package_module|title}}Service, {{package_module|title}}Config


@pytest.fixture
def config():
    """Test configuration."""
    return {{package_module|title}}Config()


@pytest.fixture
def mock_service():
    """Mock service."""
    service = Mock(spec={{package_module|title}}Service)
    service.process_request = AsyncMock()
    service.health_check = AsyncMock()
    service.get_metrics = AsyncMock()
    return service


@pytest.fixture
def handler(mock_service, config):
    """Test handler instance."""
    return {{package_module|title}}Handler(mock_service, config)


@pytest.mark.asyncio
async def test_handle_process_request(handler, mock_service):
    """Test handling process request."""
    data = {"id": "test-123", "type": "test"}
    expected_result = {"id": "test-123", "processed": True}

    mock_service.process_request.return_value = expected_result

    result = await handler.handle_request("process", data)

    assert result == expected_result
    mock_service.process_request.assert_called_once_with(data)


@pytest.mark.asyncio
async def test_handle_status_request(handler, mock_service):
    """Test handling status request."""
    data = {}
    expected_result = {"status": "healthy"}

    mock_service.health_check.return_value = expected_result

    result = await handler.handle_request("status", data)

    assert result == expected_result
    mock_service.health_check.assert_called_once()


@pytest.mark.asyncio
async def test_handle_metrics_request(handler, mock_service):
    """Test handling metrics request."""
    data = {}
    expected_result = {"metrics": {"requests": 10}}

    mock_service.get_metrics.return_value = expected_result

    result = await handler.handle_request("metrics", data)

    assert result == expected_result
    mock_service.get_metrics.assert_called_once()


@pytest.mark.asyncio
async def test_handle_unsupported_request(handler):
    """Test handling unsupported request type."""
    data = {"id": "test-123"}

    with pytest.raises(ValueError, match="Unsupported request type: unknown"):
        await handler.handle_request("unknown", data)


@pytest.mark.asyncio
async def test_handle_data_processed_event(handler):
    """Test handling data processed event."""
    event = DomainEvent(
        name="{{package_module}}.data_processed",
        data={"input": {"id": "test-123"}, "output": {"result": "success"}},
        aggregate_id="test-123"
    )

    # Should not raise any exceptions
    await handler.handle_event(event)


@pytest.mark.asyncio
async def test_handle_error_event(handler):
    """Test handling error event."""
    event = DomainEvent(
        name="{{package_module}}.error_occurred",
        data={"error": "Test error", "context": {"id": "test-123"}},
        aggregate_id="test-123"
    )

    # Should not raise any exceptions
    await handler.handle_event(event)


@pytest.mark.asyncio
async def test_handle_unknown_event(handler):
    """Test handling unknown event."""
    event = DomainEvent(
        name="unknown.event",
        data={},
        aggregate_id="test-123"
    )

    # Should not raise any exceptions for unknown events
    await handler.handle_event(event)
