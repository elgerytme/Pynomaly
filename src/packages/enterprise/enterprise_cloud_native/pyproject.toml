[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "pynomaly-enterprise-cloud-native"
dynamic = ["version"]
description = "Cloud-native enhancements with Kubernetes operators and service mesh for Pynomaly"
authors = [{name = "Pynomaly Enterprise Team", email = "enterprise@pynomaly.org"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
keywords = [
    "cloud-native",
    "kubernetes",
    "operators",
    "service-mesh",
    "auto-scaling",
    "enterprise",
    "istio",
    "envoy"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Intended Audience :: DevOps Engineers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: System :: Distributed Computing",
    "Topic :: System :: Systems Administration",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Typing :: Typed",
]

dependencies = [
    # Core dependencies
    "pydantic>=2.9.0",
    "structlog>=24.4.0",
    "dependency-injector>=4.42.0",
    
    # Kubernetes client
    "kubernetes>=28.1.0",
    "kubernetes-asyncio>=28.2.0",
    
    # Async and concurrency
    "asyncio>=3.4.3",
    "aiofiles>=24.1.0",
    "aiocache>=0.12.3",
    "aiohttp>=3.9.0",
    
    # YAML and JSON processing
    "pyyaml>=6.0",
    "jsonschema>=4.20.0",
    "jinja2>=3.1.5",
    
    # Monitoring and metrics
    "prometheus-client>=0.21.1",
    "opentelemetry-api>=1.29.0",
    "opentelemetry-sdk>=1.29.0",
    
    # API Framework
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.34.0",
    
    # Database & Storage
    "sqlalchemy>=2.0.36",
    "redis>=5.2.1",
    
    # Utilities
    "python-dateutil>=2.8.0",
    "click>=8.1.0",
    "rich>=13.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.12.0",
    "pytest-kubernetes>=0.1.0",
    "factory-boy>=3.3.1",
    "faker>=33.1.0",
    "httpx>=0.28.1",
]

# Testing dependencies
test = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.12.0",
    "pytest-benchmark>=4.0.0",
    "pytest-kubernetes>=0.1.0",
    "factory-boy>=3.3.1",
    "faker>=33.1.0",
    "httpx>=0.28.1",
    "responses>=0.24.0",
    "testcontainers>=4.0.0",
    "kind>=0.20.0",  # Kubernetes in Docker for testing
]

# Linting and formatting
lint = [
    "ruff>=0.8.0",
    "black>=24.0.0",
    "mypy>=1.13.0",
    "bandit>=1.8.0",
]

# Documentation
docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.27.0",
]

# Kubernetes operators
operators = [
    "kopf>=1.37.0",  # Kubernetes operators framework
    "pykube-ng>=22.9.0",
    "kubernetes-validate>=1.28.0",
    "kubernetes-stubs>=28.1.0",
]

# Service mesh integrations
service-mesh = [
    "istio-client>=0.2.0",
    "grpcio>=1.60.0",
    "grpcio-tools>=1.60.0",
    "protobuf>=4.25.0",
]

# Auto-scaling
autoscaling = [
    "kubernetes-client>=28.1.0",
    "prometheus-api-client>=0.5.3",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",  # For predictive scaling
]

# Helm integration
helm = [
    "python-helm>=0.2.0",
    "helm-templator>=0.1.0",
]

# Monitoring and observability
monitoring = [
    "grafana-client>=0.7.0",
    "datadog>=0.48.0",
    "newrelic>=9.4.0",
    "elastic-apm>=6.20.0",
    "jaeger-client>=4.8.0",
    "opentracing>=2.4.0",
    "zipkin>=0.2.3",
]

# Cloud integrations
aws = [
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    "awscli>=1.32.0",
    "aws-cdk-lib>=2.100.0",
]

azure = [
    "azure-identity>=1.15.0",
    "azure-mgmt-containerservice>=29.0.0",
    "azure-mgmt-resource>=23.1.0",
    "azure-cli>=2.55.0",
]

gcp = [
    "google-cloud-container>=2.35.0",
    "google-cloud-monitoring>=2.16.0",
    "google-cloud-logging>=3.8.0",
    "google-auth>=2.25.0",
]

# GitOps
gitops = [
    "gitpython>=3.1.40",
    "argocd-python-client>=0.1.0",
    "fluxcd-python>=0.1.0",
]

# Security
security = [
    "falco-python>=0.1.0",
    "twistlock-py>=0.1.0",
    "aqua-security>=0.1.0",
    "open-policy-agent>=0.1.0",
]

# Production extras
production = [
    "gunicorn>=21.2.0",
    "uvloop>=0.19.0",
    "orjson>=3.9.0",
    "msgpack>=1.0.0",
    "lz4>=4.3.0",
]

# All extras
all = [
    # Operators
    "kopf>=1.37.0",
    "pykube-ng>=22.9.0",
    "kubernetes-validate>=1.28.0",
    
    # Service mesh
    "istio-client>=0.2.0",
    "grpcio>=1.60.0",
    "protobuf>=4.25.0",
    
    # Auto-scaling
    "prometheus-api-client>=0.5.3",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    
    # Monitoring
    "grafana-client>=0.7.0",
    "datadog>=0.48.0",
    "jaeger-client>=4.8.0",
    
    # Cloud
    "boto3>=1.34.0",
    "google-cloud-container>=2.35.0",
    "azure-mgmt-containerservice>=29.0.0",
    
    # GitOps
    "gitpython>=3.1.40",
    "argocd-python-client>=0.1.0",
    
    # Production
    "gunicorn>=21.2.0",
    "uvloop>=0.19.0",
    "orjson>=3.9.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/pynomaly"
Repository = "https://github.com/yourusername/pynomaly"
Documentation = "https://docs.pynomaly.org/enterprise/cloud-native"
Issues = "https://github.com/yourusername/pynomaly/issues"
Changelog = "https://github.com/yourusername/pynomaly/blob/main/src/packages/enterprise/enterprise_cloud_native/CHANGELOG.md"

[project.scripts]
pynomaly-enterprise-cloud-native = "enterprise_cloud_native.presentation.cli.main:app"
pynomaly-operator = "enterprise_cloud_native.infrastructure.operators.main:main"

[tool.hatch.version]
source = "vcs"
root = "../../../../.."

[tool.hatch.build.targets.wheel]
packages = ["enterprise_cloud_native"]

# Tool configuration
[tool.ruff]
target-version = "py311"
line-length = 88
exclude = [
    "migrations",
    ".venv",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings  
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]

[tool.black]
target-version = ["py311"]
line-length = 88

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--tb=short",
    "--disable-warnings",
    "--color=yes",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "kubernetes: Kubernetes integration tests",
    "operators: Operator tests",
    "service_mesh: Service mesh tests",
    "autoscaling: Auto-scaling tests",
    "performance: Performance tests",
    "security: Security tests",
    "gitops: GitOps workflow tests",
    "slow: Slow-running tests",
]

[tool.coverage.run]
source = ["enterprise_cloud_native"]
branch = true
parallel = true

[tool.coverage.report]
show_missing = true
fail_under = 85
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]