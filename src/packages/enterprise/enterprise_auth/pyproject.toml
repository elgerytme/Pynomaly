[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "anomaly_detection-enterprise-auth"
dynamic = ["version"]
description = "Enterprise authentication and authorization for anomaly_detection"
authors = [{name = "anomaly_detection Enterprise Team", email = "enterprise@anomaly_detection.org"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
keywords = [
    "authentication", 
    "authorization", 
    "enterprise", 
    "sso", 
    "saml", 
    "oauth2",
    "rbac",
    "multi-tenant"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: System :: Systems Administration :: Authentication/Directory",
    "Topic :: Security",
    "Topic :: Internet :: WWW/HTTP :: Session",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Typing :: Typed",
]

dependencies = [
    # Core dependencies
    "pydantic>=2.9.0",
    "structlog>=24.4.0",
    "dependency-injector>=4.42.0",
    
    # Authentication & Security
    "pyjwt[crypto]>=2.10.1",
    "passlib[bcrypt]>=1.7.4",
    "cryptography>=41.0.0",
    "itsdangerous>=2.2.0",
    
    # SAML & OAuth2
    "python-saml>=1.16.0",
    "authlib>=1.3.0",
    "requests-oauthlib>=2.0.0",
    
    # LDAP Integration
    "python-ldap>=3.4.0",
    
    # Database & Caching
    "sqlalchemy>=2.0.36",
    "alembic>=1.13.0",
    "redis>=5.2.1",
    
    # API Framework
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.34.0",
    
    # Utilities
    "email-validator>=2.2.0",
    "python-multipart>=0.0.20",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.12.0",
    "factory-boy>=3.3.1",
    "faker>=33.1.0",
    "httpx>=0.28.1",
]

# Testing dependencies
test = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.12.0",
    "pytest-benchmark>=4.0.0",
    "factory-boy>=3.3.1",
    "faker>=33.1.0",
    "httpx>=0.28.1",
    "responses>=0.24.0",
]

# Linting and formatting
lint = [
    "ruff>=0.8.0",
    "black>=24.0.0",
    "mypy>=1.13.0",
    "bandit>=1.8.0",
]

# Documentation
docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.27.0",
]

# SAML extras
saml = [
    "python-saml>=1.16.0",
    "xmlsec>=1.3.14",
]

# LDAP extras  
ldap = [
    "python-ldap>=3.4.0",
    "ldap3>=2.9.1",
]

# Production extras
production = [
    "gunicorn>=21.2.0",
    "prometheus-client>=0.21.1",
    "opentelemetry-api>=1.29.0",
    "opentelemetry-sdk>=1.29.0",
]

# All extras
all = [
    "python-saml>=1.16.0",
    "xmlsec>=1.3.14",
    "python-ldap>=3.4.0", 
    "ldap3>=2.9.1",
    "gunicorn>=21.2.0",
    "prometheus-client>=0.21.1",
    "opentelemetry-api>=1.29.0",
    "opentelemetry-sdk>=1.29.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/anomaly_detection"
Repository = "https://github.com/yourusername/anomaly_detection"
Documentation = "https://docs.anomaly_detection.org/enterprise/auth"
Issues = "https://github.com/yourusername/anomaly_detection/issues"
Changelog = "https://github.com/yourusername/anomaly_detection/blob/main/src/packages/enterprise/enterprise_auth/CHANGELOG.md"

[project.scripts]
anomaly_detection-enterprise-auth = "enterprise_auth.presentation.cli.main:app"

[tool.hatch.version]
source = "vcs"
root = "../../../../.."

[tool.hatch.build.targets.wheel]
packages = ["enterprise_auth"]

# Tool configuration
[tool.ruff]
target-version = "py311"
line-length = 88
exclude = [
    "migrations",
    ".venv",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings  
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]

[tool.black]
target-version = ["py311"]
line-length = 88

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--tb=short",
    "--disable-warnings",
    "--color=yes",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "auth: Authentication tests",
    "saml: SAML tests",
    "oauth: OAuth tests",
    "ldap: LDAP tests",
    "rbac: Role-based access control tests",
    "multitenant: Multi-tenant tests",
]

[tool.coverage.run]
source = ["enterprise_auth"]
branch = true

[tool.coverage.report]
show_missing = true
fail_under = 90
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]