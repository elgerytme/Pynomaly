[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "pynomaly-enterprise-mlops"
dynamic = ["version"]
description = "Enterprise MLOps and monitoring integrations with MLflow, Kubeflow, Datadog, and New Relic for Pynomaly"
authors = [{name = "Pynomaly Enterprise Team", email = "enterprise@pynomaly.org"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
keywords = [
    "mlops",
    "mlflow",
    "kubeflow", 
    "monitoring",
    "datadog",
    "newrelic",
    "prometheus",
    "enterprise"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Data Scientists",
    "Intended Audience :: System Administrators", 
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Monitoring",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Typing :: Typed",
]

dependencies = [
    # Core dependencies
    "pydantic>=2.9.0",
    "structlog>=24.4.0",
    "dependency-injector>=4.42.0",
    
    # Async and concurrency
    "asyncio>=3.4.3",
    "aiofiles>=24.1.0",
    "aiocache>=0.12.3", 
    "aiohttp>=3.9.0",
    
    # Data processing and ML
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    
    # API Framework
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.34.0",
    
    # Database & Storage
    "sqlalchemy>=2.0.36",
    "redis>=5.2.1",
    
    # HTTP clients
    "httpx>=0.28.1",
    "requests>=2.31.0",
    
    # Utilities
    "python-dateutil>=2.8.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "pyyaml>=6.0",
    "jsonschema>=4.20.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.12.0",
    "factory-boy>=3.3.1",
    "faker>=33.1.0",
    "httpx>=0.28.1",
]

# Testing dependencies
test = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0", 
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.12.0",
    "pytest-benchmark>=4.0.0",
    "factory-boy>=3.3.1",
    "faker>=33.1.0",
    "httpx>=0.28.1",
    "responses>=0.24.0",
    "testcontainers>=4.0.0",
]

# Linting and formatting
lint = [
    "ruff>=0.8.0",
    "black>=24.0.0",
    "mypy>=1.13.0",
    "bandit>=1.8.0",
]

# Documentation
docs = [
    "mkdocs>=1.6.0", 
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.27.0",
]

# MLflow integration
mlflow = [
    "mlflow>=2.10.0",
    "mlflow-skinny>=2.10.0",
    "boto3>=1.34.0",  # For S3 artifact store
    "azure-storage-blob>=12.19.0",  # For Azure blob storage
    "google-cloud-storage>=2.10.0",  # For GCS
]

# Kubeflow integration
kubeflow = [
    "kfp>=2.6.0",  # Kubeflow Pipelines SDK
    "kubeflow-katib>=0.16.0",
    "kubernetes>=28.1.0",
    "kfserving>=0.11.0",
]

# Weights & Biases integration
wandb = [
    "wandb>=0.16.0",
    "plotly>=5.17.0",
]

# Neptune integration  
neptune = [
    "neptune>=1.8.0",
    "neptune-client>=1.8.0",
]

# Datadog monitoring
datadog = [
    "datadog>=0.48.0",
    "datadog-api-client>=2.25.0",
]

# New Relic monitoring
newrelic = [
    "newrelic>=9.4.0",
    "newrelic-telemetry-sdk>=0.8.0",
]

# Prometheus monitoring
prometheus = [
    "prometheus-client>=0.21.1",
    "prometheus-api-client>=0.5.3",
]

# Grafana integration
grafana = [
    "grafana-client>=0.7.0",
    "grafana-api>=1.0.3",
]

# Elastic APM
elastic = [
    "elastic-apm>=6.20.0",
    "elasticsearch>=8.12.0",
]

# Jaeger tracing
jaeger = [
    "jaeger-client>=4.8.0",
    "opentracing>=2.4.0",
]

# OpenTelemetry
opentelemetry = [
    "opentelemetry-api>=1.29.0",
    "opentelemetry-sdk>=1.29.0",
    "opentelemetry-instrumentation>=0.50b0",
    "opentelemetry-exporter-prometheus>=1.12.0",
    "opentelemetry-exporter-jaeger>=1.21.0",
]

# Model serving and deployment
serving = [
    "bentoml>=1.2.0",
    "seldon-core>=1.18.0",
    "mlserver>=1.5.0",
    "torchserve>=0.9.0",
    "tensorflow-serving-api>=2.15.0",
]

# Model versioning and registry
registry = [
    "dvc>=3.44.0",
    "dvc[s3]>=3.44.0",
    "modelstore>=0.0.89",
]

# Feature store integration
feature-store = [
    "feast>=0.35.0",
    "hopsworks>=3.4.0",
    "tecton>=0.9.0",
]

# A/B testing and experimentation
experimentation = [
    "growthbook>=1.0.0",
    "optimizely-sdk>=5.0.0",
    "statsig>=1.20.0",
]

# Data drift and model monitoring
drift = [
    "evidently>=0.4.16",
    "deepchecks>=0.17.0",
    "alibi-detect>=0.12.0",
    "whylogs>=1.3.0",
]

# Security and compliance
security = [
    "cryptography>=41.0.0",
    "azure-keyvault-secrets>=4.8.0",
    "google-cloud-secret-manager>=2.18.0",
    "boto3>=1.34.0",  # AWS Secrets Manager
]

# Production extras
production = [
    "gunicorn>=21.2.0",
    "uvloop>=0.19.0",
    "orjson>=3.9.0",
    "msgpack>=1.0.0",
    "lz4>=4.3.0",
]

# All extras
all = [
    # MLOps platforms
    "mlflow>=2.10.0",
    "kfp>=2.6.0",
    "wandb>=0.16.0",
    "neptune>=1.8.0",
    
    # Monitoring platforms
    "datadog>=0.48.0", 
    "newrelic>=9.4.0",
    "prometheus-client>=0.21.1",
    "grafana-client>=0.7.0",
    
    # Observability
    "opentelemetry-api>=1.29.0",
    "jaeger-client>=4.8.0",
    "elastic-apm>=6.20.0",
    
    # Model serving
    "bentoml>=1.2.0",
    "seldon-core>=1.18.0",
    "mlserver>=1.5.0",
    
    # Feature stores
    "feast>=0.35.0",
    "hopsworks>=3.4.0",
    
    # Experimentation
    "growthbook>=1.0.0",
    "optimizely-sdk>=5.0.0",
    
    # Data drift monitoring
    "evidently>=0.4.16",
    "deepchecks>=0.17.0",
    "alibi-detect>=0.12.0",
    
    # Security
    "cryptography>=41.0.0",
    "azure-keyvault-secrets>=4.8.0",
    
    # Production
    "gunicorn>=21.2.0",
    "uvloop>=0.19.0",
    "orjson>=3.9.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/pynomaly"
Repository = "https://github.com/yourusername/pynomaly"
Documentation = "https://docs.pynomaly.org/enterprise/mlops"
Issues = "https://github.com/yourusername/pynomaly/issues"
Changelog = "https://github.com/yourusername/pynomaly/blob/main/src/packages/enterprise/enterprise_mlops/CHANGELOG.md"

[project.scripts]
pynomaly-enterprise-mlops = "enterprise_mlops.presentation.cli.main:app"
pynomaly-model-deploy = "enterprise_mlops.presentation.cli.deploy:app"

[tool.hatch.version]
source = "vcs"
root = "../../../../.."

[tool.hatch.build.targets.wheel]
packages = ["enterprise_mlops"]

# Tool configuration
[tool.ruff]
target-version = "py311"
line-length = 88
exclude = [
    "migrations",
    ".venv",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]

[tool.black]
target-version = ["py311"]
line-length = 88

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--tb=short",
    "--disable-warnings",
    "--color=yes",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests", 
    "mlflow: MLflow integration tests",
    "kubeflow: Kubeflow integration tests",
    "datadog: Datadog integration tests",
    "newrelic: New Relic integration tests",
    "monitoring: Monitoring tests",
    "performance: Performance tests",
    "security: Security tests",
    "slow: Slow-running tests",
]

[tool.coverage.run]
source = ["enterprise_mlops"]
branch = true
parallel = true

[tool.coverage.report]
show_missing = true
fail_under = 85
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError", 
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]