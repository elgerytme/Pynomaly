[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pynomaly-data-profiling"
dynamic = ["version"]
description = "Comprehensive automated data profiling, schema inference, and data quality assessment"
authors = [{name = "Pynomaly Team", email = "team@pynomaly.io"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
keywords = ["data-profiling", "schema-inference", "data-quality", "data-discovery", "data-analysis"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Database",
    "Topic :: Software Development :: Quality Assurance",
    "Typing :: Typed",
]

dependencies = [
    "pandas>=2.1.0",
    "polars>=0.20.0", 
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
    "pydantic>=2.10.4",
    "structlog>=24.4.0",
    "dependency-injector>=4.42.0",
    "pyarrow>=14.0.0",
]

[project.optional-dependencies]
# Statistical profiling
statistics = [
    "statsmodels>=0.14.0",
    "pingouin>=0.5.4",
    "scipy>=1.11.0",
]

# Pattern recognition and ML
pattern-analysis = [
    "scikit-learn>=1.3.0",
    "regex>=2023.12.0",
    "fuzzywuzzy>=0.18.0",
    "python-levenshtein>=0.25.0",
    "phonenumbers>=8.13.0",
    "email-validator>=2.1.0",
]

# Database connectivity
database = [
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "pymongo>=4.6.0",
    "redis>=5.0.0",
    "clickhouse-driver>=0.2.0",
    "cx-oracle>=8.3.0",
    "pyodbc>=5.0.0",
    "cassandra-driver>=3.29.0",
]

# NoSQL databases
nosql = [
    "pymongo>=4.6.0",
    "cassandra-driver>=3.29.0",
    "redis>=5.0.0",
    "elasticsearch>=8.11.0",
    "neo4j>=5.15.0",
]

# Cloud data warehouses
cloud-warehouses = [
    "snowflake-connector-python>=3.6.0",
    "google-cloud-bigquery>=3.13.0",
    "azure-storage-blob>=12.19.0",
    "databricks-sql-connector>=3.0.0",
]

# Cloud storage
cloud = [
    "boto3>=1.34.0",
    "google-cloud-storage>=2.10.0",
    "azure-storage-blob>=12.19.0",
    "s3fs>=2024.1.0",
    "gcsfs>=2024.1.0",
    "adlfs>=2024.1.0",
]

# Streaming sources
streaming = [
    "kafka-python>=2.0.2",
    "aiokafka>=0.10.0",
    "apache-beam[gcp]>=2.53.0",
    "pyspark>=3.5.0",
]

# File format support
file-formats = [
    "openpyxl>=3.1.0",
    "xlsxwriter>=3.1.0",
    "lxml>=4.9.0",
    "beautifulsoup4>=4.12.0",
    "avro>=1.11.0",
    "fastavro>=1.9.0",
]

# Distributed processing
distributed = [
    "dask[complete]>=2024.1.0",
    "ray[data]>=2.8.0",
    "pyspark>=3.5.0",
    "modin[ray]>=0.25.0",
]

# Visualization
visualization = [
    "plotly>=5.17.0",
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
    "bokeh>=3.3.0",
]

# Quality assessment
quality = [
    "great-expectations>=0.18.0",
    "pandera>=0.18.0",
    "evidently>=0.4.0",
    "deepdiff>=6.7.0",
]

# Schema tools
schema = [
    "jsonschema>=4.20.0",
    "pydantic>=2.10.4",
    "marshmallow>=3.20.0",
    "cerberus>=1.3.5",
]

# Enterprise features
enterprise = [
    "apache-atlas-client>=1.0.0",
    "apache-airflow>=2.8.0",
    "prefect>=2.14.0",
]

dev = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.115.0",
    "factory-boy>=3.3.1",
    "faker>=33.1.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

test = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.115.0",
    "factory-boy>=3.3.1",
    "faker>=33.1.0",
]

all = [
    "pynomaly-data-profiling[statistics,pattern-analysis,database,nosql,cloud-warehouses,cloud,streaming,file-formats,distributed,visualization,quality,schema,enterprise]"
]

[tool.hatch.version]
source = "vcs"
root = "../../.."

[tool.hatch.build.targets.wheel]
packages = ["."]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = ["E", "W", "F", "I", "B", "C4", "UP", "SIM", "TCH"]
ignore = ["B008", "E501"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "ARG"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose", 
    "--tb=short",
    "--disable-warnings",
    "--color=yes",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "performance: Performance tests",
    "slow: Slow running tests",
    "database: Database connectivity tests",
    "cloud: Cloud storage tests",
    "streaming: Streaming data tests",
    "large_data: Large dataset tests",
]