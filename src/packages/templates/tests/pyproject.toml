[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "template-tests"
version = "0.1.0"
description = "Comprehensive test suite for project templates"
authors = [
    {name = "Template Team", email = "templates@company.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
keywords = ["templates", "testing", "code-generation", "scaffolding"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Testing",
    "Typing :: Typed",
]

# Production dependencies
dependencies = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.12.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "black>=24.0.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",  
    "pre-commit>=4.0.0",
    "bandit>=1.7.10",
    "safety>=3.3.0",
]

# Testing dependencies (extended)
test = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.12.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.6.0",
    "pytest-timeout>=2.3.0",
    "pytest-randomly>=3.15.0",
    "hypothesis>=6.115.0",
    "factory-boy>=3.3.1",
    "faker>=33.1.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocs-mermaid2-plugin>=1.3.0",
    "mkdocstrings[python]>=0.27.0",
    "mike>=2.1.0",
]

# Performance testing
performance = [
    "locust>=2.31.0",
    "memory-profiler>=0.61.0",
    "py-spy>=0.3.14",
    "psutil>=6.1.0",
]

# Security testing
security = [
    "bandit>=1.7.10",
    "safety>=3.3.0",
    "semgrep>=1.95.0",
    "pip-audit>=2.7.0",
]

# Template-specific testing dependencies
templates = [
    "jinja2>=3.1.4",
    "cookiecutter>=2.6.0",
    "jsonschema>=4.23.0",
    "pyyaml>=6.0.2",
]

# All optional dependencies
all = [
    "template-tests[dev,test,docs,performance,security,templates]"
]

[tool.hatch.build.targets.wheel]
packages = ["."]

[tool.black]
line-length = 100
target-version = ['py311']

[tool.ruff]
line-length = 100
select = ["E", "F", "I", "N", "W", "D", "UP", "S", "B", "A", "C4", "T20", "SIM", "RET"]
ignore = ["D100", "D104", "D107", "D212", "D213"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
addopts = "-ra -q --strict-markers --cov=templates --cov-report=term-missing --cov-report=xml --cov-report=html"
testpaths = ["unit", "integration", "e2e", "performance"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests for individual template components",
    "integration: Integration tests for template system",
    "e2e: End-to-end template generation tests",
    "performance: Performance tests for template processing",
    "slow: Slow running tests",
    "template_validation: Template validation tests",
    "template_generation: Template generation tests",
    "template_consistency: Template consistency tests"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.coverage.run]
source = ["../"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/.pytest_cache/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
fail_under = 95
precision = 2
show_missing = true
skip_covered = false
skip_empty = true

[tool.coverage.html]
directory = "htmlcov"
title = "Template Tests Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"