"""Main FastAPI application with HTMX and Tailwind CSS."""

from contextlib import asynccontextmanager
from pathlib import Path

import structlog
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

from {{package_name}}.api import htmx, pages
from {{package_name}}.core.config import settings
from {{package_name}}.core.logging import setup_logging
from {{package_name}}.db.session import init_db

logger = structlog.get_logger()

BASE_DIR = Path(__file__).resolve().parent
templates = Jinja2Templates(directory=str(BASE_DIR / "templates"))


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan manager."""
    setup_logging()
    logger.info("Starting up {{package_name}}", version=app.version)
    await init_db()
    yield
    logger.info("Shutting down {{package_name}}")


app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.VERSION,
    lifespan=lifespan,
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.BACKEND_CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mount static files
app.mount("/static", StaticFiles(directory=str(BASE_DIR / "static")), name="static")

# Include routers
app.include_router(pages.router)
app.include_router(htmx.router, prefix="/htmx")


@app.exception_handler(404)
async def not_found_handler(request: Request, exc):
    """404 error handler."""
    return templates.TemplateResponse(
        "pages/404.html",
        {"request": request},
        status_code=404,
    )


@app.exception_handler(500)
async def internal_error_handler(request: Request, exc):
    """500 error handler."""
    return templates.TemplateResponse(
        "pages/500.html",
        {"request": request},
        status_code=500,
    )