"""Item endpoints."""

from typing import List

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession

from {{package_name}}.db.session import get_db
from {{package_name}}.schemas.item import Item, ItemCreate, ItemUpdate
from {{package_name}}.services import item as item_service

router = APIRouter()


@router.get("/", response_model=List[Item])
async def read_items(
    skip: int = 0,
    limit: int = 100,
    db: AsyncSession = Depends(get_db),
) -> List[Item]:
    """Retrieve items."""
    items = await item_service.get_multi(db, skip=skip, limit=limit)
    return items


@router.post("/", response_model=Item, status_code=status.HTTP_201_CREATED)
async def create_item(
    *,
    db: AsyncSession = Depends(get_db),
    item_in: ItemCreate,
) -> Item:
    """Create new item."""
    item = await item_service.create(db, obj_in=item_in)
    return item


@router.get("/{item_id}", response_model=Item)
async def read_item(
    *,
    db: AsyncSession = Depends(get_db),
    item_id: int,
) -> Item:
    """Get item by ID."""
    item = await item_service.get(db, id=item_id)
    if not item:
        raise HTTPException(status_code=404, detail="Item not found")
    return item


@router.put("/{item_id}", response_model=Item)
async def update_item(
    *,
    db: AsyncSession = Depends(get_db),
    item_id: int,
    item_in: ItemUpdate,
) -> Item:
    """Update item."""
    item = await item_service.get(db, id=item_id)
    if not item:
        raise HTTPException(status_code=404, detail="Item not found")
    item = await item_service.update(db, db_obj=item, obj_in=item_in)
    return item


@router.delete("/{item_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_item(
    *,
    db: AsyncSession = Depends(get_db),
    item_id: int,
) -> None:
    """Delete item."""
    item = await item_service.get(db, id=item_id)
    if not item:
        raise HTTPException(status_code=404, detail="Item not found")
    await item_service.remove(db, id=item_id)