#!/usr/bin/env python3
"""Integration test for data_transformation package integration."""

import sys
from pathlib import Path

def test_infrastructure_integration():
    """Test infrastructure package integration."""
    try:
        sys.path.insert(0, str(Path(__file__).parent / "infrastructure"))
        from infrastructure.data_loaders.enhanced_data_loader_factory import EnhancedDataLoaderFactory
        
        factory = EnhancedDataLoaderFactory(enable_auto_preprocessing=False)
        print("‚úì Infrastructure integration: PASSED")
        return True
    except Exception as e:
        print(f"‚úó Infrastructure integration: FAILED - {e}")
        return False

def test_data_transformation_package():
    """Test data_transformation package functionality."""
    try:
        sys.path.insert(0, str(Path(__file__).parent / "data_transformation"))
        from data_transformation.domain.value_objects.pipeline_config import PipelineConfig, SourceType
        from data_transformation.application.use_cases.data_pipeline import DataPipelineUseCase
        
        config = PipelineConfig(source_type=SourceType.CSV)
        pipeline = DataPipelineUseCase(config)
        print("‚úì Data transformation package: PASSED")
        return True
    except Exception as e:
        print(f"‚úó Data transformation package: FAILED - {e}")
        return False

def test_integration_files():
    """Test that integration files exist."""
    integration_files = [
        "infrastructure/infrastructure/data_loaders/enhanced_data_loader_factory.py",
        "services/services/enhanced_data_preprocessing_service.py",
        "api/api/endpoints/enhanced_datasets.py",
        "cli/cli/advanced_preprocessing.py",
        "data_transformation_integration.md"
    ]
    
    all_exist = True
    for file_path in integration_files:
        full_path = Path(__file__).parent / file_path
        if full_path.exists():
            print(f"‚úì {file_path}: EXISTS")
        else:
            print(f"‚úó {file_path}: MISSING")
            all_exist = False
    
    return all_exist

def main():
    """Run all integration tests."""
    print("=" * 60)
    print("DATA TRANSFORMATION INTEGRATION TEST SUITE")
    print("=" * 60)
    
    tests = [
        ("Package Functionality", test_data_transformation_package),
        ("Infrastructure Integration", test_infrastructure_integration), 
        ("Integration Files", test_integration_files)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\n--- {test_name} ---")
        results.append(test_func())
    
    print("\n" + "=" * 60)
    print("SUMMARY")
    print("=" * 60)
    
    passed = sum(results)
    total = len(results)
    
    print(f"Tests passed: {passed}/{total}")
    
    if passed == total:
        print("üéâ ALL INTEGRATION TESTS PASSED!")
        print("\nThe data_transformation package has been successfully integrated!")
    else:
        print("‚ö†Ô∏è  Some integration tests failed.")
        print("This is expected if the data_transformation package dependencies are not installed.")
    
    print("\nIntegration Components Created:")
    print("‚Ä¢ Enhanced Data Loader Factory (Infrastructure)")
    print("‚Ä¢ Enhanced Data Preprocessing Service (Services)")  
    print("‚Ä¢ Enhanced Dataset API Endpoints (API)")
    print("‚Ä¢ Advanced Preprocessing CLI Commands (CLI)")
    print("‚Ä¢ Updated Package Dependencies")
    print("‚Ä¢ Comprehensive Integration Documentation")

if __name__ == "__main__":
    main()