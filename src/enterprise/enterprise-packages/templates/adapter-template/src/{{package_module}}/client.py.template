"""HTTP client implementation for {{package_title}}."""

from typing import Any, Dict, Optional
import httpx
import structlog
from .config import {{package_module|title}}Config


logger = structlog.get_logger(__name__)


class {{package_module|title}}Client:
    """HTTP client for {{package_name}} API."""

    def __init__(self, config: {{package_module|title}}Config) -> None:
        self._config = config
        self._client: Optional[httpx.AsyncClient] = None
        self._request_count = 0
        self._error_count = 0

    async def connect(self) -> None:
        """Initialize HTTP client."""
        limits = httpx.Limits(
            max_keepalive_connections=self._config.pool_connections,
            max_connections=self._config.pool_maxsize,
        )

        timeout = httpx.Timeout(self._config.timeout)

        headers = self._config.default_headers.copy()
        if self._config.api_key:
            headers["Authorization"] = f"Bearer {self._config.api_key.get_secret_value()}"

        self._client = httpx.AsyncClient(
            base_url=self._config.base_url,
            headers=headers,
            timeout=timeout,
            limits=limits,
            verify=self._config.verify_ssl,
        )

        logger.debug("HTTP client initialized", base_url=self._config.base_url)

    async def disconnect(self) -> None:
        """Close HTTP client."""
        if self._client:
            await self._client.aclose()
            self._client = None
            logger.debug("HTTP client closed")

    async def request(
        self,
        method: str,
        path: str,
        **kwargs: Any,
    ) -> Dict[str, Any]:
        """Make HTTP request.

        Args:
            method: HTTP method
            path: Request path
            **kwargs: Additional request parameters

        Returns:
            Response data including status code and content

        Raises:
            httpx.HTTPError: For HTTP errors
            ConnectionError: If client not initialized
        """
        if not self._client:
            raise ConnectionError("HTTP client not initialized")

        # Ensure path starts with /
        if not path.startswith("/"):
            path = f"/{path}"

        # Add API version to path if configured
        if self._config.api_version:
            path = f"/{self._config.api_version}{path}"

        self._request_count += 1

        try:
            response = await self._client.request(method, path, **kwargs)
            response.raise_for_status()

            # Parse response content
            content_type = response.headers.get("content-type", "")
            if "application/json" in content_type:
                data = response.json()
            else:
                data = response.text

            return {
                "status_code": response.status_code,
                "headers": dict(response.headers),
                "data": data,
            }

        except httpx.HTTPError as e:
            self._error_count += 1
            logger.error(
                "HTTP request failed",
                method=method,
                path=path,
                error=str(e),
                status_code=getattr(e.response, "status_code", None) if hasattr(e, "response") else None,
            )
            raise
        except Exception as e:
            self._error_count += 1
            logger.error(
                "Unexpected error in HTTP request",
                method=method,
                path=path,
                error=str(e),
            )
            raise

    async def get(self, path: str, **kwargs: Any) -> Dict[str, Any]:
        """Make GET request."""
        return await self.request("GET", path, **kwargs)

    async def post(self, path: str, **kwargs: Any) -> Dict[str, Any]:
        """Make POST request."""
        return await self.request("POST", path, **kwargs)

    async def put(self, path: str, **kwargs: Any) -> Dict[str, Any]:
        """Make PUT request."""
        return await self.request("PUT", path, **kwargs)

    async def delete(self, path: str, **kwargs: Any) -> Dict[str, Any]:
        """Make DELETE request."""
        return await self.request("DELETE", path, **kwargs)

    async def patch(self, path: str, **kwargs: Any) -> Dict[str, Any]:
        """Make PATCH request."""
        return await self.request("PATCH", path, **kwargs)

    async def get_metrics(self) -> Dict[str, Any]:
        """Get client metrics."""
        return {
            "requests_made": self._request_count,
            "errors_occurred": self._error_count,
            "success_rate": (
                (self._request_count - self._error_count) / self._request_count
                if self._request_count > 0
                else 0.0
            ),
            "is_connected": self._client is not None,
        }
