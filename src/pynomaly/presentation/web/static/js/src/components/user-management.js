/**
 * User Management Component
 * 
 * Comprehensive user management interface with role-based access control,
 * user creation, editing, and permissions management
 */

import { AuthService, RBACHelper } from '../services/auth-service.js';
import { MultiStepForm } from './multi-step-form.js';

export class UserManagement {
    constructor(container, options = {}) {
        this.container = typeof container === 'string' ? document.querySelector(container) : container;
        this.options = {
            authService: options.authService || new AuthService(),
            enableRoleManagement: true,
            enablePermissionManagement: true,
            enableBulkOperations: true,
            pageSize: 20,
            theme: 'light',
            ...options
        };
        
        this.authService = this.options.authService;
        this.rbacHelper = new RBACHelper(this.authService);
        this.users = [];
        this.filteredUsers = [];
        this.currentPage = 1;
        this.sortField = 'username';
        this.sortDirection = 'asc';
        this.filters = {};
        this.selectedUsers = new Set();
        
        this.roles = [
            { id: 'admin', name: 'Administrator', description: 'Full system access' },
            { id: 'analyst', name: 'Data Analyst', description: 'View and analyze data' },
            { id: 'operator', name: 'System Operator', description: 'Monitor and operate systems' },
            { id: 'viewer', name: 'Viewer', description: 'Read-only access' }
        ];
        
        this.permissions = [
            { id: 'users:read', name: 'View Users', category: 'User Management' },
            { id: 'users:write', name: 'Manage Users', category: 'User Management' },
            { id: 'users:delete', name: 'Delete Users', category: 'User Management' },
            { id: 'datasets:read', name: 'View Datasets', category: 'Data Management' },
            { id: 'datasets:write', name: 'Manage Datasets', category: 'Data Management' },
            { id: 'datasets:delete', name: 'Delete Datasets', category: 'Data Management' },
            { id: 'models:read', name: 'View Models', category: 'Model Management' },
            { id: 'models:write', name: 'Manage Models', category: 'Model Management' },
            { id: 'models:delete', name: 'Delete Models', category: 'Model Management' },
            { id: 'system:admin', name: 'System Administration', category: 'System' },
            { id: 'system:config', name: 'System Configuration', category: 'System' }
        ];
        
        this.init();
    }
    
    init() {
        this.checkPermissions();
        this.setupContainer();
        this.bindEvents();
        this.loadUsers();
    }
    
    checkPermissions() {
        if (!this.authService.hasPermission('users:read')) {
            throw new Error('Insufficient permissions to access user management');
        }
    }
    
    setupContainer() {
        this.container.classList.add('user-management');
        this.container.innerHTML = `
            <div class="user-management-header">
                <div class="header-title">
                    <h2>User Management</h2>
                    <p class="subtitle">Manage users, roles, and permissions</p>
                </div>
                <div class="header-actions">
                    ${this.rbacHelper.checkAuthorization({ permissions: ['users:write'] }) ? 
                        '<button class="btn btn-primary" id="add-user-btn">Add User</button>' : ''
                    }
                    ${this.rbacHelper.checkAuthorization({ permissions: ['users:write'] }) ? 
                        '<button class="btn btn-secondary" id="bulk-actions-btn" disabled>Bulk Actions</button>' : ''
                    }
                    <button class="btn btn-ghost" id="refresh-btn">Refresh</button>
                </div>
            </div>
            
            <div class="user-management-filters">
                <div class="filter-group">
                    <input type="text" id="search-input" placeholder="Search users..." class="form-input">
                    <select id="role-filter" class="form-select">
                        <option value="">All Roles</option>
                        ${this.roles.map(role => `<option value="${role.id}">${role.name}</option>`).join('')}
                    </select>
                    <select id="status-filter" class="form-select">
                        <option value="">All Status</option>
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                        <option value="pending">Pending</option>
                    </select>
                    <button class="btn btn-ghost btn-sm" id="clear-filters">Clear</button>
                </div>
            </div>
            
            <div class="user-management-table">
                <div class="table-container">
                    <table class="users-table">
                        <thead>
                            <tr>
                                <th class="checkbox-column">
                                    <input type="checkbox" id="select-all">
                                </th>
                                <th class="sortable" data-field="username">Username</th>
                                <th class="sortable" data-field="email">Email</th>
                                <th class="sortable" data-field="fullName">Full Name</th>
                                <th>Roles</th>
                                <th class="sortable" data-field="status">Status</th>
                                <th class="sortable" data-field="lastLogin">Last Login</th>
                                <th class="sortable" data-field="createdAt">Created</th>
                                <th class="actions-column">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="users-tbody">
                            <!-- Users will be populated here -->
                        </tbody>
                    </table>
                </div>
                
                <div class="table-pagination">
                    <div class="pagination-info">
                        <span id="pagination-info-text">Showing 0 of 0 users</span>
                    </div>
                    <div class="pagination-controls">
                        <button class="btn btn-sm btn-ghost" id="prev-page" disabled>Previous</button>
                        <span id="page-numbers"></span>
                        <button class="btn btn-sm btn-ghost" id="next-page" disabled>Next</button>
                    </div>
                </div>
            </div>
            
            <!-- Modals will be inserted here -->
            <div id="modal-container"></div>
        `;
    }
    
    bindEvents() {
        // Header actions
        const addUserBtn = this.container.querySelector('#add-user-btn');
        if (addUserBtn) {
            addUserBtn.onclick = () => this.showAddUserModal();
        }
        
        const bulkActionsBtn = this.container.querySelector('#bulk-actions-btn');
        if (bulkActionsBtn) {
            bulkActionsBtn.onclick = () => this.showBulkActionsModal();
        }
        
        this.container.querySelector('#refresh-btn').onclick = () => this.loadUsers();
        
        // Filters
        this.container.querySelector('#search-input').oninput = (e) => {\n            this.filters.search = e.target.value;\n            this.applyFilters();\n        };\n        \n        this.container.querySelector('#role-filter').onchange = (e) => {\n            this.filters.role = e.target.value;\n            this.applyFilters();\n        };\n        \n        this.container.querySelector('#status-filter').onchange = (e) => {\n            this.filters.status = e.target.value;\n            this.applyFilters();\n        };\n        \n        this.container.querySelector('#clear-filters').onclick = () => this.clearFilters();\n        \n        // Table events\n        this.container.querySelector('#select-all').onchange = (e) => {\n            this.toggleAllUsers(e.target.checked);\n        };\n        \n        // Sortable headers\n        this.container.querySelectorAll('.sortable').forEach(header => {\n            header.onclick = () => this.sortUsers(header.dataset.field);\n        });\n        \n        // Pagination\n        this.container.querySelector('#prev-page').onclick = () => this.previousPage();\n        this.container.querySelector('#next-page').onclick = () => this.nextPage();\n    }\n    \n    async loadUsers() {\n        try {\n            this.showLoading(true);\n            this.users = await this.authService.getUsers();\n            this.applyFilters();\n        } catch (error) {\n            this.showError('Failed to load users: ' + error.message);\n        } finally {\n            this.showLoading(false);\n        }\n    }\n    \n    applyFilters() {\n        this.filteredUsers = this.users.filter(user => {\n            // Search filter\n            if (this.filters.search) {\n                const searchTerm = this.filters.search.toLowerCase();\n                const searchableFields = ['username', 'email', 'fullName'];\n                const matches = searchableFields.some(field => \n                    user[field] && user[field].toLowerCase().includes(searchTerm)\n                );\n                if (!matches) return false;\n            }\n            \n            // Role filter\n            if (this.filters.role) {\n                if (!user.roles || !user.roles.includes(this.filters.role)) {\n                    return false;\n                }\n            }\n            \n            // Status filter\n            if (this.filters.status) {\n                if (user.status !== this.filters.status) {\n                    return false;\n                }\n            }\n            \n            return true;\n        });\n        \n        this.sortFilteredUsers();\n        this.currentPage = 1;\n        this.renderUsers();\n        this.updatePagination();\n    }\n    \n    sortFilteredUsers() {\n        this.filteredUsers.sort((a, b) => {\n            let aValue = a[this.sortField];\n            let bValue = b[this.sortField];\n            \n            // Handle different data types\n            if (this.sortField === 'lastLogin' || this.sortField === 'createdAt') {\n                aValue = new Date(aValue || 0);\n                bValue = new Date(bValue || 0);\n            } else if (typeof aValue === 'string') {\n                aValue = aValue.toLowerCase();\n                bValue = (bValue || '').toLowerCase();\n            }\n            \n            if (aValue < bValue) return this.sortDirection === 'asc' ? -1 : 1;\n            if (aValue > bValue) return this.sortDirection === 'asc' ? 1 : -1;\n            return 0;\n        });\n    }\n    \n    sortUsers(field) {\n        if (this.sortField === field) {\n            this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';\n        } else {\n            this.sortField = field;\n            this.sortDirection = 'asc';\n        }\n        \n        this.sortFilteredUsers();\n        this.renderUsers();\n        this.updateSortIndicators();\n    }\n    \n    updateSortIndicators() {\n        this.container.querySelectorAll('.sortable').forEach(header => {\n            header.classList.remove('sort-asc', 'sort-desc');\n            if (header.dataset.field === this.sortField) {\n                header.classList.add(`sort-${this.sortDirection}`);\n            }\n        });\n    }\n    \n    renderUsers() {\n        const tbody = this.container.querySelector('#users-tbody');\n        const startIndex = (this.currentPage - 1) * this.options.pageSize;\n        const endIndex = startIndex + this.options.pageSize;\n        const pageUsers = this.filteredUsers.slice(startIndex, endIndex);\n        \n        tbody.innerHTML = pageUsers.map(user => this.renderUserRow(user)).join('');\n        \n        // Bind row events\n        tbody.querySelectorAll('.user-checkbox').forEach(checkbox => {\n            checkbox.onchange = () => this.updateSelectedUsers();\n        });\n        \n        tbody.querySelectorAll('.edit-user-btn').forEach(btn => {\n            btn.onclick = () => this.showEditUserModal(btn.dataset.userId);\n        });\n        \n        tbody.querySelectorAll('.delete-user-btn').forEach(btn => {\n            btn.onclick = () => this.confirmDeleteUser(btn.dataset.userId);\n        });\n        \n        tbody.querySelectorAll('.toggle-status-btn').forEach(btn => {\n            btn.onclick = () => this.toggleUserStatus(btn.dataset.userId);\n        });\n    }\n    \n    renderUserRow(user) {\n        return `\n            <tr class=\"user-row ${user.status}\" data-user-id=\"${user.id}\">\n                <td class=\"checkbox-column\">\n                    <input type=\"checkbox\" class=\"user-checkbox\" value=\"${user.id}\">\n                </td>\n                <td class=\"username-cell\">\n                    <div class=\"user-info\">\n                        <div class=\"avatar\">${this.getUserAvatar(user)}</div>\n                        <div class=\"username\">${user.username}</div>\n                    </div>\n                </td>\n                <td class=\"email-cell\">${user.email}</td>\n                <td class=\"fullname-cell\">${user.fullName || '-'}</td>\n                <td class=\"roles-cell\">\n                    <div class=\"roles-list\">\n                        ${(user.roles || []).map(role => `\n                            <span class=\"role-badge role-${role}\">${this.getRoleName(role)}</span>\n                        `).join('')}\n                    </div>\n                </td>\n                <td class=\"status-cell\">\n                    <span class=\"status-badge status-${user.status}\">${user.status}</span>\n                </td>\n                <td class=\"lastlogin-cell\">\n                    ${user.lastLogin ? new Date(user.lastLogin).toLocaleDateString() : 'Never'}\n                </td>\n                <td class=\"created-cell\">\n                    ${user.createdAt ? new Date(user.createdAt).toLocaleDateString() : '-'}\n                </td>\n                <td class=\"actions-cell\">\n                    <div class=\"action-buttons\">\n                        ${this.rbacHelper.checkAuthorization({ permissions: ['users:write'] }) ? `\n                            <button class=\"btn btn-sm btn-ghost edit-user-btn\" data-user-id=\"${user.id}\" title=\"Edit User\">\n                                ✏️\n                            </button>\n                        ` : ''}\n                        ${this.rbacHelper.checkAuthorization({ permissions: ['users:write'] }) ? `\n                            <button class=\"btn btn-sm btn-ghost toggle-status-btn\" data-user-id=\"${user.id}\" title=\"Toggle Status\">\n                                ${user.status === 'active' ? '🔒' : '🔓'}\n                            </button>\n                        ` : ''}\n                        ${this.rbacHelper.checkAuthorization({ permissions: ['users:delete'] }) ? `\n                            <button class=\"btn btn-sm btn-ghost delete-user-btn\" data-user-id=\"${user.id}\" title=\"Delete User\">\n                                🗑️\n                            </button>\n                        ` : ''}\n                    </div>\n                </td>\n            </tr>\n        `;\n    }\n    \n    getUserAvatar(user) {\n        if (user.avatar) {\n            return `<img src=\"${user.avatar}\" alt=\"${user.username}\" class=\"avatar-img\">`;\n        }\n        return user.username.charAt(0).toUpperCase();\n    }\n    \n    getRoleName(roleId) {\n        const role = this.roles.find(r => r.id === roleId);\n        return role ? role.name : roleId;\n    }\n    \n    updateSelectedUsers() {\n        const checkboxes = this.container.querySelectorAll('.user-checkbox:checked');\n        this.selectedUsers = new Set(Array.from(checkboxes).map(cb => cb.value));\n        \n        const bulkActionsBtn = this.container.querySelector('#bulk-actions-btn');\n        if (bulkActionsBtn) {\n            bulkActionsBtn.disabled = this.selectedUsers.size === 0;\n            bulkActionsBtn.textContent = `Bulk Actions (${this.selectedUsers.size})`;\n        }\n        \n        const selectAllCheckbox = this.container.querySelector('#select-all');\n        const totalCheckboxes = this.container.querySelectorAll('.user-checkbox').length;\n        selectAllCheckbox.indeterminate = this.selectedUsers.size > 0 && this.selectedUsers.size < totalCheckboxes;\n        selectAllCheckbox.checked = this.selectedUsers.size === totalCheckboxes && totalCheckboxes > 0;\n    }\n    \n    toggleAllUsers(checked) {\n        const checkboxes = this.container.querySelectorAll('.user-checkbox');\n        checkboxes.forEach(checkbox => {\n            checkbox.checked = checked;\n        });\n        this.updateSelectedUsers();\n    }\n    \n    updatePagination() {\n        const totalUsers = this.filteredUsers.length;\n        const totalPages = Math.ceil(totalUsers / this.options.pageSize);\n        const startIndex = (this.currentPage - 1) * this.options.pageSize;\n        const endIndex = Math.min(startIndex + this.options.pageSize, totalUsers);\n        \n        // Update info text\n        const infoText = this.container.querySelector('#pagination-info-text');\n        infoText.textContent = `Showing ${startIndex + 1}-${endIndex} of ${totalUsers} users`;\n        \n        // Update navigation buttons\n        const prevBtn = this.container.querySelector('#prev-page');\n        const nextBtn = this.container.querySelector('#next-page');\n        prevBtn.disabled = this.currentPage <= 1;\n        nextBtn.disabled = this.currentPage >= totalPages;\n        \n        // Update page numbers\n        const pageNumbers = this.container.querySelector('#page-numbers');\n        pageNumbers.innerHTML = this.generatePageNumbers(this.currentPage, totalPages);\n        \n        // Bind page number clicks\n        pageNumbers.querySelectorAll('.page-number').forEach(btn => {\n            btn.onclick = () => this.goToPage(parseInt(btn.dataset.page));\n        });\n    }\n    \n    generatePageNumbers(currentPage, totalPages) {\n        const maxVisible = 5;\n        let startPage = Math.max(1, currentPage - Math.floor(maxVisible / 2));\n        let endPage = Math.min(totalPages, startPage + maxVisible - 1);\n        \n        if (endPage - startPage + 1 < maxVisible) {\n            startPage = Math.max(1, endPage - maxVisible + 1);\n        }\n        \n        let html = '';\n        \n        if (startPage > 1) {\n            html += '<button class=\"page-number\" data-page=\"1\">1</button>';\n            if (startPage > 2) {\n                html += '<span class=\"page-ellipsis\">...</span>';\n            }\n        }\n        \n        for (let i = startPage; i <= endPage; i++) {\n            html += `<button class=\"page-number ${i === currentPage ? 'active' : ''}\" data-page=\"${i}\">${i}</button>`;\n        }\n        \n        if (endPage < totalPages) {\n            if (endPage < totalPages - 1) {\n                html += '<span class=\"page-ellipsis\">...</span>';\n            }\n            html += `<button class=\"page-number\" data-page=\"${totalPages}\">${totalPages}</button>`;\n        }\n        \n        return html;\n    }\n    \n    previousPage() {\n        if (this.currentPage > 1) {\n            this.currentPage--;\n            this.renderUsers();\n            this.updatePagination();\n        }\n    }\n    \n    nextPage() {\n        const totalPages = Math.ceil(this.filteredUsers.length / this.options.pageSize);\n        if (this.currentPage < totalPages) {\n            this.currentPage++;\n            this.renderUsers();\n            this.updatePagination();\n        }\n    }\n    \n    goToPage(page) {\n        this.currentPage = page;\n        this.renderUsers();\n        this.updatePagination();\n    }\n    \n    clearFilters() {\n        this.filters = {};\n        this.container.querySelector('#search-input').value = '';\n        this.container.querySelector('#role-filter').value = '';\n        this.container.querySelector('#status-filter').value = '';\n        this.applyFilters();\n    }\n    \n    // Modal methods\n    showAddUserModal() {\n        const modal = this.createUserModal('Add User', null);\n        this.showModal(modal);\n    }\n    \n    showEditUserModal(userId) {\n        const user = this.users.find(u => u.id === userId);\n        if (user) {\n            const modal = this.createUserModal('Edit User', user);\n            this.showModal(modal);\n        }\n    }\n    \n    createUserModal(title, user = null) {\n        const isEdit = !!user;\n        \n        const modal = document.createElement('div');\n        modal.className = 'modal modal-large';\n        modal.innerHTML = `\n            <div class=\"modal-backdrop\"></div>\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h3>${title}</h3>\n                    <button class=\"modal-close\">×</button>\n                </div>\n                <div class=\"modal-body\">\n                    <div id=\"user-form-container\"></div>\n                </div>\n                <div class=\"modal-footer\">\n                    <button class=\"btn btn-ghost\" id=\"cancel-btn\">Cancel</button>\n                    <button class=\"btn btn-primary\" id=\"save-btn\">${isEdit ? 'Update' : 'Create'} User</button>\n                </div>\n            </div>\n        `;\n        \n        // Create form\n        const formContainer = modal.querySelector('#user-form-container');\n        const form = new MultiStepForm(formContainer, {\n            showProgress: false,\n            showStepNumbers: false,\n            allowStepNavigation: false\n        });\n        \n        // Add form steps\n        form.addStep({\n            id: 'basic-info',\n            title: 'Basic Information',\n            fields: [\n                {\n                    name: 'username',\n                    type: 'text',\n                    label: 'Username',\n                    required: true,\n                    disabled: isEdit,\n                    value: user?.username || ''\n                },\n                {\n                    name: 'email',\n                    type: 'email',\n                    label: 'Email',\n                    required: true,\n                    value: user?.email || ''\n                },\n                {\n                    name: 'fullName',\n                    type: 'text',\n                    label: 'Full Name',\n                    required: true,\n                    value: user?.fullName || ''\n                },\n                {\n                    name: 'password',\n                    type: 'password',\n                    label: isEdit ? 'New Password (leave blank to keep current)' : 'Password',\n                    required: !isEdit\n                },\n                {\n                    name: 'confirmPassword',\n                    type: 'password',\n                    label: 'Confirm Password',\n                    required: !isEdit\n                }\n            ]\n        });\n        \n        form.addStep({\n            id: 'roles-permissions',\n            title: 'Roles and Permissions',\n            fields: [\n                {\n                    name: 'roles',\n                    type: 'multiselect',\n                    label: 'Roles',\n                    options: this.roles.map(role => ({\n                        value: role.id,\n                        label: role.name,\n                        description: role.description\n                    })),\n                    value: user?.roles || []\n                },\n                {\n                    name: 'status',\n                    type: 'select',\n                    label: 'Status',\n                    options: [\n                        { value: 'active', label: 'Active' },\n                        { value: 'inactive', label: 'Inactive' },\n                        { value: 'pending', label: 'Pending' }\n                    ],\n                    value: user?.status || 'pending'\n                }\n            ]\n        });\n        \n        form.start();\n        \n        // Bind modal events\n        modal.querySelector('.modal-close').onclick = () => this.hideModal(modal);\n        modal.querySelector('#cancel-btn').onclick = () => this.hideModal(modal);\n        modal.querySelector('#save-btn').onclick = async () => {\n            await this.saveUser(form, user, modal);\n        };\n        modal.querySelector('.modal-backdrop').onclick = () => this.hideModal(modal);\n        \n        return modal;\n    }\n    \n    async saveUser(form, existingUser, modal) {\n        try {\n            const formData = form.getData();\n            \n            // Validate form\n            if (!formData.username || !formData.email) {\n                throw new Error('Username and email are required');\n            }\n            \n            if (!existingUser && (!formData.password || formData.password !== formData.confirmPassword)) {\n                throw new Error('Password confirmation does not match');\n            }\n            \n            const userData = {\n                username: formData.username,\n                email: formData.email,\n                fullName: formData.fullName,\n                roles: formData.roles || [],\n                status: formData.status\n            };\n            \n            if (formData.password) {\n                userData.password = formData.password;\n            }\n            \n            let result;\n            if (existingUser) {\n                result = await this.authService.updateUser(existingUser.id, userData);\n            } else {\n                result = await this.authService.createUser(userData);\n            }\n            \n            this.hideModal(modal);\n            this.loadUsers();\n            this.showSuccess(`User ${existingUser ? 'updated' : 'created'} successfully`);\n            \n        } catch (error) {\n            this.showError(`Failed to ${existingUser ? 'update' : 'create'} user: ` + error.message);\n        }\n    }\n    \n    showBulkActionsModal() {\n        if (this.selectedUsers.size === 0) return;\n        \n        const modal = document.createElement('div');\n        modal.className = 'modal';\n        modal.innerHTML = `\n            <div class=\"modal-backdrop\"></div>\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h3>Bulk Actions (${this.selectedUsers.size} users)</h3>\n                    <button class=\"modal-close\">×</button>\n                </div>\n                <div class=\"modal-body\">\n                    <div class=\"bulk-actions\">\n                        <div class=\"action-group\">\n                            <h4>Status Changes</h4>\n                            <button class=\"btn btn-secondary action-btn\" data-action=\"activate\">Activate Users</button>\n                            <button class=\"btn btn-secondary action-btn\" data-action=\"deactivate\">Deactivate Users</button>\n                        </div>\n                        <div class=\"action-group\">\n                            <h4>Role Management</h4>\n                            <div class=\"role-actions\">\n                                <select id=\"bulk-role-select\" class=\"form-select\">\n                                    <option value=\"\">Select a role...</option>\n                                    ${this.roles.map(role => `<option value=\"${role.id}\">${role.name}</option>`).join('')}\n                                </select>\n                                <button class=\"btn btn-secondary action-btn\" data-action=\"add-role\">Add Role</button>\n                                <button class=\"btn btn-secondary action-btn\" data-action=\"remove-role\">Remove Role</button>\n                            </div>\n                        </div>\n                        <div class=\"action-group danger\">\n                            <h4>Danger Zone</h4>\n                            <button class=\"btn btn-danger action-btn\" data-action=\"delete\">Delete Users</button>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"modal-footer\">\n                    <button class=\"btn btn-ghost\" id=\"cancel-bulk-btn\">Cancel</button>\n                </div>\n            </div>\n        `;\n        \n        // Bind events\n        modal.querySelector('.modal-close').onclick = () => this.hideModal(modal);\n        modal.querySelector('#cancel-bulk-btn').onclick = () => this.hideModal(modal);\n        modal.querySelector('.modal-backdrop').onclick = () => this.hideModal(modal);\n        \n        modal.querySelectorAll('.action-btn').forEach(btn => {\n            btn.onclick = () => this.executeBulkAction(btn.dataset.action, modal);\n        });\n        \n        this.showModal(modal);\n    }\n    \n    async executeBulkAction(action, modal) {\n        try {\n            const selectedUserIds = Array.from(this.selectedUsers);\n            const roleSelect = modal.querySelector('#bulk-role-select');\n            \n            switch (action) {\n                case 'activate':\n                    await this.bulkUpdateStatus(selectedUserIds, 'active');\n                    break;\n                    \n                case 'deactivate':\n                    await this.bulkUpdateStatus(selectedUserIds, 'inactive');\n                    break;\n                    \n                case 'add-role':\n                    if (!roleSelect.value) {\n                        throw new Error('Please select a role');\n                    }\n                    await this.bulkAddRole(selectedUserIds, roleSelect.value);\n                    break;\n                    \n                case 'remove-role':\n                    if (!roleSelect.value) {\n                        throw new Error('Please select a role');\n                    }\n                    await this.bulkRemoveRole(selectedUserIds, roleSelect.value);\n                    break;\n                    \n                case 'delete':\n                    if (confirm(`Are you sure you want to delete ${selectedUserIds.length} users?`)) {\n                        await this.bulkDeleteUsers(selectedUserIds);\n                    }\n                    break;\n            }\n            \n            this.hideModal(modal);\n            this.loadUsers();\n            this.selectedUsers.clear();\n            this.showSuccess(`Bulk action completed successfully`);\n            \n        } catch (error) {\n            this.showError(`Bulk action failed: ` + error.message);\n        }\n    }\n    \n    async bulkUpdateStatus(userIds, status) {\n        for (const userId of userIds) {\n            await this.authService.updateUser(userId, { status });\n        }\n    }\n    \n    async bulkAddRole(userIds, role) {\n        for (const userId of userIds) {\n            await this.authService.assignRole(userId, role);\n        }\n    }\n    \n    async bulkRemoveRole(userIds, role) {\n        for (const userId of userIds) {\n            await this.authService.removeRole(userId, role);\n        }\n    }\n    \n    async bulkDeleteUsers(userIds) {\n        for (const userId of userIds) {\n            await this.authService.deleteUser(userId);\n        }\n    }\n    \n    async confirmDeleteUser(userId) {\n        const user = this.users.find(u => u.id === userId);\n        if (user && confirm(`Are you sure you want to delete user \"${user.username}\"?`)) {\n            try {\n                await this.authService.deleteUser(userId);\n                this.loadUsers();\n                this.showSuccess('User deleted successfully');\n            } catch (error) {\n                this.showError('Failed to delete user: ' + error.message);\n            }\n        }\n    }\n    \n    async toggleUserStatus(userId) {\n        const user = this.users.find(u => u.id === userId);\n        if (user) {\n            try {\n                const newStatus = user.status === 'active' ? 'inactive' : 'active';\n                await this.authService.updateUser(userId, { status: newStatus });\n                this.loadUsers();\n                this.showSuccess(`User ${newStatus === 'active' ? 'activated' : 'deactivated'} successfully`);\n            } catch (error) {\n                this.showError('Failed to update user status: ' + error.message);\n            }\n        }\n    }\n    \n    // Utility methods\n    showModal(modal) {\n        const modalContainer = this.container.querySelector('#modal-container');\n        modalContainer.appendChild(modal);\n        modal.classList.add('show');\n    }\n    \n    hideModal(modal) {\n        modal.classList.remove('show');\n        setTimeout(() => {\n            if (modal.parentNode) {\n                modal.parentNode.removeChild(modal);\n            }\n        }, 300);\n    }\n    \n    showLoading(show) {\n        if (show) {\n            const loading = document.createElement('div');\n            loading.id = 'users-loading';\n            loading.className = 'loading-overlay';\n            loading.innerHTML = '<div class=\"loading-spinner\"></div><div class=\"loading-text\">Loading users...</div>';\n            this.container.appendChild(loading);\n        } else {\n            const loading = this.container.querySelector('#users-loading');\n            if (loading) {\n                loading.remove();\n            }\n        }\n    }\n    \n    showSuccess(message) {\n        this.showNotification(message, 'success');\n    }\n    \n    showError(message) {\n        this.showNotification(message, 'error');\n    }\n    \n    showNotification(message, type) {\n        const notification = document.createElement('div');\n        notification.className = `notification notification-${type}`;\n        notification.innerHTML = `\n            <div class=\"notification-content\">\n                <span class=\"notification-message\">${message}</span>\n                <button class=\"notification-close\">×</button>\n            </div>\n        `;\n        \n        notification.querySelector('.notification-close').onclick = () => {\n            notification.remove();\n        };\n        \n        this.container.appendChild(notification);\n        \n        setTimeout(() => {\n            notification.remove();\n        }, 5000);\n    }\n    \n    // Public API\n    refresh() {\n        this.loadUsers();\n    }\n    \n    getSelectedUsers() {\n        return Array.from(this.selectedUsers);\n    }\n    \n    clearSelection() {\n        this.selectedUsers.clear();\n        this.container.querySelectorAll('.user-checkbox').forEach(cb => cb.checked = false);\n        this.updateSelectedUsers();\n    }\n    \n    // Cleanup\n    destroy() {\n        this.selectedUsers.clear();\n        this.users = [];\n        this.filteredUsers = [];\n        \n        if (this.container) {\n            this.container.innerHTML = '';\n        }\n    }\n}\n\nexport default UserManagement;"
