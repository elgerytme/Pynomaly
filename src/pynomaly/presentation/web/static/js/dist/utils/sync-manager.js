(()=>{var u=class{constructor(){this.syncQueue=[],this.conflictQueue=[],this.isOnline=navigator.onLine,this.isSyncing=!1,this.syncStrategy="smart",this.retryAttempts=3,this.retryDelay=1e3,this.init()}async init(){this.setupEventListeners(),await this.loadSyncQueue(),this.startPeriodicSync()}setupEventListeners(){window.addEventListener("online",()=>{this.isOnline=!0,this.onConnectionRestore()}),window.addEventListener("offline",()=>{this.isOnline=!1,this.onConnectionLost()}),"serviceWorker"in navigator&&navigator.serviceWorker.addEventListener("message",e=>{this.handleServiceWorkerMessage(e.data)})}handleServiceWorkerMessage(e){let{type:t,payload:n}=e;switch(t){case"SYNC_COMPLETE":this.onSyncComplete(n);break;case"SYNC_FAILED":this.onSyncFailed(n);break;case"CONFLICT_DETECTED":this.onConflictDetected(n);break;case"SYNC_QUEUE_UPDATE":this.onSyncQueueUpdate(n);break}}async loadSyncQueue(){try{if("serviceWorker"in navigator){let e=await navigator.serviceWorker.getRegistration();e?.active&&e.active.postMessage({type:"GET_SYNC_QUEUE"})}}catch(e){console.error("[SyncManager] Failed to load sync queue:",e)}}async queueForSync(e,t,n="normal"){let s={id:this.generateSyncId(),operation:e,entityType:t.entityType,entityId:t.entityId,data:t,priority:n,timestamp:Date.now(),retryCount:0,status:"pending",conflicts:[]};return this.syncQueue.push(s),await this.persistSyncQueue(),this.isOnline&&n==="high"&&this.syncStrategy!=="manual"&&this.processSyncQueue(),this.notifyUI("sync_queue_updated",{pendingCount:this.getPendingCount()}),s.id}async processSyncQueue(){if(!(this.isSyncing||!this.isOnline)){this.isSyncing=!0,this.notifyUI("sync_started");try{let e=this.syncQueue.filter(n=>n.status==="pending").sort((n,s)=>{let i={high:3,normal:2,low:1},r=i[s.priority]-i[n.priority];return r!==0?r:n.timestamp-s.timestamp}),t={completed:0,failed:0,conflicts:0};for(let n of e){try{n.status="syncing",await this.persistSyncQueue();let s=await this.syncItem(n);if(s.success)n.status="completed",n.completedAt=Date.now(),t.completed++;else if(s.conflict)n.status="conflict",n.conflicts.push(s.conflict),this.conflictQueue.push(n),t.conflicts++;else throw new Error(s.error||"Sync failed")}catch(s){console.error("[SyncManager] Failed to sync item:",n.id,s),n.retryCount++,n.retryCount>=this.retryAttempts?(n.status="failed",n.error=s.message,t.failed++):(n.status="pending",await this.delay(this.retryDelay*Math.pow(2,n.retryCount-1)))}await this.persistSyncQueue()}this.cleanupCompletedItems(),this.notifyUI("sync_completed",t)}catch(e){console.error("[SyncManager] Sync processing failed:",e),this.notifyUI("sync_failed",{error:e.message})}finally{this.isSyncing=!1}}}async syncItem(e){let{operation:t,entityType:n,entityId:s,data:i}=e;try{let r,a,c;switch(t){case"create":r=`/api/${n}s`,a="POST",c=i.payload;break;case"update":r=`/api/${n}s/${s}`,a="PUT",c=i.payload;break;case"delete":r=`/api/${n}s/${s}`,a="DELETE";break;default:throw new Error(`Unknown operation: ${t}`)}let y=await this.checkForConflicts(e);if(y.hasConflict)return{success:!1,conflict:y.conflict};let o=await fetch(r,{method:a,headers:{"Content-Type":"application/json",Authorization:this.getAuthHeader()},body:c?JSON.stringify(c):void 0});if(!o.ok){if(o.status===409)return{success:!1,conflict:await o.json()};throw new Error(`HTTP ${o.status}: ${o.statusText}`)}let l=await o.json();return await this.updateLocalData(e,l),{success:!0,data:l}}catch(r){return{success:!1,error:r.message}}}async checkForConflicts(e){if(e.operation==="create")return{hasConflict:!1};try{let t=await fetch(`/api/${e.entityType}s/${e.entityId}`,{method:"HEAD",headers:{Authorization:this.getAuthHeader()}});if(t.status===404&&e.operation==="update")return{hasConflict:!0,conflict:{type:"entity_deleted",message:"Entity was deleted on server",serverVersion:null,localVersion:e.data.version}};let n=t.headers.get("etag")||t.headers.get("last-modified"),s=e.data.version;return n&&s&&n!==s?{hasConflict:!0,conflict:{type:"version_mismatch",message:"Entity was modified on server",serverVersion:n,localVersion:s}}:{hasConflict:!1}}catch(t){return console.warn("[SyncManager] Conflict check failed:",t),{hasConflict:!1}}}async resolveConflict(e,t,n=null){let s=this.conflictQueue.find(i=>i.id===e);if(!s)throw new Error("Conflict not found");try{let i;switch(t){case"server_wins":i=await this.fetchServerVersion(s),await this.updateLocalData(s,i);break;case"client_wins":s.retryCount=0,s.status="pending",await this.forceSyncItem(s);break;case"merge":if(!n)throw new Error("Merge resolution data required");i=await this.mergeVersions(s,n),await this.updateLocalData(s,i),await this.syncMergedData(s,i);break;case"manual":s.status="manual_resolution";break;default:throw new Error(`Unknown resolution strategy: ${t}`)}this.conflictQueue=this.conflictQueue.filter(a=>a.id!==e);let r=this.syncQueue.find(a=>a.id===e);return r&&t!=="manual"&&(r.status="completed",r.resolvedAt=Date.now(),r.resolutionStrategy=t),await this.persistSyncQueue(),this.notifyUI("conflict_resolved",{conflictId:e,strategy:t}),{success:!0}}catch(i){return console.error("[SyncManager] Failed to resolve conflict:",i),{success:!1,error:i.message}}}startPeriodicSync(){if(this.syncStrategy==="manual")return;let e=this.syncStrategy==="immediate"?3e4:3e5;setInterval(()=>{this.isOnline&&this.getPendingCount()>0&&this.processSyncQueue()},e)}async forceSyncAll(){if(!this.isOnline)throw new Error("Cannot sync while offline");await this.processSyncQueue()}getSyncStatus(){let e=this.syncQueue.filter(i=>i.status==="pending").length,t=this.syncQueue.filter(i=>i.status==="syncing").length,n=this.syncQueue.filter(i=>i.status==="failed").length,s=this.conflictQueue.length;return{isOnline:this.isOnline,isSyncing:this.isSyncing,pending:e,syncing:t,failed:n,conflicts:s,strategy:this.syncStrategy,lastSyncAt:this.getLastSyncTime()}}setSyncStrategy(e){if(!["immediate","smart","manual"].includes(e))throw new Error("Invalid sync strategy");this.syncStrategy=e,this.notifyUI("sync_strategy_changed",{strategy:e})}async clearCompleted(){this.syncQueue=this.syncQueue.filter(e=>e.status!=="completed"),await this.persistSyncQueue(),this.notifyUI("completed_cleared")}onConnectionRestore(){console.log("[SyncManager] Connection restored"),this.notifyUI("connection_restored"),this.syncStrategy!=="manual"&&this.getPendingCount()>0&&setTimeout(()=>this.processSyncQueue(),1e3)}onConnectionLost(){console.log("[SyncManager] Connection lost"),this.notifyUI("connection_lost")}onSyncComplete(e){this.notifyUI("sync_item_completed",e)}onSyncFailed(e){this.notifyUI("sync_item_failed",e)}onConflictDetected(e){this.conflictQueue.push(e),this.notifyUI("conflict_detected",e)}onSyncQueueUpdate(e){this.syncQueue=e.queue||[],this.notifyUI("sync_queue_updated",{pendingCount:this.getPendingCount()})}generateSyncId(){return`sync_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}getPendingCount(){return this.syncQueue.filter(e=>["pending","syncing"].includes(e.status)).length}getLastSyncTime(){let e=this.syncQueue.filter(t=>t.status==="completed");return e.length?Math.max(...e.map(t=>t.completedAt)):null}async persistSyncQueue(){try{if("serviceWorker"in navigator){let e=await navigator.serviceWorker.getRegistration();e?.active&&e.active.postMessage({type:"UPDATE_SYNC_QUEUE",payload:{queue:this.syncQueue}})}}catch(e){console.error("[SyncManager] Failed to persist sync queue:",e)}}cleanupCompletedItems(){let e=Date.now()-864e5;this.syncQueue=this.syncQueue.filter(t=>t.status!=="completed"||t.completedAt>e)}async delay(e){return new Promise(t=>setTimeout(t,e))}getAuthHeader(){let e=localStorage.getItem("auth_token");return e?`Bearer ${e}`:""}async fetchServerVersion(e){return await(await fetch(`/api/${e.entityType}s/${e.entityId}`,{headers:{Authorization:this.getAuthHeader()}})).json()}async updateLocalData(e,t){if("serviceWorker"in navigator){let n=await navigator.serviceWorker.getRegistration();n?.active&&n.active.postMessage({type:"UPDATE_LOCAL_DATA",payload:{entityType:e.entityType,entityId:e.entityId,data:t}})}}async forceSyncItem(e){return e.forceSync=!0,await this.syncItem(e)}async mergeVersions(e,t){return t.mergedData}async syncMergedData(e,t){let n=`/api/${e.entityType}s/${e.entityId}`,s=await fetch(n,{method:"PUT",headers:{"Content-Type":"application/json",Authorization:this.getAuthHeader()},body:JSON.stringify(t)});if(!s.ok)throw new Error(`Failed to sync merged data: ${s.statusText}`);return await s.json()}notifyUI(e,t={}){window.dispatchEvent(new CustomEvent("sync-manager",{detail:{type:e,data:t}}))}async queueDatasetSync(e,t,n="normal"){return await this.queueForSync(e,{entityType:"dataset",entityId:t.id,payload:t,version:t.version},n)}async queueResultSync(e,t,n="normal"){return await this.queueForSync(e,{entityType:"result",entityId:t.id,payload:t,version:t.version},n)}async queueModelSync(e,t,n="high"){return await this.queueForSync(e,{entityType:"model",entityId:t.id,payload:t,version:t.version},n)}getConflicts(){return this.conflictQueue.map(e=>({id:e.id,entityType:e.entityType,entityId:e.entityId,operation:e.operation,conflicts:e.conflicts,timestamp:e.timestamp}))}getPendingItems(){return this.syncQueue.filter(e=>["pending","syncing","failed"].includes(e.status)).map(e=>({id:e.id,operation:e.operation,entityType:e.entityType,priority:e.priority,status:e.status,retryCount:e.retryCount,timestamp:e.timestamp}))}};typeof window<"u"&&(window.SyncManager=new u);})();
