(()=>{var v=class{constructor(){this.algorithms=new Map,this.cachedDatasets=new Map,this.cachedModels=new Map,this.isInitialized=!1,this.initializeAlgorithms()}initializeAlgorithms(){this.algorithms.set("zscore",{name:"Z-Score Detection",description:"Statistical outlier detection using Z-scores",parameters:{threshold:3},detect:this.zScoreDetection.bind(this)}),this.algorithms.set("iqr",{name:"Interquartile Range",description:"Outlier detection using IQR method",parameters:{factor:1.5},detect:this.iqrDetection.bind(this)}),this.algorithms.set("isolation",{name:"Simple Isolation Detection",description:"Basic isolation-based anomaly detection",parameters:{contamination:.1},detect:this.isolationDetection.bind(this)}),this.algorithms.set("mad",{name:"Median Absolute Deviation",description:"Robust outlier detection using MAD",parameters:{threshold:3.5},detect:this.madDetection.bind(this)}),this.isInitialized=!0}async loadCachedDatasets(){try{if("serviceWorker"in navigator){let t=await navigator.serviceWorker.getRegistration();if(t?.active)return t.active.postMessage({type:"GET_OFFLINE_DATASETS"}),new Promise(n=>{navigator.serviceWorker.addEventListener("message",function l(a){a.data.type==="OFFLINE_DATASETS"&&(navigator.serviceWorker.removeEventListener("message",l),a.data.datasets.forEach(c=>{this.cachedDatasets.set(c.id,c)}),n(a.data.datasets))}.bind(this))})}}catch(t){return console.error("[OfflineDetector] Failed to load cached datasets:",t),[]}}getAlgorithms(){return Array.from(this.algorithms.entries()).map(([t,n])=>({id:t,name:n.name,description:n.description,parameters:n.parameters}))}getCachedDatasets(){return Array.from(this.cachedDatasets.values())}async detectAnomalies(t,n,l={}){if(!this.isInitialized)throw new Error("Offline detector not initialized");let a=this.cachedDatasets.get(t);if(!a)throw new Error(`Dataset ${t} not found in cache`);let c=this.algorithms.get(n);if(!c)throw new Error(`Algorithm ${n} not available`);let d=performance.now();try{let g=this.prepareData(a.data),e={...c.parameters,...l},o=c.detect(g,e),m=performance.now()-d,h={id:`offline_${Date.now()}`,datasetId:t,algorithmId:n,timestamp:new Date().toISOString(),processingTimeMs:m,anomalies:o.anomalies,scores:o.scores,statistics:o.statistics,parameters:e,isOffline:!0};return await this.saveResult(h),h}catch(g){throw console.error("[OfflineDetector] Detection failed:",g),g}}prepareData(t){return Array.isArray(t)?t.map(n=>typeof n=="object"?Object.values(n).map(l=>{let a=parseFloat(l);return isNaN(a)?0:a}):Array.isArray(n)?n:[n]):t}zScoreDetection(t,n){let{threshold:l=3}=n,a=[],c=[],d=t[0].length,g=[];for(let e=0;e<d;e++){let o=t.map(s=>s[e]),i=o.reduce((s,r)=>s+r,0)/o.length,m=o.reduce((s,r)=>s+Math.pow(r-i,2),0)/o.length,h=Math.sqrt(m);g.push({mean:i,std:h})}return t.forEach((e,o)=>{let i=0;e.forEach((m,h)=>{let{mean:s,std:r}=g[h],f=r>0?Math.abs((m-s)/r):0;i=Math.max(i,f)}),c.push(i),i>l&&a.push({index:o,score:i,values:e})}),{anomalies:a,scores:c,statistics:{totalSamples:t.length,totalAnomalies:a.length,anomalyRate:a.length/t.length,averageScore:c.reduce((e,o)=>e+o,0)/c.length,maxScore:Math.max(...c),threshold:l}}}iqrDetection(t,n){let{factor:l=1.5}=n,a=[],c=[],d=t[0].length,g=[];for(let e=0;e<d;e++){let o=t.map(f=>f[e]).sort((f,u)=>f-u),i=Math.floor(o.length*.25),m=Math.floor(o.length*.75),h=o[i],s=o[m],r=s-h;g.push({lower:h-l*r,upper:s+l*r,iqr:r})}return t.forEach((e,o)=>{let i=0,m=!1;e.forEach((h,s)=>{let r=g[s];if(h<r.lower||h>r.upper){m=!0;let f=Math.min(Math.abs(h-r.lower),Math.abs(h-r.upper));i=Math.max(i,f/Math.max(r.iqr,1))}}),c.push(i),m&&a.push({index:o,score:i,values:e})}),{anomalies:a,scores:c,statistics:{totalSamples:t.length,totalAnomalies:a.length,anomalyRate:a.length/t.length,averageScore:c.reduce((e,o)=>e+o,0)/c.length,maxScore:Math.max(...c),factor:l}}}isolationDetection(t,n){let{contamination:l=.1}=n,a=t.map(()=>0),c=100,d=Math.ceil(Math.log2(t.length));for(let s=0;s<c;s++)this.isolationTree(t,d).forEach((f,u)=>{a[u]+=f});let g=a.reduce((s,r)=>s+r,0)/a.length,e=a.map(s=>Math.pow(2,-(s/c)/g)),o=[...e].sort((s,r)=>r-s),i=Math.floor(t.length*l),m=o[i]||.5,h=[];return e.forEach((s,r)=>{s>m&&h.push({index:r,score:s,values:t[r]})}),{anomalies:h,scores:e,statistics:{totalSamples:t.length,totalAnomalies:h.length,anomalyRate:h.length/t.length,averageScore:e.reduce((s,r)=>s+r,0)/e.length,maxScore:Math.max(...e),threshold:m,contamination:l}}}isolationTree(t,n,l=0){if(l>=n||t.length<=1)return t.map(()=>l);let a=Math.floor(Math.random()*t[0].length),c=t.map(u=>u[a]),d=Math.min(...c),g=Math.max(...c);if(d===g)return t.map(()=>l);let e=d+Math.random()*(g-d),o=[],i=[],m=[],h=[];t.forEach((u,p)=>{u[a]<e?(o.push(u),m.push(p)):(i.push(u),h.push(p))});let s=o.length>0?this.isolationTree(o,n,l+1):[],r=i.length>0?this.isolationTree(i,n,l+1):[],f=new Array(t.length);return m.forEach((u,p)=>{f[p]=s[p]}),h.forEach((u,p)=>{f[p+o.length]=r[p]}),f}madDetection(t,n){let{threshold:l=3.5}=n,a=[],c=[],d=t[0].length,g=[];for(let e=0;e<d;e++){let o=t.map(s=>s[e]).sort((s,r)=>s-r),i=o[Math.floor(o.length/2)],m=o.map(s=>Math.abs(s-i)).sort((s,r)=>s-r),h=m[Math.floor(m.length/2)];g.push({median:i,mad:h})}return t.forEach((e,o)=>{let i=0;e.forEach((m,h)=>{let{median:s,mad:r}=g[h],f=r>0?.6745*(m-s)/r:0;i=Math.max(i,Math.abs(f))}),c.push(i),i>l&&a.push({index:o,score:i,values:e})}),{anomalies:a,scores:c,statistics:{totalSamples:t.length,totalAnomalies:a.length,anomalyRate:a.length/t.length,averageScore:c.reduce((e,o)=>e+o,0)/c.length,maxScore:Math.max(...c),threshold:l}}}async saveResult(t){try{if("serviceWorker"in navigator){let n=await navigator.serviceWorker.getRegistration();n?.active&&n.active.postMessage({type:"SAVE_DETECTION_RESULT",payload:t})}}catch(n){console.error("[OfflineDetector] Failed to save result:",n)}}async getDetectionHistory(){try{if("serviceWorker"in navigator){let t=await navigator.serviceWorker.getRegistration();if(t?.active)return t.active.postMessage({type:"GET_OFFLINE_RESULTS"}),new Promise(n=>{navigator.serviceWorker.addEventListener("message",function l(a){a.data.type==="OFFLINE_RESULTS"&&(navigator.serviceWorker.removeEventListener("message",l),n(a.data.results))})})}}catch(t){return console.error("[OfflineDetector] Failed to get detection history:",t),[]}}};typeof window<"u"&&(window.OfflineDetector=new v);})();
