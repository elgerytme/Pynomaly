(()=>{var r=class{constructor(i={}){this.options={enableServiceWorker:!0,enablePushNotifications:!0,enableBackgroundSync:!0,enablePeriodicBackgroundSync:!1,swPath:"/sw.js",vapidPublicKey:i.vapidPublicKey||null,notificationIcon:"/static/icons/notification.png",notificationBadge:"/static/icons/badge.png",enableLogging:!1,syncTags:{backgroundSync:"background-sync",periodicSync:"periodic-background-sync"},...i},this.serviceWorker=null,this.pushSubscription=null,this.isOnline=navigator.onLine,this.isInstallPromptAvailable=!1,this.installPrompt=null,this.listeners=new Map,this.syncQueue=[],this.notificationPermission="default",this.init()}async init(){this.log("Initializing PWA Service..."),this.checkBrowserSupport(),this.options.enableServiceWorker&&"serviceWorker"in navigator&&await this.registerServiceWorker(),this.bindEvents(),this.options.enablePushNotifications&&await this.initializePushNotifications(),this.options.enableBackgroundSync&&this.serviceWorker&&this.initializeBackgroundSync(),this.setupInstallPrompt(),this.log("PWA Service initialized successfully")}checkBrowserSupport(){let i={serviceWorker:"serviceWorker"in navigator,pushManager:"PushManager"in window,notifications:"Notification"in window,backgroundSync:"serviceWorker"in navigator&&"sync"in window.ServiceWorkerRegistration.prototype,periodicBackgroundSync:"serviceWorker"in navigator&&"periodicSync"in window.ServiceWorkerRegistration.prototype,indexedDB:"indexedDB"in window,cacheAPI:"caches"in window};return this.log("Browser support:",i),this.emit("support_check",i),i}async registerServiceWorker(){try{this.log("Registering service worker...");let i=await navigator.serviceWorker.register(this.options.swPath,{scope:"/"});return this.serviceWorker=i,i.addEventListener("updatefound",()=>{this.handleServiceWorkerUpdate(i)}),i.active&&(this.log("Service worker already active"),this.emit("sw_ready",i)),navigator.serviceWorker.addEventListener("message",e=>{this.handleServiceWorkerMessage(e)}),this.log("Service worker registered successfully"),this.emit("sw_registered",i),i}catch(i){throw this.log("Service worker registration failed:",i),this.emit("sw_registration_failed",i),i}}handleServiceWorkerUpdate(i){let e=i.installing;e.addEventListener("statechange",()=>{e.state==="installed"&&navigator.serviceWorker.controller&&(this.log("New service worker available"),this.emit("sw_update_available",e),this.showUpdateNotification())})}showUpdateNotification(){let i={title:"App Update Available",message:"A new version of the app is available. Refresh to update.",actions:[{text:"Update Now",action:"update"},{text:"Later",action:"dismiss"}]};this.emit("update_notification",i)}async updateServiceWorker(){this.serviceWorker&&this.serviceWorker.waiting&&(this.serviceWorker.waiting.postMessage({type:"SKIP_WAITING"}),window.location.reload())}handleServiceWorkerMessage(i){let{type:e,payload:t}=i.data;switch(e){case"SYNC_COMPLETE":this.handleSyncComplete(t);break;case"PUSH_RECEIVED":this.handlePushReceived(t);break;case"NOTIFICATION_CLICK":this.handleNotificationClick(t);break;case"CACHE_UPDATE":this.handleCacheUpdate(t);break;case"ERROR":this.handleServiceWorkerError(t);break;default:this.log("Unknown service worker message:",e,t)}}bindEvents(){window.addEventListener("online",()=>{this.isOnline=!0,this.log("App is online"),this.emit("online"),this.processSyncQueue()}),window.addEventListener("offline",()=>{this.isOnline=!1,this.log("App is offline"),this.emit("offline")}),window.addEventListener("beforeinstallprompt",i=>{i.preventDefault(),this.installPrompt=i,this.isInstallPromptAvailable=!0,this.emit("install_prompt_available")}),window.addEventListener("appinstalled",()=>{this.log("App installed successfully"),this.installPrompt=null,this.isInstallPromptAvailable=!1,this.emit("app_installed")}),document.addEventListener("visibilitychange",()=>{!document.hidden&&this.isOnline&&this.syncInBackground()})}async initializePushNotifications(){if(!("PushManager"in window)||!("Notification"in window)){this.log("Push notifications not supported");return}this.notificationPermission=Notification.permission,this.notificationPermission==="granted"&&await this.subscribeToPush(),this.log("Push notifications initialized")}async requestNotificationPermission(){if(!("Notification"in window))throw new Error("Notifications not supported");if(this.notificationPermission==="granted")return"granted";let i=await Notification.requestPermission();return this.notificationPermission=i,i==="granted"&&await this.subscribeToPush(),this.emit("notification_permission",i),i}async subscribeToPush(){if(!this.serviceWorker||!this.options.vapidPublicKey){this.log("Cannot subscribe to push: missing service worker or VAPID key");return}try{let i=await this.serviceWorker.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:this.urlBase64ToUint8Array(this.options.vapidPublicKey)});return this.pushSubscription=i,this.log("Push subscription created:",i),await this.sendSubscriptionToServer(i),this.emit("push_subscribed",i),i}catch(i){throw this.log("Push subscription failed:",i),this.emit("push_subscription_failed",i),i}}async sendSubscriptionToServer(i){try{let e=await fetch("/api/push/subscribe",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({subscription:i,userAgent:navigator.userAgent,timestamp:Date.now()})});if(!e.ok)throw new Error(`Server responded with ${e.status}`);this.log("Subscription sent to server successfully")}catch(e){throw this.log("Failed to send subscription to server:",e),e}}async unsubscribeFromPush(){if(this.pushSubscription)try{await this.pushSubscription.unsubscribe(),await fetch("/api/push/unsubscribe",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({endpoint:this.pushSubscription.endpoint})}),this.pushSubscription=null,this.log("Unsubscribed from push notifications"),this.emit("push_unsubscribed")}catch(i){throw this.log("Failed to unsubscribe from push:",i),i}}showLocalNotification(i,e={}){if(this.notificationPermission!=="granted"){this.log("Cannot show notification: permission not granted");return}let t={body:e.body||"",icon:e.icon||this.options.notificationIcon,badge:e.badge||this.options.notificationBadge,tag:e.tag||"pynomaly-notification",data:e.data||{},actions:e.actions||[],requireInteraction:e.requireInteraction||!1,silent:e.silent||!1,...e};if(this.serviceWorker&&this.serviceWorker.active)this.serviceWorker.active.postMessage({type:"SHOW_NOTIFICATION",payload:{title:i,options:t}});else{let s=new Notification(i,t);s.onclick=()=>{this.handleNotificationClick({notification:{tag:t.tag,data:t.data},action:"click"})}}}handlePushReceived(i){this.log("Push notification received:",i),this.emit("push_received",i)}handleNotificationClick(i){this.log("Notification clicked:",i),this.emit("notification_click",i),"clients"in self?self.clients.openWindow("/"):window.focus()}initializeBackgroundSync(){if(!("sync"in window.ServiceWorkerRegistration.prototype)){this.log("Background sync not supported");return}this.log("Background sync initialized"),this.emit("background_sync_ready")}async scheduleBackgroundSync(i=null,e=null){if(!this.serviceWorker){this.log("Cannot schedule background sync: no service worker");return}let t=i||this.options.syncTags.backgroundSync;try{await this.serviceWorker.sync.register(t),this.log("Background sync scheduled:",t),e&&await this.storeSyncData(t,e),this.emit("sync_scheduled",{tag:t,data:e})}catch(s){this.log("Failed to schedule background sync:",s),this.addToSyncQueue({tag:t,data:e})}}async schedulePeriodicBackgroundSync(i=null,e=24*60*60*1e3){if(!this.options.enablePeriodicBackgroundSync||!("periodicSync"in window.ServiceWorkerRegistration.prototype)){this.log("Periodic background sync not supported or disabled");return}let t=i||this.options.syncTags.periodicSync;try{await this.serviceWorker.periodicSync.register(t,{minInterval:e}),this.log("Periodic background sync scheduled:",t,e),this.emit("periodic_sync_scheduled",{tag:t,minInterval:e})}catch(s){throw this.log("Failed to schedule periodic background sync:",s),s}}async storeSyncData(i,e){try{"indexedDB"in window?(await(await this.openSyncDatabase()).transaction(["sync_data"],"readwrite").objectStore("sync_data").put({tag:i,data:e,timestamp:Date.now()}),this.log("Sync data stored:",i)):localStorage.setItem(`sync_data_${i}`,JSON.stringify({data:e,timestamp:Date.now()}))}catch(t){this.log("Failed to store sync data:",t)}}async openSyncDatabase(){return new Promise((i,e)=>{let t=indexedDB.open("PWASyncDB",1);t.onerror=()=>e(t.error),t.onsuccess=()=>i(t.result),t.onupgradeneeded=s=>{let n=s.target.result;n.objectStoreNames.contains("sync_data")||n.createObjectStore("sync_data",{keyPath:"tag"}).createIndex("timestamp","timestamp")}})}addToSyncQueue(i){this.syncQueue.push({...i,timestamp:Date.now()}),this.log("Added to sync queue:",i)}async processSyncQueue(){if(!this.isOnline||this.syncQueue.length===0)return;this.log("Processing sync queue:",this.syncQueue.length,"items");let i=[...this.syncQueue];this.syncQueue=[];for(let e of i)try{await this.scheduleBackgroundSync(e.tag,e.data)}catch(t){this.log("Failed to process sync queue item:",t),this.syncQueue.push(e)}}handleSyncComplete(i){this.log("Background sync completed:",i),this.emit("sync_complete",i)}async syncInBackground(){!this.isOnline||!this.serviceWorker||(this.log("Syncing in background..."),await this.scheduleBackgroundSync("anomaly_data"),await this.scheduleBackgroundSync("user_preferences"),await this.scheduleBackgroundSync("offline_actions"),this.emit("background_sync_initiated"))}setupInstallPrompt(){this.log("Setting up install prompt...")}async promptAppInstall(){if(!this.isInstallPromptAvailable||!this.installPrompt)throw new Error("Install prompt not available");try{let i=await this.installPrompt.prompt();this.log("Install prompt result:",i);let e=await i.userChoice;return this.log("User choice:",e),e.outcome==="accepted"?this.emit("install_accepted"):this.emit("install_dismissed"),this.installPrompt=null,this.isInstallPromptAvailable=!1,e}catch(i){throw this.log("Install prompt failed:",i),this.emit("install_failed",i),i}}isAppInstalled(){return window.matchMedia("(display-mode: standalone)").matches||window.navigator.standalone===!0}async clearCache(i=null){if(!("caches"in window)){this.log("Cache API not supported");return}try{if(i)await caches.delete(i),this.log("Cache cleared:",i);else{let e=await caches.keys();await Promise.all(e.map(t=>caches.delete(t))),this.log("All caches cleared")}this.emit("cache_cleared",{cacheName:i})}catch(e){throw this.log("Failed to clear cache:",e),e}}async getCacheSize(){if(!("caches"in window)||!("storage"in navigator)||!("estimate"in navigator.storage))return null;try{let i=await navigator.storage.estimate();return{usage:i.usage,quota:i.quota,usageDetails:i.usageDetails}}catch(i){return this.log("Failed to get cache size:",i),null}}handleCacheUpdate(i){this.log("Cache updated:",i),this.emit("cache_updated",i)}async enableOfflineMode(){if(!this.serviceWorker)throw new Error("Service worker required for offline mode");this.serviceWorker.active.postMessage({type:"ENABLE_OFFLINE_MODE"}),this.log("Offline mode enabled"),this.emit("offline_mode_enabled")}async disableOfflineMode(){this.serviceWorker&&(this.serviceWorker.active.postMessage({type:"DISABLE_OFFLINE_MODE"}),this.log("Offline mode disabled"),this.emit("offline_mode_disabled"))}urlBase64ToUint8Array(i){let e="=".repeat((4-i.length%4)%4),t=(i+e).replace(/-/g,"+").replace(/_/g,"/"),s=window.atob(t),n=new Uint8Array(s.length);for(let o=0;o<s.length;++o)n[o]=s.charCodeAt(o);return n}handleServiceWorkerError(i){this.log("Service worker error:",i),this.emit("sw_error",i)}getStatus(){return{isOnline:this.isOnline,isInstalled:this.isAppInstalled(),isInstallPromptAvailable:this.isInstallPromptAvailable,serviceWorkerRegistered:!!this.serviceWorker,pushSubscribed:!!this.pushSubscription,notificationPermission:this.notificationPermission,syncQueueLength:this.syncQueue.length}}async getCapabilities(){let i=this.checkBrowserSupport(),e=await this.getCacheSize();return{...i,cacheSize:e,isOnline:this.isOnline,isInstalled:this.isAppInstalled()}}on(i,e){return this.listeners.has(i)||this.listeners.set(i,new Set),this.listeners.get(i).add(e),()=>this.off(i,e)}off(i,e){let t=this.listeners.get(i);t&&(t.delete(e),t.size===0&&this.listeners.delete(i))}emit(i,e){let t=this.listeners.get(i);t&&t.forEach(s=>{try{s(e)}catch(n){this.log("Error in event listener:",n)}})}log(...i){this.options.enableLogging&&console.log("[PWAService]",...i)}destroy(){this.listeners.clear(),this.syncQueue=[],this.pushSubscription&&this.unsubscribeFromPush().catch(()=>{}),window.removeEventListener("online",this.handleOnline),window.removeEventListener("offline",this.handleOffline),window.removeEventListener("beforeinstallprompt",this.handleBeforeInstallPrompt),window.removeEventListener("appinstalled",this.handleAppInstalled),document.removeEventListener("visibilitychange",this.handleVisibilityChange)}},a=class{constructor(i,e={}){this.pwaService=i,this.options={showBanner:!0,showButton:!0,bannerDismissible:!0,buttonText:"Install App",bannerText:"Install this app for a better experience",position:"bottom",...e},this.isVisible=!1,this.banner=null,this.button=null,this.init()}init(){this.pwaService.on("install_prompt_available",()=>{this.show()}),this.pwaService.on("app_installed",()=>{this.hide()}),this.options.showBanner&&this.createBanner(),this.options.showButton&&this.createButton()}createBanner(){this.banner=document.createElement("div"),this.banner.className=`pwa-install-banner pwa-banner-${this.options.position}`,this.banner.style.display="none",this.banner.innerHTML=`
            <div class="pwa-banner-content">
                <div class="pwa-banner-icon">\u{1F4F1}</div>
                <div class="pwa-banner-text">${this.options.bannerText}</div>
                <div class="pwa-banner-actions">
                    <button class="pwa-install-btn">Install</button>
                    ${this.options.bannerDismissible?'<button class="pwa-dismiss-btn">\xD7</button>':""}
                </div>
            </div>
        `,this.banner.querySelector(".pwa-install-btn").onclick=()=>{this.install()},this.options.bannerDismissible&&(this.banner.querySelector(".pwa-dismiss-btn").onclick=()=>{this.hide()}),document.body.appendChild(this.banner)}createButton(){this.button=document.createElement("button"),this.button.className="pwa-install-button",this.button.textContent=this.options.buttonText,this.button.style.display="none",this.button.onclick=()=>this.install()}show(){this.pwaService.isAppInstalled()||(this.isVisible=!0,this.banner&&(this.banner.style.display="block",setTimeout(()=>{this.banner.classList.add("pwa-banner-visible")},100)),this.button&&(this.button.style.display="inline-block"))}hide(){this.isVisible=!1,this.banner&&(this.banner.classList.remove("pwa-banner-visible"),setTimeout(()=>{this.banner.style.display="none"},300)),this.button&&(this.button.style.display="none")}async install(){try{await this.pwaService.promptAppInstall()}catch(i){console.error("Installation failed:",i)}}getButton(){return this.button}destroy(){this.banner&&this.banner.parentNode&&this.banner.parentNode.removeChild(this.banner),this.button&&this.button.parentNode&&this.button.parentNode.removeChild(this.button)}},l=r;})();
