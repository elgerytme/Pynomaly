(()=>{var n=class{constructor(e={}){this.options={url:e.url||this.getWebSocketUrl(),protocols:e.protocols||["anomaly-detection-v1"],maxReconnectAttempts:e.maxReconnectAttempts||10,reconnectInterval:e.reconnectInterval||3e3,maxReconnectDelay:e.maxReconnectDelay||3e4,heartbeatInterval:e.heartbeatInterval||3e4,messageQueueSize:e.messageQueueSize||1e3,enableMessageQueue:e.enableMessageQueue!==!1,enableCompression:e.enableCompression!==!1,enableLogging:e.enableLogging||!1,autoConnect:e.autoConnect!==!1,authentication:e.authentication||null,...e},this.ws=null,this.isConnected=!1,this.reconnectAttempts=0,this.listeners=new Map,this.subscriptions=new Set,this.heartbeatTimer=null,this.reconnectTimer=null,this.messageQueue=[],this.connectionId=null,this.bindMethods(),this.options.autoConnect&&this.connect()}bindMethods(){this.handleOpen=this.handleOpen.bind(this),this.handleMessage=this.handleMessage.bind(this),this.handleError=this.handleError.bind(this),this.handleClose=this.handleClose.bind(this),this.sendHeartbeat=this.sendHeartbeat.bind(this)}getWebSocketUrl(){let e=window.location.protocol==="https:"?"wss:":"ws:",t=window.location.host;return`${e}//${t}/ws/anomaly-detection`}connect(){return this.isConnected||this.ws&&this.ws.readyState===WebSocket.CONNECTING?Promise.resolve():new Promise((e,t)=>{try{this.log("Connecting to WebSocket...",this.options.url),this.ws=new WebSocket(this.options.url,this.options.protocols),this.options.enableCompression&&this.ws.extensions&&(this.ws.extensions="permessage-deflate");let s=setTimeout(()=>{this.ws.readyState===WebSocket.CONNECTING&&(this.ws.close(),t(new Error("Connection timeout")))},1e4);this.ws.addEventListener("open",i=>{clearTimeout(s),this.handleOpen(i),e()}),this.ws.addEventListener("message",this.handleMessage),this.ws.addEventListener("error",i=>{clearTimeout(s),this.handleError(i),t(i)}),this.ws.addEventListener("close",this.handleClose)}catch(s){this.log("Connection error:",s),t(s)}})}handleOpen(e){this.log("WebSocket connected"),this.isConnected=!0,this.reconnectAttempts=0,this.startHeartbeat(),this.processMessageQueue(),this.resubscribe(),this.emit("connected",{event:e,connectionId:this.connectionId})}handleMessage(e){try{let t=JSON.parse(e.data);if(this.log("Received message:",t),t.type==="system"){this.handleSystemMessage(t);return}if(t.type==="pong"){this.log("Heartbeat acknowledged");return}this.emit("message",t),t.type&&this.emit(t.type,t.data||t),t.subscription&&this.emit(`subscription:${t.subscription}`,t.data||t)}catch(t){this.log("Error parsing message:",t,e.data),this.emit("error",{type:"parse_error",error:t,rawData:e.data})}}handleSystemMessage(e){switch(e.action){case"connection_established":this.connectionId=e.connectionId,this.log("Connection ID received:",this.connectionId);break;case"subscription_confirmed":this.log("Subscription confirmed:",e.subscription),this.emit("subscription_confirmed",e);break;case"subscription_error":this.log("Subscription error:",e.error),this.emit("subscription_error",e);break;case"rate_limit_exceeded":this.log("Rate limit exceeded"),this.emit("rate_limit_exceeded",e);break;case"server_shutdown":this.log("Server shutdown notification"),this.emit("server_shutdown",e);break;default:this.log("Unknown system message:",e)}}handleError(e){this.log("WebSocket error:",e),this.emit("error",{type:"connection_error",error:e})}handleClose(e){this.log("WebSocket closed:",e.code,e.reason),this.isConnected=!1,this.stopHeartbeat(),this.emit("disconnected",{code:e.code,reason:e.reason,wasClean:e.wasClean}),!e.wasClean&&this.reconnectAttempts<this.options.maxReconnectAttempts&&this.scheduleReconnect()}scheduleReconnect(){this.reconnectTimer&&clearTimeout(this.reconnectTimer),this.reconnectAttempts++;let e=Math.min(this.options.reconnectInterval*Math.pow(2,this.reconnectAttempts-1),3e4);this.log(`Scheduling reconnect attempt ${this.reconnectAttempts} in ${e}ms`),this.reconnectTimer=setTimeout(()=>{this.log(`Reconnect attempt ${this.reconnectAttempts}`),this.connect().catch(t=>{this.log("Reconnect failed:",t),this.reconnectAttempts<this.options.maxReconnectAttempts?this.scheduleReconnect():this.emit("max_reconnect_attempts_reached")})},e)}startHeartbeat(){this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.heartbeatTimer=setInterval(this.sendHeartbeat,this.options.heartbeatInterval)}stopHeartbeat(){this.heartbeatTimer&&(clearInterval(this.heartbeatTimer),this.heartbeatTimer=null)}sendHeartbeat(){this.isConnected&&this.send({type:"ping",timestamp:Date.now()})}send(e){if(!this.isConnected)return this.log("Queueing message (not connected):",e),this.messageQueue.push(e),!1;try{let t=typeof e=="string"?e:JSON.stringify(e);return this.ws.send(t),this.log("Sent message:",e),!0}catch(t){return this.log("Error sending message:",t),this.emit("error",{type:"send_error",error:t,data:e}),!1}}processMessageQueue(){for(;this.messageQueue.length>0;){let e=this.messageQueue.shift();this.send(e)}}subscribe(e,t={}){let s={type:"subscribe",subscription:e,params:t,timestamp:Date.now()};return this.subscriptions.add(e),this.send(s),this.log("Subscribed to:",e,t),()=>this.unsubscribe(e)}unsubscribe(e){this.subscriptions.delete(e),this.send({type:"unsubscribe",subscription:e,timestamp:Date.now()}),this.log("Unsubscribed from:",e)}resubscribe(){this.subscriptions.forEach(e=>{this.send({type:"subscribe",subscription:e,timestamp:Date.now()})})}on(e,t){return this.listeners.has(e)||this.listeners.set(e,new Set),this.listeners.get(e).add(t),()=>this.off(e,t)}off(e,t){let s=this.listeners.get(e);s&&(s.delete(t),s.size===0&&this.listeners.delete(e))}emit(e,t){let s=this.listeners.get(e);s&&s.forEach(i=>{try{i(t)}catch(a){this.log("Error in event listener:",a)}})}isConnected(){return this.isConnected&&this.ws&&this.ws.readyState===WebSocket.OPEN}getConnectionState(){if(!this.ws)return"disconnected";switch(this.ws.readyState){case WebSocket.CONNECTING:return"connecting";case WebSocket.OPEN:return"connected";case WebSocket.CLOSING:return"closing";case WebSocket.CLOSED:return"disconnected";default:return"unknown"}}getConnectionInfo(){return{connectionId:this.connectionId,state:this.getConnectionState(),reconnectAttempts:this.reconnectAttempts,subscriptions:Array.from(this.subscriptions),queuedMessages:this.messageQueue.length,url:this.options.url}}disconnect(){this.log("Disconnecting WebSocket"),this.stopHeartbeat(),this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=null),this.ws&&this.ws.close(1e3,"Client disconnect"),this.isConnected=!1,this.subscriptions.clear(),this.messageQueue=[]}log(...e){this.options.enableLogging&&console.log("[WebSocketService]",...e)}destroy(){this.disconnect(),this.listeners.clear(),this.resizeObserver&&this.resizeObserver.disconnect()}},r=class{constructor(e={}){this.options={enableRealTimeDetection:!0,enableAlerts:!0,enableMetrics:!0,enableModelUpdates:!0,bufferSize:1e3,...e},this.wsService=new n(e),this.dataBuffer=[],this.alertsBuffer=[],this.callbacks=new Map,this.init()}init(){this.wsService.on("connected",()=>{this.setupSubscriptions()}),this.wsService.on("anomaly_detected",e=>{this.handleAnomalyDetected(e)}),this.wsService.on("real_time_data",e=>{this.handleRealTimeData(e)}),this.wsService.on("alert",e=>{this.handleAlert(e)}),this.wsService.on("model_update",e=>{this.handleModelUpdate(e)}),this.wsService.on("system_metrics",e=>{this.handleSystemMetrics(e)})}setupSubscriptions(){this.options.enableRealTimeDetection&&(this.wsService.subscribe("anomaly_detection"),this.wsService.subscribe("real_time_data")),this.options.enableAlerts&&this.wsService.subscribe("alerts"),this.options.enableMetrics&&this.wsService.subscribe("system_metrics"),this.options.enableModelUpdates&&this.wsService.subscribe("model_updates")}handleAnomalyDetected(e){let t={id:e.id||Date.now(),timestamp:e.timestamp||new Date().toISOString(),score:e.score,severity:e.severity||this.calculateSeverity(e.score),features:e.features||[],metadata:e.metadata||{},datasetId:e.datasetId,modelId:e.modelId};this.emit("anomaly_detected",t),(t.severity==="critical"||t.severity==="high")&&this.handleAlert({type:"anomaly",severity:t.severity,message:`${t.severity.toUpperCase()} anomaly detected with score ${t.score.toFixed(3)}`,anomaly:t})}handleRealTimeData(e){this.dataBuffer.push({...e,receivedAt:Date.now()}),this.dataBuffer.length>this.options.bufferSize&&this.dataBuffer.shift(),this.emit("real_time_data",e)}handleAlert(e){let t={id:e.id||Date.now(),timestamp:e.timestamp||new Date().toISOString(),type:e.type,severity:e.severity||"info",message:e.message,data:e.data||e.anomaly,acknowledged:!1,receivedAt:Date.now()};this.alertsBuffer.unshift(t),this.alertsBuffer.length>this.options.bufferSize&&this.alertsBuffer.pop(),this.emit("alert",t)}handleModelUpdate(e){this.emit("model_update",{modelId:e.modelId,version:e.version,performance:e.performance,status:e.status,timestamp:e.timestamp||new Date().toISOString()})}handleSystemMetrics(e){this.emit("system_metrics",{...e,receivedAt:Date.now()})}calculateSeverity(e){return e>=.9?"critical":e>=.7?"high":e>=.5?"medium":"low"}startRealTimeDetection(e,t={}){return this.wsService.send({type:"start_detection",datasetId:e,config:{algorithm:t.algorithm||"isolation_forest",threshold:t.threshold||.5,windowSize:t.windowSize||100,...t}})}stopRealTimeDetection(e){return this.wsService.send({type:"stop_detection",datasetId:e})}sendDataPoint(e){return this.wsService.send({type:"data_point",data:e,timestamp:Date.now()})}sendBatchData(e){return this.wsService.send({type:"batch_data",data:e,count:e.length,timestamp:Date.now()})}acknowledgeAlert(e){let t=this.alertsBuffer.find(s=>s.id===e);return t&&(t.acknowledged=!0,t.acknowledgedAt=Date.now()),this.wsService.send({type:"acknowledge_alert",alertId:e,timestamp:Date.now()})}requestModelRetraining(e,t={}){return this.wsService.send({type:"request_retraining",modelId:e,config:t,timestamp:Date.now()})}getRecentData(e=100){return this.dataBuffer.slice(-e)}getRecentAlerts(e=50){return this.alertsBuffer.slice(0,e)}getUnacknowledgedAlerts(){return this.alertsBuffer.filter(e=>!e.acknowledged)}on(e,t){return this.wsService.on(e,t)}off(e,t){return this.wsService.off(e,t)}emit(e,t){return this.wsService.emit(e,t)}connect(){return this.wsService.connect()}disconnect(){return this.wsService.disconnect()}isConnected(){return this.wsService.isConnected()}getConnectionInfo(){return{...this.wsService.getConnectionInfo(),buffers:{data:this.dataBuffer.length,alerts:this.alertsBuffer.length,unacknowledgedAlerts:this.getUnacknowledgedAlerts().length}}}destroy(){this.wsService.destroy(),this.dataBuffer=[],this.alertsBuffer=[],this.callbacks.clear()}},c=r;})();
