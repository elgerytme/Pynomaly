(()=>{var n=class{constructor(e={}){this.options={apiBaseUrl:e.apiBaseUrl||"/api/auth",tokenKey:e.tokenKey||"pynomaly_token",refreshTokenKey:e.refreshTokenKey||"pynomaly_refresh_token",userKey:e.userKey||"pynomaly_user",autoRefresh:e.autoRefresh!==!1,refreshThreshold:e.refreshThreshold||3e5,sessionTimeout:e.sessionTimeout||36e5,enableLogging:e.enableLogging||!1,...e},this.currentUser=null,this.token=null,this.refreshToken=null,this.refreshTimer=null,this.sessionTimer=null,this.listeners=new Map,this.init()}init(){this.loadStoredAuth(),this.startTokenRefreshTimer(),this.bindEvents()}bindEvents(){window.addEventListener("storage",e=>{(e.key===this.options.tokenKey||e.key===this.options.userKey)&&this.loadStoredAuth()}),document.addEventListener("visibilitychange",()=>{!document.hidden&&this.isAuthenticated()&&this.shouldRefreshToken()&&this.refreshAccessToken()})}async login(e){try{this.log("Attempting login for user:",e.username);let s=await this.makeRequest("/login",{method:"POST",body:JSON.stringify(e)});if(s.success)return await this.handleAuthResponse(s),this.emit("login",{user:this.currentUser}),{success:!0,user:this.currentUser};throw new Error(s.message||"Login failed")}catch(s){throw this.log("Login error:",s),this.emit("login_error",{error:s.message}),s}}async register(e){try{this.log("Attempting registration for user:",e.username);let s=await this.makeRequest("/register",{method:"POST",body:JSON.stringify(e)});if(s.success)return this.emit("registration_success",{message:s.message}),{success:!0,message:s.message};throw new Error(s.message||"Registration failed")}catch(s){throw this.log("Registration error:",s),this.emit("registration_error",{error:s.message}),s}}async logout(){try{this.token&&await this.makeRequest("/logout",{method:"POST",headers:{Authorization:`Bearer ${this.token}`}})}catch(e){this.log("Logout API error (continuing with local logout):",e)}finally{this.clearAuth(),this.emit("logout")}}async refreshAccessToken(){if(!this.refreshToken)throw new Error("No refresh token available");try{this.log("Refreshing access token");let e=await this.makeRequest("/refresh",{method:"POST",body:JSON.stringify({refreshToken:this.refreshToken})});if(e.success)return this.setToken(e.accessToken),e.refreshToken&&this.setRefreshToken(e.refreshToken),this.emit("token_refreshed"),e.accessToken;throw new Error(e.message||"Token refresh failed")}catch(e){throw this.log("Token refresh error:",e),this.clearAuth(),this.emit("token_refresh_error",{error:e.message}),e}}async verifyEmail(e){try{let s=await this.makeRequest("/verify-email",{method:"POST",body:JSON.stringify({token:e})});if(s.success)return this.emit("email_verified",{message:s.message}),{success:!0,message:s.message};throw new Error(s.message||"Email verification failed")}catch(s){throw this.log("Email verification error:",s),this.emit("email_verification_error",{error:s.message}),s}}async requestPasswordReset(e){try{let s=await this.makeRequest("/request-password-reset",{method:"POST",body:JSON.stringify({email:e})});if(s.success)return this.emit("password_reset_requested",{message:s.message}),{success:!0,message:s.message};throw new Error(s.message||"Password reset request failed")}catch(s){throw this.log("Password reset request error:",s),this.emit("password_reset_error",{error:s.message}),s}}async resetPassword(e,s){try{let r=await this.makeRequest("/reset-password",{method:"POST",body:JSON.stringify({token:e,newPassword:s})});if(r.success)return this.emit("password_reset_success",{message:r.message}),{success:!0,message:r.message};throw new Error(r.message||"Password reset failed")}catch(r){throw this.log("Password reset error:",r),this.emit("password_reset_error",{error:r.message}),r}}async changePassword(e,s){try{let r=await this.makeAuthenticatedRequest("/change-password",{method:"POST",body:JSON.stringify({currentPassword:e,newPassword:s})});if(r.success)return this.emit("password_changed",{message:r.message}),{success:!0,message:r.message};throw new Error(r.message||"Password change failed")}catch(r){throw this.log("Password change error:",r),this.emit("password_change_error",{error:r.message}),r}}async updateProfile(e){try{let s=await this.makeAuthenticatedRequest("/profile",{method:"PUT",body:JSON.stringify(e)});if(s.success)return this.currentUser={...this.currentUser,...s.user},this.storeUser(this.currentUser),this.emit("profile_updated",{user:this.currentUser}),{success:!0,user:this.currentUser};throw new Error(s.message||"Profile update failed")}catch(s){throw this.log("Profile update error:",s),this.emit("profile_update_error",{error:s.message}),s}}hasRole(e){return this.currentUser&&this.currentUser.roles&&this.currentUser.roles.includes(e)}hasPermission(e){return this.currentUser&&this.currentUser.permissions&&this.currentUser.permissions.includes(e)}hasAnyRole(e){return e.some(s=>this.hasRole(s))}hasAllRoles(e){return e.every(s=>this.hasRole(s))}hasAnyPermission(e){return e.some(s=>this.hasPermission(s))}hasAllPermissions(e){return e.every(s=>this.hasPermission(s))}canAccess(e,s="read"){let r=this.getResourcePermissions(e);return r.includes(`${e}:${s}`)||r.includes(`${e}:*`)||this.hasRole("admin")}getResourcePermissions(e){return!this.currentUser||!this.currentUser.permissions?[]:this.currentUser.permissions.filter(s=>s.startsWith(e+":"))}setToken(e){this.token=e,this.storeToken(e),this.startTokenRefreshTimer(),this.startSessionTimer()}setRefreshToken(e){this.refreshToken=e,this.storeRefreshToken(e)}getToken(){return this.token}isAuthenticated(){return!!this.token&&!!this.currentUser&&!this.isTokenExpired()}isTokenExpired(){if(!this.token)return!0;try{return this.parseJWT(this.token).exp*1e3<Date.now()}catch(e){return this.log("Error parsing token:",e),!0}}shouldRefreshToken(){if(!this.token)return!1;try{return this.parseJWT(this.token).exp*1e3-Date.now()<this.options.refreshThreshold}catch{return!1}}parseJWT(e){let r=e.split(".")[1].replace(/-/g,"+").replace(/_/g,"/"),t=decodeURIComponent(atob(r).split("").map(function(i){return"%"+("00"+i.charCodeAt(0).toString(16)).slice(-2)}).join(""));return JSON.parse(t)}startSessionTimer(){this.sessionTimer&&clearTimeout(this.sessionTimer),this.sessionTimer=setTimeout(()=>{this.emit("session_expired"),this.clearAuth()},this.options.sessionTimeout)}extendSession(){this.startSessionTimer(),this.emit("session_extended")}startTokenRefreshTimer(){!this.options.autoRefresh||this.refreshTimer||(this.shouldRefreshToken()&&this.refreshAccessToken().catch(e=>{this.log("Auto-refresh failed:",e)}),this.refreshTimer=setInterval(()=>{this.isAuthenticated()&&this.shouldRefreshToken()&&this.refreshAccessToken().catch(e=>{this.log("Auto-refresh failed:",e)})},6e4))}stopTokenRefreshTimer(){this.refreshTimer&&(clearInterval(this.refreshTimer),this.refreshTimer=null)}storeToken(e){try{localStorage.setItem(this.options.tokenKey,e)}catch(s){this.log("Error storing token:",s)}}storeRefreshToken(e){try{localStorage.setItem(this.options.refreshTokenKey,e)}catch(s){this.log("Error storing refresh token:",s)}}storeUser(e){try{localStorage.setItem(this.options.userKey,JSON.stringify(e))}catch(s){this.log("Error storing user:",s)}}loadStoredAuth(){try{let e=localStorage.getItem(this.options.tokenKey),s=localStorage.getItem(this.options.refreshTokenKey),r=localStorage.getItem(this.options.userKey);e&&r&&(this.token=e,this.refreshToken=s,this.currentUser=JSON.parse(r),this.isTokenExpired()?this.refreshToken?this.refreshAccessToken().catch(()=>{this.clearAuth()}):this.clearAuth():(this.startTokenRefreshTimer(),this.startSessionTimer(),this.emit("auth_restored",{user:this.currentUser})))}catch(e){this.log("Error loading stored auth:",e),this.clearAuth()}}clearAuth(){this.currentUser=null,this.token=null,this.refreshToken=null,this.stopTokenRefreshTimer(),this.sessionTimer&&(clearTimeout(this.sessionTimer),this.sessionTimer=null);try{localStorage.removeItem(this.options.tokenKey),localStorage.removeItem(this.options.refreshTokenKey),localStorage.removeItem(this.options.userKey)}catch(e){this.log("Error clearing auth storage:",e)}}async makeRequest(e,s={}){let r=`${this.options.apiBaseUrl}${e}`,i={...{headers:{"Content-Type":"application/json",...s.headers}},...s},o=await fetch(r,i);if(!o.ok)throw o.status===401&&(this.clearAuth(),this.emit("unauthorized")),new Error(`HTTP ${o.status}: ${o.statusText}`);return await o.json()}async makeAuthenticatedRequest(e,s={}){if(!this.isAuthenticated())throw new Error("Not authenticated");let r={...s,headers:{Authorization:`Bearer ${this.token}`,...s.headers}};try{return await this.makeRequest(e,r)}catch(t){if(t.message.includes("401")&&this.refreshToken)return await this.refreshAccessToken(),r.headers.Authorization=`Bearer ${this.token}`,await this.makeRequest(e,r);throw t}}async getUsers(e={}){let s=new URLSearchParams(e).toString(),r=`/users${s?`?${s}`:""}`;return(await this.makeAuthenticatedRequest(r)).users||[]}async createUser(e){let s=await this.makeAuthenticatedRequest("/users",{method:"POST",body:JSON.stringify(e)});return this.emit("user_created",{user:s.user}),s.user}async updateUser(e,s){let r=await this.makeAuthenticatedRequest(`/users/${e}`,{method:"PUT",body:JSON.stringify(s)});return this.emit("user_updated",{user:r.user}),r.user}async deleteUser(e){await this.makeAuthenticatedRequest(`/users/${e}`,{method:"DELETE"}),this.emit("user_deleted",{userId:e})}async assignRole(e,s){let r=await this.makeAuthenticatedRequest(`/users/${e}/roles`,{method:"POST",body:JSON.stringify({role:s})});return this.emit("role_assigned",{userId:e,role:s}),r}async removeRole(e,s){let r=await this.makeAuthenticatedRequest(`/users/${e}/roles/${s}`,{method:"DELETE"});return this.emit("role_removed",{userId:e,role:s}),r}async handleAuthResponse(e){e.accessToken&&this.setToken(e.accessToken),e.refreshToken&&this.setRefreshToken(e.refreshToken),e.user&&(this.currentUser=e.user,this.storeUser(this.currentUser))}getCurrentUser(){return this.currentUser}getUserRoles(){return this.currentUser?this.currentUser.roles||[]:[]}getUserPermissions(){return this.currentUser?this.currentUser.permissions||[]:[]}on(e,s){return this.listeners.has(e)||this.listeners.set(e,new Set),this.listeners.get(e).add(s),()=>this.off(e,s)}off(e,s){let r=this.listeners.get(e);r&&(r.delete(s),r.size===0&&this.listeners.delete(e))}emit(e,s){let r=this.listeners.get(e);r&&r.forEach(t=>{try{t(s)}catch(i){this.log("Error in event listener:",i)}})}log(...e){this.options.enableLogging&&console.log("[AuthService]",...e)}destroy(){this.clearAuth(),this.listeners.clear(),window.removeEventListener("storage",this.loadStoredAuth),document.removeEventListener("visibilitychange",this.handleVisibilityChange)}},h=class{constructor(e){this.authService=e}showIfAuthorized(e,s){let r=this.checkAuthorization(s);return e&&(e.style.display=r?"":"none"),r}enableIfAuthorized(e,s){let r=this.checkAuthorization(s);return e&&(e.disabled=!r),r}checkAuthorization(e){if(!this.authService.isAuthenticated())return!1;if(e.roles){if(e.requireAll){if(!this.authService.hasAllRoles(e.roles))return!1}else if(!this.authService.hasAnyRole(e.roles))return!1}if(e.permissions){if(e.requireAll){if(!this.authService.hasAllPermissions(e.permissions))return!1}else if(!this.authService.hasAnyPermission(e.permissions))return!1}return e.custom?e.custom(this.authService.getCurrentUser()):!0}protectRoute(e,s){return(...r)=>{if(this.checkAuthorization(s))return e(...r);throw new Error("Access denied")}}protectApiCall(e,s){return async(...r)=>{if(this.checkAuthorization(s))return await e(...r);throw new Error("Access denied")}}},c=n;})();
