{
  "metadata": {
    "tool": "pynomaly-cli-inspector",
    "version": "1.0.0",
    "timestamp": "2025-07-08T13:40:39.734429",
    "total_files": 34
  },
  "files": [
    {
      "file": "src\\pynomaly\\presentation\\cli\\alert.py",
      "commands": [
        {
          "command": "create",
          "function": "create",
          "docstring": "Create a new alert with intelligent processing.",
          "options": [
            {
              "name": "title",
              "type": "Annotated[str, typer.Option(help='Alert title')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "description",
              "type": "Annotated[str, typer.Option(help='Alert description')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "severity",
              "type": "Annotated[str, typer.Option('--severity', help='Alert severity', choices=['critical', 'high', 'medium', 'low', 'info'])]",
              "default": "medium",
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "category",
              "type": "Annotated[str, typer.Option('--category', help='Alert category', choices=['anomaly_detection', 'system_performance', 'security', 'data_quality', 'model_drift', 'resource_usage', 'tenant_quota', 'infrastructure', 'authentication', 'compliance'])]",
              "default": "anomaly_detection",
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "source",
              "type": "Annotated[str, typer.Option('--source', help='Alert source', choices=['detector', 'system_monitor', 'tenant_service', 'security_service', 'performance_monitor', 'data_pipeline', 'model_service', 'external_webhook'])]",
              "default": "detector",
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "tenant_id",
              "type": "Annotated[str | None, typer.Option(help='Tenant ID (UUID)')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "detector_id",
              "type": "Annotated[str | None, typer.Option(help='Detector ID (UUID)')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "anomaly_score",
              "type": "Annotated[float | None, typer.Option(help='Anomaly score (0.0-1.0)')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "confidence",
              "type": "Annotated[float | None, typer.Option(help='Confidence level (0.0-1.0)')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "affected_resources",
              "type": "Annotated[list[str], typer.Option('--affected-resources', help='Affected resources', multiple=True)]",
              "default": [],
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "business_impact",
              "type": "Annotated[str | None, typer.Option('--business-impact', help='Business impact level', choices=['low', 'medium', 'high', 'critical'])]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "message",
              "type": "Annotated[str | None, typer.Option(help='Alert message')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        },
        {
          "command": "list",
          "function": "list",
          "docstring": "List alerts with intelligent filtering.",
          "options": [
            {
              "name": "status",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "severity",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "category",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "tenant_id",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "limit",
              "type": "int",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "include_suppressed",
              "type": "bool",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "output_format",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            }
          ]
        },
        {
          "command": "show",
          "function": "show",
          "docstring": "Show detailed information about an alert.",
          "options": [
            {
              "name": "alert_id",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            }
          ]
        },
        {
          "command": "acknowledge",
          "function": "acknowledge",
          "docstring": "Acknowledge an alert.",
          "options": [
            {
              "name": "alert_id",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "user",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "note",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            }
          ]
        },
        {
          "command": "resolve",
          "function": "resolve",
          "docstring": "Resolve an alert.",
          "options": [
            {
              "name": "alert_id",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "user",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "note",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "quality",
              "type": "float | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            }
          ]
        },
        {
          "command": "suppress",
          "function": "suppress",
          "docstring": "Suppress an alert.",
          "options": [
            {
              "name": "alert_id",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "user",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "reason",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "duration",
              "type": "int | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            }
          ]
        },
        {
          "command": "escalate",
          "function": "escalate",
          "docstring": "Escalate an alert.",
          "options": [
            {
              "name": "alert_id",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "user",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "reason",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            }
          ]
        },
        {
          "command": "analytics",
          "function": "analytics",
          "docstring": "Show comprehensive alert analytics.",
          "options": [
            {
              "name": "days",
              "type": "int",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "output_format",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "output_file",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            }
          ]
        },
        {
          "command": "check-escalations",
          "function": "check_escalations",
          "docstring": "Check for alerts that need escalation.",
          "options": [
            {
              "name": "status",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            }
          ]
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "alert_commands",
          "help": "Intelligent alert management commands.",
          "add_completion": false,
          "rich_markup_mode": null,
          "parameters": {
            "name": "alert"
          }
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "uuid",
          "name": "UUID",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Annotated",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.intelligent_alert_service",
          "name": "IntelligentAlertService",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities.alert",
          "name": "AlertCategory",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities.alert",
          "name": "AlertMetadata",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities.alert",
          "name": "AlertSeverity",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities.alert",
          "name": "AlertSource",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities.alert",
          "name": "AlertStatus",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities.alert",
          "name": "NoiseClassification",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\app.py",
      "commands": [
        {
          "command": "version",
          "function": "version",
          "docstring": "Show version information.",
          "options": []
        },
        {
          "command": "settings",
          "function": "settings",
          "docstring": "Manage application settings.",
          "options": [
            {
              "name": "show",
              "type": "bool",
              "default": false,
              "help": "Show current settings",
              "option_names": [
                "--show"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "set_key",
              "type": "str | None",
              "default": null,
              "help": "Set setting key=value",
              "option_names": [
                "--set"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "status",
          "function": "status",
          "docstring": "Show system status.",
          "options": []
        },
        {
          "command": "generate-config",
          "function": "generate_config",
          "docstring": "Generate configuration files for tests or experiments from CLI options.",
          "options": [
            {
              "name": "config_type",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Config type: 'test', 'experiment', or 'autonomous'",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "output",
              "type": "Path",
              "default": null,
              "help": "Output file path",
              "option_names": [
                "--output",
                "-o"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "format",
              "type": "str",
              "default": null,
              "help": "Output format (json, yaml)",
              "option_names": [
                "--format",
                "-f"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "detector",
              "type": "str | None",
              "default": null,
              "help": "Detector algorithm",
              "option_names": [
                "--detector"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "dataset",
              "type": "str | None",
              "default": null,
              "help": "Dataset path or name",
              "option_names": [
                "--dataset"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "contamination",
              "type": "float | None",
              "default": null,
              "help": "Contamination rate",
              "option_names": [
                "--contamination"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "max_algorithms",
              "type": "int | None",
              "default": null,
              "help": "Max algorithms to try",
              "option_names": [
                "--max-algorithms"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "auto_tune",
              "type": "bool | None",
              "default": null,
              "help": "Enable auto-tuning",
              "option_names": [
                "--auto-tune"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "cross_validation",
              "type": "bool | None",
              "default": null,
              "help": "Enable cross-validation",
              "option_names": [
                "--cv"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "cv_folds",
              "type": "int | None",
              "default": null,
              "help": "Number of CV folds",
              "option_names": [
                "--folds"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "save_results",
              "type": "bool | None",
              "default": null,
              "help": "Save results",
              "option_names": [
                "--save"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "export_format",
              "type": "str | None",
              "default": null,
              "help": "Export format",
              "option_names": [
                "--export-format"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "verbose",
              "type": "bool | None",
              "default": null,
              "help": "Verbose output",
              "option_names": [
                "--verbose"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "include_examples",
              "type": "bool",
              "default": true,
              "help": "Include usage examples",
              "option_names": [
                "--examples/--no-examples"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "quickstart",
          "function": "quickstart",
          "docstring": "Run interactive quickstart guide.",
          "options": []
        }
      ],
      "subapps": {
        "auto": {
          "name": "auto",
          "module": "autonomous.app",
          "help": "Autonomous anomaly detection (auto-configure and run)",
          "commands": []
        },
        "automl": {
          "name": "automl",
          "module": "automl.app",
          "help": "Advanced AutoML & hyperparameter optimization",
          "commands": []
        },
        "config": {
          "name": "config",
          "module": "config_cli.app",
          "help": "Configuration management (capture, export, import)",
          "commands": []
        },
        "detector": {
          "name": "detector",
          "module": "detectors.app",
          "help": "Manage anomaly detectors",
          "commands": []
        },
        "dataset": {
          "name": "dataset",
          "module": "datasets.app",
          "help": "Manage datasets",
          "commands": []
        },
        "data": {
          "name": "data",
          "module": "preprocessing.app",
          "help": "Data preprocessing (clean, transform, pipeline)",
          "commands": []
        },
        "detect": {
          "name": "detect",
          "module": "detection.app",
          "help": "Run anomaly detection",
          "commands": []
        },
        "tdd": {
          "name": "tdd",
          "module": "tdd.app",
          "help": "Test-Driven Development (TDD) management and enforcement",
          "commands": []
        },
        "deep-learning": {
          "name": "deep-learning",
          "module": "deep_learning.app",
          "help": "🧠 Deep learning anomaly detection (PyTorch, TensorFlow, JAX)",
          "commands": []
        },
        "ensemble": {
          "name": "ensemble",
          "module": "ensemble.app",
          "help": "🤖 Advanced ensemble methods and meta-learning",
          "commands": []
        },
        "explainability": {
          "name": "explainability",
          "module": "explainability.app",
          "help": "🔍 Explainable AI (model interpretability, bias analysis)",
          "commands": []
        },
        "selection": {
          "name": "selection",
          "module": "selection.app",
          "help": "🧠 Intelligent algorithm selection with learning capabilities",
          "commands": []
        },
        "server": {
          "name": "server",
          "module": "server.app",
          "help": "Manage API server",
          "commands": []
        },
        "recommend": {
          "name": "recommend",
          "module": "recommendation.app",
          "help": "🧠 Intelligent configuration recommendations",
          "commands": []
        }
      },
      "typer_apps": [
        {
          "name": "app",
          "help": "Pynomaly - State-of-the-art anomaly detection CLI",
          "add_completion": true,
          "rich_markup_mode": "rich",
          "parameters": {
            "name": "pynomaly"
          }
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "__future__",
          "name": "annotations",
          "asname": null
        },
        {
          "type": "import",
          "name": "sys",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "automl",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "autonomous",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "deep_learning",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "ensemble",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "explainability",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "selection",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "config",
          "asname": "config_cli"
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "datasets",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "detection",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "detectors",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "preprocessing",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "server",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "tdd",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli.export",
          "name": "export_app",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli.performance",
          "name": "performance_app",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli.benchmark",
          "name": "benchmark_app",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "recommendation",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli.container",
          "name": "get_cli_container",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli.dashboard",
          "name": "app",
          "asname": "dashboard_app"
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "asname": null
        },
        {
          "type": "import",
          "name": "yaml",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\automl.py",
      "commands": [
        {
          "command": "optimize",
          "function": "optimize",
          "docstring": "Optimize algorithm hyperparameters using advanced AutoML.",
          "options": [
            {
              "name": "dataset_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to dataset file",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "algorithm_name",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Algorithm name to optimize",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "objectives",
              "type": "list[str] | None",
              "default": null,
              "help": "Optimization objectives (accuracy, speed, interpretability, memory_efficiency)",
              "option_names": [
                "-o",
                "--objectives"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "max_time",
              "type": "int",
              "default": 3600,
              "help": "Maximum optimization time in seconds",
              "option_names": [
                "-t",
                "--max-time"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "max_trials",
              "type": "int",
              "default": 100,
              "help": "Maximum number of optimization trials",
              "option_names": [
                "-n",
                "--max-trials"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "max_memory",
              "type": "int",
              "default": 4096,
              "help": "Maximum memory usage in MB",
              "option_names": [
                "-m",
                "--max-memory"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "parallel_jobs",
              "type": "int",
              "default": 1,
              "help": "Number of parallel optimization jobs",
              "option_names": [
                "-j",
                "--parallel-jobs"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output",
              "type": "Path | None",
              "default": null,
              "help": "Output file for optimization results",
              "option_names": [
                "--output"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "disable_learning",
              "type": "bool",
              "default": false,
              "help": "Disable learning from optimization history",
              "option_names": [
                "--disable-learning"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "prefer_speed",
              "type": "bool",
              "default": false,
              "help": "Prefer speed over accuracy in optimization",
              "option_names": [
                "--prefer-speed"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "gpu",
              "type": "bool",
              "default": false,
              "help": "Enable GPU acceleration if available",
              "option_names": [
                "--gpu"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "compare",
          "function": "compare",
          "docstring": "Compare multiple algorithms using AutoML optimization.",
          "options": [
            {
              "name": "dataset_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to dataset file",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "algorithms",
              "type": "list[str] | None",
              "default": null,
              "help": "Algorithms to compare (default: all available)",
              "option_names": [
                "-a",
                "--algorithms"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "max_time_per_algorithm",
              "type": "int",
              "default": 1800,
              "help": "Maximum time per algorithm in seconds",
              "option_names": [
                "-t",
                "--max-time-per-algorithm"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "max_trials_per_algorithm",
              "type": "int",
              "default": 50,
              "help": "Maximum trials per algorithm",
              "option_names": [
                "-n",
                "--max-trials-per-algorithm"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output",
              "type": "Path | None",
              "default": null,
              "help": "Output file for comparison results",
              "option_names": [
                "--output"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "insights",
          "function": "insights",
          "docstring": "Analyze optimization history and learning insights.",
          "options": [
            {
              "name": "storage_path",
              "type": "Path",
              "default": null,
              "help": "AutoML storage path",
              "option_names": [
                "--storage-path"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        },
        {
          "command": "predict-performance",
          "function": "predict_performance",
          "docstring": "Predict algorithm performance based on dataset characteristics.",
          "options": [
            {
              "name": "dataset_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to dataset file",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "algorithm_name",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Algorithm to predict performance for",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "storage_path",
              "type": "Path",
              "default": null,
              "help": "AutoML storage path",
              "option_names": [
                "--storage-path"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        },
        {
          "command": "run",
          "function": "run",
          "docstring": "Run AutoML hyperparameter optimization for PyOD algorithms.",
          "options": [
            {
              "name": "dataset_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to dataset file",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "algorithm_name",
              "type": "str",
              "default": "<ellipsis>",
              "help": "PyOD algorithm name to optimize",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "max_trials",
              "type": "int",
              "default": 100,
              "help": "Maximum number of optimization trials",
              "option_names": [
                "-n",
                "--max-trials"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "storage",
              "type": "Path",
              "default": null,
              "help": "Storage path for trials",
              "option_names": [
                "--storage"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "output",
              "type": "Path | None",
              "default": null,
              "help": "Output file for optimization results",
              "option_names": [
                "--output"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "app",
          "help": "",
          "add_completion": false,
          "rich_markup_mode": null,
          "parameters": {}
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "__future__",
          "name": "annotations",
          "asname": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "import",
          "name": "sys",
          "asname": null
        },
        {
          "type": "import",
          "name": "time",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "BarColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TaskProgressColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.dto.optimization_dto",
          "name": "OptimizationObjectiveDTO",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.dto.optimization_dto",
          "name": "ResourceConstraintsDTO",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.dto.optimization_dto",
          "name": "create_default_objectives",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.advanced_automl_service",
          "name": "AdvancedAutoMLService",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities",
          "name": "Dataset",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.services.advanced_detection_service",
          "name": "DetectionAlgorithm",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.services.automl_service",
          "name": "get_automl_service",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.services.automl_service",
          "name": "OptimizationConfig",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.services.automl_service",
          "name": "OptimizationMetric",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.services.automl_service",
          "name": "SearchStrategy",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.config.feature_flags",
          "name": "require_feature",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.data_loaders.csv_loader",
          "name": "CSVLoader",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.data_loaders.parquet_loader",
          "name": "ParquetLoader",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\autonomous.py",
      "commands": [
        {
          "command": "detect",
          "function": "autonomous_detect",
          "docstring": "Run fully autonomous anomaly detection on any data source.",
          "options": [
            {
              "name": "data_source",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Path to data file or connection string",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "output",
              "type": "Path | None",
              "default": null,
              "help": "Export results to file",
              "option_names": [
                "--output",
                "-o"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "max_algorithms",
              "type": "int",
              "default": 5,
              "help": "Maximum algorithms to try",
              "option_names": [
                "--max-algorithms",
                "-a"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "confidence_threshold",
              "type": "float",
              "default": 0.8,
              "help": "Minimum confidence threshold",
              "option_names": [
                "--confidence",
                "-c"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "auto_tune",
              "type": "bool",
              "default": true,
              "help": "Auto-tune hyperparameters",
              "option_names": [
                "--auto-tune/--no-tune"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "save_results",
              "type": "bool",
              "default": true,
              "help": "Save results to database",
              "option_names": [
                "--save/--no-save"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "export_format",
              "type": "str",
              "default": null,
              "help": "Export format (csv, parquet, excel)",
              "option_names": [
                "--format",
                "-f"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "verbose",
              "type": "bool",
              "default": false,
              "help": "Verbose output",
              "option_names": [
                "--verbose",
                "-v"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "max_samples",
              "type": "int",
              "default": 10000,
              "help": "Maximum samples for analysis",
              "option_names": [
                "--max-samples"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "enable_preprocessing",
              "type": "bool",
              "default": true,
              "help": "Enable intelligent preprocessing",
              "option_names": [
                "--preprocess/--no-preprocess"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "quality_threshold",
              "type": "float",
              "default": 0.8,
              "help": "Data quality threshold for preprocessing",
              "option_names": [
                "--quality-threshold"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "max_preprocessing_time",
              "type": "float",
              "default": 300.0,
              "help": "Maximum preprocessing time (seconds)",
              "option_names": [
                "--max-preprocess-time"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "preprocessing_strategy",
              "type": "str",
              "default": null,
              "help": "Preprocessing strategy: auto, aggressive, conservative, minimal",
              "option_names": [
                "--preprocessing-strategy"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        },
        {
          "command": "profile",
          "function": "profile_data",
          "docstring": "Profile a dataset to understand its characteristics for anomaly detection.",
          "options": [
            {
              "name": "data_source",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Path to data file",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "max_samples",
              "type": "int",
              "default": 10000,
              "help": "Maximum samples for analysis",
              "option_names": [
                "--max-samples"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "verbose",
              "type": "bool",
              "default": false,
              "help": "Verbose output",
              "option_names": [
                "--verbose",
                "-v"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "quick",
          "function": "quick_detect",
          "docstring": "Quick anomaly detection with minimal configuration.",
          "options": [
            {
              "name": "data_source",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Path to data file",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "algorithm",
              "type": "str | None",
              "default": null,
              "help": "Force specific algorithm",
              "option_names": [
                "--algorithm",
                "-a"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "contamination",
              "type": "float | None",
              "default": null,
              "help": "Contamination rate",
              "option_names": [
                "--contamination",
                "-c"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output",
              "type": "Path | None",
              "default": null,
              "help": "Export results to file",
              "option_names": [
                "--output",
                "-o"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "app",
          "help": "",
          "add_completion": false,
          "rich_markup_mode": null,
          "parameters": {}
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "__future__",
          "name": "annotations",
          "asname": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "BarColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TimeElapsedColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.autonomous_service",
          "name": "AutonomousConfig",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.autonomous_service",
          "name": "AutonomousDetectionService",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.data_loaders.csv_loader",
          "name": "CSVLoader",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.data_loaders.excel_loader",
          "name": "ExcelLoader",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.data_loaders.json_loader",
          "name": "JSONLoader",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.data_loaders.parquet_loader",
          "name": "ParquetLoader",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli.container",
          "name": "get_cli_container",
          "asname": null
        },
        {
          "type": "import",
          "name": "pandas",
          "asname": "pd"
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\autonomous_enhancements.py",
      "commands": [
        {
          "command": "detect-all",
          "function": "autonomous_detect_with_all_classifiers",
          "docstring": "Run autonomous detection using ALL available classifiers.",
          "options": [
            {
              "name": "data_source",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Path to data file or connection string",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "output",
              "type": "Path | None",
              "default": null,
              "help": "Export results to file",
              "option_names": [
                "--output",
                "-o"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "max_time",
              "type": "int",
              "default": 1800,
              "help": "Maximum time for detection (seconds)",
              "option_names": [
                "--max-time"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "confidence_threshold",
              "type": "float",
              "default": 0.6,
              "help": "Lower confidence for more algorithms",
              "option_names": [
                "--confidence",
                "-c"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "export_format",
              "type": "str",
              "default": null,
              "help": "Export format (csv, parquet, excel)",
              "option_names": [
                "--format",
                "-f"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "verbose",
              "type": "bool",
              "default": false,
              "help": "Verbose output",
              "option_names": [
                "--verbose",
                "-v"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "ensemble_best",
              "type": "bool",
              "default": true,
              "help": "Create ensemble from best algorithms",
              "option_names": [
                "--ensemble/--no-ensemble"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "detect-by-family",
          "function": "autonomous_detect_by_family",
          "docstring": "Run detection organized by algorithm families with hierarchical ensembles.",
          "options": [
            {
              "name": "data_source",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Path to data file or connection string",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "families",
              "type": "list[str]",
              "default": null,
              "help": "Algorithm families to use",
              "option_names": [
                "--family"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "output",
              "type": "Path | None",
              "default": null,
              "help": "Export results to file",
              "option_names": [
                "--output",
                "-o"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "ensemble_within_family",
              "type": "bool",
              "default": true,
              "help": "Create ensemble within each family",
              "option_names": [
                "--family-ensemble/--no-family-ensemble"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "meta_ensemble",
              "type": "bool",
              "default": true,
              "help": "Create meta-ensemble from family results",
              "option_names": [
                "--meta-ensemble/--no-meta-ensemble"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "export_format",
              "type": "str",
              "default": null,
              "help": "Export format",
              "option_names": [
                "--format",
                "-f"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "verbose",
              "type": "bool",
              "default": false,
              "help": "Verbose output",
              "option_names": [
                "--verbose",
                "-v"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "explain-choices",
          "function": "explain_algorithm_choices",
          "docstring": "Explain why specific algorithms were chosen for your data.",
          "options": [
            {
              "name": "data_source",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Path to data file or connection string",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "max_algorithms",
              "type": "int",
              "default": 5,
              "help": "Number of algorithms to explain",
              "option_names": [
                "--max-algorithms"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "show_alternatives",
              "type": "bool",
              "default": true,
              "help": "Show alternative algorithms considered",
              "option_names": [
                "--alternatives/--no-alternatives"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "save_explanation",
              "type": "bool",
              "default": false,
              "help": "Save explanation to file",
              "option_names": [
                "--save/--no-save"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "analyze-results",
          "function": "analyze_detection_results",
          "docstring": "Analyze and explain anomaly detection results.",
          "options": [
            {
              "name": "results_file",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Path to detection results file",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "analysis_type",
              "type": "str",
              "default": null,
              "help": "Analysis type: comprehensive, statistical, visual",
              "option_names": [
                "--type"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "output",
              "type": "Path | None",
              "default": null,
              "help": "Save analysis report",
              "option_names": [
                "--output",
                "-o"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "interactive",
              "type": "bool",
              "default": false,
              "help": "Interactive analysis mode",
              "option_names": [
                "--interactive/--batch"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "app",
          "help": "",
          "add_completion": false,
          "rich_markup_mode": null,
          "parameters": {}
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "__future__",
          "name": "annotations",
          "asname": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.tree",
          "name": "Tree",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.automl_service",
          "name": "AutoMLService",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.autonomous_service",
          "name": "AutonomousConfig",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.autonomous_service",
          "name": "AutonomousDetectionService",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.data_loaders.csv_loader",
          "name": "CSVLoader",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.data_loaders.excel_loader",
          "name": "ExcelLoader",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.data_loaders.json_loader",
          "name": "JSONLoader",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.data_loaders.parquet_loader",
          "name": "ParquetLoader",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli.container",
          "name": "get_cli_container",
          "asname": null
        },
        {
          "type": "import",
          "name": "pandas",
          "asname": "pd"
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\benchmark.py",
      "commands": [
        {
          "command": "comprehensive",
          "function": "comprehensive",
          "docstring": "Run comprehensive performance benchmark suite.",
          "options": [
            {
              "name": "suite_name",
              "type": "str",
              "default": null,
              "help": "Name for the benchmark suite",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "description",
              "type": "Optional[str]",
              "default": null,
              "help": "Description of the benchmark suite",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "algorithms",
              "type": "Optional[List[str]]",
              "default": null,
              "help": "Algorithms to benchmark",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "dataset_sizes",
              "type": "Optional[List[int]]",
              "default": null,
              "help": "Dataset sizes to test",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "feature_dimensions",
              "type": "Optional[List[int]]",
              "default": null,
              "help": "Feature dimensions to test",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "contamination_rates",
              "type": "Optional[List[float]]",
              "default": null,
              "help": "Contamination rates to test",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "iterations",
              "type": "int",
              "default": 5,
              "help": "Number of iterations per test",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "timeout",
              "type": "int",
              "default": 600,
              "help": "Timeout in seconds",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output_dir",
              "type": "Optional[str]",
              "default": null,
              "help": "Output directory for results",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "export_format",
              "type": "str",
              "default": null,
              "help": "Export format for results (json/csv/html)",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        },
        {
          "command": "scalability",
          "function": "scalability",
          "docstring": "Run scalability test for specific algorithm.",
          "options": [
            {
              "name": "algorithm",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Algorithm to test for scalability",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "base_size",
              "type": "int",
              "default": 1000,
              "help": "Base dataset size",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "scale_factors",
              "type": "Optional[List[int]]",
              "default": null,
              "help": "Scale factors to test",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "feature_dimension",
              "type": "int",
              "default": 10,
              "help": "Number of features",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output_file",
              "type": "Optional[str]",
              "default": null,
              "help": "Output file for results",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "memory-stress",
          "function": "memory_stress",
          "docstring": "Run memory stress test for algorithm.",
          "options": [
            {
              "name": "algorithm",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Algorithm to test for memory usage",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "max_size",
              "type": "int",
              "default": 1000000,
              "help": "Maximum dataset size to test",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "memory_limit",
              "type": "float",
              "default": 8192.0,
              "help": "Memory limit in MB",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output_file",
              "type": "Optional[str]",
              "default": null,
              "help": "Output file for results",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "throughput",
          "function": "throughput",
          "docstring": "Run throughput benchmark for algorithms.",
          "options": [
            {
              "name": "algorithms",
              "type": "Optional[List[str]]",
              "default": null,
              "help": "Algorithms to test for throughput",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "dataset_sizes",
              "type": "Optional[List[int]]",
              "default": null,
              "help": "Dataset sizes to test",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "duration",
              "type": "int",
              "default": 60,
              "help": "Test duration in seconds",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output_file",
              "type": "Optional[str]",
              "default": null,
              "help": "Output file for results",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "list-results",
          "function": "list_results",
          "docstring": "List available benchmark results.",
          "options": [
            {
              "name": "benchmark_dir",
              "type": "Optional[str]",
              "default": null,
              "help": "Directory containing benchmark results",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "system-info",
          "function": "system_info",
          "docstring": "Display system information for benchmarking context.",
          "options": []
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "benchmark_app",
          "help": "🔬 Performance benchmarking and testing commands",
          "add_completion": true,
          "rich_markup_mode": null,
          "parameters": {
            "name": "benchmark"
          }
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "BarColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TaskProgressColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.performance_benchmarking_service",
          "name": "BenchmarkConfig",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.performance_benchmarking_service",
          "name": "BenchmarkSuite",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.performance_benchmarking_service",
          "name": "PerformanceBenchmarkingService",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.config.container",
          "name": "Container",
          "asname": null
        },
        {
          "type": "import",
          "name": "platform",
          "asname": null
        },
        {
          "type": "import",
          "name": "psutil",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\benchmarking.py",
      "commands": [
        {
          "command": "comprehensive",
          "function": "comprehensive",
          "docstring": "Run comprehensive performance benchmark suite.",
          "options": [
            {
              "name": "suite_name",
              "type": "Annotated[str, typer.Option(help='Name for the benchmark suite')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "description",
              "type": "Annotated[str | None, typer.Option(help='Description of the benchmark suite')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "algorithms",
              "type": "Annotated[list[str], typer.Option('--algorithms', help='Algorithms to benchmark', multiple=True)]",
              "default": [],
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "dataset_sizes",
              "type": "Annotated[list[int], typer.Option('--dataset-sizes', help='Dataset sizes to test', multiple=True)]",
              "default": [],
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "feature_dimensions",
              "type": "Annotated[list[int], typer.Option('--feature-dimensions', help='Feature dimensions to test', multiple=True)]",
              "default": [],
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "contamination_rates",
              "type": "Annotated[list[float], typer.Option('--contamination-rates', help='Contamination rates to test', multiple=True)]",
              "default": [],
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "iterations",
              "type": "Annotated[int, typer.Option(help='Number of iterations per test')]",
              "default": 5,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "timeout",
              "type": "Annotated[int, typer.Option(help='Timeout in seconds')]",
              "default": 600,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "output_dir",
              "type": "Annotated[str | None, typer.Option(help='Output directory for results')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "export_format",
              "type": "Annotated[str, typer.Option('--export-format', help='Export format for results', choices=['json', 'csv', 'html'])]",
              "default": "html",
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        },
        {
          "command": "scalability",
          "function": "scalability",
          "docstring": "Run scalability test for specific algorithm.",
          "options": [
            {
              "name": "algorithm",
              "type": "Annotated[str, typer.Option(help='Algorithm to test for scalability')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "base_size",
              "type": "Annotated[int, typer.Option(help='Base dataset size')]",
              "default": 1000,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "scale_factors",
              "type": "Annotated[list[int], typer.Option('--scale-factors', help='Scale factors to test', multiple=True)]",
              "default": [],
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "feature_dimension",
              "type": "Annotated[int, typer.Option(help='Number of features')]",
              "default": 10,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "output_file",
              "type": "Annotated[str | None, typer.Option(help='Output file for results')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        },
        {
          "command": "memory-stress",
          "function": "memory_stress",
          "docstring": "Run memory stress test for algorithm.",
          "options": [
            {
              "name": "algorithm",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "max_size",
              "type": "int",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "memory_limit",
              "type": "float",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "output_file",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            }
          ]
        },
        {
          "command": "throughput",
          "function": "throughput",
          "docstring": "Run throughput benchmark for algorithms.",
          "options": [
            {
              "name": "algorithms",
              "type": "list[str]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "dataset_sizes",
              "type": "list[int]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "duration",
              "type": "int",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "output_file",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            }
          ]
        },
        {
          "command": "compare",
          "function": "compare",
          "docstring": "Compare algorithms across multiple metrics.",
          "options": [
            {
              "name": "algorithms",
              "type": "list[str]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "dataset_sizes",
              "type": "list[int]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "metrics",
              "type": "list[str]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "output_file",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            }
          ]
        },
        {
          "command": "trends",
          "function": "trends",
          "docstring": "Analyze performance trends over time.",
          "options": [
            {
              "name": "algorithm",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "days",
              "type": "int",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "output_file",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            }
          ]
        },
        {
          "command": "list-results",
          "function": "list_results",
          "docstring": "List available benchmark results.",
          "options": [
            {
              "name": "benchmark_dir",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            }
          ]
        },
        {
          "command": "system-info",
          "function": "system_info",
          "docstring": "Display system information for benchmarking context.",
          "options": []
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "benchmark_commands",
          "help": "Performance testing and benchmarking commands.",
          "add_completion": false,
          "rich_markup_mode": null,
          "parameters": {
            "name": "benchmark"
          }
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Annotated",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "BarColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TaskProgressColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.performance_benchmarking_service",
          "name": "BenchmarkConfig",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.performance_benchmarking_service",
          "name": "BenchmarkSuite",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.performance_benchmarking_service",
          "name": "PerformanceBenchmarkingService",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.config.container",
          "name": "Container",
          "asname": null
        },
        {
          "type": "import",
          "name": "platform",
          "asname": null
        },
        {
          "type": "import",
          "name": "psutil",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\config.py",
      "commands": [
        {
          "command": "capture",
          "function": "capture_configuration",
          "docstring": "Capture configuration from raw parameters.",
          "options": [
            {
              "name": "source",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Configuration source (automl, cli, web_api, etc.)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "parameters_file",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "JSON file with raw parameters",
              "option_names": [
                "--params",
                "-p"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output_file",
              "type": "Path | None",
              "default": null,
              "help": "Output file for captured configuration",
              "option_names": [
                "--output",
                "-o"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "auto_save",
              "type": "bool",
              "default": true,
              "help": "Automatically save configuration",
              "option_names": [
                "--auto-save/--no-auto-save"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "generate_name",
              "type": "bool",
              "default": true,
              "help": "Auto-generate configuration name",
              "option_names": [
                "--generate-name/--no-generate-name"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "tags",
              "type": "list[str] | None",
              "default": null,
              "help": "Tags for configuration",
              "option_names": [
                "--tag",
                "-t"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "user_id",
              "type": "str | None",
              "default": null,
              "help": "User identifier",
              "option_names": [
                "--user",
                "-u"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "description",
              "type": "str | None",
              "default": null,
              "help": "Configuration description",
              "option_names": [
                "--description",
                "-d"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "export",
          "function": "export_configurations",
          "docstring": "Export configurations to specified format.",
          "options": [
            {
              "name": "config_ids",
              "type": "list[str]",
              "default": "<ellipsis>",
              "help": "Configuration IDs to export",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "output_file",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Output file path",
              "option_names": [
                "--output",
                "-o"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "export_format",
              "type": "str",
              "default": null,
              "help": "Export format (json, yaml, python, notebook, docker)",
              "option_names": [
                "--format",
                "-f"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "include_metadata",
              "type": "bool",
              "default": true,
              "help": "Include metadata in export",
              "option_names": [
                "--metadata/--no-metadata"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "include_performance",
              "type": "bool",
              "default": true,
              "help": "Include performance results",
              "option_names": [
                "--performance/--no-performance"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "include_lineage",
              "type": "bool",
              "default": false,
              "help": "Include lineage information",
              "option_names": [
                "--lineage/--no-lineage"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "template_name",
              "type": "str | None",
              "default": null,
              "help": "Export as template with given name",
              "option_names": [
                "--template"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "compress",
              "type": "bool",
              "default": false,
              "help": "Compress output file",
              "option_names": [
                "--compress/--no-compress"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "import",
          "function": "import_configurations",
          "docstring": "Import configurations from file.",
          "options": [
            {
              "name": "import_file",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "File to import configurations from",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "storage_path",
              "type": "Path | None",
              "default": null,
              "help": "Configuration storage path",
              "option_names": [
                "--storage",
                "-s"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "overwrite",
              "type": "bool",
              "default": false,
              "help": "Overwrite existing configurations",
              "option_names": [
                "--overwrite/--no-overwrite"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "dry_run",
              "type": "bool",
              "default": false,
              "help": "Show what would be imported without actually importing",
              "option_names": [
                "--dry-run"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "list",
          "function": "list_configurations",
          "docstring": "List stored configurations.",
          "options": [
            {
              "name": "storage_path",
              "type": "Path | None",
              "default": null,
              "help": "Configuration storage path",
              "option_names": [
                "--storage",
                "-s"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "source",
              "type": "str | None",
              "default": null,
              "help": "Filter by source",
              "option_names": [
                "--source"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "algorithm",
              "type": "str | None",
              "default": null,
              "help": "Filter by algorithm",
              "option_names": [
                "--algorithm"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "limit",
              "type": "int",
              "default": 20,
              "help": "Maximum number of configurations to show",
              "option_names": [
                "--limit",
                "-l"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "show_details",
              "type": "bool",
              "default": false,
              "help": "Show detailed information",
              "option_names": [
                "--details/--no-details"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "search",
          "function": "search_configurations",
          "docstring": "Search configurations by query and filters.",
          "options": [
            {
              "name": "query",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Search query",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "storage_path",
              "type": "Path | None",
              "default": null,
              "help": "Configuration storage path",
              "option_names": [
                "--storage",
                "-s"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "tags",
              "type": "list[str] | None",
              "default": null,
              "help": "Filter by tags",
              "option_names": [
                "--tag",
                "-t"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "source",
              "type": "str | None",
              "default": null,
              "help": "Filter by source",
              "option_names": [
                "--source"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "algorithm",
              "type": "str | None",
              "default": null,
              "help": "Filter by algorithm",
              "option_names": [
                "--algorithm"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "min_accuracy",
              "type": "float | None",
              "default": null,
              "help": "Minimum accuracy filter",
              "option_names": [
                "--min-accuracy"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "limit",
              "type": "int",
              "default": 20,
              "help": "Maximum results to return",
              "option_names": [
                "--limit",
                "-l"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "sort_by",
              "type": "str",
              "default": null,
              "help": "Sort field (created_at, name, algorithm, accuracy)",
              "option_names": [
                "--sort"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "sort_order",
              "type": "str",
              "default": null,
              "help": "Sort order (asc, desc)",
              "option_names": [
                "--order"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        },
        {
          "command": "show",
          "function": "show_configuration",
          "docstring": "Show detailed configuration information.",
          "options": [
            {
              "name": "config_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Configuration ID to show",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "storage_path",
              "type": "Path | None",
              "default": null,
              "help": "Configuration storage path",
              "option_names": [
                "--storage",
                "-s"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "include_performance",
              "type": "bool",
              "default": true,
              "help": "Include performance details",
              "option_names": [
                "--performance/--no-performance"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "include_lineage",
              "type": "bool",
              "default": false,
              "help": "Include lineage information",
              "option_names": [
                "--lineage/--no-lineage"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output_format",
              "type": "str",
              "default": null,
              "help": "Output format (rich, json, yaml)",
              "option_names": [
                "--format"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        },
        {
          "command": "stats",
          "function": "show_statistics",
          "docstring": "Show repository statistics.",
          "options": [
            {
              "name": "storage_path",
              "type": "Path | None",
              "default": null,
              "help": "Configuration storage path",
              "option_names": [
                "--storage",
                "-s"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "app",
          "help": "Configuration management commands for experiment configurations",
          "add_completion": false,
          "rich_markup_mode": "rich",
          "parameters": {
            "name": "config"
          }
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "__future__",
          "name": "annotations",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "uuid",
          "name": "UUID",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich",
          "name": "print",
          "asname": "rprint"
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.tree",
          "name": "Tree",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.dto.configuration_dto",
          "name": "ConfigurationCaptureRequestDTO",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.dto.configuration_dto",
          "name": "ConfigurationExportRequestDTO",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.dto.configuration_dto",
          "name": "ConfigurationSearchRequestDTO",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.dto.configuration_dto",
          "name": "ConfigurationSource",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.dto.configuration_dto",
          "name": "ExportFormat",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.configuration_capture_service",
          "name": "ConfigurationCaptureService",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.config.feature_flags",
          "name": "require_feature",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.persistence.configuration_repository",
          "name": "ConfigurationRepository",
          "asname": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "yaml",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\container.py",
      "commands": [],
      "subapps": {},
      "typer_apps": [],
      "imports": [
        {
          "type": "from_import",
          "module": "__future__",
          "name": "annotations",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.config",
          "name": "create_container",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\cost_optimization.py",
      "commands": [
        {
          "command": "analyze",
          "function": "analyze",
          "docstring": "Analyze cost trends and identify optimization opportunities.",
          "options": [
            {
              "name": "tenant_id",
              "type": "Annotated[str | None, typer.Option(help='Filter by tenant ID (UUID)')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "days",
              "type": "Annotated[int, typer.Option(help='Analysis period in days')]",
              "default": 30,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "output_format",
              "type": "Annotated[str, typer.Option('--format', help='Output format', choices=['console', 'json'])]",
              "default": "console",
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "output_file",
              "type": "Annotated[str | None, typer.Option(help='Output file for analysis results')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        },
        {
          "command": "optimize",
          "function": "optimize",
          "docstring": "Generate and optionally implement cost optimization recommendations.",
          "options": [
            {
              "name": "strategy",
              "type": "Annotated[str, typer.Option('--strategy', help='Optimization strategy', choices=['aggressive', 'balanced', 'conservative', 'performance_first', 'cost_first'])]",
              "default": "balanced",
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "tenant_id",
              "type": "Annotated[str | None, typer.Option(help='Filter by tenant ID (UUID)')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "target_savings",
              "type": "Annotated[float, typer.Option('--target-savings', help='Target savings percentage (0.0-1.0)')]",
              "default": 0.2,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "auto_implement",
              "type": "Annotated[bool, typer.Option('--auto-implement', help='Automatically implement low-risk recommendations')]",
              "default": false,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        },
        {
          "command": "implement",
          "function": "implement",
          "docstring": "Implement recommendations from an optimization plan.",
          "options": [
            {
              "name": "plan_id",
              "type": "Annotated[str, typer.Argument(help='Plan ID to implement')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "recommendation_id",
              "type": "Annotated[str | None, typer.Option(help='Implement specific recommendation by ID')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "phase",
              "type": "Annotated[int | None, typer.Option(help='Implement specific phase (1-4)')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "dry_run",
              "type": "Annotated[bool, typer.Option('--dry-run', help='Show what would be implemented without actually doing it')]",
              "default": false,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        },
        {
          "command": "create-budget",
          "function": "create_budget",
          "docstring": "Create a cost budget with alerts.",
          "options": [
            {
              "name": "name",
              "type": "Annotated[str, typer.Option(help='Budget name')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "monthly_limit",
              "type": "Annotated[float, typer.Option(help='Monthly budget limit')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "annual_limit",
              "type": "Annotated[float | None, typer.Option(help='Annual budget limit')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "tenant_id",
              "type": "Annotated[str | None, typer.Option(help='Tenant ID (UUID)')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "environments",
              "type": "Annotated[list[str], typer.Option('--environments', help='Environments to include', multiple=True)]",
              "default": [],
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "alert_thresholds",
              "type": "Annotated[list[float], typer.Option('--alert-thresholds', help='Alert thresholds (0.0-1.0)', multiple=True)]",
              "default": [],
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "alert_contacts",
              "type": "Annotated[list[str], typer.Option('--alert-contacts', help='Alert contact emails', multiple=True)]",
              "default": [],
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        },
        {
          "command": "list-budgets",
          "function": "list_budgets",
          "docstring": "List all cost budgets and their status.",
          "options": [
            {
              "name": "tenant_id",
              "type": "Annotated[str | None, typer.Option(help='Filter by tenant ID (UUID)')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "output_format",
              "type": "Annotated[str, typer.Option('--format', help='Output format', choices=['table', 'json'])]",
              "default": "table",
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        },
        {
          "command": "resources",
          "function": "resources",
          "docstring": "List and analyze cloud resources.",
          "options": [
            {
              "name": "tenant_id",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "resource_type",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "environment",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "output_format",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            }
          ]
        },
        {
          "command": "alerts",
          "function": "alerts",
          "docstring": "Check for cost alerts and budget violations.",
          "options": [
            {
              "name": "tenant_id",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            }
          ]
        },
        {
          "command": "metrics",
          "function": "metrics",
          "docstring": "Display cost optimization service metrics.",
          "options": []
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "cost_commands",
          "help": "Cost optimization and resource management commands.",
          "add_completion": false,
          "rich_markup_mode": null,
          "parameters": {
            "name": "cost"
          }
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "uuid",
          "name": "UUID",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Annotated",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.cost_optimization_service",
          "name": "CostOptimizationService",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities.cost_optimization",
          "name": "CostBudget",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities.cost_optimization",
          "name": "OptimizationStrategy",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\dashboard.py",
      "commands": [
        {
          "command": "generate",
          "function": "generate",
          "docstring": "Generate comprehensive visualization dashboard.",
          "options": [
            {
              "name": "dashboard_type",
              "type": "str",
              "default": null,
              "help": "Type of dashboard to generate (executive, operational, analytical, performance, real_time, compliance)",
              "option_names": [
                "--type"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "output_path",
              "type": "str | None",
              "default": null,
              "help": "Path to save dashboard files",
              "option_names": [
                "--output-path"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "export_format",
              "type": "str",
              "default": null,
              "help": "Export format for dashboard (html, png, pdf, svg, json)",
              "option_names": [
                "--format"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "theme",
              "type": "str",
              "default": null,
              "help": "Dashboard theme (default, dark, light, corporate)",
              "option_names": [
                "--theme"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "real_time",
              "type": "bool",
              "default": false,
              "help": "Enable real-time updates",
              "option_names": [
                "--real-time"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "websocket_endpoint",
              "type": "str | None",
              "default": null,
              "help": "WebSocket endpoint for real-time data",
              "option_names": [
                "--websocket-endpoint"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "status",
          "function": "status",
          "docstring": "Show dashboard service status and active dashboards.",
          "options": [
            {
              "name": "dashboard_id",
              "type": "str | None",
              "default": null,
              "help": "Specific dashboard ID to show status for",
              "option_names": [
                "--dashboard-id"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "detailed",
              "type": "bool",
              "default": false,
              "help": "Show detailed status information",
              "option_names": [
                "--detailed"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "monitor",
          "function": "monitor",
          "docstring": "Start real-time dashboard monitoring.",
          "options": [
            {
              "name": "interval",
              "type": "int",
              "default": 5,
              "help": "Update interval in seconds",
              "option_names": [
                "--interval"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "websocket_endpoint",
              "type": "str",
              "default": null,
              "help": "WebSocket endpoint",
              "option_names": [
                "--websocket-endpoint"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "duration",
              "type": "int | None",
              "default": null,
              "help": "Duration to monitor in seconds",
              "option_names": [
                "--duration"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "compare",
          "function": "compare",
          "docstring": "Compare dashboard metrics across different time periods.",
          "options": [
            {
              "name": "dashboard_type",
              "type": "str",
              "default": null,
              "help": "Dashboard type to compare (executive, operational, analytical, performance)",
              "option_names": [
                "--dashboard-type"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "metrics",
              "type": "list[str]",
              "default": null,
              "help": "Specific metrics to compare",
              "option_names": [
                "--metrics"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "time_period",
              "type": "int",
              "default": 30,
              "help": "Time period in days",
              "option_names": [
                "--time-period"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "export",
          "function": "export",
          "docstring": "Export dashboard to various formats.",
          "options": [
            {
              "name": "dashboard_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Dashboard ID to export",
              "option_names": [
                "--dashboard-id"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "export_format",
              "type": "str",
              "default": null,
              "help": "Export format (html, png, pdf, svg, json)",
              "option_names": [
                "--format"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "output",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Output file path",
              "option_names": [
                "--output"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "config_file",
              "type": "str | None",
              "default": null,
              "help": "Export configuration file",
              "option_names": [
                "--config-file"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "cleanup",
          "function": "cleanup",
          "docstring": "Clean up dashboard service resources.",
          "options": [
            {
              "name": "clear_cache",
              "type": "bool",
              "default": false,
              "help": "Clear dashboard cache",
              "option_names": [
                "--clear-cache"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "reset_metrics",
              "type": "bool",
              "default": false,
              "help": "Reset metrics history",
              "option_names": [
                "--reset-metrics"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "force",
              "type": "bool",
              "default": false,
              "help": "Force cleanup without confirmation",
              "option_names": [
                "--force"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "app",
          "help": "Dashboard related commands",
          "add_completion": false,
          "rich_markup_mode": null,
          "parameters": {}
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.layout",
          "name": "Layout",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.live",
          "name": "Live",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.visualization_dashboard_service",
          "name": "DashboardType",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.visualization_dashboard_service",
          "name": "RealTimeMetrics",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.visualization_dashboard_service",
          "name": "VisualizationDashboardService",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.config.container",
          "name": "Container",
          "asname": null
        },
        {
          "type": "import",
          "name": "math",
          "asname": null
        },
        {
          "type": "import",
          "name": "random",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\datasets.py",
      "commands": [
        {
          "command": "list",
          "function": "list_datasets",
          "docstring": "List all datasets.",
          "options": [
            {
              "name": "has_target",
              "type": "bool | None",
              "default": null,
              "help": "Filter by target presence",
              "option_names": [
                "--has-target"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "limit",
              "type": "int",
              "default": 10,
              "help": "Maximum results to show",
              "option_names": [
                "--limit",
                "-l"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "load",
          "function": "load_dataset",
          "docstring": "Load a dataset from file.",
          "options": [
            {
              "name": "file_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to dataset file",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "name",
              "type": "str | None",
              "default": null,
              "help": "Dataset name",
              "option_names": [
                "--name",
                "-n"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "target_column",
              "type": "str | None",
              "default": null,
              "help": "Target column name",
              "option_names": [
                "--target",
                "-t"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "description",
              "type": "str | None",
              "default": null,
              "help": "Dataset description",
              "option_names": [
                "--description",
                "-d"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "sample_size",
              "type": "int | None",
              "default": null,
              "help": "Load only N rows",
              "option_names": [
                "--sample",
                "-s"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "generate",
          "function": "generate_dataset",
          "docstring": "Generate a synthetic dataset for testing and benchmarking.",
          "options": [
            {
              "name": "size",
              "type": "int",
              "default": 1000,
              "help": "Number of samples in the dataset",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "feature_count",
              "type": "int",
              "default": 10,
              "help": "Number of features",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "anomaly_rate",
              "type": "float",
              "default": 0.01,
              "help": "Rate of anomalies",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "name",
              "type": "str",
              "default": null,
              "help": "Name of the dataset",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "output",
              "type": "Optional[str]",
              "default": null,
              "help": "Output file name",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "format",
              "type": "str",
              "default": null,
              "help": "Output file format",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        },
        {
          "command": "list-samples",
          "function": "list_sample_datasets",
          "docstring": "List available sample datasets for testing and benchmarking.",
          "options": []
        },
        {
          "command": "show",
          "function": "show_dataset",
          "docstring": "Show dataset details.",
          "options": [
            {
              "name": "dataset_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Dataset ID (can be partial)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "sample",
              "type": "int",
              "default": 5,
              "help": "Show N sample rows",
              "option_names": [
                "--sample",
                "-s"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "info",
              "type": "bool",
              "default": false,
              "help": "Show detailed info",
              "option_names": [
                "--info",
                "-i"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "quality",
          "function": "check_quality",
          "docstring": "Check dataset quality.",
          "options": [
            {
              "name": "dataset_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Dataset ID (can be partial)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            }
          ]
        },
        {
          "command": "split",
          "function": "split_dataset",
          "docstring": "Split dataset into train and test sets.",
          "options": [
            {
              "name": "dataset_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Dataset ID (can be partial)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "test_size",
              "type": "float",
              "default": 0.2,
              "help": "Test set proportion",
              "option_names": [
                "--test-size",
                "-t"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "random_state",
              "type": "int | None",
              "default": 42,
              "help": "Random seed",
              "option_names": [
                "--seed",
                "-s"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "delete",
          "function": "delete_dataset",
          "docstring": "Delete a dataset.",
          "options": [
            {
              "name": "dataset_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Dataset ID (can be partial)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "force",
              "type": "bool",
              "default": false,
              "help": "Skip confirmation",
              "option_names": [
                "--force",
                "-f"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "export",
          "function": "export_dataset",
          "docstring": "Export dataset to file.",
          "options": [
            {
              "name": "dataset_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Dataset ID (can be partial)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "output_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Output file path",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "format",
              "type": "str",
              "default": null,
              "help": "Export format (csv, parquet)",
              "option_names": [
                "--format",
                "-f"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "app",
          "help": "",
          "add_completion": false,
          "rich_markup_mode": null,
          "parameters": {}
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "__future__",
          "name": "annotations",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities",
          "name": "Dataset",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli.container",
          "name": "get_cli_container",
          "asname": null
        },
        {
          "type": "import",
          "name": "pandas",
          "asname": "pd"
        },
        {
          "type": "import",
          "name": "numpy",
          "asname": "np"
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\deep_learning.py",
      "commands": [
        {
          "command": "train",
          "function": "train",
          "docstring": "Train a deep learning anomaly detection model.",
          "options": [
            {
              "name": "dataset_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to the dataset file (CSV or Parquet)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "algorithm",
              "type": "str",
              "default": null,
              "help": "Deep learning algorithm (options: autoencoder, vae, lstm, gru, transformer)",
              "option_names": [
                "-a",
                "--algorithm"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "framework",
              "type": "Optional[str]",
              "default": null,
              "help": "Deep learning framework (options: pytorch, tensorflow, jax; auto-select if not specified)",
              "option_names": [
                "-f",
                "--framework"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "epochs",
              "type": "int",
              "default": 100,
              "help": "Number of training epochs",
              "option_names": [
                "--epochs"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "batch_size",
              "type": "int",
              "default": 32,
              "help": "Batch size for training",
              "option_names": [
                "--batch-size"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "learning_rate",
              "type": "float",
              "default": 0.001,
              "help": "Learning rate",
              "option_names": [
                "--learning-rate"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "hidden_dims",
              "type": "Optional[List[int]]",
              "default": null,
              "help": "Hidden layer dimensions",
              "option_names": [
                "--hidden-dims"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "latent_dim",
              "type": "int",
              "default": 16,
              "help": "Latent space dimension",
              "option_names": [
                "--latent-dim"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "contamination",
              "type": "float",
              "default": 0.1,
              "help": "Expected contamination rate",
              "option_names": [
                "--contamination"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "gpu",
              "type": "bool",
              "default": true,
              "help": "Enable GPU acceleration",
              "option_names": [
                "--gpu/--no-gpu"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output",
              "type": "Optional[Path]",
              "default": null,
              "help": "Output file for results",
              "option_names": [
                "--output"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "save_model",
              "type": "Optional[Path]",
              "default": null,
              "help": "Save trained model to file",
              "option_names": [
                "--save-model"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "benchmark",
          "function": "benchmark",
          "docstring": "Benchmark deep learning frameworks on anomaly detection task.",
          "options": [
            {
              "name": "dataset_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to the dataset file",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "algorithm",
              "type": "str",
              "default": null,
              "help": "Deep learning algorithm (options: autoencoder, vae, lstm, gru, transformer)",
              "option_names": [
                "-a",
                "--algorithm"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "frameworks",
              "type": "Optional[List[str]]",
              "default": null,
              "help": "Frameworks to benchmark (all available if not specified)",
              "option_names": [
                "-f",
                "--frameworks"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "epochs",
              "type": "int",
              "default": 50,
              "help": "Number of training epochs",
              "option_names": [
                "--epochs"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output",
              "type": "Optional[Path]",
              "default": null,
              "help": "Output file for benchmark results",
              "option_names": [
                "--output"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "recommend",
          "function": "recommend",
          "docstring": "Get framework and algorithm recommendations for dataset.",
          "options": [
            {
              "name": "dataset_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to the dataset file",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "priority",
              "type": "str",
              "default": null,
              "help": "Performance priority (speed, accuracy, memory, balanced)",
              "option_names": [
                "--priority"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "gpu",
              "type": "bool",
              "default": true,
              "help": "GPU availability",
              "option_names": [
                "--gpu/--no-gpu"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "frameworks",
          "function": "frameworks",
          "docstring": "List available deep learning frameworks and their capabilities.",
          "options": []
        },
        {
          "command": "info",
          "function": "info",
          "docstring": "Get detailed information about a deep learning algorithm.",
          "options": [
            {
              "name": "algorithm",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Algorithm to get information about (options: autoencoder, vae, lstm, gru, transformer)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            }
          ]
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "app",
          "help": "🧠 Deep learning anomaly detection (PyTorch, TensorFlow, JAX)",
          "add_completion": true,
          "rich_markup_mode": "rich",
          "parameters": {
            "name": "deep-learning"
          }
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "__future__",
          "name": "annotations",
          "asname": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "import",
          "name": "sys",
          "asname": null
        },
        {
          "type": "import",
          "name": "time",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "asname": null
        },
        {
          "type": "import",
          "name": "numpy",
          "asname": "np"
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.deep_learning_integration_service",
          "name": "DeepLearningIntegrationService",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.deep_learning_integration_service",
          "name": "DLOptimizationConfig",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities",
          "name": "Dataset",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.config.feature_flags",
          "name": "require_feature",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.data_loaders",
          "name": "CSVLoader",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.data_loaders",
          "name": "ParquetLoader",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\deployment.py",
      "commands": [
        {
          "command": "list",
          "function": "list_deployments",
          "docstring": "List model deployments.",
          "options": [
            {
              "name": "environment",
              "type": "str | None",
              "default": null,
              "help": "Filter by environment",
              "option_names": [
                "--env",
                "-e"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "status",
              "type": "str | None",
              "default": null,
              "help": "Filter by status",
              "option_names": [
                "--status",
                "-s"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "limit",
              "type": "int",
              "default": 20,
              "help": "Maximum number of results",
              "option_names": [
                "--limit",
                "-l"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "json_output",
              "type": "bool",
              "default": false,
              "help": "Output in JSON format",
              "option_names": [
                "--json"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "deploy",
          "function": "deploy_model",
          "docstring": "Deploy a model version to an environment.",
          "options": [
            {
              "name": "model_version_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Model version ID to deploy",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "environment",
              "type": "str",
              "default": null,
              "help": "Target environment",
              "option_names": [
                "--env",
                "-e"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "strategy",
              "type": "str",
              "default": null,
              "help": "Deployment strategy",
              "option_names": [
                "--strategy",
                "-s"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "replicas",
              "type": "int",
              "default": 3,
              "help": "Number of replicas",
              "option_names": [
                "--replicas",
                "-r"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "cpu_request",
              "type": "str",
              "default": null,
              "help": "CPU request",
              "option_names": [
                "--cpu-request"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "cpu_limit",
              "type": "str",
              "default": null,
              "help": "CPU limit",
              "option_names": [
                "--cpu-limit"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "memory_request",
              "type": "str",
              "default": null,
              "help": "Memory request",
              "option_names": [
                "--memory-request"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "memory_limit",
              "type": "str",
              "default": null,
              "help": "Memory limit",
              "option_names": [
                "--memory-limit"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "wait",
              "type": "bool",
              "default": true,
              "help": "Wait for deployment to complete",
              "option_names": [
                "--wait/--no-wait"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "json_output",
              "type": "bool",
              "default": false,
              "help": "Output in JSON format",
              "option_names": [
                "--json"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "status",
          "function": "deployment_status",
          "docstring": "Get deployment status and details.",
          "options": [
            {
              "name": "deployment_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Deployment ID",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "json_output",
              "type": "bool",
              "default": false,
              "help": "Output in JSON format",
              "option_names": [
                "--json"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "rollback",
          "function": "rollback_deployment",
          "docstring": "Rollback a deployment to the previous version.",
          "options": [
            {
              "name": "deployment_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Deployment ID to rollback",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "reason",
              "type": "str",
              "default": null,
              "help": "Rollback reason",
              "option_names": [
                "--reason",
                "-r"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "wait",
              "type": "bool",
              "default": true,
              "help": "Wait for rollback to complete",
              "option_names": [
                "--wait/--no-wait"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "json_output",
              "type": "bool",
              "default": false,
              "help": "Output in JSON format",
              "option_names": [
                "--json"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "promote",
          "function": "promote_to_production",
          "docstring": "Promote a staging deployment to production.",
          "options": [
            {
              "name": "deployment_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Staging deployment ID to promote",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "approval_notes",
              "type": "str",
              "default": null,
              "help": "Approval notes",
              "option_names": [
                "--notes",
                "-n"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "wait",
              "type": "bool",
              "default": true,
              "help": "Wait for promotion to complete",
              "option_names": [
                "--wait/--no-wait"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "json_output",
              "type": "bool",
              "default": false,
              "help": "Output in JSON format",
              "option_names": [
                "--json"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "environments",
          "function": "list_environments",
          "docstring": "List all environments and their status.",
          "options": [
            {
              "name": "json_output",
              "type": "bool",
              "default": false,
              "help": "Output in JSON format",
              "option_names": [
                "--json"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "serve",
          "function": "start_model_server",
          "docstring": "Start the model serving API server.",
          "options": [
            {
              "name": "host",
              "type": "str",
              "default": null,
              "help": "Server host",
              "option_names": [
                "--host"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "port",
              "type": "int",
              "default": 8080,
              "help": "Server port",
              "option_names": [
                "--port"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "workers",
              "type": "int",
              "default": 1,
              "help": "Number of workers",
              "option_names": [
                "--workers"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "environment",
              "type": "str",
              "default": null,
              "help": "Environment to serve",
              "option_names": [
                "--env"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "reload",
              "type": "bool",
              "default": false,
              "help": "Enable auto-reload (development only)",
              "option_names": [
                "--reload"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "app",
          "help": "Model deployment and serving management commands",
          "add_completion": false,
          "rich_markup_mode": null,
          "parameters": {}
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "uuid",
          "name": "UUID",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.deployment_orchestration_service",
          "name": "DeploymentOrchestrationService",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.model_registry_service",
          "name": "ModelRegistryService",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities.deployment",
          "name": "DeploymentConfig",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities.deployment",
          "name": "DeploymentStrategy",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities.deployment",
          "name": "Environment",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities.deployment",
          "name": "StrategyType",
          "asname": null
        },
        {
          "type": "import",
          "name": "os",
          "asname": null
        },
        {
          "type": "import",
          "name": "uvicorn",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\detection.py",
      "commands": [
        {
          "command": "train",
          "function": "train_detector",
          "docstring": "Train a detector on a dataset.",
          "options": [
            {
              "name": "detector",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Detector ID or name (can be partial)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "dataset",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Dataset ID or name (can be partial)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "validate",
              "type": "bool",
              "default": true,
              "help": "Validate data before training",
              "option_names": [
                "--validate/--no-validate"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "save_model",
              "type": "bool",
              "default": true,
              "help": "Save trained model",
              "option_names": [
                "--save/--no-save"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "run",
          "function": "detect_anomalies",
          "docstring": "Run anomaly detection on a dataset.",
          "options": [
            {
              "name": "detector",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Detector ID or name (can be partial)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "dataset",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Dataset ID or name (can be partial)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "validate",
              "type": "bool",
              "default": true,
              "help": "Validate features",
              "option_names": [
                "--validate/--no-validate"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "save_results",
              "type": "bool",
              "default": true,
              "help": "Save detection results",
              "option_names": [
                "--save/--no-save"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output",
              "type": "Path | None",
              "default": null,
              "help": "Export results to file",
              "option_names": [
                "--output",
                "-o"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "batch",
          "function": "batch_detect",
          "docstring": "Run multiple detectors on a dataset.",
          "options": [
            {
              "name": "detectors",
              "type": "list[str]",
              "default": "<ellipsis>",
              "help": "Detector IDs or names",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "dataset",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Dataset ID or name (can be partial)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "save_results",
              "type": "bool",
              "default": true,
              "help": "Save detection results",
              "option_names": [
                "--save/--no-save"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "evaluate",
          "function": "evaluate_detector",
          "docstring": "Evaluate detector performance on labeled data.",
          "options": [
            {
              "name": "detector",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Detector ID or name (can be partial)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "dataset",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Dataset ID or name with labels",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "cv",
              "type": "bool",
              "default": false,
              "help": "Use cross-validation",
              "option_names": [
                "--cv"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "folds",
              "type": "int",
              "default": 5,
              "help": "Number of CV folds",
              "option_names": [
                "--folds",
                "-k"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "metrics",
              "type": "list[str] | None",
              "default": null,
              "help": "Metrics to compute",
              "option_names": [
                "--metric",
                "-m"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "results",
          "function": "list_results",
          "docstring": "List detection results.",
          "options": [
            {
              "name": "detector",
              "type": "str | None",
              "default": null,
              "help": "Filter by detector",
              "option_names": [
                "--detector",
                "-d"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "dataset",
              "type": "str | None",
              "default": null,
              "help": "Filter by dataset",
              "option_names": [
                "--dataset",
                "-s"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "limit",
              "type": "int",
              "default": 10,
              "help": "Maximum results to show",
              "option_names": [
                "--limit",
                "-l"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "latest",
              "type": "bool",
              "default": false,
              "help": "Show only the latest result",
              "option_names": [
                "--latest"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "app",
          "help": "",
          "add_completion": false,
          "rich_markup_mode": null,
          "parameters": {}
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "__future__",
          "name": "annotations",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli.container",
          "name": "get_cli_container",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.use_cases",
          "name": "TrainDetectorRequest",
          "asname": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.use_cases",
          "name": "DetectAnomaliesRequest",
          "asname": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "pandas",
          "asname": "pd"
        },
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.use_cases",
          "name": "EvaluateModelRequest",
          "asname": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\detectors.py",
      "commands": [
        {
          "command": "list",
          "function": "list_detectors",
          "docstring": "List all detectors.",
          "options": [
            {
              "name": "algorithm",
              "type": "str | None",
              "default": null,
              "help": "Filter by algorithm",
              "option_names": [
                "--algorithm",
                "-a"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "fitted",
              "type": "bool | None",
              "default": null,
              "help": "Filter by fitted status",
              "option_names": [
                "--fitted"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "limit",
              "type": "int",
              "default": 10,
              "help": "Maximum results to show",
              "option_names": [
                "--limit",
                "-l"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "create",
          "function": "create_detector",
          "docstring": "Create a new detector.",
          "options": [
            {
              "name": "name",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Detector name",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "algorithm",
              "type": "str",
              "default": null,
              "help": "Algorithm to use",
              "option_names": [
                "--algorithm",
                "-a"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "description",
              "type": "str | None",
              "default": null,
              "help": "Detector description",
              "option_names": [
                "--description",
                "-d"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "contamination",
              "type": "float",
              "default": 0.1,
              "help": "Expected contamination rate",
              "option_names": [
                "--contamination",
                "-c"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "show",
          "function": "show_detector",
          "docstring": "Show detector details.",
          "options": [
            {
              "name": "detector_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Detector ID (can be partial)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            }
          ]
        },
        {
          "command": "delete",
          "function": "delete_detector",
          "docstring": "Delete a detector.",
          "options": [
            {
              "name": "detector_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Detector ID (can be partial)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "force",
              "type": "bool",
              "default": false,
              "help": "Skip confirmation",
              "option_names": [
                "--force",
                "-f"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "algorithms",
          "function": "list_algorithms",
          "docstring": "List available algorithms.",
          "options": [
            {
              "name": "category",
              "type": "str | None",
              "default": null,
              "help": "Filter by category",
              "option_names": [
                "--category",
                "-c"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "clone",
          "function": "clone_detector",
          "docstring": "Clone an existing detector.",
          "options": [
            {
              "name": "detector_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Source detector ID (can be partial)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "new_name",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Name for cloned detector",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            }
          ]
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "app",
          "help": "",
          "add_completion": false,
          "rich_markup_mode": null,
          "parameters": {}
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "__future__",
          "name": "annotations",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities",
          "name": "Detector",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli.container",
          "name": "get_cli_container",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.adapters",
          "name": "PyODAdapter",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.adapters",
          "name": "PyODAdapter",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\enhanced_automl.py",
      "commands": [
        {
          "command": "optimize",
          "function": "optimize",
          "docstring": "Run advanced hyperparameter optimization for a specific algorithm.",
          "options": [
            {
              "name": "dataset_id",
              "type": "Annotated[str, typer.Argument(help='Dataset ID')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "algorithm",
              "type": "Annotated[str, typer.Argument(help='Algorithm name')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "objectives",
              "type": "Annotated[list[str], typer.Option('--objectives', '-o', help='Optimization objectives (auc, precision, recall, training_time)')]",
              "default": [
                "auc"
              ],
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "strategy",
              "type": "Annotated[str, typer.Option('--strategy', '-s', help='Optimization strategy')]",
              "default": "bayesian",
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "acquisition",
              "type": "Annotated[str, typer.Option('--acquisition', '-a', help='Acquisition function for Bayesian optimization')]",
              "default": "expected_improvement",
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "n_trials",
              "type": "Annotated[int, typer.Option('--n-trials', '-n', help='Number of optimization trials')]",
              "default": 100,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "timeout",
              "type": "Annotated[int, typer.Option('--timeout', '-t', help='Optimization timeout in seconds')]",
              "default": 3600,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "enable_meta_learning",
              "type": "Annotated[bool, typer.Option('--enable-meta-learning', help='Enable meta-learning')]",
              "default": true,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "enable_parallel",
              "type": "Annotated[bool, typer.Option('--enable-parallel', help='Enable parallel optimization')]",
              "default": true,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "output",
              "type": "Annotated[str | None, typer.Option('--output', '-f', help='Output file for results (JSON)')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        },
        {
          "command": "auto-optimize",
          "function": "auto_optimize",
          "docstring": "Automatically select and optimize the best algorithms.",
          "options": [
            {
              "name": "dataset_id",
              "type": "Annotated[str, typer.Argument(help='Dataset ID')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "objectives",
              "type": "Annotated[list[str], typer.Option('--objectives', '-o', help='Optimization objectives')]",
              "default": [
                "auc",
                "training_time"
              ],
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "max_algorithms",
              "type": "Annotated[int, typer.Option('--max-algorithms', '-m', help='Maximum algorithms to try')]",
              "default": 3,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "strategy",
              "type": "Annotated[str, typer.Option('--strategy', '-s', help='Optimization strategy')]",
              "default": "bayesian",
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "n_trials",
              "type": "Annotated[int, typer.Option('--n-trials', '-n', help='Number of trials per algorithm')]",
              "default": 100,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "timeout",
              "type": "Annotated[int, typer.Option('--timeout', '-t', help='Total optimization timeout')]",
              "default": 3600,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "enable_ensemble",
              "type": "Annotated[bool, typer.Option('--enable-ensemble', help='Enable ensemble creation')]",
              "default": true,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "enable_meta_learning",
              "type": "Annotated[bool, typer.Option('--enable-meta-learning', help='Enable meta-learning')]",
              "default": true,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "output",
              "type": "Annotated[str | None, typer.Option('--output', '-f', help='Output file for results (JSON)')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        },
        {
          "command": "multi-objective",
          "function": "multi_objective",
          "docstring": "Run multi-objective optimization to find Pareto optimal solutions.",
          "options": [
            {
              "name": "dataset_id",
              "type": "Annotated[str, typer.Argument(help='Dataset ID')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "objectives",
              "type": "Annotated[list[str], typer.Option('--objectives', '-o', help='Multiple objectives to optimize')]",
              "default": [
                "auc",
                "precision",
                "training_time"
              ],
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "weights",
              "type": "Annotated[str | None, typer.Option('--weights', '-w', help='Objective weights as JSON (e.g., \\'{\"auc\": 0.5, \"precision\": 0.3, \"training_time\": 0.2}\\')')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "algorithms",
              "type": "Annotated[list[str], typer.Option('--algorithms', '-a', help='Specific algorithms to include')]",
              "default": [],
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "n_trials",
              "type": "Annotated[int, typer.Option('--n-trials', '-n', help='Number of optimization trials')]",
              "default": 150,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "timeout",
              "type": "Annotated[int, typer.Option('--timeout', '-t', help='Optimization timeout in seconds')]",
              "default": 7200,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "output",
              "type": "Annotated[str | None, typer.Option('--output', '-f', help='Output file for Pareto front (JSON)')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        },
        {
          "command": "analyze",
          "function": "analyze",
          "docstring": "Analyze optimization results and provide insights.",
          "options": [
            {
              "name": "result_file",
              "type": "Annotated[str, typer.Argument(help='Path to result file')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            }
          ]
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "enhanced_automl_cli",
          "help": "Enhanced AutoML commands with advanced optimization techniques.",
          "add_completion": false,
          "rich_markup_mode": null,
          "parameters": {
            "name": "enhanced-automl"
          }
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Annotated",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.json",
          "name": "JSON",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.enhanced_automl_service",
          "name": "EnhancedAutoMLConfig",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.config.container",
          "name": "create_container",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.automl",
          "name": "AcquisitionFunction",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.automl",
          "name": "OptimizationStrategy",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.automl",
          "name": "OptimizationStrategy",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\ensemble.py",
      "commands": [
        {
          "command": "create",
          "function": "create",
          "docstring": "Create an intelligent ensemble using meta-learning and optimization.",
          "options": [
            {
              "name": "dataset_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to the dataset file (CSV or Parquet)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "algorithms",
              "type": "list[str]",
              "default": null,
              "help": "Algorithms to include in ensemble",
              "option_names": [
                "--algorithms",
                "-a"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "strategy",
              "type": "str",
              "default": null,
              "help": "Ensemble combination strategy",
              "option_names": [
                "--strategy",
                "-s"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "max_size",
              "type": "int",
              "default": 5,
              "help": "Maximum ensemble size",
              "option_names": [
                "--max-size",
                "-n"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "diversity_threshold",
              "type": "float",
              "default": 0.3,
              "help": "Minimum diversity threshold",
              "option_names": [
                "--diversity-threshold",
                "-d"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "diversity_weight",
              "type": "float",
              "default": 0.3,
              "help": "Diversity vs performance trade-off weight",
              "option_names": [
                "--diversity-weight",
                "-w"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "optimize_weights",
              "type": "bool",
              "default": true,
              "help": "Enable ensemble weight optimization",
              "option_names": [
                "--optimize-weights/--no-optimize-weights"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "disable_meta_learning",
              "type": "bool",
              "default": false,
              "help": "Disable meta-learning for algorithm selection",
              "option_names": [
                "--disable-meta-learning/--enable-meta-learning"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "cv_folds",
              "type": "int",
              "default": 3,
              "help": "Cross-validation folds for optimization",
              "option_names": [
                "--cv-folds"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output",
              "type": "Path | None",
              "default": null,
              "help": "Output file for ensemble report",
              "option_names": [
                "--output"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "save_ensemble",
              "type": "Path | None",
              "default": null,
              "help": "Save ensemble detectors to file",
              "option_names": [
                "--save-ensemble"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "compare",
          "function": "compare",
          "docstring": "Compare different ensemble configurations and strategies.",
          "options": [
            {
              "name": "dataset_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to the dataset file",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "algorithms",
              "type": "list[str]",
              "default": null,
              "help": "Algorithms to compare in ensembles",
              "option_names": [
                "--algorithms",
                "-a"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "strategies",
              "type": "list[str]",
              "default": null,
              "help": "Ensemble strategies to compare",
              "option_names": [
                "--strategies",
                "-s"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "max_ensembles",
              "type": "int",
              "default": 10,
              "help": "Maximum number of ensemble configurations to test",
              "option_names": [
                "--max-ensembles",
                "-n"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output",
              "type": "Path | None",
              "default": null,
              "help": "Output file for comparison results",
              "option_names": [
                "--output"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "insights",
          "function": "insights",
          "docstring": "Analyze meta-learning insights and knowledge base.",
          "options": [
            {
              "name": "meta_knowledge_path",
              "type": "Path",
              "default": null,
              "help": "Meta-knowledge storage path",
              "option_names": [
                "--meta-knowledge-path"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        },
        {
          "command": "predict-performance",
          "function": "predict_performance",
          "docstring": "Predict ensemble performance using meta-learning.",
          "options": [
            {
              "name": "dataset_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to the dataset file",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "algorithms",
              "type": "list[str]",
              "default": "<ellipsis>",
              "help": "Algorithms to include in predicted ensemble",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "meta_knowledge_path",
              "type": "Path",
              "default": null,
              "help": "Meta-knowledge storage path",
              "option_names": [
                "--meta-knowledge-path"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        },
        {
          "command": "diversity",
          "function": "diversity",
          "docstring": "Analyze diversity potential between algorithms.",
          "options": [
            {
              "name": "algorithms",
              "type": "list[str]",
              "default": "<ellipsis>",
              "help": "Algorithms to analyze for diversity",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            }
          ]
        },
        {
          "command": "strategies",
          "function": "strategies",
          "docstring": "List available ensemble strategies and their characteristics.",
          "options": [
            {
              "name": "meta_knowledge_path",
              "type": "Path",
              "default": null,
              "help": "Meta-knowledge storage path",
              "option_names": [
                "--meta-knowledge-path"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "app",
          "help": "Advanced ensemble methods and meta-learning commands",
          "add_completion": false,
          "rich_markup_mode": null,
          "parameters": {}
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "__future__",
          "name": "annotations",
          "asname": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "import",
          "name": "sys",
          "asname": null
        },
        {
          "type": "import",
          "name": "time",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.advanced_ensemble_service",
          "name": "AdvancedEnsembleService",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.advanced_ensemble_service",
          "name": "EnsembleConfiguration",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities",
          "name": "Dataset",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.config.feature_flags",
          "name": "require_feature",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.data_loaders",
          "name": "CSVLoader",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.data_loaders",
          "name": "ParquetLoader",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\enterprise_dashboard.py",
      "commands": [
        {
          "command": "dashboard",
          "function": "show_dashboard",
          "docstring": "Display real-time enterprise dashboard.",
          "options": [
            {
              "name": "refresh_interval",
              "type": "int",
              "default": 5,
              "help": "Refresh interval in seconds",
              "option_names": [
                "--refresh",
                "-r"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "duration",
              "type": "int",
              "default": 60,
              "help": "Duration to display in seconds",
              "option_names": [
                "--duration",
                "-d"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "export_file",
              "type": "str | None",
              "default": null,
              "help": "Export data to file",
              "option_names": [
                "--export"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "format",
              "type": "str",
              "default": null,
              "help": "Export format (json)",
              "option_names": [
                "--format"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        },
        {
          "command": "summary",
          "function": "executive_summary",
          "docstring": "Display executive summary for C-level reporting.",
          "options": []
        },
        {
          "command": "alerts",
          "function": "list_alerts",
          "docstring": "List and manage dashboard alerts.",
          "options": [
            {
              "name": "priority",
              "type": "str | None",
              "default": null,
              "help": "Filter by priority (low, medium, high, critical)",
              "option_names": [
                "--priority"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "limit",
              "type": "int",
              "default": 20,
              "help": "Maximum alerts to display",
              "option_names": [
                "--limit"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "show_resolved",
              "type": "bool",
              "default": false,
              "help": "Include resolved alerts",
              "option_names": [
                "--resolved"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "acknowledge",
          "function": "acknowledge_alert",
          "docstring": "Acknowledge a specific alert.",
          "options": [
            {
              "name": "alert_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Alert ID to acknowledge",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "user",
              "type": "str",
              "default": null,
              "help": "User acknowledging the alert",
              "option_names": [
                "--user"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        },
        {
          "command": "resolve",
          "function": "resolve_alert",
          "docstring": "Resolve a specific alert.",
          "options": [
            {
              "name": "alert_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Alert ID to resolve",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "user",
              "type": "str",
              "default": null,
              "help": "User resolving the alert",
              "option_names": [
                "--user"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        },
        {
          "command": "metrics",
          "function": "show_metrics",
          "docstring": "Display detailed metrics information.",
          "options": [
            {
              "name": "metric_type",
              "type": "str",
              "default": null,
              "help": "Metric type (business, operational, all)",
              "option_names": [
                "--type"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "format",
              "type": "str",
              "default": null,
              "help": "Output format (table, json)",
              "option_names": [
                "--format"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        },
        {
          "command": "compliance",
          "function": "compliance_report",
          "docstring": "Generate compliance and governance report.",
          "options": []
        },
        {
          "command": "integration",
          "function": "integration_status",
          "docstring": "Show enterprise integration status.",
          "options": []
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "app",
          "help": "Enterprise dashboard and monitoring commands",
          "add_completion": false,
          "rich_markup_mode": null,
          "parameters": {
            "name": "enterprise",
            "no_args_is_help": true
          }
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "import",
          "name": "time",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich",
          "name": "box",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.layout",
          "name": "Layout",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.live",
          "name": "Live",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.text",
          "name": "Text",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.enterprise_dashboard_service",
          "name": "AlertPriority",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.enterprise_dashboard_service",
          "name": "DashboardMetricType",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.enterprise_dashboard_service",
          "name": "EnterpriseDashboardService",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.enterprise_dashboard_service",
          "name": "initialize_enterprise_dashboard",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.enterprise_integration_service",
          "name": "IntegrationConfig",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.enterprise_integration_service",
          "name": "initialize_enterprise_integration",
          "asname": null
        },
        {
          "type": "import",
          "name": "random",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\explain.py",
      "commands": [
        {
          "command": "predict",
          "function": "predict",
          "docstring": "Explain a model's prediction for specific instance(s).",
          "options": [
            {
              "name": "model_path",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "data_path",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "instance_index",
              "type": "int | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "method",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "num_features",
              "type": "int",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "output_path",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "output_format",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "audience",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "enable_bias_detection",
              "type": "bool",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "enable_counterfactuals",
              "type": "bool",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "confidence_threshold",
              "type": "float",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            }
          ]
        },
        {
          "command": "analyze-bias",
          "function": "analyze_bias",
          "docstring": "Analyze model for bias and fairness issues.",
          "options": [
            {
              "name": "model_path",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "data_path",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "protected_attributes",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "output_path",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "threshold",
              "type": "float",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            }
          ]
        },
        {
          "command": "feature-importance",
          "function": "feature_importance",
          "docstring": "Analyze feature importance for the model.",
          "options": [
            {
              "name": "model_path",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "data_path",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "method",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "top_k",
              "type": "int",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "output_path",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "plot",
              "type": "bool",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            }
          ]
        },
        {
          "command": "validate-explanations",
          "function": "validate_explanations",
          "docstring": "Validate explanation quality and trustworthiness.",
          "options": [
            {
              "name": "model_path",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "data_path",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "method",
              "type": "str",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "num_samples",
              "type": "int",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "output_path",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            }
          ]
        },
        {
          "command": "summary",
          "function": "summary",
          "docstring": "Get explanation summary for a model.",
          "options": [
            {
              "name": "model_id",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "time_window",
              "type": "int",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "output_path",
              "type": "str | None",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            }
          ]
        }
      ],
      "subapps": {},
      "typer_apps": [],
      "imports": [
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "import",
          "name": "click",
          "asname": null
        },
        {
          "type": "import",
          "name": "numpy",
          "asname": "np"
        },
        {
          "type": "import",
          "name": "pandas",
          "asname": "pd"
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.explainable_ai_service",
          "name": "ExplainableAIService",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.explainable_ai_service",
          "name": "ExplanationConfiguration",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities.explainable_ai",
          "name": "ExplanationMethod",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.config.container",
          "name": "Container",
          "asname": null
        },
        {
          "type": "import",
          "name": "joblib",
          "asname": null
        },
        {
          "type": "import",
          "name": "joblib",
          "asname": null
        },
        {
          "type": "import",
          "name": "joblib",
          "asname": null
        },
        {
          "type": "import",
          "name": "joblib",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "timedelta",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "uuid",
          "name": "UUID",
          "asname": null
        },
        {
          "type": "import",
          "name": "matplotlib.pyplot",
          "asname": "plt"
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\explainability.py",
      "commands": [
        {
          "command": "explain",
          "function": "explain",
          "docstring": "Generate comprehensive explanations for model predictions.",
          "options": [
            {
              "name": "detector_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to saved detector model",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "dataset_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to dataset file (CSV or Parquet)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "explanation_type",
              "type": "str",
              "default": null,
              "help": "Type of explanation to generate (options: local, global, both)",
              "option_names": [
                "-t",
                "--explanation-type"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "methods",
              "type": "Optional[List[str]]",
              "default": null,
              "help": "Explanation methods to use (options: shap, lime, permutation, gradient)",
              "option_names": [
                "-m",
                "--methods"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "n_samples",
              "type": "int",
              "default": 10,
              "help": "Number of samples for local explanations",
              "option_names": [
                "--n-samples"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "audience",
              "type": "str",
              "default": null,
              "help": "Target audience for explanations (technical, business, regulatory)",
              "option_names": [
                "--audience"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "output",
              "type": "Optional[Path]",
              "default": null,
              "help": "Output file for explanation report",
              "option_names": [
                "--output"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output_format",
              "type": "str",
              "default": null,
              "help": "Output format (json, html, pdf)",
              "option_names": [
                "--format"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "visualizations",
              "type": "bool",
              "default": true,
              "help": "Generate visualization plots",
              "option_names": [
                "--visualizations/--no-visualizations"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "analyze-bias",
          "function": "analyze_bias",
          "docstring": "Analyze model for potential bias and fairness issues.",
          "options": [
            {
              "name": "detector_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to saved detector model",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "dataset_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to dataset file with protected attributes",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "protected_attributes",
              "type": "Optional[List[str]]",
              "default": null,
              "help": "Protected attribute column names",
              "option_names": [
                "-p",
                "--protected-attributes"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "metrics",
              "type": "Optional[List[str]]",
              "default": null,
              "help": "Fairness metrics to compute (options: demographic_parity, equalized_odds, statistical_parity)",
              "option_names": [
                "-m",
                "--metrics"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "threshold",
              "type": "float",
              "default": 0.5,
              "help": "Decision threshold for binary classification",
              "option_names": [
                "--threshold"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "min_group_size",
              "type": "int",
              "default": 30,
              "help": "Minimum group size for analysis",
              "option_names": [
                "--min-group-size"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output",
              "type": "Optional[Path]",
              "default": null,
              "help": "Output file for bias analysis results",
              "option_names": [
                "--output"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "assess-trust",
          "function": "assess_trust",
          "docstring": "Assess trust and reliability of model predictions.",
          "options": [
            {
              "name": "detector_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to saved detector model",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "dataset_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to dataset file",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "n_perturbations",
              "type": "int",
              "default": 100,
              "help": "Number of perturbations for stability analysis",
              "option_names": [
                "--n-perturbations"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "perturbation_strength",
              "type": "float",
              "default": 0.1,
              "help": "Strength of perturbations (0-1)",
              "option_names": [
                "--perturbation-strength"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "consistency",
              "type": "bool",
              "default": true,
              "help": "Enable consistency analysis",
              "option_names": [
                "--consistency/--no-consistency"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "stability",
              "type": "bool",
              "default": true,
              "help": "Enable stability analysis",
              "option_names": [
                "--stability/--no-stability"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "fidelity",
              "type": "bool",
              "default": true,
              "help": "Enable fidelity assessment",
              "option_names": [
                "--fidelity/--no-fidelity"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output",
              "type": "Optional[Path]",
              "default": null,
              "help": "Output file for trust assessment",
              "option_names": [
                "--output"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "feature-importance",
          "function": "feature_importance",
          "docstring": "Analyze global feature importance for the model.",
          "options": [
            {
              "name": "detector_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to saved detector model",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "dataset_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to dataset file",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "method",
              "type": "str",
              "default": null,
              "help": "Feature importance method (shap, lime, permutation)",
              "option_names": [
                "--method"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "top_k",
              "type": "int",
              "default": 15,
              "help": "Number of top features to display",
              "option_names": [
                "--top-k"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output",
              "type": "Optional[Path]",
              "default": null,
              "help": "Output file for feature importance",
              "option_names": [
                "--output"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "status",
          "function": "status",
          "docstring": "Show explainability service status and capabilities.",
          "options": [
            {
              "name": "cache_info",
              "type": "bool",
              "default": true,
              "help": "Show cache information",
              "option_names": [
                "--cache-info/--no-cache-info"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "info",
          "function": "info",
          "docstring": "Get detailed information about explanation types and methods.",
          "options": [
            {
              "name": "explanation_type",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Type of explanation to get information about",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "app",
          "help": "🔍 Explainable AI (model interpretability, bias analysis)",
          "add_completion": true,
          "rich_markup_mode": "rich",
          "parameters": {
            "name": "explainability"
          }
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "__future__",
          "name": "annotations",
          "asname": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "import",
          "name": "sys",
          "asname": null
        },
        {
          "type": "import",
          "name": "time",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.advanced_explainability_service",
          "name": "AdvancedExplainabilityService",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.advanced_explainability_service",
          "name": "BiasAnalysisConfig",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.advanced_explainability_service",
          "name": "ExplanationConfig",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.advanced_explainability_service",
          "name": "TrustScoreConfig",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities",
          "name": "Dataset",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.config.feature_flags",
          "name": "require_feature",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.data_loaders",
          "name": "CSVLoader",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.data_loaders",
          "name": "ParquetLoader",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.shared.protocols",
          "name": "DetectorProtocol",
          "asname": null
        },
        {
          "type": "import",
          "name": "pickle",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "unittest.mock",
          "name": "Mock",
          "asname": null
        },
        {
          "type": "import",
          "name": "numpy",
          "asname": "np"
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\export.py",
      "commands": [
        {
          "command": "list-formats",
          "function": "list_export_formats",
          "docstring": "List all available export formats and their status.",
          "options": []
        },
        {
          "command": "excel",
          "function": "export_excel",
          "docstring": "Export detection results to Excel format.",
          "options": [
            {
              "name": "results_file",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to detection results JSON file",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "output_file",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Output Excel file path",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "include_charts",
              "type": "bool",
              "default": true,
              "help": "Include charts and visualizations",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "advanced_formatting",
              "type": "bool",
              "default": true,
              "help": "Use advanced formatting",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "highlight_anomalies",
              "type": "bool",
              "default": true,
              "help": "Highlight anomalous samples",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "powerbi",
          "function": "export_powerbi",
          "docstring": "Export detection results to Power BI.",
          "options": [
            {
              "name": "results_file",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to detection results JSON file",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "workspace_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Power BI workspace ID",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "dataset_name",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Dataset name in Power BI",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "streaming",
              "type": "bool",
              "default": false,
              "help": "Use streaming dataset",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "table_name",
              "type": "str",
              "default": null,
              "help": "Table name",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "tenant_id",
              "type": "str | None",
              "default": null,
              "help": "Azure AD tenant ID",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "client_id",
              "type": "str | None",
              "default": null,
              "help": "Azure AD client ID",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "client_secret",
              "type": "str | None",
              "default": null,
              "help": "Azure AD client secret",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "gsheets",
          "function": "export_google_sheets",
          "docstring": "Export detection results to Google Sheets.",
          "options": [
            {
              "name": "results_file",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to detection results JSON file",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "spreadsheet_id",
              "type": "str | None",
              "default": null,
              "help": "Existing spreadsheet ID (creates new if not provided)",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "credentials_file",
              "type": "Path | None",
              "default": null,
              "help": "Google service account credentials JSON file",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "share_emails",
              "type": "list[str] | None",
              "default": null,
              "help": "Email addresses to share with",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "permissions",
              "type": "str",
              "default": null,
              "help": "Permission level: view, edit, comment",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "include_charts",
              "type": "bool",
              "default": true,
              "help": "Include charts and visualizations",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "smartsheet",
          "function": "export_smartsheet",
          "docstring": "Export detection results to Smartsheet.",
          "options": [
            {
              "name": "results_file",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to detection results JSON file",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "access_token",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Smartsheet API access token",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "workspace_name",
              "type": "str | None",
              "default": null,
              "help": "Workspace name",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "folder_id",
              "type": "str | None",
              "default": null,
              "help": "Folder ID",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "template_id",
              "type": "str | None",
              "default": null,
              "help": "Template ID for sheet creation",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "share_emails",
              "type": "list[str] | None",
              "default": null,
              "help": "Email addresses to share with",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "access_level",
              "type": "str",
              "default": null,
              "help": "Access level: VIEWER, EDITOR, ADMIN",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        },
        {
          "command": "multi",
          "function": "export_multiple",
          "docstring": "Export detection results to multiple formats simultaneously.",
          "options": [
            {
              "name": "results_file",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to detection results JSON file",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "formats",
              "type": "list[str]",
              "default": "<ellipsis>",
              "help": "Export formats (excel, powerbi, gsheets, smartsheet)",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output_dir",
              "type": "Path",
              "default": null,
              "help": "Output directory for files",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "config_file",
              "type": "Path | None",
              "default": null,
              "help": "JSON configuration file for format-specific options",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "validate",
          "function": "validate_config",
          "docstring": "Validate export configuration and setup.",
          "options": [
            {
              "name": "format",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Format to validate (excel, powerbi, gsheets, smartsheet)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "config_file",
              "type": "Path | None",
              "default": null,
              "help": "Configuration file to validate",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output_file",
              "type": "Path | None",
              "default": null,
              "help": "Output file path to validate",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "export_app",
          "help": "Export anomaly detection results to various platforms",
          "add_completion": false,
          "rich_markup_mode": null,
          "parameters": {}
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "application.dto.export_options",
          "name": "ExportFormat",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "application.dto.export_options",
          "name": "ExportOptions",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "application.services.export_service",
          "name": "ExportService",
          "asname": null
        }
      ]
    },
    {
      "file": "C:\\Users\\andre\\Pynomaly\\src\\pynomaly\\presentation\\cli\\governance.py",
      "error": "non-default argument follows default argument (<unknown>, line 454)",
      "commands": [],
      "subapps": {},
      "typer_apps": [],
      "imports": []
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\loader.py",
      "commands": [
        {
          "command": "version",
          "function": "version",
          "docstring": "Show version information.",
          "options": []
        }
      ],
      "subapps": {
        "auto": {
          "name": "auto",
          "module": "autonomous.app",
          "help": "Autonomous anomaly detection (auto-configure and run)",
          "commands": []
        },
        "automl": {
          "name": "automl",
          "module": "automl.app",
          "help": "Advanced AutoML & hyperparameter optimization",
          "commands": []
        },
        "config": {
          "name": "config",
          "module": "config_cli.app",
          "help": "Configuration management (capture, export, import)",
          "commands": []
        },
        "detector": {
          "name": "detector",
          "module": "detectors.app",
          "help": "Manage anomaly detectors",
          "commands": []
        },
        "dataset": {
          "name": "dataset",
          "module": "datasets.app",
          "help": "Manage datasets",
          "commands": []
        },
        "data": {
          "name": "data",
          "module": "preprocessing.app",
          "help": "Data preprocessing (clean, transform, pipeline)",
          "commands": []
        },
        "detect": {
          "name": "detect",
          "module": "detection.app",
          "help": "Run anomaly detection",
          "commands": []
        },
        "tdd": {
          "name": "tdd",
          "module": "tdd.app",
          "help": "Test-Driven Development (TDD) management and enforcement",
          "commands": []
        },
        "security": {
          "name": "security",
          "module": "security.app",
          "help": "🔒 Security & compliance (SOC2, GDPR, HIPAA, encryption)",
          "commands": []
        },
        "dashboard": {
          "name": "dashboard",
          "module": "dashboard.app",
          "help": "📊 Advanced visualization dashboards (executive, operational, analytical)",
          "commands": []
        },
        "server": {
          "name": "server",
          "module": "server.app",
          "help": "Manage API server",
          "commands": []
        },
        "governance": {
          "name": "governance",
          "module": "governance.app",
          "help": "Governance framework and audit management commands.",
          "commands": []
        },
        "deep-learning": {
          "name": "deep-learning",
          "module": "deep_learning.app",
          "help": "🧠 Deep learning anomaly detection (PyTorch, TensorFlow, JAX)",
          "commands": []
        },
        "explainability": {
          "name": "explainability",
          "module": "explainability.app",
          "help": "🔍 Explainable AI (model interpretability, bias analysis)",
          "commands": []
        },
        "selection": {
          "name": "selection",
          "module": "selection.app",
          "help": "🧠 Intelligent algorithm selection with learning capabilities",
          "commands": []
        }
      },
      "typer_apps": [
        {
          "name": "app",
          "help": "Pynomaly - State-of-the-art anomaly detection CLI",
          "add_completion": true,
          "rich_markup_mode": "rich",
          "parameters": {
            "name": "pynomaly"
          }
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "os",
          "asname": null
        },
        {
          "type": "import",
          "name": "sys",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "automl",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "autonomous",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "config",
          "asname": "config_cli"
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "datasets",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "dashboard",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "detection",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "detectors",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "governance",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "preprocessing",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "security",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "server",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "tdd",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli.container",
          "name": "get_cli_container",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli.export",
          "name": "export_app",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli.performance",
          "name": "performance_app",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "deep_learning",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "explainability",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli",
          "name": "selection",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\performance.py",
      "commands": [
        {
          "command": "benchmark",
          "function": "benchmark",
          "docstring": "Run comprehensive algorithm benchmarking suite.",
          "options": [
            {
              "name": "suite",
              "type": "str",
              "default": null,
              "help": "Benchmark suite to run",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "algorithms",
              "type": "Optional[List[str]]",
              "default": null,
              "help": "Specific algorithms to benchmark",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output_dir",
              "type": "Optional[str]",
              "default": null,
              "help": "Output directory for results",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "iterations",
              "type": "int",
              "default": 3,
              "help": "Number of benchmark iterations",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "timeout",
              "type": "int",
              "default": 300,
              "help": "Timeout per test in seconds",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "export_format",
              "type": "List[str]",
              "default": null,
              "help": "Export formats for results",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        },
        {
          "command": "scalability",
          "function": "scalability",
          "docstring": "Run detailed scalability analysis for an algorithm.",
          "options": [
            {
              "name": "algorithm",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Algorithm to analyze",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "min_size",
              "type": "int",
              "default": 1000,
              "help": "Minimum dataset size",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "max_size",
              "type": "int",
              "default": 100000,
              "help": "Maximum dataset size",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "min_features",
              "type": "int",
              "default": 10,
              "help": "Minimum feature count",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "max_features",
              "type": "int",
              "default": 200,
              "help": "Maximum feature count",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "steps",
              "type": "int",
              "default": 10,
              "help": "Number of test points",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output_file",
              "type": "Optional[str]",
              "default": null,
              "help": "Output file for scalability analysis",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "stress-test",
          "function": "stress_test",
          "docstring": "Run comprehensive stress testing for an algorithm.",
          "options": [
            {
              "name": "algorithm",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Algorithm to stress test",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "concurrent_requests",
              "type": "int",
              "default": 10,
              "help": "Number of concurrent requests",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "duration",
              "type": "int",
              "default": 60,
              "help": "Test duration in seconds",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "memory_pressure",
              "type": "int",
              "default": 500,
              "help": "Memory pressure in MB",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "cpu_stress",
              "type": "int",
              "default": 1000,
              "help": "CPU intensive operations",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "endurance_hours",
              "type": "int",
              "default": 0,
              "help": "Endurance test duration in hours",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output_file",
              "type": "Optional[str]",
              "default": null,
              "help": "Output file for stress test results",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "compare",
          "function": "compare",
          "docstring": "Compare multiple algorithms across different datasets and metrics.",
          "options": [
            {
              "name": "algorithms",
              "type": "Optional[List[str]]",
              "default": null,
              "help": "Algorithms to compare",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "datasets",
              "type": "Optional[List[str]]",
              "default": null,
              "help": "Datasets to use for comparison",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "metrics",
              "type": "Optional[List[str]]",
              "default": null,
              "help": "Metrics to compare",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output_file",
              "type": "Optional[str]",
              "default": null,
              "help": "Output file for comparison results",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "report",
          "function": "report",
          "docstring": "Generate comprehensive performance analysis report.",
          "options": [
            {
              "name": "results_dir",
              "type": "Optional[str]",
              "default": null,
              "help": "Directory containing benchmark results",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "report_format",
              "type": "str",
              "default": null,
              "help": "Report format",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "output_file",
              "type": "Optional[str]",
              "default": null,
              "help": "Output file for report",
              "option_names": [],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "monitor",
          "function": "monitor",
          "docstring": "Start real-time performance monitoring dashboard.",
          "options": []
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "performance_app",
          "help": "Performance testing and benchmarking commands",
          "add_completion": false,
          "rich_markup_mode": null,
          "parameters": {
            "name": "performance"
          }
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.layout",
          "name": "Layout",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "BarColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.performance_testing_service",
          "name": "PerformanceTestingService",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.performance_testing_service",
          "name": "StressTestConfig",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.config.container",
          "name": "Container",
          "asname": null
        },
        {
          "type": "import",
          "name": "csv",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\preprocessing.py",
      "commands": [
        {
          "command": "clean",
          "function": "clean_data",
          "docstring": "Clean dataset by handling missing values, outliers, and duplicates.",
          "options": [
            {
              "name": "dataset_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Dataset ID to clean",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "missing_strategy",
              "type": "str | None",
              "default": null,
              "help": "Missing value strategy",
              "option_names": [
                "--missing"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "outlier_strategy",
              "type": "str | None",
              "default": null,
              "help": "Outlier handling strategy",
              "option_names": [
                "--outliers"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "remove_duplicates",
              "type": "bool",
              "default": true,
              "help": "Remove duplicate rows",
              "option_names": [
                "--duplicates/--keep-duplicates"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "handle_zeros",
              "type": "str | None",
              "default": null,
              "help": "Zero value handling: keep, remove, replace",
              "option_names": [
                "--zeros"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "handle_infinite",
              "type": "str | None",
              "default": null,
              "help": "Infinite value handling: remove, replace, clip",
              "option_names": [
                "--infinite"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "fill_value",
              "type": "str | None",
              "default": null,
              "help": "Value for constant fill strategy",
              "option_names": [
                "--fill-value"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "outlier_threshold",
              "type": "float | None",
              "default": 3.0,
              "help": "Z-score threshold for outliers",
              "option_names": [
                "--outlier-threshold"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "dry_run",
              "type": "bool",
              "default": false,
              "help": "Show what would be done without applying changes",
              "option_names": [
                "--dry-run"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "save_as",
              "type": "str | None",
              "default": null,
              "help": "Save cleaned data as new dataset",
              "option_names": [
                "--save-as"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output_format",
              "type": "str",
              "default": null,
              "help": "Output format: csv, parquet, json",
              "option_names": [
                "--format"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        },
        {
          "command": "transform",
          "function": "transform_data",
          "docstring": "Transform dataset features with scaling, encoding, and feature engineering.",
          "options": [
            {
              "name": "dataset_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Dataset ID to transform",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "scaling",
              "type": "str | None",
              "default": null,
              "help": "Feature scaling strategy",
              "option_names": [
                "--scaling"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "encoding",
              "type": "str | None",
              "default": null,
              "help": "Categorical encoding strategy",
              "option_names": [
                "--encoding"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "feature_selection",
              "type": "str | None",
              "default": null,
              "help": "Feature selection strategy",
              "option_names": [
                "--feature-selection"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "polynomial_degree",
              "type": "int | None",
              "default": null,
              "help": "Generate polynomial features",
              "option_names": [
                "--polynomial"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "normalize_column_names",
              "type": "bool",
              "default": false,
              "help": "Normalize column names",
              "option_names": [
                "--normalize-names"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "optimize_dtypes",
              "type": "bool",
              "default": false,
              "help": "Optimize data types",
              "option_names": [
                "--optimize-dtypes"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "dry_run",
              "type": "bool",
              "default": false,
              "help": "Show what would be done without applying changes",
              "option_names": [
                "--dry-run"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "save_as",
              "type": "str | None",
              "default": null,
              "help": "Save transformed data as new dataset",
              "option_names": [
                "--save-as"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "exclude_columns",
              "type": "str | None",
              "default": null,
              "help": "Comma-separated columns to exclude",
              "option_names": [
                "--exclude"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "pipeline",
          "function": "manage_pipeline",
          "docstring": "Manage preprocessing pipelines.",
          "options": [
            {
              "name": "action",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Action: create, list, show, apply, save, load, delete",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "name",
              "type": "str | None",
              "default": null,
              "help": "Pipeline name",
              "option_names": [
                "--name"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "dataset_id",
              "type": "str | None",
              "default": null,
              "help": "Dataset ID",
              "option_names": [
                "--dataset"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "config_file",
              "type": "Path | None",
              "default": null,
              "help": "Pipeline configuration file",
              "option_names": [
                "--config"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output_file",
              "type": "Path | None",
              "default": null,
              "help": "Output file for save operations",
              "option_names": [
                "--output"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "dry_run",
              "type": "bool",
              "default": false,
              "help": "Show what would be done without applying changes",
              "option_names": [
                "--dry-run"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "app",
          "help": "",
          "add_completion": false,
          "rich_markup_mode": null,
          "parameters": {}
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "__future__",
          "name": "annotations",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "import",
          "name": "numpy",
          "asname": "np"
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.preprocessing.data_cleaner",
          "name": "DataCleaner",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.preprocessing.data_cleaner",
          "name": "MissingValueStrategy",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.preprocessing.data_cleaner",
          "name": "OutlierStrategy",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.preprocessing.data_transformer",
          "name": "DataTransformer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.preprocessing.data_transformer",
          "name": "EncodingStrategy",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.preprocessing.data_transformer",
          "name": "FeatureSelectionStrategy",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.preprocessing.data_transformer",
          "name": "ScalingStrategy",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.preprocessing.preprocessing_pipeline",
          "name": "PreprocessingPipeline",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli.container",
          "name": "get_cli_container",
          "asname": null
        },
        {
          "type": "import",
          "name": "uuid",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities",
          "name": "Dataset",
          "asname": null
        },
        {
          "type": "import",
          "name": "uuid",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities",
          "name": "Dataset",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\quality.py",
      "commands": [
        {
          "command": "validate",
          "function": "validate",
          "docstring": "Validate feature against quality gates.",
          "options": [
            {
              "name": "feature_path",
              "type": "Annotated[Path, typer.Argument(help='Path to the feature file or directory to validate')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "feature_name",
              "type": "Annotated[str | None, typer.Option('--feature-name', '-n', help='Name of the feature being validated')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "output",
              "type": "Annotated[Path | None, typer.Option('--output', '-o', help='Output file for report')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "output_format",
              "type": "Annotated[str, typer.Option('--format', help='Output format', choices=['json', 'html', 'table'])]",
              "default": "table",
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "threshold",
              "type": "Annotated[float, typer.Option('--threshold', '-t', help='Minimum success rate threshold for approval')]",
              "default": 80.0,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "fail_on_critical",
              "type": "Annotated[bool, typer.Option('--fail-on-critical', help='Fail if any critical quality gates fail')]",
              "default": true,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "verbose",
              "type": "Annotated[bool, typer.Option('--verbose', '-v', help='Show detailed gate results')]",
              "default": false,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        },
        {
          "command": "batch",
          "function": "batch",
          "docstring": "Batch validate multiple features in a directory.",
          "options": [
            {
              "name": "directory",
              "type": "Annotated[Path, typer.Argument(help='Directory containing features to validate')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "pattern",
              "type": "Annotated[str, typer.Option('--pattern', '-p', help='File pattern to match')]",
              "default": "*.py",
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "output",
              "type": "Annotated[Path | None, typer.Option('--output', '-o', help='Output directory for reports')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "output_format",
              "type": "Annotated[str, typer.Option('--format', help='Output format', choices=['json', 'html', 'summary'])]",
              "default": "summary",
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "parallel",
              "type": "Annotated[bool, typer.Option('--parallel', help='Run validation in parallel')]",
              "default": false,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "threshold",
              "type": "Annotated[float, typer.Option('--threshold', '-t', help='Minimum success rate threshold')]",
              "default": 80.0,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        },
        {
          "command": "show",
          "function": "show",
          "docstring": "Display a previously generated quality gate report.",
          "options": [
            {
              "name": "report_file",
              "type": "Annotated[Path, typer.Argument(help='Path to the quality gate report file')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "input_format",
              "type": "Annotated[str, typer.Option('--format', help='Input report format', choices=['json'])]",
              "default": "json",
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        },
        {
          "command": "gates",
          "function": "gates",
          "docstring": "List available quality gates and their descriptions.",
          "options": [
            {
              "name": "gate_type",
              "type": "Annotated[str | None, typer.Option('--gate-type', help='Filter by gate type', choices=[t.value for t in QualityGateType])]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "quality_level",
              "type": "Annotated[str | None, typer.Option('--quality-level', help='Filter by quality level', choices=[l.value for l in QualityLevel])]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "quality",
          "help": "Quality gates and code quality validation commands.",
          "add_completion": false,
          "rich_markup_mode": null,
          "parameters": {}
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Annotated",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "infrastructure.quality.quality_gates",
          "name": "QualityGateType",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "infrastructure.quality.quality_gates",
          "name": "QualityGateValidator",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "infrastructure.quality.quality_gates",
          "name": "QualityLevel",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\recommendation.py",
      "commands": [
        {
          "command": "dataset",
          "function": "recommend_for_dataset",
          "docstring": "Get configuration recommendations for a specific dataset.",
          "options": [
            {
              "name": "dataset_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to dataset file",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "samples",
              "type": "int | None",
              "default": null,
              "help": "Number of samples (auto-detected if not provided)",
              "option_names": [
                "--samples"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "features",
              "type": "int | None",
              "default": null,
              "help": "Number of features (auto-detected if not provided)",
              "option_names": [
                "--features"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "min_accuracy",
              "type": "float | None",
              "default": 0.7,
              "help": "Minimum required accuracy",
              "option_names": [
                "--min-accuracy"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "use_case",
              "type": "str | None",
              "default": null,
              "help": "Specific use case (e.g., fraud_detection)",
              "option_names": [
                "--use-case"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "difficulty",
              "type": "str",
              "default": null,
              "help": "Difficulty level (beginner/intermediate/advanced)",
              "option_names": [
                "--difficulty"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "max_results",
              "type": "int",
              "default": 5,
              "help": "Maximum number of recommendations",
              "option_names": [
                "--max-results"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output",
              "type": "Path | None",
              "default": null,
              "help": "Save recommendations to file",
              "option_names": [
                "--output",
                "-o"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "format",
              "type": "str",
              "default": null,
              "help": "Output format (table/json/yaml)",
              "option_names": [
                "--format"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        },
        {
          "command": "similar",
          "function": "recommend_similar",
          "docstring": "Get recommendations similar to an existing configuration.",
          "options": [
            {
              "name": "config_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Configuration ID to find similar configurations for",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "max_results",
              "type": "int",
              "default": 5,
              "help": "Maximum number of recommendations",
              "option_names": [
                "--max-results"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "similarity_threshold",
              "type": "float",
              "default": 0.7,
              "help": "Minimum similarity threshold",
              "option_names": [
                "--threshold"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output",
              "type": "Path | None",
              "default": null,
              "help": "Save recommendations to file",
              "option_names": [
                "--output",
                "-o"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "format",
              "type": "str",
              "default": null,
              "help": "Output format (table/json/yaml)",
              "option_names": [
                "--format"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        },
        {
          "command": "predict",
          "function": "predict_performance",
          "docstring": "Predict performance of a configuration on a specific dataset.",
          "options": [
            {
              "name": "config_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Configuration ID to predict performance for",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "dataset_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to target dataset",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "samples",
              "type": "int | None",
              "default": null,
              "help": "Number of samples",
              "option_names": [
                "--samples"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "features",
              "type": "int | None",
              "default": null,
              "help": "Number of features",
              "option_names": [
                "--features"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output",
              "type": "Path | None",
              "default": null,
              "help": "Save predictions to file",
              "option_names": [
                "--output",
                "-o"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "format",
              "type": "str",
              "default": null,
              "help": "Output format (table/json/yaml)",
              "option_names": [
                "--format"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        },
        {
          "command": "train",
          "function": "train_models",
          "docstring": "Train machine learning models for recommendations.",
          "options": [
            {
              "name": "min_configs",
              "type": "int",
              "default": 20,
              "help": "Minimum configurations needed for training",
              "option_names": [
                "--min-configs"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "test_size",
              "type": "float",
              "default": 0.2,
              "help": "Fraction of data for testing",
              "option_names": [
                "--test-size"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "force",
              "type": "bool",
              "default": false,
              "help": "Force retraining even if models exist",
              "option_names": [
                "--force"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "analyze",
          "function": "analyze_patterns",
          "docstring": "Analyze recommendation patterns and effectiveness.",
          "options": [
            {
              "name": "days",
              "type": "int",
              "default": 30,
              "help": "Number of days to analyze",
              "option_names": [
                "--days"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output",
              "type": "Path | None",
              "default": null,
              "help": "Save analysis to file",
              "option_names": [
                "--output",
                "-o"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "format",
              "type": "str",
              "default": null,
              "help": "Output format (table/json/yaml)",
              "option_names": [
                "--format"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        },
        {
          "command": "stats",
          "function": "show_statistics",
          "docstring": "Show recommendation service statistics.",
          "options": []
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "app",
          "help": "🧠 Intelligent configuration recommendations based on dataset characteristics",
          "add_completion": false,
          "rich_markup_mode": "rich",
          "parameters": {
            "name": "recommend"
          }
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "__future__",
          "name": "annotations",
          "asname": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.dto.configuration_dto",
          "name": "ConfigurationLevel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.dto.configuration_dto",
          "name": "DatasetCharacteristicsDTO",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.config.feature_flags",
          "name": "require_feature",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli.container",
          "name": "get_cli_container",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "uuid",
          "name": "UUID",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "uuid",
          "name": "UUID",
          "asname": null
        },
        {
          "type": "import",
          "name": "numpy",
          "asname": "np"
        },
        {
          "type": "import",
          "name": "pandas",
          "asname": "pd"
        },
        {
          "type": "import",
          "name": "yaml",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\security.py",
      "commands": [
        {
          "command": "assess-compliance",
          "function": "assess_compliance",
          "docstring": "Assess compliance with regulatory frameworks.",
          "options": [
            {
              "name": "frameworks",
              "type": "Annotated[list[str], typer.Option('--frameworks', help='Compliance frameworks to assess')]",
              "default": [
                "soc2",
                "gdpr"
              ],
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "output_path",
              "type": "Annotated[str | None, typer.Option('--output-path', help='Path to save assessment reports')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "scope",
              "type": "Annotated[str | None, typer.Option('--scope', help='Assessment scope description')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "detailed",
              "type": "Annotated[bool, typer.Option('--detailed', help='Generate detailed assessment report')]",
              "default": false,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        },
        {
          "command": "encrypt-data",
          "function": "encrypt_data",
          "docstring": "Encrypt sensitive data with compliance controls.",
          "options": [
            {
              "name": "data_file",
              "type": "Annotated[str, typer.Option('--data-file', help='Path to data file for encryption')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "output_file",
              "type": "Annotated[str | None, typer.Option('--output-file', help='Path for encrypted output')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "classification",
              "type": "Annotated[str, typer.Option('--classification', help='Data classification level')]",
              "default": "confidential",
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "frameworks",
              "type": "Annotated[list[str], typer.Option('--frameworks', help='Applicable compliance frameworks')]",
              "default": [],
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        },
        {
          "command": "register-data-subject",
          "function": "register_data_subject",
          "docstring": "Register data subject for GDPR compliance.",
          "options": [
            {
              "name": "subject_data",
              "type": "Annotated[str, typer.Option('--subject-data', help='JSON file with data subject information')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "processing_purposes",
              "type": "Annotated[str, typer.Option('--processing-purposes', help='Comma-separated processing purposes')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "consent_given",
              "type": "Annotated[bool, typer.Option('--consent-given', help='Whether consent was given')]",
              "default": false,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        },
        {
          "command": "gdpr-request",
          "function": "gdpr_request",
          "docstring": "Handle GDPR data subject rights requests.",
          "options": [
            {
              "name": "subject_id",
              "type": "Annotated[str, typer.Option('--subject-id', help='Data subject UUID')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "request_type",
              "type": "Annotated[str, typer.Option('--request-type', help='Type of GDPR request')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "output_file",
              "type": "Annotated[str | None, typer.Option('--output-file', help='File to save request response')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        },
        {
          "command": "detect-breach",
          "function": "detect_breach",
          "docstring": "Detect potential data breaches from access logs.",
          "options": [
            {
              "name": "access_logs",
              "type": "Annotated[str, typer.Option('--access-logs', help='JSON file with access logs')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "output_file",
              "type": "Annotated[str | None, typer.Option('--output-file', help='File to save breach detection results')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "alert_threshold",
              "type": "Annotated[int, typer.Option('--alert-threshold', help='Minimum incidents for alert')]",
              "default": 3,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        },
        {
          "command": "anonymize-data",
          "function": "anonymize_data",
          "docstring": "Anonymize data for privacy compliance.",
          "options": [
            {
              "name": "data_file",
              "type": "Annotated[str, typer.Option('--data-file', help='Data file to anonymize')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "rules_file",
              "type": "Annotated[str, typer.Option('--rules-file', help='JSON file with anonymization rules')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": true
            },
            {
              "name": "output_file",
              "type": "Annotated[str | None, typer.Option('--output-file', help='File to save anonymized data')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        },
        {
          "command": "status",
          "function": "status",
          "docstring": "Get overall security and compliance status.",
          "options": [
            {
              "name": "config_file",
              "type": "Annotated[str | None, typer.Option('--config-file', help='Security configuration file')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "output_file",
              "type": "Annotated[str | None, typer.Option('--output-file', help='File to save security status')]",
              "default": null,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        },
        {
          "command": "cleanup",
          "function": "cleanup",
          "docstring": "Clean up expired data per retention policies.",
          "options": [
            {
              "name": "dry_run",
              "type": "Annotated[bool, typer.Option('--dry-run', help='Show what would be cleaned without actually doing it')]",
              "default": false,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            },
            {
              "name": "force",
              "type": "Annotated[bool, typer.Option('--force', help='Force cleanup without confirmation')]",
              "default": false,
              "help": "",
              "option_names": [],
              "is_argument": false,
              "is_option": false,
              "required": false
            }
          ]
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "app",
          "help": "Security and compliance management commands.",
          "add_completion": false,
          "rich_markup_mode": "rich",
          "parameters": {
            "name": "security"
          }
        }
      ],
      "imports": [
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Annotated",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.security_compliance_service",
          "name": "EncryptionContext",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.security_compliance_service",
          "name": "SecurityComplianceService",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.security_compliance_service",
          "name": "SecurityConfiguration",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities.security_compliance",
          "name": "ComplianceFramework",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities.security_compliance",
          "name": "DataClassification",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.config.container",
          "name": "Container",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "uuid",
          "name": "UUID",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\selection.py",
      "commands": [
        {
          "command": "recommend",
          "function": "recommend",
          "docstring": "Recommend optimal algorithms for a dataset.",
          "options": [
            {
              "name": "dataset_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to dataset file (CSV or Parquet)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "max_training_time",
              "type": "Optional[float]",
              "default": null,
              "help": "Maximum training time in seconds",
              "option_names": [
                "--max-training-time"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "max_memory",
              "type": "Optional[float]",
              "default": null,
              "help": "Maximum memory usage in MB",
              "option_names": [
                "--max-memory"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "min_accuracy",
              "type": "Optional[float]",
              "default": null,
              "help": "Minimum required accuracy (0-1)",
              "option_names": [
                "--min-accuracy"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "require_interpretability",
              "type": "bool",
              "default": false,
              "help": "Require interpretable algorithms",
              "option_names": [
                "--require-interpretability/--no-interpretability"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "gpu",
              "type": "bool",
              "default": false,
              "help": "GPU availability",
              "option_names": [
                "--gpu/--no-gpu"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output",
              "type": "Optional[Path]",
              "default": null,
              "help": "Output file for recommendations",
              "option_names": [
                "--output"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "top_k",
              "type": "int",
              "default": 5,
              "help": "Number of top recommendations to show",
              "option_names": [
                "--top-k"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "benchmark",
          "function": "benchmark",
          "docstring": "Benchmark algorithms on a dataset.",
          "options": [
            {
              "name": "dataset_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to dataset file (CSV or Parquet)",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "algorithms",
              "type": "Optional[List[str]]",
              "default": null,
              "help": "Specific algorithms to benchmark",
              "option_names": [
                "-a",
                "--algorithms"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "cv_folds",
              "type": "int",
              "default": 3,
              "help": "Cross-validation folds",
              "option_names": [
                "--cv-folds"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "max_training_time",
              "type": "Optional[float]",
              "default": null,
              "help": "Maximum training time per algorithm",
              "option_names": [
                "--max-training-time"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output",
              "type": "Optional[Path]",
              "default": null,
              "help": "Output file for benchmark results",
              "option_names": [
                "--output"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "learn",
          "function": "learn",
          "docstring": "Learn from algorithm selection result.",
          "options": [
            {
              "name": "dataset_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to dataset file used",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "algorithm",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Algorithm that was used",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "performance_score",
              "type": "float",
              "default": "<ellipsis>",
              "help": "Achieved performance score (0-1)",
              "option_names": [
                "--performance-score"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "training_time",
              "type": "Optional[float]",
              "default": null,
              "help": "Training time in seconds",
              "option_names": [
                "--training-time"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "memory_usage",
              "type": "Optional[float]",
              "default": null,
              "help": "Memory usage in MB",
              "option_names": [
                "--memory-usage"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "additional_metrics",
              "type": "Optional[str]",
              "default": null,
              "help": "Additional metrics as JSON string",
              "option_names": [
                "--additional-metrics"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "insights",
          "function": "insights",
          "docstring": "Get insights from algorithm selection history.",
          "options": [
            {
              "name": "min_samples",
              "type": "int",
              "default": 10,
              "help": "Minimum samples required for reliable insights",
              "option_names": [
                "--min-samples"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "output",
              "type": "Optional[Path]",
              "default": null,
              "help": "Output file for insights",
              "option_names": [
                "--output"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "predict-performance",
          "function": "predict_performance",
          "docstring": "Predict algorithm performance on a dataset.",
          "options": [
            {
              "name": "dataset_path",
              "type": "Path",
              "default": "<ellipsis>",
              "help": "Path to dataset file",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "algorithm",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Algorithm to predict performance for",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "confidence_level",
              "type": "float",
              "default": 0.95,
              "help": "Confidence level for prediction interval",
              "option_names": [
                "--confidence-level"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "status",
          "function": "status",
          "docstring": "Show intelligent selection service status.",
          "options": []
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "app",
          "help": "🧠 Intelligent algorithm selection with learning capabilities",
          "add_completion": true,
          "rich_markup_mode": "rich",
          "parameters": {
            "name": "selection"
          }
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "__future__",
          "name": "annotations",
          "asname": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "import",
          "name": "sys",
          "asname": null
        },
        {
          "type": "import",
          "name": "time",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.dto.selection_dto",
          "name": "AlgorithmPerformanceDTO",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.dto.selection_dto",
          "name": "OptimizationConstraintsDTO",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.intelligent_selection_service",
          "name": "IntelligentSelectionService",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.domain.entities",
          "name": "Dataset",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.config.feature_flags",
          "name": "require_feature",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.data_loaders",
          "name": "CSVLoader",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.data_loaders",
          "name": "ParquetLoader",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\server.py",
      "commands": [
        {
          "command": "start",
          "function": "start_server",
          "docstring": "Start the API server.",
          "options": [
            {
              "name": "host",
              "type": "str",
              "default": null,
              "help": "Server host",
              "option_names": [
                "--host",
                "-h"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "port",
              "type": "int",
              "default": 8000,
              "help": "Server port",
              "option_names": [
                "--port",
                "-p"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "reload",
              "type": "bool",
              "default": false,
              "help": "Enable auto-reload",
              "option_names": [
                "--reload",
                "-r"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "workers",
              "type": "int",
              "default": 1,
              "help": "Number of workers",
              "option_names": [
                "--workers",
                "-w"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "daemon",
              "type": "bool",
              "default": false,
              "help": "Run as daemon",
              "option_names": [
                "--daemon",
                "-d"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "log_level",
              "type": "str",
              "default": null,
              "help": "Log level",
              "option_names": [
                "--log-level"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            }
          ]
        },
        {
          "command": "stop",
          "function": "stop_server",
          "docstring": "Stop the API server.",
          "options": [
            {
              "name": "force",
              "type": "bool",
              "default": false,
              "help": "Force stop",
              "option_names": [
                "--force",
                "-f"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "status",
          "function": "server_status",
          "docstring": "Check server status.",
          "options": []
        },
        {
          "command": "logs",
          "function": "show_logs",
          "docstring": "Show server logs.",
          "options": [
            {
              "name": "lines",
              "type": "int",
              "default": 50,
              "help": "Number of lines to show",
              "option_names": [
                "--lines",
                "-n"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "follow",
              "type": "bool",
              "default": false,
              "help": "Follow log output",
              "option_names": [
                "--follow",
                "-f"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "error",
              "type": "bool",
              "default": false,
              "help": "Show only errors",
              "option_names": [
                "--error",
                "-e"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "config",
          "function": "show_server_config",
          "docstring": "Show server configuration.",
          "options": []
        },
        {
          "command": "health",
          "function": "check_health",
          "docstring": "Check API health.",
          "options": []
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "app",
          "help": "",
          "add_completion": false,
          "rich_markup_mode": null,
          "parameters": {}
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "__future__",
          "name": "annotations",
          "asname": null
        },
        {
          "type": "import",
          "name": "os",
          "asname": null
        },
        {
          "type": "import",
          "name": "signal",
          "asname": null
        },
        {
          "type": "import",
          "name": "subprocess",
          "asname": null
        },
        {
          "type": "import",
          "name": "sys",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.presentation.cli.container",
          "name": "get_cli_container",
          "asname": null
        },
        {
          "type": "import",
          "name": "socket",
          "asname": null
        },
        {
          "type": "import",
          "name": "requests",
          "asname": null
        },
        {
          "type": "import",
          "name": "requests",
          "asname": null
        }
      ]
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\tdd.py",
      "commands": [
        {
          "command": "init",
          "function": "init_tdd",
          "docstring": "Initialize TDD configuration for the project.",
          "options": [
            {
              "name": "enable",
              "type": "bool",
              "default": false,
              "help": "Enable TDD enforcement",
              "option_names": [
                "--enable"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "strict",
              "type": "bool",
              "default": false,
              "help": "Enable strict TDD mode",
              "option_names": [
                "--strict"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "coverage_threshold",
              "type": "float",
              "default": 0.8,
              "help": "Minimum coverage threshold",
              "option_names": [
                "--coverage"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "project_root",
              "type": "str | None",
              "default": null,
              "help": "Project root directory",
              "option_names": [
                "--root"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "status",
          "function": "show_status",
          "docstring": "Show TDD compliance status.",
          "options": [
            {
              "name": "detailed",
              "type": "bool",
              "default": false,
              "help": "Show detailed compliance report",
              "option_names": [
                "--detailed",
                "-d"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "project_root",
              "type": "str | None",
              "default": null,
              "help": "Project root directory",
              "option_names": [
                "--root"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "require",
          "function": "create_requirement",
          "docstring": "Create a test requirement for a function.",
          "options": [
            {
              "name": "module_path",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Path to the module requiring tests",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "function_name",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Name of the function to test",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "description",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Description of what should be tested",
              "option_names": [
                "--desc"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "specification",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Detailed test specification",
              "option_names": [
                "--spec"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "coverage_target",
              "type": "float",
              "default": 0.8,
              "help": "Target coverage percentage",
              "option_names": [
                "--coverage"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "tags",
              "type": "str | None",
              "default": null,
              "help": "Comma-separated tags",
              "option_names": [
                "--tags"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "project_root",
              "type": "str | None",
              "default": null,
              "help": "Project root directory",
              "option_names": [
                "--root"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "validate",
          "function": "validate_compliance",
          "docstring": "Validate TDD compliance for the project.",
          "options": [
            {
              "name": "fix",
              "type": "bool",
              "default": false,
              "help": "Attempt to auto-fix violations",
              "option_names": [
                "--fix"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "coverage",
              "type": "bool",
              "default": false,
              "help": "Run coverage analysis",
              "option_names": [
                "--coverage"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "project_root",
              "type": "str | None",
              "default": null,
              "help": "Project root directory",
              "option_names": [
                "--root"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "file_path",
              "type": "str | None",
              "default": null,
              "help": "Validate specific file only",
              "option_names": [
                "--file"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "exempt",
          "function": "add_exemption",
          "docstring": "Manage TDD exemptions for file patterns.",
          "options": [
            {
              "name": "pattern",
              "type": "str",
              "default": "<ellipsis>",
              "help": "File pattern to exempt from TDD",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "remove",
              "type": "bool",
              "default": false,
              "help": "Remove exemption instead of adding",
              "option_names": [
                "--remove"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "list_exemptions",
              "type": "bool",
              "default": false,
              "help": "List current exemptions",
              "option_names": [
                "--list"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "enable",
          "function": "enable_tdd",
          "docstring": "Enable TDD enforcement.",
          "options": [
            {
              "name": "strict",
              "type": "bool",
              "default": false,
              "help": "Enable strict TDD mode",
              "option_names": [
                "--strict"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "coverage_threshold",
              "type": "float",
              "default": 0.8,
              "help": "Set coverage threshold",
              "option_names": [
                "--coverage"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "disable",
          "function": "disable_tdd",
          "docstring": "Disable TDD enforcement.",
          "options": []
        },
        {
          "command": "requirements",
          "function": "list_requirements",
          "docstring": "List test requirements.",
          "options": [
            {
              "name": "status",
              "type": "str | None",
              "default": null,
              "help": "Filter by status (pending, implemented, validated)",
              "option_names": [
                "--status"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "module",
              "type": "str | None",
              "default": null,
              "help": "Filter by module path",
              "option_names": [
                "--module"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "tags",
              "type": "str | None",
              "default": null,
              "help": "Filter by tags (comma-separated)",
              "option_names": [
                "--tags"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "project_root",
              "type": "str | None",
              "default": null,
              "help": "Project root directory",
              "option_names": [
                "--root"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "coverage",
          "function": "run_coverage",
          "docstring": "Run test coverage analysis.",
          "options": [
            {
              "name": "project_root",
              "type": "str | None",
              "default": null,
              "help": "Project root directory",
              "option_names": [
                "--root"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "threshold",
              "type": "float | None",
              "default": null,
              "help": "Coverage threshold to check against",
              "option_names": [
                "--threshold"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "config",
          "function": "show_config",
          "docstring": "Show or edit TDD configuration.",
          "options": [
            {
              "name": "edit",
              "type": "bool",
              "default": false,
              "help": "Edit TDD configuration",
              "option_names": [
                "--edit"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "reset",
              "type": "bool",
              "default": false,
              "help": "Reset to default configuration",
              "option_names": [
                "--reset"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "hooks",
          "function": "manage_git_hooks",
          "docstring": "Manage git hooks for TDD enforcement.",
          "options": [
            {
              "name": "install",
              "type": "bool",
              "default": false,
              "help": "Install git hooks",
              "option_names": [
                "--install"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "uninstall",
              "type": "bool",
              "default": false,
              "help": "Uninstall git hooks",
              "option_names": [
                "--uninstall"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "status",
              "type": "bool",
              "default": false,
              "help": "Show git hooks status",
              "option_names": [
                "--status"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "pre_commit_config",
              "type": "bool",
              "default": false,
              "help": "Add to pre-commit configuration",
              "option_names": [
                "--pre-commit"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "report",
          "function": "generate_report",
          "docstring": "Generate comprehensive TDD compliance report.",
          "options": [
            {
              "name": "output_file",
              "type": "str | None",
              "default": null,
              "help": "Output file for report",
              "option_names": [
                "--output",
                "-o"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "format",
              "type": "str",
              "default": null,
              "help": "Report format (json, yaml, html)",
              "option_names": [
                "--format"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "project_root",
              "type": "str | None",
              "default": null,
              "help": "Project root directory",
              "option_names": [
                "--root"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "app",
          "help": "🧪 Test-Driven Development (TDD) management and enforcement",
          "add_completion": false,
          "rich_markup_mode": "rich",
          "parameters": {
            "name": "tdd"
          }
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "__future__",
          "name": "annotations",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.config.tdd_config",
          "name": "TDDSettings",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.config.tdd_config",
          "name": "get_tdd_config",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.persistence.tdd_repository",
          "name": "FileTDDRepository",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.tdd.enforcement",
          "name": "TDDEnforcementEngine",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.tdd.git_hooks",
          "name": "GitHookManager",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.tdd.git_hooks",
          "name": "PreCommitConfig",
          "asname": null
        },
        {
          "type": "import",
          "name": "yaml",
          "asname": null
        }
      ]
    },
    {
      "file": "C:\\Users\\andre\\Pynomaly\\src\\pynomaly\\presentation\\cli\\tenant.py",
      "error": "non-default argument follows default argument (<unknown>, line 31)",
      "commands": [],
      "subapps": {},
      "typer_apps": [],
      "imports": []
    },
    {
      "file": "src\\pynomaly\\presentation\\cli\\training_automation_commands.py",
      "commands": [
        {
          "command": "create",
          "function": "create_training_job",
          "docstring": "Create a new training job with specified configuration.",
          "options": [
            {
              "name": "name",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Training job name",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "dataset_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Dataset ID",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "algorithms",
              "type": "Optional[List[str]]",
              "default": null,
              "help": "Target algorithms",
              "option_names": [
                "--algorithm",
                "-a"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "max_trials",
              "type": "int",
              "default": 100,
              "help": "Maximum optimization trials",
              "option_names": [
                "--max-trials",
                "-t"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "timeout",
              "type": "int",
              "default": 60,
              "help": "Timeout in minutes",
              "option_names": [
                "--timeout",
                "-T"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "strategy",
              "type": "OptimizationStrategy",
              "default": null,
              "help": "Optimization strategy",
              "option_names": [
                "--strategy",
                "-s"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "pruning",
              "type": "PruningStrategy",
              "default": null,
              "help": "Pruning strategy",
              "option_names": [
                "--pruning",
                "-p"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "metric",
              "type": "str",
              "default": null,
              "help": "Primary optimization metric",
              "option_names": [
                "--metric",
                "-m"
              ],
              "is_argument": false,
              "is_option": true,
              "required": true
            },
            {
              "name": "cv_folds",
              "type": "int",
              "default": 5,
              "help": "Cross-validation folds",
              "option_names": [
                "--cv-folds",
                "-k"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "experiment",
              "type": "Optional[str]",
              "default": null,
              "help": "Experiment name",
              "option_names": [
                "--experiment",
                "-e"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "auto_start",
              "type": "bool",
              "default": false,
              "help": "Start job immediately",
              "option_names": [
                "--start"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "save_config",
              "type": "Optional[str]",
              "default": null,
              "help": "Save configuration to file",
              "option_names": [
                "--save-config"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "start",
          "function": "start_training_job",
          "docstring": "Start a training job.",
          "options": [
            {
              "name": "job_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Training job ID",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "monitor",
              "type": "bool",
              "default": false,
              "help": "Monitor job progress",
              "option_names": [
                "--monitor",
                "-m"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "status",
          "function": "get_job_status",
          "docstring": "Get training job status and information.",
          "options": [
            {
              "name": "job_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Training job ID",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "detailed",
              "type": "bool",
              "default": false,
              "help": "Show detailed information",
              "option_names": [
                "--detailed",
                "-d"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "metrics",
              "type": "bool",
              "default": false,
              "help": "Show training metrics",
              "option_names": [
                "--metrics",
                "-m"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "list",
          "function": "list_training_jobs",
          "docstring": "List training jobs.",
          "options": [
            {
              "name": "status_filter",
              "type": "Optional[TrainingStatus]",
              "default": null,
              "help": "Filter by status",
              "option_names": [
                "--status",
                "-s"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "limit",
              "type": "int",
              "default": 20,
              "help": "Maximum number of jobs to show",
              "option_names": [
                "--limit",
                "-l"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "detailed",
              "type": "bool",
              "default": false,
              "help": "Show detailed information",
              "option_names": [
                "--detailed",
                "-d"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "cancel",
          "function": "cancel_training_job",
          "docstring": "Cancel a running training job.",
          "options": [
            {
              "name": "job_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Training job ID",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "confirm",
              "type": "bool",
              "default": false,
              "help": "Skip confirmation",
              "option_names": [
                "--yes",
                "-y"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "quick",
          "function": "quick_optimize",
          "docstring": "Quick optimization with sensible defaults.",
          "options": [
            {
              "name": "dataset_id",
              "type": "str",
              "default": "<ellipsis>",
              "help": "Dataset ID",
              "option_names": [],
              "is_argument": true,
              "is_option": false,
              "required": true
            },
            {
              "name": "algorithms",
              "type": "Optional[List[str]]",
              "default": null,
              "help": "Target algorithms",
              "option_names": [
                "--algorithm",
                "-a"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "trials",
              "type": "int",
              "default": 50,
              "help": "Maximum trials",
              "option_names": [
                "--trials",
                "-t"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "timeout",
              "type": "int",
              "default": 30,
              "help": "Timeout in minutes",
              "option_names": [
                "--timeout",
                "-T"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "monitor",
              "type": "bool",
              "default": false,
              "help": "Monitor progress",
              "option_names": [
                "--monitor",
                "-m"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        },
        {
          "command": "algorithms",
          "function": "list_algorithms",
          "docstring": "List supported algorithms.",
          "options": []
        },
        {
          "command": "cleanup",
          "function": "cleanup_old_jobs",
          "docstring": "Clean up old training jobs and artifacts.",
          "options": [
            {
              "name": "days",
              "type": "int",
              "default": 30,
              "help": "Age threshold in days",
              "option_names": [
                "--days",
                "-d"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            },
            {
              "name": "confirm",
              "type": "bool",
              "default": false,
              "help": "Skip confirmation",
              "option_names": [
                "--yes",
                "-y"
              ],
              "is_argument": false,
              "is_option": true,
              "required": false
            }
          ]
        }
      ],
      "subapps": {},
      "typer_apps": [
        {
          "name": "app",
          "help": "Training automation and optimization commands",
          "add_completion": false,
          "rich_markup_mode": null,
          "parameters": {
            "name": "training"
          }
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "__future__",
          "name": "annotations",
          "asname": null
        },
        {
          "type": "import",
          "name": "asyncio",
          "asname": null
        },
        {
          "type": "import",
          "name": "json",
          "asname": null
        },
        {
          "type": "import",
          "name": "logging",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "datetime",
          "name": "datetime",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "asname": null
        },
        {
          "type": "import",
          "name": "click",
          "asname": null
        },
        {
          "type": "import",
          "name": "typer",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich",
          "name": "print",
          "asname": "rprint"
        },
        {
          "type": "from_import",
          "module": "rich.console",
          "name": "Console",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.panel",
          "name": "Panel",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "Progress",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "SpinnerColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.progress",
          "name": "TextColumn",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.table",
          "name": "Table",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "rich.tree",
          "name": "Tree",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.training_automation_service",
          "name": "OptimizationStrategy",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.training_automation_service",
          "name": "PruningStrategy",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.training_automation_service",
          "name": "TrainingAutomationService",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.training_automation_service",
          "name": "TrainingConfiguration",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.application.services.training_automation_service",
          "name": "TrainingStatus",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.adapters.model_trainer_adapter",
          "name": "create_model_trainer_adapter",
          "asname": null
        },
        {
          "type": "from_import",
          "module": "pynomaly.infrastructure.persistence.training_job_repository",
          "name": "create_training_job_repository",
          "asname": null
        },
        {
          "type": "import",
          "name": "time",
          "asname": null
        }
      ]
    }
  ],
  "summary": {
    "total_commands": 189,
    "total_subapps": 29,
    "total_options": 750,
    "total_typer_apps": 30,
    "total_imports": 606
  }
}