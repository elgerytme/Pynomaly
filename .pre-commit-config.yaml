# Enhanced Pre-commit configuration for Pynomaly - PyPI Release Ready
# Install: pre-commit install
# Run manually: pre-commit run --all-files

repos:
  # Hatch-based Quality Checks (Primary) - Enhanced for PyPI
  - repo: local
    hooks:
      - id: hatch-version-check
        name: üîç Hatch Version Check
        entry: bash -c 'command -v hatch >/dev/null 2>&1 && hatch version && echo "‚úÖ Hatch version check passed" || (echo "‚ùå Hatch not found. Install with: pip install hatch" && exit 1)'
        language: system
        pass_filenames: false
        stages: [commit]

      - id: hatch-lint-style
        name: üé® Hatch Code Style
        entry: bash -c 'hatch env run lint:style || (echo "‚ùå Style check failed. Run: hatch env run lint:fmt to auto-fix." && exit 1)'
        language: system
        pass_filenames: false
        stages: [commit]
        verbose: true

      - id: hatch-type-check
        name: üîé Hatch Type Checking
        entry: bash -c 'hatch env run lint:typing || (echo "‚ùå Type checking failed. Please fix type issues." && exit 1)'
        language: system
        pass_filenames: false
        stages: [commit]
        verbose: true

      - id: hatch-core-tests
        name: üß™ Hatch Core Tests
        entry: bash -c 'hatch env run test:run tests/domain/ tests/application/ --tb=short -q || (echo "‚ùå Core tests failed. Fix tests before committing." && exit 1)'
        language: system
        pass_filenames: false
        stages: [commit]

      - id: hatch-build-test
        name: üì¶ Hatch Build Test
        entry: bash -c 'hatch build --clean >/dev/null 2>&1 && echo "‚úÖ Package builds successfully" || (echo "‚ùå Package build failed" && exit 1)'
        language: system
        pass_filenames: false
        stages: [push]

      - id: pypi-readiness-check
        name: üöÄ PyPI Readiness Check
        entry: bash -c '
          echo "üîç Checking PyPI readiness..."
          # Check version format
          VERSION=$(hatch version)
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "‚ùå Invalid version format: $VERSION (expected: X.Y.Z)"
            exit 1
          fi
          # Check required files
          for file in README.md LICENSE CHANGELOG.md; do
            if [[ ! -f "$file" ]]; then
              echo "‚ùå Missing required file: $file"
              exit 1
            fi
          done
          # Check package metadata
          if ! hatch project metadata name >/dev/null 2>&1; then
            echo "‚ùå Invalid package metadata"
            exit 1
          fi
          echo "‚úÖ PyPI readiness check passed"
        '
        language: system
        pass_filenames: false
        stages: [push]

  # File Organization and Project Structure
  - repo: local
    hooks:
      - id: root-directory-check
        name: üè† Root Directory Organization
        entry: python3 scripts/validation/validate_root_directory.py
        language: system
        pass_filenames: false
        stages: [commit]

      - id: file-organization-check
        name: üìÅ File Organization Validation
        entry: python scripts/validate_file_organization.py
        language: system
        pass_filenames: false
        stages: [commit]

      - id: stray-files-check
        name: üîç Stray Files Detection
        entry: python scripts/detect_stray_files.py
        language: system
        pass_filenames: false
        stages: [commit]

      - id: core-imports-check
        name: üêç Core Imports Verification
        entry: python -c "import sys; sys.path.insert(0, 'src'); from pynomaly.domain.entities import Dataset, Anomaly; from pynomaly.domain.value_objects import AnomalyScore, ContaminationRate; print('‚úÖ Core imports successful')"
        language: system
        pass_filenames: false
        stages: [commit]

  # Standard Pre-commit Hooks for File Hygiene
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # File formatting and cleanup
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: mixed-line-ending
        args: [--fix=lf]
      
      # File validation
      - id: check-json
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: check-toml
      
      # Security and conflict checks
      - id: check-merge-conflict
      - id: detect-private-key
      - id: check-added-large-files
        args: [--maxkb=5000]  # 5MB limit
      
      # Python specific
      - id: check-ast
      - id: check-builtin-literals
      - id: check-docstring-first
      - id: debug-statements

  # Python modernization
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.15.0
    hooks:
      - id: pyupgrade
        args: [--py311-plus]

  # Security scanning (lightweight for pre-commit)
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, src/, -l, -i]  # Low verbosity, ignore info
        files: ^src/
        stages: [push]  # Only on push to avoid slowing down commits

  # Commit message validation
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # Pre-push hooks (more comprehensive)
  - repo: local
    hooks:
      - id: hatch-integration-tests
        name: üß™ Hatch Integration Tests
        entry: bash -c 'hatch env run test:run tests/infrastructure/ --tb=short -q --ignore=tests/infrastructure/test_*_performance* || (echo "‚ùå Integration tests failed" && exit 1)'
        language: system
        pass_filenames: false
        stages: [push]

      - id: hatch-security-scan
        name: üîí Security Scan
        entry: bash -c 'bandit -r src/ -f txt -l || true && safety check || true'
        language: system
        pass_filenames: false
        stages: [push]

# Configuration
default_install_hook_types: [pre-commit, pre-push, commit-msg]
default_stages: [commit]
fail_fast: false
minimum_pre_commit_version: 3.0.0

# CI configuration
ci:
    autofix_commit_msg: |
        [pre-commit.ci] auto fixes from pre-commit hooks

        for more information, see https://pre-commit.ci
    autofix_prs: true
    autoupdate_branch: ''
    autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
    autoupdate_schedule: weekly
    skip: [hatch-lint-style, hatch-type-check, hatch-core-tests]  # Skip Hatch commands in CI
    submodules: false