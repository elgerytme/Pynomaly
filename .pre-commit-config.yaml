# Pre-commit hooks for package boundary validation and code quality
repos:
  # Package boundary validation
  - repo: local
    hooks:
      - id: validate-package-boundaries
        name: Validate Package Import Boundaries
        entry: python src/packages/tools/import_boundary_validator/boundary_validator.py
        args: [--root, ., --fail-on-violations]
        language: system
        pass_filenames: false
        types: [python]
        stages: [commit]
        
  # Python code formatting and linting
  - repo: https://github.com/psf/black
    rev: 23.7.0
    hooks:
      - id: black
        args: [--line-length=100]
        language_version: python3
        
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile, black, --line-length=100]
        
  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=100, --extend-ignore=E203,W503]
        
  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, src/packages/, -f, json, -o, bandit-report.json]
        pass_filenames: false
        
  # Import boundary specific hooks
  - repo: local
    hooks:
      - id: check-domain-imports
        name: Check Domain Package Imports
        entry: python -c "
import sys
import re
from pathlib import Path

def check_file(file_path):
    # Only check domain packages
    if not any(domain in str(file_path) for domain in ['/ai/', '/data/']):
        return True
        
    with open(file_path, 'r') as f:
        content = f.read()
    
    # Check for forbidden patterns
    forbidden_patterns = [
        r'from (enterprise|integrations)\.',
        r'from ai\.[^.]+\.' if '/data/' in str(file_path) else r'from data\.[^.]+\.',
        r'import (enterprise|integrations)\.',
    ]
    
    violations = []
    for i, line in enumerate(content.split('\n'), 1):
        for pattern in forbidden_patterns:
            if re.search(pattern, line):
                violations.append(f'{file_path}:{i}: {line.strip()}')
    
    if violations:
        print('Domain package import violations:')
        for v in violations:
            print(f'  {v}')
        return False
    return True

files = sys.argv[1:]
all_good = True
for file_path in files:
    if not check_file(file_path):
        all_good = False

sys.exit(0 if all_good else 1)
"
        language: system
        types: [python]
        files: "src/packages/(ai|data)/.*\\.py$"
        
  - repo: local
    hooks:
      - id: check-interfaces-stability
        name: Check Interfaces Package Stability
        entry: python -c "
import sys
import re
from pathlib import Path

def check_file(file_path):
    # Only check interfaces package
    if '/interfaces/' not in str(file_path):
        return True
        
    with open(file_path, 'r') as f:
        content = f.read()
    
    # Check for forbidden imports in interfaces package
    forbidden_patterns = [
        r'from (ai|data|enterprise|integrations|configurations)\.',
        r'import (ai|data|enterprise|integrations|configurations)\.',
    ]
    
    violations = []
    for i, line in enumerate(content.split('\n'), 1):
        for pattern in forbidden_patterns:
            if re.search(pattern, line):
                violations.append(f'{file_path}:{i}: {line.strip()}')
    
    if violations:
        print('Interfaces package should not import from other monorepo packages:')
        for v in violations:
            print(f'  {v}')
        return False
    return True

files = sys.argv[1:]
all_good = True
for file_path in files:
    if not check_file(file_path):
        all_good = False

sys.exit(0 if all_good else 1)
"
        language: system
        types: [python]
        files: "src/packages/interfaces/.*\\.py$"