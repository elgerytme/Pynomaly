# Pre-commit configuration for domain boundary validation
repos:
  - repo: local
    hooks:
      - id: validate-report-locations
        name: Validate Report Locations
        entry: python tools/scripts/validate_report_locations.py
        language: python
        args: [--scan-all]
        pass_filenames: false
        always_run: true
        stages: [commit]
        description: "Ensures reports are placed in correct locations (docs/reports/ or package/docs/reports/)"
        
      - id: prevent-root-documentation
        name: Prevent Root Documentation Files
        entry: python tools/scripts/validate_root_documentation.py
        language: python
        args: [--suggest-moves]
        pass_filenames: false
        always_run: true
        stages: [commit]
        description: "Prevents creation of new documentation files in repository root"
        
      - id: single-package-development
        name: Single Package Development Rule
        entry: python3 tools/validate_single_package_development.py
        language: system
        always_run: true
        pass_filenames: false
        stages: [commit]
        description: Ensures only one package is modified at a time
        
      - id: package-isolation
        name: Package Isolation Rule
        entry: python3 tools/scan_domain_violations_with_exceptions.py
        language: system
        always_run: true
        pass_filenames: false
        stages: [commit]
        description: Validates package isolation boundaries
        
      - id: domain-boundary-validator
        name: Domain Boundary Validator
        entry: python scripts/domain_boundary_validator.py
        language: python
        pass_filenames: false
        always_run: true
        args: [--fail-on-error]
        
  - repo: local
    hooks:
      - id: domain-import-validator
        name: Domain Import Validator
        entry: python scripts/domain_import_validator.py
        language: python
        files: \.py$
        args: [--fail-on-violation]
        
  - repo: local
    hooks:
      - id: domain-architecture-validator
        name: Domain Architecture Validator
        entry: python scripts/domain_architecture_validator.py
        language: python
        pass_filenames: false
        always_run: true
        args: [--check-cycles, --check-dependencies]
        
  - repo: local
    hooks:
      - id: validate-repository-structure
        name: Validate Repository Structure
        entry: python scripts/validate_repository_structure.py
        language: python
        always_run: true
        pass_filenames: false
        description: "Prevent creation of prohibited folders and files"
        
      - id: check-prohibited-folders
        name: Check for Prohibited Folders
        entry: bash
        language: system
        always_run: true
        pass_filenames: false
        args:
          - -c
          - |
            # Check for prohibited folder patterns
            prohibited_found=false
            
            # Check for core folders (excluding node_modules)
            if find . -type d -name "core" -not -path "*/node_modules/*" -not -path "*/.venv/*" -not -path "*/venv/*" | grep -q .; then
              echo "ERROR: 'core' folders found. These are prohibited."
              find . -type d -name "core" -not -path "*/node_modules/*" -not -path "*/.venv/*" -not -path "*/venv/*"
              prohibited_found=true
            fi
            
            # Check for other prohibited folders
            for folder in common shared utils helpers lib misc; do
              if find . -type d -name "$folder" -not -path "*/node_modules/*" -not -path "*/.venv/*" -not -path "*/venv/*" | grep -q .; then
                echo "ERROR: '$folder' folders found. These are prohibited."
                find . -type d -name "$folder" -not -path "*/node_modules/*" -not -path "*/.venv/*" -not -path "*/venv/*"
                prohibited_found=true
              fi
            done
            
            if [ "$prohibited_found" = true ]; then
              echo ""
              echo "See REPOSITORY_RULES.md for naming conventions."
              echo "See docs/REPLACEMENT_FOLDERS_ISSUE.md for background."
              echo "GitHub Issue: https://github.com/elgerytme/anomaly_detection/issues/830"
              exit 1
            fi
            
            echo "âœ… No prohibited folders found."