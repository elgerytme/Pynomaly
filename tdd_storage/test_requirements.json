{
  "8cc4af6f-53dd-429c-9e60-37c88ca7d7bc": {
    "id": "8cc4af6f-53dd-429c-9e60-37c88ca7d7bc",
    "module_path": "src/pynomaly/domain/entities/anomaly.py",
    "function_name": "detect_anomaly",
    "description": "Test anomaly detection functionality",
    "test_specification": "Should detect anomalies in dataset and return AnomalyScore",
    "created_at": "2025-06-25T13:19:16.866852",
    "status": "pending",
    "implementation_path": null,
    "test_file_path": null,
    "coverage_target": 0.9,
    "tags": [
      "domain",
      "core"
    ]
  },
  "5a874672-2a75-4abc-9273-76820bed0702": {
    "id": "5a874672-2a75-4abc-9273-76820bed0702",
    "module_path": "src/pynomaly/application/services/deep_learning_integration_service.py",
    "function_name": "get_available_frameworks",
    "description": "Test framework detection and availability",
    "test_specification": "Should detect available deep learning frameworks (PyTorch, TensorFlow, JAX) and return their versions and capabilities",
    "created_at": "2025-06-25T13:29:41.152802",
    "status": "pending",
    "implementation_path": null,
    "test_file_path": null,
    "coverage_target": 0.9,
    "tags": [
      "deep-learning",
      "integration"
    ]
  },
  "39c71a81-8130-4cfc-8539-8a8ff8b90174": {
    "id": "39c71a81-8130-4cfc-8539-8a8ff8b90174",
    "module_path": "src/pynomaly/application/services/deep_learning_integration_service.py",
    "function_name": "get_framework_capabilities",
    "description": "Test framework capability detection",
    "test_specification": "Should return detailed capabilities for each framework including GPU support, model types, and performance characteristics",
    "created_at": "2025-06-25T13:29:55.032695",
    "status": "pending",
    "implementation_path": null,
    "test_file_path": null,
    "coverage_target": 0.9,
    "tags": [
      "deep-learning",
      "integration"
    ]
  },
  "36d34d43-6181-41a0-9a08-c3647f5d54a4": {
    "id": "36d34d43-6181-41a0-9a08-c3647f5d54a4",
    "module_path": "src/pynomaly/application/services/deep_learning_integration_service.py",
    "function_name": "recommend_framework",
    "description": "Test framework recommendation logic",
    "test_specification": "Should recommend the best framework based on dataset characteristics, hardware capabilities, and performance requirements",
    "created_at": "2025-06-25T13:30:06.842449",
    "status": "pending",
    "implementation_path": null,
    "test_file_path": null,
    "coverage_target": 0.9,
    "tags": [
      "deep-learning",
      "integration"
    ]
  },
  "f6ddce62-5d86-42cf-9a32-f52997d5bde0": {
    "id": "f6ddce62-5d86-42cf-9a32-f52997d5bde0",
    "module_path": "src/pynomaly/domain/entities/detector.py",
    "function_name": "train",
    "description": "Train detector with dataset",
    "test_specification": "Should train the detector with provided dataset, validate training data, update model state, and return comprehensive training metrics including accuracy, training time, and model parameters",
    "created_at": "2025-06-25T13:31:07.490631",
    "status": "pending",
    "implementation_path": null,
    "test_file_path": null,
    "coverage_target": 0.95,
    "tags": [
      "core",
      "training",
      "domain"
    ]
  },
  "774cc5e6-4631-4c02-bd5c-ac827cb886f7": {
    "id": "774cc5e6-4631-4c02-bd5c-ac827cb886f7",
    "module_path": "src/pynomaly/domain/entities/detector.py",
    "function_name": "detect",
    "description": "Detect anomalies in dataset",
    "test_specification": "Should detect anomalies in provided dataset, return anomaly scores and binary predictions, handle edge cases like empty datasets, and provide confidence intervals",
    "created_at": "2025-06-25T13:31:23.406173",
    "status": "pending",
    "implementation_path": null,
    "test_file_path": null,
    "coverage_target": 0.95,
    "tags": [
      "detection",
      "core",
      "domain"
    ]
  },
  "b10bafd4-7df2-45f3-a361-f6fea773507a": {
    "id": "b10bafd4-7df2-45f3-a361-f6fea773507a",
    "module_path": "src/pynomaly/application/use_cases/detect_anomalies.py",
    "function_name": "execute",
    "description": "Execute anomaly detection use case",
    "test_specification": "Should orchestrate the complete anomaly detection workflow: validate inputs, load detector, process dataset, detect anomalies, calculate metrics, and return structured results with comprehensive metadata",
    "created_at": "2025-06-25T13:31:40.400616",
    "status": "pending",
    "implementation_path": null,
    "test_file_path": null,
    "coverage_target": 0.95,
    "tags": [
      "core",
      "use-case",
      "application"
    ]
  },
  "14373270-9e19-454e-82a0-babbc20744be": {
    "id": "14373270-9e19-454e-82a0-babbc20744be",
    "module_path": "src/pynomaly/application/use_cases/train_detector.py",
    "function_name": "execute",
    "description": "Execute detector training use case",
    "test_specification": "Should orchestrate the complete training workflow: validate detector and dataset, prepare training data, execute training, validate model performance, persist trained model, and return comprehensive training results",
    "created_at": "2025-06-25T13:31:57.441601",
    "status": "pending",
    "implementation_path": null,
    "test_file_path": null,
    "coverage_target": 0.95,
    "tags": [
      "application",
      "core",
      "training"
    ]
  }
}