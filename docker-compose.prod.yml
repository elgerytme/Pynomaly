# Production Docker Compose Configuration
# Complete production-ready stack for anomaly_detection Anomaly Detection Platform

version: '3.8'

services:
  # Main Application Service
  anomaly_detection-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE}
        VERSION: ${VERSION:-latest}
        GIT_COMMIT: ${GIT_COMMIT}
    image: anomaly_detection/anomaly-detection:${VERSION:-latest}
    container_name: anomaly_detection-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - API_KEY=${API_KEY}
      - WORKERS=4
      - LOG_LEVEL=info
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
      - ./cache:/app/cache
    depends_on:
      - postgres
      - redis
      - prometheus
    networks:
      - anomaly_detection-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.anomaly_detection-api.rule=Host(`api.anomaly_detection.com`)"
      - "traefik.http.routers.anomaly_detection-api.tls=true"
      - "traefik.http.routers.anomaly_detection-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.anomaly_detection-api.loadbalancer.server.port=8000"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: anomaly_detection-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-anomaly_detection}
      POSTGRES_USER: ${POSTGRES_USER:-anomaly_detection}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - anomaly_detection-network
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: anomaly_detection-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - anomaly_detection-network
    ports:
      - "6379:6379"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Nginx Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: anomaly_detection-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - anomaly_detection-api
    networks:
      - anomaly_detection-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: anomaly_detection-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - anomaly_detection-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # Grafana Dashboards  
  grafana:
    image: grafana/grafana:latest
    container_name: anomaly_detection-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://monitoring.anomaly_detection.com
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - anomaly_detection-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: anomaly_detection-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - anomaly_detection-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Logstash for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: anomaly_detection-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/config:/usr/share/logstash/config:ro
      - ./logs:/app/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - anomaly_detection-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: anomaly_detection-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_PUBLICBASEURL=https://logs.anomaly_detection.com
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - anomaly_detection-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: anomaly_detection-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - anomaly_detection-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # Background Task Worker
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: anomaly_detection/anomaly-detection:${VERSION:-latest}
    container_name: anomaly_detection-celery-worker
    restart: unless-stopped
    command: celery -A src.packages.data.anomaly_detection.tasks worker --loglevel=info --concurrency=4
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${REDIS_URL}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
    depends_on:
      - postgres
      - redis
    networks:
      - anomaly_detection-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: anomaly_detection/anomaly-detection:${VERSION:-latest}
    container_name: anomaly_detection-celery-beat
    restart: unless-stopped
    command: celery -A src.packages.data.anomaly_detection.tasks beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${REDIS_URL}
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - anomaly_detection-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  anomaly_detection-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16