name: Mutation Testing

on:
  schedule:
    # Run mutation tests weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      target_component:
        description: 'Component to test (domain, ml-adapters, security, all)'
        required: false
        default: 'domain'
        type: choice
        options:
        - domain
        - ml-adapters
        - security
        - all

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.6.1'

jobs:
  mutation-testing:
    name: Mutation Testing
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    strategy:
      matrix:
        component: 
          - ${{ github.event.inputs.target_component == 'all' && 'domain' || github.event.inputs.target_component }}
          - ${{ github.event.inputs.target_component == 'all' && 'ml-adapters' || '' }}
          - ${{ github.event.inputs.target_component == 'all' && 'security' || '' }}
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Install dependencies
      run: |
        poetry install --with dev,test
        poetry run pip install mutmut
    
    - name: Run mutation testing
      run: |
        case "${{ matrix.component }}" in
          "domain")
            echo "üß¨ Running domain mutation testing..."
            poetry run python scripts/mutation/test_domain_mutations.py
            ;;
          "ml-adapters")
            echo "üß¨ Running ML adapter mutation testing..."
            poetry run python scripts/mutation/test_ml_adapter_mutations.py
            ;;
          "security")
            echo "üß¨ Running security mutation testing..."
            poetry run mutmut run \
              --paths-to-mutate src/pynomaly/infrastructure/auth/ \
              --paths-to-mutate src/pynomaly/infrastructure/security/ \
              --runner "python -m pytest tests/security/ -x --tb=no -q" \
              --timeout 150
            ;;
        esac
    
    - name: Generate mutation report
      if: always()
      run: |
        echo "üìä Generating mutation testing report..."
        poetry run mutmut junitxml > mutation-results-${{ matrix.component }}.xml
        poetry run mutmut html
    
    - name: Upload mutation results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: mutation-results-${{ matrix.component }}
        path: |
          mutation-results-${{ matrix.component }}.xml
          html/

  mutation-analysis:
    name: Analyze Mutation Results
    needs: mutation-testing
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download mutation results
      uses: actions/download-artifact@v3
      with:
        path: mutation-results/
    
    - name: Analyze mutation testing effectiveness
      run: |
        echo "üî¨ Mutation Testing Analysis"
        echo "=========================="
        
        # In a real implementation, this would parse the mutation results
        # and provide detailed analysis of test quality
        
        echo "üìä Mutation testing provides insights into test quality by:"
        echo "   - Creating small code changes (mutations)"
        echo "   - Running tests to see if they catch the changes"
        echo "   - Identifying weak spots in test coverage"
        echo ""
        echo "üéØ High-quality tests should kill most mutations"
        echo "‚ö†Ô∏è  Surviving mutations indicate potential test gaps"
        echo ""
        echo "‚úÖ Mutation testing analysis completed"
