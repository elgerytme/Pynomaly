name: Repository Organization Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  organization-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Make scripts executable
      run: |
        chmod +x scripts/validation/validate_organization.py
        chmod +x scripts/cleanup/auto_organize.py
        chmod +x scripts/monitoring/organization_monitor.py
        
    - name: Run organization validation
      id: validation
      run: |
        python3 scripts/validation/validate_organization.py || echo "validation_failed=true" >> $GITHUB_OUTPUT
        
    - name: Generate organization report
      if: always()
      run: |
        python3 scripts/monitoring/organization_monitor.py --report
        
    - name: Check for organization issues
      if: steps.validation.outputs.validation_failed == 'true'
      run: |
        echo "‚ùå Repository organization validation failed"
        echo "::warning::Repository organization needs attention"
        
        # Generate auto-organization suggestions
        python3 scripts/cleanup/auto_organize.py --report auto_organize_suggestions.md
        
        if [ -f auto_organize_suggestions.md ]; then
          echo "## Auto-organization suggestions:" >> $GITHUB_STEP_SUMMARY
          cat auto_organize_suggestions.md >> $GITHUB_STEP_SUMMARY
        fi
        
        exit 1
        
    - name: Upload organization reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: organization-reports
        path: |
          scripts/validation/organization_report.md
          scripts/monitoring/reports/latest_health_report.md
          auto_organize_suggestions.md
        retention-days: 30
        
    - name: Comment on PR with organization status
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## üìä Repository Organization Status\n\n';
          
          try {
            if (fs.existsSync('scripts/monitoring/reports/latest_health_report.md')) {
              const healthReport = fs.readFileSync('scripts/monitoring/reports/latest_health_report.md', 'utf8');
              
              // Extract health score from report
              const healthMatch = healthReport.match(/Overall Health: ([\d.]+)\/100/);
              if (healthMatch) {
                const score = parseFloat(healthMatch[1]);
                const emoji = score >= 90 ? 'üü¢' : score >= 75 ? 'üü°' : score >= 60 ? 'üü†' : 'üî¥';
                comment += `${emoji} **Health Score: ${score}/100**\n\n`;
              }
              
              // Add summary section
              const summaryMatch = healthReport.match(/## Health Metrics([\s\S]*?)##/);
              if (summaryMatch) {
                comment += '### Health Metrics\n' + summaryMatch[1].trim() + '\n\n';
              }
            }
            
            if (fs.existsSync('scripts/validation/organization_report.md')) {
              const validationReport = fs.readFileSync('scripts/validation/organization_report.md', 'utf8');
              
              // Check for errors
              const errorMatch = validationReport.match(/\*\*Errors\*\*: (\d+)/);
              const warningMatch = validationReport.match(/\*\*Warnings\*\*: (\d+)/);
              
              if (errorMatch || warningMatch) {
                const errors = errorMatch ? parseInt(errorMatch[1]) : 0;
                const warnings = warningMatch ? parseInt(warningMatch[1]) : 0;
                
                if (errors > 0) {
                  comment += `‚ùå **${errors} critical errors** found\n`;
                }
                if (warnings > 0) {
                  comment += `‚ö†Ô∏è **${warnings} warnings** found\n`;
                }
                
                if (errors === 0 && warnings === 0) {
                  comment += '‚úÖ **No organization issues found**\n';
                }
                
                comment += '\n';
              }
            }
            
            comment += '### Quick Actions\n';
            comment += '```bash\n';
            comment += '# Check organization\n';
            comment += 'python3 scripts/validation/validate_organization.py\n\n';
            comment += '# Auto-organize repository\n';
            comment += 'python3 scripts/cleanup/auto_organize.py --execute\n';
            comment += '```\n\n';
            comment += '<details>\n<summary>üìÑ View detailed reports</summary>\n\n';
            comment += '- Download the `organization-reports` artifact from this workflow run\n';
            comment += '- Reports include validation results and health metrics\n';
            comment += '</details>';
            
            // Post comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
          } catch (error) {
            console.log('Failed to post organization status comment:', error);
          }
          
    - name: Set workflow status
      if: always()
      run: |
        if [ -f scripts/validation/organization_report.md ]; then
          if grep -q "Validation FAILED" scripts/validation/organization_report.md; then
            echo "‚ùå Repository organization validation failed"
            exit 1
          else
            echo "‚úÖ Repository organization validation passed"
          fi
        fi

  auto-organize-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Make scripts executable
      run: |
        chmod +x scripts/cleanup/auto_organize.py
        chmod +x scripts/validation/validate_organization.py
        
    - name: Check if auto-organization is needed
      id: check
      run: |
        python3 scripts/cleanup/auto_organize.py > auto_organize_output.txt 2>&1
        
        if grep -q "No organization actions needed" auto_organize_output.txt; then
          echo "needs_organization=false" >> $GITHUB_OUTPUT
          echo "‚úÖ Repository is well organized"
        else
          echo "needs_organization=true" >> $GITHUB_OUTPUT
          echo "üîß Repository needs organization"
        fi
        
    - name: Create auto-organization branch
      if: steps.check.outputs.needs_organization == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        branch_name="auto-organize-$(date +%Y%m%d-%H%M%S)"
        git checkout -b "$branch_name"
        echo "branch_name=$branch_name" >> $GITHUB_ENV
        
    - name: Run auto-organization
      if: steps.check.outputs.needs_organization == 'true'
      run: |
        python3 scripts/cleanup/auto_organize.py --execute --report auto_organize_report.md
        
    - name: Commit changes
      if: steps.check.outputs.needs_organization == 'true'
      run: |
        git add -A
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
          echo "has_changes=false" >> $GITHUB_ENV
        else
          git commit -m "chore: Auto-organize repository structure

This commit was automatically generated by the repository organization system.

Changes made:
- Moved misplaced files to correct directories
- Cleaned up temporary files
- Ensured compliance with organization rules

See auto_organize_report.md for detailed changes.

ü§ñ Generated with Repository Organization Automation"
          echo "has_changes=true" >> $GITHUB_ENV
        fi
        
    - name: Push changes and create PR
      if: steps.check.outputs.needs_organization == 'true' && env.has_changes == 'true'
      run: |
        git push origin "$branch_name"
        
        # Create PR body
        cat > pr_body.md << 'EOF'
        ## üîß Automated Repository Organization
        
        This PR was automatically generated to improve repository organization.
        
        ### Changes Made
        - ‚úÖ Moved misplaced files to correct directories
        - üóëÔ∏è Cleaned up temporary files  
        - üìÅ Ensured compliance with organization rules
        
        ### Review Guidelines
        - Check that moved files are in logical locations
        - Verify no important files were accidentally removed
        - Ensure build system still works correctly
        
        ### Auto-merge Criteria
        - All CI checks pass
        - No breaking changes detected
        - Organization rules compliance achieved
        
        üìÑ See the attached auto_organize_report.md for detailed changes.
        
        ü§ñ This PR was generated by the repository organization automation system.
        EOF
        
        gh pr create \
          --title "üîß Auto-organize repository structure" \
          --body-file pr_body.md \
          --label "automated" \
          --label "organization" \
          --label "maintenance"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}