name: Test Environments

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Run daily at 2 AM UTC

env:
  PYTHON_SEED: 42
  PYTHONHASHSEED: 42
  PYNOMALY_DETERMINISTIC: true
  PYNOMALY_DEBUG: false
  PYNOMALY_LOG_LEVEL: WARNING

jobs:
  # Test minimal core environment
  test-minimal:
    name: Test Minimal Core
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-minimal-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-minimal-${{ matrix.python-version }}-
    
    - name: Install Hatch
      run: pip install hatch>=1.12.0
    
    - name: Create test environment directories
      run: mkdir -p test_env/minimal test-results coverage-reports
    
    - name: Run minimal core tests
      run: |
        hatch run test-minimal:test
        hatch run test-minimal:lockfile
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-minimal-${{ matrix.python-version }}
        path: |
          test_env/minimal/
          test-results/
        retention-days: 7
    
    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: coverage-minimal-${{ matrix.python-version }}
        path: test_env/minimal/coverage/
        retention-days: 7

  # Test server+API environment
  test-server:
    name: Test Server+API
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: pynomaly_test_server
          POSTGRES_USER: pynomaly_test
          POSTGRES_PASSWORD: pynomaly_test_password
          POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-server-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-server-${{ matrix.python-version }}-
    
    - name: Install Hatch
      run: pip install hatch>=1.12.0
    
    - name: Create test environment directories
      run: mkdir -p test_env/server test-results coverage-reports
    
    - name: Wait for services
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U pynomaly_test; do sleep 1; done'
        timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
    
    - name: Run server+API tests
      env:
        PYNOMALY_DB_HOST: localhost
        PYNOMALY_DB_PORT: 5432
        PYNOMALY_DB_NAME: pynomaly_test_server
        PYNOMALY_DB_USER: pynomaly_test
        PYNOMALY_DB_PASSWORD: pynomaly_test_password
        PYNOMALY_REDIS_HOST: localhost
        PYNOMALY_REDIS_PORT: 6379
        PYNOMALY_REDIS_DB: 1
      run: |
        hatch run test-server:test
        hatch run test-server:lockfile
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-server-${{ matrix.python-version }}
        path: |
          test_env/server/
          test-results/
        retention-days: 7
    
    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: coverage-server-${{ matrix.python-version }}
        path: test_env/server/coverage/
        retention-days: 7

  # Test deep learning environment
  test-deep:
    name: Test Deep Learning
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-deep-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-deep-${{ matrix.python-version }}-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libblas3 liblapack3 libopenblas-dev
    
    - name: Install Hatch
      run: pip install hatch>=1.12.0
    
    - name: Create test environment directories
      run: mkdir -p test_env/deep test-results coverage-reports
    
    - name: Run deep learning tests
      env:
        TF_DETERMINISTIC_OPS: 1
        TF_CUDNN_DETERMINISTIC: 1
        CUDA_LAUNCH_BLOCKING: 1
        CUDA_VISIBLE_DEVICES: ""
        OMP_NUM_THREADS: 1
        MKL_NUM_THREADS: 1
        NUMEXPR_NUM_THREADS: 1
      run: |
        hatch run test-deep:test
        hatch run test-deep:lockfile
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-deep-${{ matrix.python-version }}
        path: |
          test_env/deep/
          test-results/
        retention-days: 7
    
    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: coverage-deep-${{ matrix.python-version }}
        path: test_env/deep/coverage/
        retention-days: 7

  # Docker-based test environments
  test-docker:
    name: Test Docker Environments
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ['minimal', 'server', 'deep']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ matrix.environment }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ matrix.environment }}-
    
    - name: Build test image
      run: |
        docker build -f Dockerfile.test --target test-${{ matrix.environment }} -t pynomaly-test-${{ matrix.environment }} .
    
    - name: Run tests in Docker
      run: |
        if [ "${{ matrix.environment }}" = "server" ]; then
          docker compose -f docker-compose.test.yml up -d postgres redis
          docker compose -f docker-compose.test.yml run --rm test-${{ matrix.environment }}
          docker compose -f docker-compose.test.yml down
        else
          docker run --rm pynomaly-test-${{ matrix.environment }}
        fi
    
    - name: Extract test results
      if: always()
      run: |
        docker create --name temp-container pynomaly-test-${{ matrix.environment }}
        docker cp temp-container:/app/test_env/${{ matrix.environment }}/ ./test_env/
        docker rm temp-container
    
    - name: Upload Docker test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: docker-test-results-${{ matrix.environment }}
        path: test_env/${{ matrix.environment }}/
        retention-days: 7

  # Comprehensive test summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-minimal, test-server, test-deep, test-docker]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
    
    - name: Generate test summary
      run: |
        echo "# Test Environment Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Results" >> test-summary.md
        echo "" >> test-summary.md
        
        for artifact in artifacts/*/; do
          echo "- $(basename "$artifact")" >> test-summary.md
        done
        
        echo "" >> test-summary.md
        echo "## Coverage Reports Available" >> test-summary.md
        echo "" >> test-summary.md
        
        find artifacts/ -name "*.xml" -o -name "*.html" | while read file; do
          echo "- $file" >> test-summary.md
        done
        
        cat test-summary.md
    
    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md
        retention-days: 30
