name: Documentation Date Validation

on:
  push:
    paths:
      - '**.md'
      - 'docs/**'
      - 'scripts/automation/**'
      - '.github/workflows/**'
  pull_request:
    paths:
      - '**.md'
      - 'docs/**'
      - 'scripts/automation/**'
      - '.github/workflows/**'
  schedule:
    # Run daily at 9:00 AM UTC to catch date drift
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      fix_dates:
        description: 'Automatically fix incorrect dates'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: write
  pull-requests: write

jobs:
  validate-dates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install python-dateutil

      - name: Make validation script executable
        run: |
          chmod +x scripts/automation/validate_dates.py

      - name: Validate dates (check only)
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.fix_dates != 'true'
        run: |
          python scripts/automation/validate_dates.py
        continue-on-error: true
        id: validate-only

      - name: Validate and fix dates
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.fix_dates == 'true'
        run: |
          python scripts/automation/validate_dates.py --fix
        id: validate-fix

      - name: Check for changes after fix
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.fix_dates == 'true'
        id: git-check
        run: |
          git diff --exit-code || echo "changed=true" >> $GITHUB_OUTPUT

      - name: Commit fixed dates
        if: steps.git-check.outputs.changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "🤖 Auto-fix documentation dates to current local timezone

          Fixed incorrect dates in documentation files that were off by days,
          months, or years. All dates now reflect the current local timezone.
          
          🤖 Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>"
          git push

      - name: Create issue for date validation failures
        if: failure() && (github.event_name == 'push' || github.event_name == 'schedule')
        uses: actions/github-script@v7
        with:
          script: |
            const title = "📅 Documentation Date Validation Failed";
            const body = `## Date Validation Issues Found

            The automated date validation workflow found incorrect dates in documentation files.

            ### Details
            - **Workflow**: ${context.workflow}
            - **Run ID**: ${context.runId}
            - **Commit**: ${context.sha}
            - **Branch**: ${context.ref}

            ### What happened?
            Documentation files contain dates that are significantly off from the current date (more than 30 days). This could indicate:
            - Outdated documentation
            - Incorrect timezone handling
            - Copy-paste errors from old documents

            ### How to fix
            1. **Automatic fix**: Run the workflow manually with "fix_dates" set to true
            2. **Manual fix**: Run locally: \`python scripts/automation/validate_dates.py --fix\`
            3. **Review**: Check the specific files mentioned in the workflow logs

            ### Prevention
            - Use the pre-commit hook to catch date issues before committing
            - Follow the documentation date standards in our style guide
            - Review dates when updating documentation

            This issue was automatically created by the date validation workflow.
            `;

            // Check if similar issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['automation', 'documentation']
            });

            const existingIssue = existingIssues.data.find(issue => 
              issue.title.includes('Documentation Date Validation Failed')
            );

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['automation', 'documentation', 'P2-Medium']
              });
            }

      - name: Comment on PR with validation results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Get validation results
            let comment = "## 📅 Documentation Date Validation\n\n";
            
            if (process.env.GITHUB_JOB_STATUS === 'success') {
              comment += "✅ **All documentation dates are correct!**\n\n";
              comment += "All dates in documentation files are within reasonable range of the current date.";
            } else {
              comment += "❌ **Date validation issues found**\n\n";
              comment += "Some documentation files contain dates that are significantly off from the current date.\n\n";
              comment += "### How to fix:\n";
              comment += "1. Run locally: `python scripts/automation/validate_dates.py --fix`\n";
              comment += "2. Or trigger the workflow manually with auto-fix enabled\n\n";
              comment += "### Guidelines:\n";
              comment += "- Use current dates when updating documentation\n";
              comment += "- Check timezone settings if dates appear incorrect\n";
              comment += "- Review the workflow logs for specific files and issues";
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Set job summary
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Documentation date validation passed" >> $GITHUB_STEP_SUMMARY
            echo "All dates in documentation files are correct and up-to-date." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Documentation date validation failed" >> $GITHUB_STEP_SUMMARY
            echo "Found incorrect dates in documentation files." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Fix options:**" >> $GITHUB_STEP_SUMMARY
            echo "- Run workflow manually with auto-fix enabled" >> $GITHUB_STEP_SUMMARY
            echo "- Run locally: \`python scripts/automation/validate_dates.py --fix\`" >> $GITHUB_STEP_SUMMARY
          fi