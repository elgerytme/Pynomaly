name: Branch & Stash Cleanup

on:
  schedule:
    # Run every Monday at 2:00 AM UTC (weekly)
    - cron: "0 2 * * MON"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: read
  issues: write

env:
  STALE_DAYS: 30
  MAIN_BRANCH: main

jobs:
  stash-check:
    name: Check for Stashes on Main
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.MAIN_BRANCH }}

    - name: Check for stashes on main branch
      run: |
        echo "🔍 Checking for stashes on main branch..."
        
        # Get current branch
        current_branch=$(git branch --show-current)
        echo "Current branch: $current_branch"
        
        # List all stashes
        stash_list=$(git stash list)
        
        if [ -n "$stash_list" ]; then
          echo "❌ Found stashes on main branch:"
          echo "$stash_list"
          echo ""
          echo "::error::New stashes found on main branch. Please clean up stashes before proceeding."
          echo "::error::Run 'git stash list' to see all stashes"
          echo "::error::Use 'git stash drop stash@{N}' to remove specific stashes"
          echo "::error::Use 'git stash clear' to remove all stashes"
          exit 1
        else
          echo "✅ No stashes found on main branch"
        fi

  branch-analysis:
    name: Analyze Branch Staleness
    runs-on: ubuntu-latest
    needs: stash-check
    outputs:
      stale-branches: ${{ steps.find-stale.outputs.stale-branches }}
      stale-count: ${{ steps.find-stale.outputs.stale-count }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install typer rich

    - name: Find stale branches
      id: find-stale
      run: |
        cat > find_stale_branches.py << 'EOF'
        #!/usr/bin/env python3
        import subprocess
        import json
        import sys
        from datetime import datetime, timedelta
        from typing import List, Dict
        import typer
        from rich.console import Console
        from rich.table import Table

        console = Console()

        def get_branch_last_commit_date(branch: str) -> datetime:
            """Get the last commit date for a branch."""
            try:
                result = subprocess.run(
                    ['git', 'log', '-1', '--format=%ct', f'origin/{branch}'],
                    capture_output=True,
                    text=True,
                    check=True
                )
                timestamp = int(result.stdout.strip())
                return datetime.fromtimestamp(timestamp)
            except (subprocess.CalledProcessError, ValueError):
                return datetime.now()

        def get_remote_branches() -> List[str]:
            """Get all remote branches excluding main."""
            try:
                result = subprocess.run(
                    ['git', 'branch', '-r', '--format=%(refname:short)'],
                    capture_output=True,
                    text=True,
                    check=True
                )
                branches = []
                for line in result.stdout.strip().split('\n'):
                    if line and not line.startswith('origin/HEAD') and not line.endswith('/main'):
                        branch = line.replace('origin/', '')
                        branches.append(branch)
                return branches
            except subprocess.CalledProcessError:
                return []

        def find_stale_branches(stale_days: int = 30) -> List[Dict]:
            """Find branches that haven't been updated in the specified number of days."""
            stale_cutoff = datetime.now() - timedelta(days=stale_days)
            stale_branches = []
            
            branches = get_remote_branches()
            console.print(f"🔍 Analyzing {len(branches)} branches for staleness (>{stale_days} days)...")
            
            for branch in branches:
                last_commit = get_branch_last_commit_date(branch)
                days_stale = (datetime.now() - last_commit).days
                
                if last_commit < stale_cutoff:
                    stale_branches.append({
                        'name': branch,
                        'last_commit': last_commit.isoformat(),
                        'days_stale': days_stale
                    })
                    console.print(f"  📅 {branch}: {days_stale} days stale")
            
            return stale_branches

        def main():
            stale_branches = find_stale_branches(int(sys.argv[1]) if len(sys.argv) > 1 else 30)
            
            # Create summary table
            if stale_branches:
                table = Table(title="🍂 Stale Branches Found")
                table.add_column("Branch", style="cyan")
                table.add_column("Days Stale", style="red")
                table.add_column("Last Commit", style="dim")
                
                for branch in stale_branches:
                    table.add_row(
                        branch['name'],
                        str(branch['days_stale']),
                        branch['last_commit'][:10]
                    )
                
                console.print(table)
            else:
                console.print("✅ No stale branches found")
            
            # Output for GitHub Actions
            print(f"::set-output name=stale-branches::{json.dumps(stale_branches)}")
            print(f"::set-output name=stale-count::{len(stale_branches)}")
            
            return 0

        if __name__ == "__main__":
            sys.exit(main())
        EOF

        python find_stale_branches.py ${{ env.STALE_DAYS }}

    - name: Create stale branches report
      if: steps.find-stale.outputs.stale-count != '0'
      run: |
        mkdir -p reports/branch-analysis
        echo '${{ steps.find-stale.outputs.stale-branches }}' > reports/branch-analysis/stale-branches.json
        
        # Create human-readable report
        cat > reports/branch-analysis/stale-branches-report.md << 'EOF'
        # 🍂 Stale Branches Report
        
        **Generated**: $(date)
        **Stale Threshold**: ${{ env.STALE_DAYS }} days
        **Found**: ${{ steps.find-stale.outputs.stale-count }} stale branches
        
        ## Stale Branches
        
        The following branches have not been updated in more than ${{ env.STALE_DAYS }} days:
        
        EOF
        
        # Parse JSON and add to report
        echo '${{ steps.find-stale.outputs.stale-branches }}' | python3 -c "
        import json
        import sys
        data = json.load(sys.stdin)
        for branch in data:
            print(f\"- **{branch['name']}**: {branch['days_stale']} days stale (last commit: {branch['last_commit'][:10]})\")
        " >> reports/branch-analysis/stale-branches-report.md
        
        cat >> reports/branch-analysis/stale-branches-report.md << 'EOF'
        
        ## Recommended Actions
        
        1. **Review each branch** to determine if it's still needed
        2. **Merge or delete** branches that are no longer required
        3. **Rebase and update** branches that are still active
        4. **Contact branch owners** if uncertain about branch status
        
        ## Commands to Clean Up
        
        ```bash
        # To delete a remote branch
        git push origin --delete <branch-name>
        
        # To delete a local branch
        git branch -D <branch-name>
        ```
        
        ---
        *Auto-generated by Branch & Stash Cleanup workflow*
        EOF

    - name: Upload branch analysis report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: branch-analysis-report
        path: reports/branch-analysis/
        retention-days: 90

  create-cleanup-issue:
    name: Create Cleanup Issue
    runs-on: ubuntu-latest
    needs: branch-analysis
    if: needs.branch-analysis.outputs.stale-count != '0'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create GitHub issue for stale branches
      uses: actions/github-script@v7
      with:
        script: |
          const staleBranches = JSON.parse('${{ needs.branch-analysis.outputs.stale-branches }}');
          const staleCount = staleBranches.length;
          
          let issueBody = `## 🍂 Stale Branch Cleanup Required
          
          **Found ${staleCount} stale branches** (inactive for >${{ env.STALE_DAYS }} days)
          
          ### Stale Branches
          
          | Branch | Days Stale | Last Commit |
          |--------|------------|-------------|
          `;
          
          for (const branch of staleBranches) {
            issueBody += `| \`${branch.name}\` | ${branch.days_stale} | ${branch.last_commit.substring(0, 10)} |\n`;
          }
          
          issueBody += `
          
          ### Recommended Actions
          
          1. **Review each branch** to determine if it's still needed
          2. **Merge or delete** branches that are no longer required  
          3. **Rebase and update** branches that are still active
          4. **Contact branch owners** if uncertain about branch status
          
          ### Cleanup Commands
          
          \`\`\`bash
          # To delete a remote branch
          git push origin --delete <branch-name>
          
          # To delete a local branch  
          git branch -D <branch-name>
          \`\`\`
          
          ### Automation Notes
          
          - This issue was automatically created by the Branch & Stash Cleanup workflow
          - The workflow runs weekly on Mondays at 2:00 AM UTC
          - Branches are considered stale after ${{ env.STALE_DAYS }} days of inactivity
          - Close this issue once cleanup is complete
          
          ---
          🤖 *Auto-generated by [Branch & Stash Cleanup workflow](https://github.com/${{ github.repository }}/actions/workflows/branch-stash-cleanup.yml)*
          `;
          
          // Check if similar issue already exists
          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['automated-cleanup', 'stale-branches']
          });
          
          if (existingIssues.data.length > 0) {
            console.log('Existing cleanup issue found, updating it...');
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssues.data[0].number,
              title: `🍂 Stale Branch Cleanup Required (${staleCount} branches)`,
              body: issueBody
            });
          } else {
            console.log('Creating new cleanup issue...');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🍂 Stale Branch Cleanup Required (${staleCount} branches)`,
              body: issueBody,
              labels: ['automated-cleanup', 'stale-branches', 'maintenance']
            });
          }

  enforce-branch-protection:
    name: Enforce Branch Protection
    runs-on: ubuntu-latest
    needs: [stash-check, branch-analysis]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Enforce main branch protection
      uses: actions/github-script@v7
      with:
        script: |
          try {
            console.log('🔒 Enforcing branch protection rules for main branch...');
            
            const protection = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: '${{ env.MAIN_BRANCH }}',
              required_status_checks: {
                strict: true,
                contexts: [
                  'CI / test',
                  'CI / lint', 
                  'CI / security-scan',
                  'Quality Gates / quality-check',
                  'Validation Suite / comprehensive-validation'
                ]
              },
              enforce_admins: true,
              required_pull_request_reviews: {
                required_approving_review_count: 1,
                dismiss_stale_reviews: true,
                require_code_owner_reviews: true,
                require_last_push_approval: false
              },
              restrictions: null,
              allow_force_pushes: false,
              allow_deletions: false,
              block_creations: false,
              required_conversation_resolution: true
            };
            
            await github.rest.repos.updateBranchProtection(protection);
            console.log('✅ Branch protection rules updated successfully');
            
          } catch (error) {
            console.log('⚠️  Error updating branch protection:', error.message);
            // Don't fail the job if branch protection update fails
            // This might happen due to insufficient permissions
          }

  summary:
    name: Cleanup Summary
    runs-on: ubuntu-latest
    needs: [stash-check, branch-analysis, create-cleanup-issue, enforce-branch-protection]
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "# 🧹 Branch & Stash Cleanup Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Date**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow**: Branch & Stash Cleanup" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 📊 Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        
        # Stash check status
        if [ "${{ needs.stash-check.result }}" == "success" ]; then
          echo "| 🗂️  Stash Check | ✅ Passed | No stashes found on main |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🗂️  Stash Check | ❌ Failed | Stashes found on main branch |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Branch analysis status
        stale_count="${{ needs.branch-analysis.outputs.stale-count }}"
        if [ "$stale_count" == "0" ]; then
          echo "| 🍂 Branch Analysis | ✅ Clean | No stale branches found |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🍂 Branch Analysis | ⚠️  Issues | $stale_count stale branches found |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Branch protection status
        if [ "${{ needs.enforce-branch-protection.result }}" == "success" ]; then
          echo "| 🔒 Branch Protection | ✅ Enforced | Main branch protection updated |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🔒 Branch Protection | ⚠️  Warning | Protection update may have failed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        if [ "${{ needs.stash-check.result }}" == "success" ]; then
          echo "## 🎉 Overall Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Repository is clean and compliant!" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Overall Status: FAILED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️  Issues found that require attention:" >> $GITHUB_STEP_SUMMARY
          echo "- Stashes found on main branch (must be cleaned up)" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "$stale_count" != "0" ]; then
          echo "- $stale_count stale branches need review" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔧 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.stash-check.result }}" != "success" ]; then
          echo "1. **Clean up stashes on main branch**" >> $GITHUB_STEP_SUMMARY
          echo "   - Run \`git stash list\` to see all stashes" >> $GITHUB_STEP_SUMMARY
          echo "   - Use \`git stash drop stash@{N}\` to remove specific stashes" >> $GITHUB_STEP_SUMMARY
          echo "   - Use \`git stash clear\` to remove all stashes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "$stale_count" != "0" ]; then
          echo "2. **Review and clean up stale branches**" >> $GITHUB_STEP_SUMMARY
          echo "   - Check the created GitHub issue for details" >> $GITHUB_STEP_SUMMARY
          echo "   - Merge or delete branches that are no longer needed" >> $GITHUB_STEP_SUMMARY
          echo "   - Rebase and update branches that are still active" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "3. **Maintain good Git hygiene**" >> $GITHUB_STEP_SUMMARY
        echo "   - Delete branches after merging" >> $GITHUB_STEP_SUMMARY
        echo "   - Avoid stashing on main branch" >> $GITHUB_STEP_SUMMARY
        echo "   - Use feature branches for development" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*This workflow runs weekly on Mondays at 2:00 AM UTC*" >> $GITHUB_STEP_SUMMARY

    - name: Set final exit code
      run: |
        if [ "${{ needs.stash-check.result }}" == "success" ]; then
          echo "✅ Branch & Stash Cleanup completed successfully"
          exit 0
        else
          echo "❌ Branch & Stash Cleanup failed - stashes found on main branch"
          exit 1
        fi
