name: Unified Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write
  deployments: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.11"

jobs:
  # =============================================================================
  # DETERMINE DEPLOYMENT STRATEGY
  # =============================================================================
  deployment-strategy:
    name: Deployment Strategy
    runs-on: ubuntu-latest
    outputs:
      deploy-staging: ${{ steps.strategy.outputs.deploy-staging }}
      deploy-production: ${{ steps.strategy.outputs.deploy-production }}
      image-tag: ${{ steps.strategy.outputs.image-tag }}
      
    steps:
    - name: Determine deployment strategy
      id: strategy
      run: |
        # Determine deployment targets based on trigger and branch
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          if [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
            echo "deploy-staging=true" >> $GITHUB_OUTPUT
            echo "deploy-production=false" >> $GITHUB_OUTPUT
          else
            echo "deploy-staging=false" >> $GITHUB_OUTPUT
            echo "deploy-production=true" >> $GITHUB_OUTPUT
          fi
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "deploy-staging=true" >> $GITHUB_OUTPUT
          echo "deploy-production=false" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          echo "deploy-staging=false" >> $GITHUB_OUTPUT
          echo "deploy-production=true" >> $GITHUB_OUTPUT
        else
          echo "deploy-staging=false" >> $GITHUB_OUTPUT
          echo "deploy-production=false" >> $GITHUB_OUTPUT
        fi
        
        # Set image tag
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          echo "image-tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "image-tag=${{ github.sha }}" >> $GITHUB_OUTPUT
        fi

  # =============================================================================
  # BUILD AND PUSH DOCKER IMAGES
  # =============================================================================
  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: deployment-strategy
    if: needs.deployment-strategy.outputs.deploy-staging == 'true' || needs.deployment-strategy.outputs.deploy-production == 'true'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deploy/docker/Dockerfile.production
        target: runtime
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # =============================================================================
  # STAGING DEPLOYMENT
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [deployment-strategy, build-and-push]
    if: needs.deployment-strategy.outputs.deploy-staging == 'true'
    environment: 
      name: staging
      url: https://staging.anomaly_detection.io
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl for staging
      run: |
        echo "Configuring kubectl for staging environment..."
        # Configure kubectl with environment-specific credentials
        kubectl config set-cluster staging \
          --server=${{ secrets.STAGING_CLUSTER_URL }} \
          --certificate-authority-data=${{ secrets.STAGING_CA_CERT }}
        kubectl config set-credentials staging-user \
          --token=${{ secrets.STAGING_TOKEN }}
        kubectl config set-context staging \
          --cluster=staging \
          --user=staging-user \
          --namespace=staging
        kubectl config use-context staging
        
        # Verify connection
        kubectl cluster-info --context=staging

    - name: Create deployment backup
      run: |
        echo "Creating staging deployment backup..."
        BACKUP_FILE="staging-backup-$(date +%Y%m%d-%H%M%S).yaml"
        kubectl get deployment detection-platform-staging -o yaml > "$BACKUP_FILE" || echo "No existing deployment found"
        
        # Also backup services and ingress
        kubectl get service detection-platform-staging -o yaml >> "$BACKUP_FILE" 2>/dev/null || echo "No service found"
        kubectl get ingress detection-platform-staging -o yaml >> "$BACKUP_FILE" 2>/dev/null || echo "No ingress found"

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        
        # Apply Kubernetes manifests if they exist
        if [ -f "deploy/k8s/staging/deployment.yaml" ]; then
          kubectl apply -f deploy/k8s/staging/ --context=staging
        fi
        
        # Update deployment with new image
        kubectl set image deployment/detection-platform-staging \
          detection-platform=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.deployment-strategy.outputs.image-tag }} \
          --context=staging
        
        # Wait for rollout to complete
        kubectl rollout status deployment/detection-platform-staging --timeout=600s --context=staging
        
        # Verify pods are running
        kubectl get pods -l app=detection-platform --context=staging
        
        echo "Staging deployment completed successfully"

    - name: Run staging health checks
      run: |
        echo "Running staging health checks..."
        # Wait for deployment stabilization
        sleep 60
        
        # Health check endpoints with retries
        echo "Checking application health..."
        for i in {1..5}; do
          if curl -f -s https://staging.detection-platform.io/api/health/ready; then
            echo "Ready check passed"
            break
          elif [ $i -eq 5 ]; then
            echo "Ready check failed after 5 attempts"
            exit 1
          else
            echo "Ready check attempt $i failed, retrying in 30s..."
            sleep 30
          fi
        done
        
        # Liveness check
        curl -f -s https://staging.detection-platform.io/api/health/live || exit 1
        echo "Liveness check passed"
        
        # Application-specific health checks
        curl -f -s https://staging.detection-platform.io/api/v1/health/ || exit 1
        echo "Application health check passed"
        
        echo "All staging health checks passed"

    - name: Run staging smoke tests
      run: |
        echo "Running staging smoke tests..."
        
        # Install test dependencies
        python -m pip install --upgrade pip
        pip install pytest requests

        # Run smoke tests against staging if they exist
        if [ -d "tests/smoke" ]; then
          pytest tests/smoke/ -v \
            --base-url=https://staging.detection-platform.io \
            --junitxml=staging-smoke-results.xml \
            --tb=short \
            --disable-warnings
        else
          # Basic smoke test if no dedicated tests exist
          python -c "
import requests
import sys
try:
    response = requests.get('https://staging.detection-platform.io/api/v1/health/', timeout=30)
    response.raise_for_status()
    print('✅ Basic smoke test passed')
except Exception as e:
    print(f'❌ Basic smoke test failed: {e}')
    sys.exit(1)
          "
        fi
        
        echo "Staging smoke tests completed successfully"

    - name: Upload staging test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: staging-test-results
        path: |
          staging-smoke-results.xml
          staging-backup-*.yaml
        retention-days: 30

  # =============================================================================
  # PRODUCTION DEPLOYMENT
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deployment-strategy, build-and-push, deploy-staging]
    if: needs.deployment-strategy.outputs.deploy-production == 'true' && (success() || needs.deploy-staging.result == 'skipped')
    environment: 
      name: production
      url: https://anomaly_detection.io
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl for production
      run: |
        echo "Configuring kubectl for production environment..."
        
        # Configure kubectl with production credentials
        kubectl config set-cluster production \
          --server=${{ secrets.PRODUCTION_CLUSTER_URL }} \
          --certificate-authority-data=${{ secrets.PRODUCTION_CA_CERT }}
        kubectl config set-credentials production-user \
          --token=${{ secrets.PRODUCTION_TOKEN }}
        kubectl config set-context production \
          --cluster=production \
          --user=production-user \
          --namespace=production
        kubectl config use-context production
        
        # Verify connection and cluster health
        kubectl cluster-info --context=production
        kubectl get nodes --context=production

    - name: Create production backup
      run: |
        echo "Creating production backup..."
        
        BACKUP_TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        
        # Database backup (if PostgreSQL exists)
        if kubectl get deployment detection-platform-postgres --context=production >/dev/null 2>&1; then
          kubectl exec deployment/detection-platform-postgres --context=production -- \
            pg_dump anomaly_detection > "prod-db-backup-$BACKUP_TIMESTAMP.sql"
          echo "Database backup created"
        fi
        
        # Deployment backup
        kubectl get deployment detection-platform-production -o yaml \
          --context=production > "prod-deployment-backup-$BACKUP_TIMESTAMP.yaml" || \
          echo "No existing production deployment found"
        
        # Service and ingress backup
        kubectl get service detection-platform-production -o yaml \
          --context=production >> "prod-deployment-backup-$BACKUP_TIMESTAMP.yaml" 2>/dev/null || \
          echo "No production service found"
        kubectl get ingress detection-platform-production -o yaml \
          --context=production >> "prod-deployment-backup-$BACKUP_TIMESTAMP.yaml" 2>/dev/null || \
          echo "No production ingress found"
        
        echo "Production backup completed: $BACKUP_TIMESTAMP"

    - name: Production pre-deployment checks
      run: |
        echo "Running production pre-deployment checks..."
        
        # Check cluster resources and health
        echo "Checking cluster resources..."
        kubectl top nodes --context=production || echo "Metrics server not available"
        
        # Check for any non-running pods
        NON_RUNNING_PODS=$(kubectl get pods --all-namespaces --context=production | grep -v Running | grep -v Completed | wc -l)
        if [ $NON_RUNNING_PODS -gt 1 ]; then  # Account for header line
          echo "⚠️  Warning: Found non-running pods in cluster"
          kubectl get pods --all-namespaces --context=production | grep -v Running | grep -v Completed
        fi
        
        # Verify image availability in registry
        echo "Verifying image availability..."
        docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.deployment-strategy.outputs.image-tag }} || {
          echo "❌ Image not found in registry"
          exit 1
        }
        
        # Check production namespace resource quotas
        kubectl describe quota --context=production -n production || echo "No resource quotas configured"
        
        echo "✅ Pre-deployment checks passed"

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        
        # Apply Kubernetes manifests if they exist
        if [ -f "deploy/k8s/production/deployment.yaml" ]; then
          kubectl apply -f deploy/k8s/production/ --context=production
        fi
        
        # Rolling update with zero downtime
        kubectl set image deployment/detection-platform-production \
          detection-platform=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.deployment-strategy.outputs.image-tag }} \
          --context=production
        
        # Wait for rollout with extended timeout for production
        kubectl rollout status deployment/detection-platform-production \
          --timeout=900s --context=production
        
        # Verify deployment health
        kubectl get pods -l app=detection-platform --context=production
        kubectl get deployment detection-platform-production --context=production
        
        # Check resource utilization after deployment
        kubectl top pods -l app=detection-platform --context=production || echo "Metrics not available"
        
        echo "✅ Production deployment completed successfully"

    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Extended wait for production stabilization
        sleep 120
        
        # Comprehensive health checks with retries for production
        echo "Checking production application health..."
        
        # Ready check with retries
        for i in {1..10}; do
          if curl -f -s https://detection-platform.io/api/health/ready; then
            echo "✅ Ready check passed"
            break
          elif [ $i -eq 10 ]; then
            echo "❌ Ready check failed after 10 attempts"
            exit 1
          else
            echo "Ready check attempt $i failed, retrying in 45s..."
            sleep 45
          fi
        done
        
        # Liveness check
        curl -f -s https://detection-platform.io/api/health/live || exit 1
        echo "✅ Liveness check passed"
        
        # Application health check
        curl -f -s https://detection-platform.io/api/v1/health/ || exit 1
        echo "✅ Application health check passed"
        
        # Database connectivity check (if deployment exists)
        if kubectl get deployment detection-platform-production --context=production >/dev/null 2>&1; then
          kubectl exec deployment/detection-platform-production --context=production -- \
            python -c "
try:
    from anomaly_detection.infrastructure.database import get_session
    session = get_session()
    session.execute('SELECT 1')
    print('✅ Database connectivity check passed')
except Exception as e:
    print(f'❌ Database connectivity check failed: {e}')
    exit(1)
            " || exit 1
        fi
        
        echo "✅ All production health checks passed"

    - name: Run production smoke tests
      run: |
        echo "Running production smoke tests..."
        
        # Install test dependencies
        python -m pip install --upgrade pip
        pip install pytest requests

        # Run critical path smoke tests if they exist
        if [ -d "tests/smoke/critical" ] || [ -d "tests/smoke" ]; then
          TEST_DIR="tests/smoke/critical"
          [ ! -d "$TEST_DIR" ] && TEST_DIR="tests/smoke"
          
          pytest "$TEST_DIR" -v \
            --base-url=https://detection-platform.io \
            --junitxml=production-smoke-results.xml \
            --tb=short \
            --disable-warnings \
            --timeout=60
        else
          # Critical smoke test for production
          python -c "
import requests
import sys
import time

def test_critical_endpoints():
    endpoints = [
        '/api/v1/health/',
        '/api/health/ready',
        '/api/health/live'
    ]
    
    base_url = 'https://detection-platform.io'
    
    for endpoint in endpoints:
        try:
            response = requests.get(f'{base_url}{endpoint}', timeout=30)
            response.raise_for_status()
            print(f'✅ {endpoint} - OK')
        except Exception as e:
            print(f'❌ {endpoint} - FAILED: {e}')
            sys.exit(1)
    
    print('✅ All critical endpoints are healthy')

if __name__ == '__main__':
    test_critical_endpoints()
          "
        fi
        
        echo "✅ Production smoke tests completed successfully"

    - name: Upload production artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: production-deployment-artifacts
        path: |
          production-smoke-results.xml
          prod-db-backup-*.sql
          prod-deployment-backup-*.yaml
        retention-days: 90

  # =============================================================================
  # POST-DEPLOYMENT MONITORING AND NOTIFICATIONS
  # =============================================================================
  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deployment-strategy, deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Generate deployment summary
      run: |
        mkdir -p deployment-reports
        
        echo "# 🚀 Unified Deployment Pipeline Summary" > deployment-reports/summary.md
        echo "" >> deployment-reports/summary.md
        echo "**Deployment Date:** $(date)" >> deployment-reports/summary.md
        echo "**Commit:** ${{ github.sha }}" >> deployment-reports/summary.md
        echo "**Image Tag:** ${{ needs.deployment-strategy.outputs.image-tag }}" >> deployment-reports/summary.md
        echo "**Trigger:** ${{ github.event_name }}" >> deployment-reports/summary.md
        echo "" >> deployment-reports/summary.md
        
        echo "## 🎯 Deployment Results" >> deployment-reports/summary.md
        echo "" >> deployment-reports/summary.md
        echo "| Environment | Status | URL |" >> deployment-reports/summary.md
        echo "|-------------|--------|-----|" >> deployment-reports/summary.md
        
        if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
          echo "| Staging | ✅ Deployed | https://staging.anomaly_detection.io |" >> deployment-reports/summary.md
        elif [[ "${{ needs.deployment-strategy.outputs.deploy-staging }}" == "true" ]]; then
          echo "| Staging | ❌ Failed | - |" >> deployment-reports/summary.md
        fi
        
        if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "| Production | ✅ Deployed | https://anomaly_detection.io |" >> deployment-reports/summary.md
        elif [[ "${{ needs.deployment-strategy.outputs.deploy-production }}" == "true" ]]; then
          echo "| Production | ❌ Failed | - |" >> deployment-reports/summary.md
        fi

    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-summary-report
        path: deployment-reports/
        retention-days: 90

    - name: Notify teams
      if: always()
      run: |
        echo "Sending deployment notifications..."
        
        # Determine overall status
        if [[ "${{ needs.deploy-staging.result }}" == "success" ]] || [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          STATUS="✅ SUCCESS"
        else
          STATUS="❌ FAILURE"
        fi
        
        echo "Deployment Status: $STATUS"
        echo "Staging: ${{ needs.deploy-staging.result }}"
        echo "Production: ${{ needs.deploy-production.result }}"
        
        # In a real environment, this would send notifications to:
        # - Slack channels
        # - Email lists
        # - PagerDuty (for failures)
        # - Monitoring systems

    - name: Set deployment status
      run: |
        if [[ "${{ needs.deploy-staging.result }}" == "success" ]] || [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "✅ Unified Deployment Pipeline completed successfully"
          echo "📦 Consolidated deployment workflows: 5 → 1 workflow"
          echo "🎯 Improved deployment reliability and monitoring"
          exit 0
        else
          echo "❌ Unified Deployment Pipeline encountered issues"
          echo "🔍 Check individual deployment job results for details"
          exit 1
        fi
