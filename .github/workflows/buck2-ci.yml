# Buck2-Native CI/CD Pipeline
# Replaces Hatch-based builds with Buck2 monorepo builds
name: Buck2 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write
  security-events: write

env:
  PYTHON_VERSION: "3.11"
  BUCK2_VERSION: "latest"
  CACHE_VERSION: v3

jobs:
  # =============================================================================
  # BUCK2 SETUP AND VALIDATION
  # =============================================================================
  setup-buck2:
    name: Setup Buck2 Build System
    runs-on: ubuntu-latest
    outputs:
      buck2-ready: ${{ steps.buck2-status.outputs.ready }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Buck2 binary
      id: cache-buck2
      uses: actions/cache@v4
      with:
        path: ~/.local/bin/buck2
        key: buck2-${{ runner.os }}-${{ env.BUCK2_VERSION }}

    - name: Install Buck2
      if: steps.cache-buck2.outputs.cache-hit != 'true'
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://get.buck2.build/ | bash
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Verify Buck2 installation
      run: |
        buck2 --version
        buck2 targets //... --config python.toolchain=system

    - name: Validate Buck2 configuration
      id: buck2-status
      run: |
        if buck2 targets //... > /dev/null 2>&1; then
          echo "ready=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Buck2 configuration valid"
        else
          echo "ready=false" >> $GITHUB_OUTPUT
          echo "‚ùå Buck2 configuration invalid"
          exit 1
        fi

  # =============================================================================
  # BUCK2 BUILD AND TEST
  # =============================================================================
  buck2-build-test:
    name: Buck2 Build & Test
    runs-on: ubuntu-latest
    needs: setup-buck2
    if: needs.setup-buck2.outputs.buck2-ready == 'true'
    
    strategy:
      matrix:
        target-group: 
          - ai-all
          - data-all  
          - enterprise-all
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Buck2 binary
      uses: actions/cache@v4
      with:
        path: ~/.local/bin/buck2
        key: buck2-${{ runner.os }}-${{ env.BUCK2_VERSION }}

    - name: Cache Buck2 build outputs
      uses: actions/cache@v4
      with:
        path: |
          .buck-out
          buck-out
        key: buck2-build-${{ runner.os }}-${{ matrix.target-group }}-${{ hashFiles('BUCK', 'third-party/**/*') }}
        restore-keys: |
          buck2-build-${{ runner.os }}-${{ matrix.target-group }}-
          buck2-build-${{ runner.os }}-

    - name: Install Buck2
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://get.buck2.build/ | bash
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Build packages (${{ matrix.target-group }})
      run: |
        echo "üèóÔ∏è Building ${{ matrix.target-group }} packages..."
        buck2 build //:${{ matrix.target-group }} \
          --config python.toolchain=system \
          --config build.execution_platforms=//toolchains:python_platform

    - name: Run tests (${{ matrix.target-group }})
      run: |
        echo "üß™ Running tests for ${{ matrix.target-group }}..."
        # Map domain groups to test targets
        case "${{ matrix.target-group }}" in
          ai-all) TEST_TARGET="ai-tests" ;;
          data-all) TEST_TARGET="data-tests" ;;
          enterprise-all) TEST_TARGET="enterprise-tests" ;;
          *) TEST_TARGET="//..." ;;
        esac
        
        buck2 test //:$TEST_TARGET \
          --config python.toolchain=system \
          --config test.execution_platforms=//toolchains:python_platform

  # =============================================================================
  # BUCK2 CLI APPLICATIONS
  # =============================================================================
  buck2-cli-test:
    name: Buck2 CLI Applications
    runs-on: ubuntu-latest
    needs: setup-buck2
    if: needs.setup-buck2.outputs.buck2-ready == 'true'
    
    strategy:
      matrix:
        cli-target:
          - data-engineering-cli
          - anomaly-detection-cli
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Buck2 binary
      uses: actions/cache@v4
      with:
        path: ~/.local/bin/buck2
        key: buck2-${{ runner.os }}-${{ env.BUCK2_VERSION }}

    - name: Install Buck2
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://get.buck2.build/ | bash
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Build CLI application
      run: |
        echo "üî® Building CLI: ${{ matrix.cli-target }}"
        buck2 build //:${{ matrix.cli-target }} \
          --config python.toolchain=system

    - name: Test CLI execution
      run: |
        echo "üöÄ Testing CLI execution: ${{ matrix.cli-target }}"
        buck2 run //:${{ matrix.cli-target }} -- --help

  # =============================================================================
  # MONOREPO-WIDE VALIDATION
  # =============================================================================
  buck2-monorepo-validation:
    name: Buck2 Monorepo Validation
    runs-on: ubuntu-latest
    needs: [buck2-build-test, buck2-cli-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Buck2 binary
      uses: actions/cache@v4
      with:
        path: ~/.local/bin/buck2
        key: buck2-${{ runner.os }}-${{ env.BUCK2_VERSION }}

    - name: Install Buck2
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://get.buck2.build/ | bash
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Build complete monorepo
      run: |
        echo "üèóÔ∏è Building complete anomaly detection monorepo..."
        buck2 build //:anomaly-detection \
          --config python.toolchain=system

    - name: Run all tests
      run: |
        echo "üß™ Running complete test suite..."
        buck2 test //... \
          --config python.toolchain=system

    - name: Validate dependency graph
      run: |
        echo "üìä Validating dependency relationships..."
        buck2 cquery "deps(//:anomaly-detection)" --output-attribute buck.type

    - name: Generate build report
      run: |
        echo "üìã Generating Buck2 build report..."
        buck2 targets //... --json > buck2-targets.json
        echo "‚úÖ Buck2 monorepo validation complete"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: buck2-build-report
        path: |
          buck2-targets.json
          .buck-out/log/
        retention-days: 7

  # =============================================================================
  # FALLBACK TO HATCH (TRANSITION PERIOD)
  # =============================================================================
  hatch-fallback:
    name: Hatch Fallback (Transition)
    runs-on: ubuntu-latest
    needs: setup-buck2
    if: needs.setup-buck2.outputs.buck2-ready != 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Hatch
      run: |
        python -m pip install --upgrade pip
        pip install hatch

    - name: Run Hatch builds (fallback)
      run: |
        echo "‚ö†Ô∏è Buck2 not ready, falling back to Hatch builds"
        # Add individual package builds here as needed
        echo "‚úÖ Hatch fallback builds complete"