# Todo-GitHub Issues Synchronization Workflow
name: Sync Todos with GitHub Issues

on:
  issues:
    types: [opened, closed, labeled, unlabeled, assigned, unassigned]
  schedule:
    # Daily sync at 9 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force complete resync'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  sync-todos-with-issues:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 1
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Make sync script executable
      run: chmod +x .github/scripts/sync-todos-with-issues.py
    
    - name: Run todo synchronization
      id: sync
      run: |
        python .github/scripts/sync-todos-with-issues.py --verbose > sync_output.json 2> sync_log.txt
        echo "sync_completed=true" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Validate sync output
      run: |
        if [ -f sync_output.json ] && [ -s sync_output.json ]; then
          echo "‚úÖ Sync completed successfully"
          echo "üìä Sync results:"
          head -20 sync_output.json
        else
          echo "‚ö†Ô∏è Sync completed but no output generated"
        fi
        
        if [ -f sync_log.txt ] && [ -s sync_log.txt ]; then
          echo "üìù Sync log:"
          cat sync_log.txt
        fi
    
    - name: Create sync status comment (on manual trigger)
      if: github.event_name == 'workflow_dispatch'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let syncResults = "No sync data available";
          let syncLog = "";
          
          try {
            if (fs.existsSync('sync_output.json')) {
              const syncData = JSON.parse(fs.readFileSync('sync_output.json', 'utf8'));
              syncResults = `üìä Synchronized ${syncData.length} todos with GitHub issues`;
            }
          } catch (error) {
            syncResults = `‚ùå Sync failed: ${error.message}`;
          }
          
          try {
            if (fs.existsSync('sync_log.txt')) {
              syncLog = fs.readFileSync('sync_log.txt', 'utf8');
            }
          } catch (error) {
            syncLog = `Error reading log: ${error.message}`;
          }
          
          const comment = `## üîÑ Todo-GitHub Issues Sync Report
          
          **Status**: ${steps.sync.outputs.sync_completed === 'true' ? '‚úÖ Completed' : '‚ùå Failed'}
          **Timestamp**: ${new Date().toISOString()}
          **Trigger**: Manual (workflow_dispatch)
          
          ### Results
          ${syncResults}
          
          ### Log Details
          \`\`\`
          ${syncLog.slice(0, 2000)}${syncLog.length > 2000 ? '\n... (truncated)' : ''}
          \`\`\`
          
          ---
          *Automated sync via GitHub Actions*`;
          
          // Find an existing sync issue or create a new one
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'automation,sync-report',
            state: 'open'
          });
          
          if (issues.length > 0) {
            // Comment on existing sync issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issues[0].number,
              body: comment
            });
          } else {
            // Create new sync status issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Todo-GitHub Issues Sync Status',
              body: comment,
              labels: ['automation', 'sync-report']
            });
          }
    
    - name: Upload sync artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: sync-results-${{ github.run_id }}
        path: |
          sync_output.json
          sync_log.txt
        retention-days: 30
    
    - name: Notify on sync failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## ‚ùå Todo-GitHub Issues Sync Failed
          
          **Timestamp**: ${new Date().toISOString()}
          **Run ID**: ${{ github.run_id }}
          **Trigger**: ${context.eventName}
          
          The automated todo synchronization failed. Please check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
          
          ### Troubleshooting Steps
          1. Check GitHub API rate limits
          2. Verify repository permissions
          3. Review sync script logs
          4. Manual sync: \`python .github/scripts/sync-todos-with-issues.py --verbose\`
          
          ---
          *Automated alert via GitHub Actions*`;
          
          // Find or create automation issue for alerts
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'automation,alerts',
            state: 'open'
          });
          
          if (issues.length > 0) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issues[0].number,
              body: comment
            });
          } else {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Automation Alerts - Todo Sync',
              body: comment,
              labels: ['automation', 'alerts', 'P3-Low']
            });
          }

  validate-sync-rules:
    runs-on: ubuntu-latest
    needs: sync-todos-with-issues
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Validate sync rules compliance
      run: |
        echo "üîç Validating sync rules compliance..."
        
        # Check for required labels
        gh issue list --label "P1-High" --limit 5 --json number,title,labels
        gh issue list --label "in-progress" --limit 10 --json number,title,labels
        
        # Validate priority distribution
        p1_count=$(gh issue list --label "P1-High" --state open | wc -l)
        p2_count=$(gh issue list --label "P2-Medium" --state open | wc -l)
        
        echo "üìä Priority Distribution:"
        echo "  P1-High: $p1_count issues"
        echo "  P2-Medium: $p2_count issues"
        
        # Check for issues without priority labels
        no_priority=$(gh issue list --state open --json number,labels | jq -r '.[] | select(.labels | map(.name) | any(test("^P[123]-")) | not) | .number')
        
        if [ -n "$no_priority" ]; then
          echo "‚ö†Ô∏è Issues without priority labels found:"
          echo "$no_priority"
        else
          echo "‚úÖ All open issues have priority labels"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}