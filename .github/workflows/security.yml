name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      severity-threshold:
        description: 'Minimum severity level to fail the job (LOW, MEDIUM, HIGH, CRITICAL)'
        required: false
        default: 'HIGH'
        type: choice
        options:
          - LOW
          - MEDIUM
          - HIGH
          - CRITICAL
  workflow_call:
    inputs:
      severity-threshold:
        description: 'Minimum severity level to fail the job (LOW, MEDIUM, HIGH, CRITICAL)'
        required: false
        default: 'HIGH'
        type: string

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

env:
  SEVERITY_THRESHOLD: ${{ inputs.severity-threshold || 'HIGH' }}
  IS_FORK: ${{ github.event.pull_request.head.repo.fork }}

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Hatch
      run: |
        python -m pip install --upgrade pip
        pip install hatch

    - name: Run Security Scan with Hatch
      run: |
        if [ "${{ env.IS_FORK }}" == "true" ]; then
          echo "Running security scan in soft mode for fork"
          hatch env run security:scan --soft
        else
          echo "Running full security scan"
          hatch env run security:scan
        fi

    - name: Process Security Results
      if: always()
      run: |
        # Create combined SARIF report
        mkdir -p security-results
        
        # Check for various security scan outputs and combine them
        if [ -f "safety-report.sarif" ]; then
          cp safety-report.sarif security-results/
        fi
        if [ -f "pip-audit-report.sarif" ]; then
          cp pip-audit-report.sarif security-results/
        fi
        if [ -f "bandit-report.sarif" ]; then
          cp bandit-report.sarif security-results/
        fi
        
        # Create a combined SARIF file if multiple reports exist
        if [ $(find security-results -name "*.sarif" | wc -l) -gt 1 ]; then
          python -c "
import json
import glob
import os

combined_sarif = {
    'version': '2.1.0',
    'schema': 'https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json',
    'runs': []
}

for sarif_file in glob.glob('security-results/*.sarif'):
    with open(sarif_file, 'r') as f:
        sarif_data = json.load(f)
        if 'runs' in sarif_data:
            combined_sarif['runs'].extend(sarif_data['runs'])

with open('security-results/combined-security.sarif', 'w') as f:
    json.dump(combined_sarif, f, indent=2)
"
        elif [ $(find security-results -name "*.sarif" | wc -l) -eq 1 ]; then
          cp security-results/*.sarif security-results/combined-security.sarif
        fi

    - name: Check Severity Threshold
      if: always()
      run: |
        # Check if any findings exceed the severity threshold
        if [ -f "security-results/combined-security.sarif" ]; then
          python -c "
import json
import sys

threshold_map = {'LOW': 0, 'MEDIUM': 1, 'HIGH': 2, 'CRITICAL': 3}
threshold = threshold_map.get('${{ env.SEVERITY_THRESHOLD }}', 2)

with open('security-results/combined-security.sarif', 'r') as f:
    sarif_data = json.load(f)

high_severity_found = False
for run in sarif_data.get('runs', []):
    for result in run.get('results', []):
        level = result.get('level', 'note')
        if level == 'error' and threshold <= 3:
            high_severity_found = True
        elif level == 'warning' and threshold <= 2:
            high_severity_found = True
        elif level == 'note' and threshold <= 1:
            high_severity_found = True
        elif level == 'info' and threshold <= 0:
            high_severity_found = True

if high_severity_found:
    print(f'Security issues found that exceed severity threshold: ${{ env.SEVERITY_THRESHOLD }}')
    sys.exit(1)
else:
    print('No security issues found that exceed the severity threshold')
"
        fi

    - name: Upload Security Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-results
        path: security-results/

  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    needs: [dependency-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Hatch
      run: |
        python -m pip install --upgrade pip
        pip install hatch

    - name: Download Security Results
      uses: actions/download-artifact@v4
      with:
        name: security-results
        path: security-results/

    - name: Run Code Security Analysis with Hatch
      run: |
        if [ "${{ env.IS_FORK }}" == "true" ]; then
          echo "Running code security scan in soft mode for fork"
          hatch env run security:code-scan --soft
        else
          echo "Running full code security scan"
          hatch env run security:code-scan
        fi

    - name: Update Combined SARIF
      if: always()
      run: |
        # Add any new SARIF files to security-results
        if [ -f "bandit-report.sarif" ]; then
          cp bandit-report.sarif security-results/
        fi
        if [ -f "semgrep-report.sarif" ]; then
          cp semgrep-report.sarif security-results/
        fi
        
        # Recreate combined SARIF with all results
        python -c "
import json
import glob
import os

combined_sarif = {
    'version': '2.1.0',
    'schema': 'https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json',
    'runs': []
}

for sarif_file in glob.glob('security-results/*.sarif'):
    if 'combined-security.sarif' not in sarif_file:
        with open(sarif_file, 'r') as f:
            try:
                sarif_data = json.load(f)
                if 'runs' in sarif_data:
                    combined_sarif['runs'].extend(sarif_data['runs'])
            except json.JSONDecodeError:
                print(f'Warning: Could not parse {sarif_file}')

with open('security-results/combined-security.sarif', 'w') as f:
    json.dump(combined_sarif, f, indent=2)
"

    - name: Upload Combined SARIF to Security Tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && !env.IS_FORK
      with:
        sarif_file: security-results/combined-security.sarif

    - name: Upload Updated Security Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-results
        path: security-results/

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [code-security-scan]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Security Results
      uses: actions/download-artifact@v4
      with:
        name: security-results
        path: security-results/

    - name: Build Docker image
      run: |
        docker build -f deploy/docker/Dockerfile.api -t pynomaly:latest .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'pynomaly:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Add Trivy results to combined SARIF
      if: always()
      run: |
        # Add Trivy results to security-results directory
        if [ -f "trivy-results.sarif" ]; then
          cp trivy-results.sarif security-results/
        fi
        
        # Recreate combined SARIF with all results including Trivy
        python -c "
import json
import glob
import os

combined_sarif = {
    'version': '2.1.0',
    'schema': 'https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json',
    'runs': []
}

for sarif_file in glob.glob('security-results/*.sarif'):
    if 'combined-security.sarif' not in sarif_file:
        with open(sarif_file, 'r') as f:
            try:
                sarif_data = json.load(f)
                if 'runs' in sarif_data:
                    combined_sarif['runs'].extend(sarif_data['runs'])
            except json.JSONDecodeError:
                print(f'Warning: Could not parse {sarif_file}')

with open('security-results/combined-security.sarif', 'w') as f:
    json.dump(combined_sarif, f, indent=2)
"

    - name: Upload Combined SARIF to Security Tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && !env.IS_FORK
      with:
        sarif_file: 'security-results/combined-security.sarif'

    - name: Upload Updated Security Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-results
        path: security-results/

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install pip-licenses
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses hatch

    - name: Install project dependencies
      run: |
        hatch env create

    - name: Generate license report
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=csv --output-file=licenses.csv
        pip-licenses --format=html --output-file=licenses.html

    - name: Check for incompatible licenses
      run: |
        # Check for GPL and other copyleft licenses that might conflict
        pip-licenses --format=json | jq -r '.[] | select(.License | test("GPL|AGPL|LGPL"; "i")) | "\(.Name): \(.License)"'

    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: |
          licenses.json
          licenses.csv
          licenses.html

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, secret-scan, license-compliance, container-security]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Aggregate SARIF files
      run: |
        # Create security-results directory if it doesn't exist
        mkdir -p security-results
        
        # Find all SARIF files from downloaded artifacts
        find . -name "*.sarif" -type f | head -20  # Limit to prevent command line too long
        
        # Use the aggregation script to combine all SARIF files
        python scripts/aggregate_sarif.py $(find . -name "*.sarif" -type f | grep -v combined | head -20) || echo "No SARIF files found to aggregate"
        
        # Move combined.sarif to security-results if it was created
        if [ -f "combined.sarif" ]; then
          mv combined.sarif security-results/combined-security.sarif
        fi

    - name: Upload combined SARIF to Security tab
      if: github.event_name == 'push' && !env.IS_FORK
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: security-results/combined-security.sarif
      continue-on-error: true

    - name: Create enhanced security summary
      run: |
        # Create comprehensive security summary
        cat > security_summary.md << 'EOF'
# 🔒 Security Scan Summary

**Scan Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
**Severity Threshold:** ${{ env.SEVERITY_THRESHOLD }}
**Fork Detection:** ${{ env.IS_FORK }}

## 📊 Scan Results Overview

EOF

        # Process combined SARIF results
        if [ -f "security-results/combined-security.sarif" ]; then
          python3 -c "
import json
import sys
from collections import defaultdict

# Load combined SARIF
with open('security-results/combined-security.sarif', 'r') as f:
    sarif_data = json.load(f)

# Count findings by severity and tool
findings = defaultdict(lambda: defaultdict(int))
total_findings = 0

for run in sarif_data.get('runs', []):
    tool_name = run.get('tool', {}).get('driver', {}).get('name', 'Unknown')
    
    for result in run.get('results', []):
        level = result.get('level', 'note')
        severity_map = {'error': 'CRITICAL', 'warning': 'HIGH', 'note': 'MEDIUM', 'info': 'LOW'}
        severity = severity_map.get(level, 'UNKNOWN')
        
        findings[tool_name][severity] += 1
        total_findings += 1

# Generate summary
print(f'| Tool | Critical | High | Medium | Low | Total |')
print('|------|----------|------|--------|-----|-------|')

for tool in sorted(findings.keys()):
    critical = findings[tool]['CRITICAL']
    high = findings[tool]['HIGH']
    medium = findings[tool]['MEDIUM']
    low = findings[tool]['LOW']
    tool_total = critical + high + medium + low
    print(f'| {tool} | {critical} | {high} | {medium} | {low} | {tool_total} |')

print(f'| **Total** | {sum(f["CRITICAL"] for f in findings.values())} | {sum(f["HIGH"] for f in findings.values())} | {sum(f["MEDIUM"] for f in findings.values())} | {sum(f["LOW"] for f in findings.values())} | {total_findings} |')

# Check if threshold exceeded
threshold_map = {'LOW': 0, 'MEDIUM': 1, 'HIGH': 2, 'CRITICAL': 3}
threshold = threshold_map.get('${{ env.SEVERITY_THRESHOLD }}', 2)

exceeded = False
for tool in findings:
    if (threshold <= 3 and findings[tool]['CRITICAL'] > 0) or \
       (threshold <= 2 and findings[tool]['HIGH'] > 0) or \
       (threshold <= 1 and findings[tool]['MEDIUM'] > 0) or \
       (threshold <= 0 and findings[tool]['LOW'] > 0):
        exceeded = True
        break

if exceeded:
    print(f'\n⚠️  **WARNING:** Findings exceed severity threshold ({"${{ env.SEVERITY_THRESHOLD }}"})!')
else:
    print(f'\n✅ **PASSED:** No findings exceed severity threshold ({"${{ env.SEVERITY_THRESHOLD }}"}).')

print(f'\n---\n')
" >> security_summary.md
        fi

        # Add license compliance info
        echo "## 📋 License Compliance" >> security_summary.md
        if [ -f "license-reports/licenses.csv" ]; then
          echo "✅ License report generated successfully" >> security_summary.md
          echo "" >> security_summary.md
        else
          echo "❌ License report not available" >> security_summary.md
          echo "" >> security_summary.md
        fi

        # Add artifact information
        echo "## 📁 Available Artifacts" >> security_summary.md
        echo "" >> security_summary.md
        echo "- 🔒 **security-results**: Combined SARIF reports and security scan outputs" >> security_summary.md
        echo "- 📊 **security-summary**: This summary report" >> security_summary.md
        if [ -d "license-reports" ]; then
          echo "- 📋 **license-reports**: License compliance reports" >> security_summary.md
        fi
        echo "" >> security_summary.md
        echo "---" >> security_summary.md
        echo "*Generated by GitHub Actions Security Workflow*" >> security_summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security_summary.md

    - name: Comment on PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read the security summary
          let summary = '';
          try {
            summary = fs.readFileSync('security_summary.md', 'utf8');
          } catch (error) {
            summary = '❌ Security summary not available';
            console.log('Error reading security_summary.md:', error.message);
          }
          
          // Find existing security comment
          const { data: comments } = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('🔒 Security Scan Summary') && 
            comment.user.login === 'github-actions[bot]'
          );
          
          const commentBody = `${summary}
          
---
*This comment is automatically updated with the latest security scan results.*`;
          
          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              comment_id: existingComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
            console.log('Updated existing security comment');
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
            console.log('Created new security comment');
          }
