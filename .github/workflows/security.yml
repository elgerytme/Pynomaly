name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  bandit-scan:
    name: Bandit Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security linter
      run: |
        bandit -r src -ll -iii -f json -o bandit-report.json
        bandit -r src -ll -iii -f txt -o bandit-report.txt
      continue-on-error: true

    - name: Upload Bandit artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-reports
        path: |
          bandit-report.json
          bandit-report.txt

    - name: Check Bandit results
      run: |
        # Check if bandit found any HIGH or MEDIUM severity issues
        if [ -f bandit-report.json ]; then
          HIGH_ISSUES=$(jq -r '.results[] | select(.issue_severity == "HIGH") | length' bandit-report.json 2>/dev/null || echo "0")
          MEDIUM_ISSUES=$(jq -r '.results[] | select(.issue_severity == "MEDIUM") | length' bandit-report.json 2>/dev/null || echo "0")
          
          if [ "$HIGH_ISSUES" != "0" ] || [ "$MEDIUM_ISSUES" != "0" ]; then
            echo "::warning::Bandit found security issues. Check the artifacts for details."
          fi
        fi

  safety-scan:
    name: Safety Dependency Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Install project dependencies
      run: |
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        elif [ -f pyproject.toml ]; then
          pip install -e .
        fi

    - name: Run Safety check
      run: |
        safety check --full-report --json --output safety-report.json || true
        safety check --full-report --output safety-report.txt || true
      continue-on-error: true

    - name: Upload Safety artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-security-reports
        path: |
          safety-report.json
          safety-report.txt

    - name: Check Safety results
      run: |
        # Check if safety found any vulnerabilities
        if [ -f safety-report.json ]; then
          VULNERABILITIES=$(jq -r '.vulnerabilities | length' safety-report.json 2>/dev/null || echo "0")
          
          if [ "$VULNERABILITIES" != "0" ]; then
            echo "::warning::Safety found $VULNERABILITIES vulnerabilities. Check the artifacts for details."
          fi
        fi

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [bandit-scan, safety-scan]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "## Timestamp: $(date)" >> security-summary.md
        echo "" >> security-summary.md

        echo "## Bandit Code Security Issues" >> security-summary.md
        if [ -f bandit-security-reports/bandit-report.txt ]; then
          echo '```' >> security-summary.md
          cat bandit-security-reports/bandit-report.txt >> security-summary.md
          echo '```' >> security-summary.md
        else
          echo "No Bandit report found." >> security-summary.md
        fi
        echo "" >> security-summary.md

        echo "## Safety Dependency Vulnerabilities" >> security-summary.md
        if [ -f safety-security-reports/safety-report.txt ]; then
          echo '```' >> security-summary.md
          cat safety-security-reports/safety-report.txt >> security-summary.md
          echo '```' >> security-summary.md
        else
          echo "No Safety report found." >> security-summary.md
        fi

    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('security-summary.md')) {
            const summary = fs.readFileSync('security-summary.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Security Scan Results\n\n${summary}`
            });
          }
