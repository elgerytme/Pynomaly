name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      severity-threshold:
        description: 'Minimum severity level to fail the job (LOW, MEDIUM, HIGH, CRITICAL)'
        required: false
        default: 'HIGH'
        type: choice
        options:
          - LOW
          - MEDIUM
          - HIGH
          - CRITICAL
  workflow_call:
    inputs:
      severity-threshold:
        description: 'Minimum severity level to fail the job (LOW, MEDIUM, HIGH, CRITICAL)'
        required: false
        default: 'HIGH'
        type: string

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

env:
  SEVERITY_THRESHOLD: ${{ inputs.severity-threshold || 'HIGH' }}
  IS_FORK: ${{ github.event.pull_request.head.repo.fork }}

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Hatch
      run: |
        python -m pip install --upgrade pip
        pip install hatch

    - name: Run Security Scan with Hatch
      run: |
        if [ "${{ env.IS_FORK }}" == "true" ]; then
          echo "Running security scan in soft mode for fork"
          hatch env run security:scan --soft
        else
          echo "Running full security scan"
          hatch env run security:scan
        fi

    - name: Process Security Results
      if: always()
      run: |
        # Move SARIF files to sarif directory
        mkdir -p sarif
        if [ -f "safety-report.sarif" ]; then
          mv safety-report.sarif sarif/
        fi
        if [ -f "pip-audit-report.sarif" ]; then
          mv pip-audit-report.sarif sarif/
        fi
        if [ -f "bandit-report.sarif" ]; then
          mv bandit-report.sarif sarif/
        fi

        # Aggregate SARIF files
        python scripts/aggregate_sarif.py sarif/*.sarif -o sarif/combined.sarif

    - name: Check Severity Threshold
      if: always()
      run: |
        # Custom Python check for severity threshold
        python -c "
import json
import sys

threshold_map = {'LOW': 0, 'MEDIUM': 1, 'HIGH': 2, 'CRITICAL': 3}
threshold = threshold_map.get('${{ env.SEVERITY_THRESHOLD }}', 2)

with open('sarif/combined.sarif', 'r') as f:
    sarif_data = json.load(f)

high_severity_found = False
for run in sarif_data.get('runs', []):
    for result in run.get('results', []):
        level = result.get('level', 'note')
        if level == 'error' and threshold <= 3:
            high_severity_found = True
        elif level == 'warning' and threshold <= 2:
            high_severity_found = True
        elif level == 'note' and threshold <= 1:
            high_severity_found = True
        elif level == 'info' and threshold <= 0:
            high_severity_found = True

if high_severity_found:
    print(f'Security issues found that exceed severity threshold: ${{ env.SEVERITY_THRESHOLD }}')
    sys.exit(1)
else:
    print('No security issues found that exceed the severity threshold')
"
        fi

    - name: Upload Combined SARIF to Security Tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && !env.IS_FORK
      with:
        sarif_file: sarif/combined.sarif

    - name: Upload Security Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-results
        path: sarif/

  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    needs: [dependency-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Hatch
      run: |
        python -m pip install --upgrade pip
        pip install hatch

    - name: Download Security Results
      uses: actions/download-artifact@v4
      with:
        name: security-results
        path: sarif/

    - name: Run Code Security Analysis with Hatch
      run: |
        if [ "${{ env.IS_FORK }}" == "true" ]; then
          echo "Running code security scan in soft mode for fork"
          hatch env run security:code-scan --soft
        else
          echo "Running full code security scan"
          hatch env run security:code-scan
        fi

    - name: Update Combined SARIF
      if: always()
      run: |
        # Add any new SARIF files to sarif directory
        if [ -f "bandit-report.sarif" ]; then
          mv bandit-report.sarif sarif/
        fi
        if [ -f "semgrep-report.sarif" ]; then
          mv semgrep-report.sarif sarif/
        fi

        # Recreate combined SARIF with all results
        python scripts/aggregate_sarif.py sarif/*.sarif -o sarif/combined.sarif

    - name: Check Severity Threshold
      if: always()
      run: |
        # Custom Python check for severity threshold
        python -c "
import json
import sys

threshold_map = {'LOW': 0, 'MEDIUM': 1, 'HIGH': 2, 'CRITICAL': 3}
threshold = threshold_map.get('${{ env.SEVERITY_THRESHOLD }}', 2)

with open('sarif/combined.sarif', 'r') as f:
    sarif_data = json.load(f)

high_severity_found = False
for run in sarif_data.get('runs', []):
    for result in run.get('results', []):
        level = result.get('level', 'note')
        if level == 'error' and threshold <= 3:
            high_severity_found = True
        elif level == 'warning' and threshold <= 2:
            high_severity_found = True
        elif level == 'note' and threshold <= 1:
            high_severity_found = True
        elif level == 'info' and threshold <= 0:
            high_severity_found = True

if high_severity_found:
    print(f'Security issues found that exceed severity threshold: ${{ env.SEVERITY_THRESHOLD }}')
    sys.exit(1)
else:
    print('No security issues found that exceed the severity threshold')
"
        fi

    - name: Upload Combined SARIF to Security Tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && !env.IS_FORK
      with:
        sarif_file: sarif/combined.sarif

    - name: Upload Updated Security Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-results
        path: sarif/

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # First, load image list for matrix
  load-container-images:
    name: Load Container Images
    runs-on: ubuntu-latest
    needs: [code-security-scan]
    if: github.event_name == 'push'
    outputs:
      images: ${{ steps.load-images.outputs.images }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Load image list from manifest
      id: load-images
      run: |
        # Load images from manifest and filter local images that need building
        images=$(cat config/container_images.json | jq -r '.images[] | select(.remote == false) | .name')
        # Convert to JSON array for matrix (proper shell escaping)
        image_array="["
        first=true
        for image in $images; do
          if [ "$first" = true ]; then
            first=false
          else
            image_array="$image_array,"
          fi
          image_array="$image_array\"$image\""
        done
        image_array="$image_array]"
        echo "images=$image_array" >> $GITHUB_OUTPUT
        echo "Loaded images for matrix: $image_array"

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [code-security-scan, load-container-images]
    if: github.event_name == 'push'
    
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.load-container-images.outputs.images) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Security Results
      uses: actions/download-artifact@v4
      with:
        name: security-results
        path: security-results/

    - name: Build Docker image if local
      run: |
        # Extract image info from manifest
        image_info=$(cat config/container_images.json | jq -r ".images[] | select(.name == \"${{ matrix.image }}\")") 
        dockerfile=$(echo "$image_info" | jq -r '.dockerfile')
        context=$(echo "$image_info" | jq -r '.context // "."')
        target=$(echo "$image_info" | jq -r '.target // ""')
        
        # Build the image
        build_args="-f $dockerfile -t ${{ matrix.image }}:latest"
        if [ "$target" != "" ] && [ "$target" != "null" ]; then
          build_args="$build_args --target $target"
        fi
        
        echo "Building image ${{ matrix.image }} with args: $build_args"
        docker build $build_args $context

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Run container security scans
      run: |
        # Run comprehensive container scans using the script
        if [ "${{ env.IS_FORK }}" == "true" ]; then
          echo "Running container security scan in soft mode for fork"
          python scripts/security/run_container_scans.py --images ${{ matrix.image }}:latest --soft
        else
          echo "Running full container security scan"
          python scripts/security/run_container_scans.py --images ${{ matrix.image }}:latest
        fi
      env:
        SEVERITY_THRESHOLD: ${{ env.SEVERITY_THRESHOLD }}

    - name: Create safe artifact name
      id: artifact-name
      run: |
        # Create a safe artifact name from the image name
        safe_name=$(echo "${{ matrix.image }}" | sed 's/[^a-zA-Z0-9._-]/_/g')
        echo "safe_name=$safe_name" >> $GITHUB_OUTPUT

    - name: Upload individual SARIF artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-sarif-${{ steps.artifact-name.outputs.safe_name }}
        path: security-results/*_sarif.json
        retention-days: 30

    - name: Upload individual SBOM artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-sbom-${{ steps.artifact-name.outputs.safe_name }}
        path: security-results/*_sbom.json
        retention-days: 30

    - name: Upload individual scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-results-${{ steps.artifact-name.outputs.safe_name }}
        path: security-results/
        retention-days: 30

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install pip-licenses
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses hatch

    - name: Install project dependencies
      run: |
        hatch env create

    - name: Generate license report
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=csv --output-file=licenses.csv
        pip-licenses --format=html --output-file=licenses.html

    - name: Check for incompatible licenses
      run: |
        # Check for GPL and other copyleft licenses that might conflict
        pip-licenses --format=json | jq -r '.[] | select(.License | test("GPL|AGPL|LGPL"; "i")) | "\(.Name): \(.License)"'

    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: |
          licenses.json
          licenses.csv
          licenses.html

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, secret-scan, license-compliance, container-security]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Aggregate SARIF files including container scans
      run: |
        # Create security-results directory if it doesn't exist
        mkdir -p security-results
        
        # Find all SARIF files from downloaded artifacts (including container matrix results)
        echo "Looking for SARIF files..."
        find . -name "*.sarif" -type f | grep -v combined | head -50 || echo "No SARIF files found"
        
        # Also look for container SARIF files from matrix jobs
        find . -name "*_trivy.sarif" -type f | head -20 || echo "No Trivy SARIF files found"
        find . -name "*_clair.sarif" -type f | head -20 || echo "No Clair SARIF files found"
        find . -name "*_sarif.json" -type f | head -20 || echo "No container SARIF JSON files found"
        
        # Collect all SARIF files
        SARIF_FILES=$(find . \( -name "*.sarif" -o -name "*_sarif.json" \) -type f | grep -v combined | head -50)
        if [ -n "$SARIF_FILES" ]; then
          echo "Aggregating SARIF files: $SARIF_FILES"
          python scripts/aggregate_sarif.py --output security-results/combined-security.sarif $SARIF_FILES
        else
          echo "No SARIF files found to aggregate"
          # Create empty combined SARIF file to prevent upload errors
          cat > security-results/combined-security.sarif << 'EOF'
{
  "version": "2.1.0",
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json",
  "runs": []
}
EOF
        fi

    - name: Aggregate container SBOMs
      run: |
        # Create SBOMs directory and aggregate all container SBOMs
        mkdir -p security-results/sboms
        
        # Find all SBOM files from container matrix jobs
        echo "Looking for SBOM files..."
        find . -name "*_sbom.json" -type f | head -20 || echo "No SBOM files found"
        
        # Copy all SBOM files to security-results
        SBOM_FILES=$(find . -name "*_sbom.json" -type f | head -20)
        if [ -n "$SBOM_FILES" ]; then
          echo "Copying SBOM files: $SBOM_FILES"
          cp $SBOM_FILES security-results/sboms/
        else
          echo "No SBOM files found to copy"
        fi

    - name: Upload combined SARIF to Security tab
      if: github.event_name == 'push' && !env.IS_FORK
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: security-results/combined-security.sarif
      continue-on-error: true

    - name: Create enhanced security summary
      run: |
        # Create comprehensive security summary
        cat > security_summary.md << 'EOF'
# 🔒 Security Scan Summary

**Scan Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
**Severity Threshold:** ${{ env.SEVERITY_THRESHOLD }}
**Fork Detection:** ${{ env.IS_FORK }}

## 📊 Scan Results Overview

EOF

        # Process combined SARIF results
        if [ -f "security-results/combined-security.sarif" ]; then
          python3 -c "
import json
import sys
from collections import defaultdict

# Load combined SARIF
with open('security-results/combined-security.sarif', 'r') as f:
    sarif_data = json.load(f)

# Count findings by severity and tool
findings = defaultdict(lambda: defaultdict(int))
total_findings = 0

for run in sarif_data.get('runs', []):
    tool_name = run.get('tool', {}).get('driver', {}).get('name', 'Unknown')
    
    for result in run.get('results', []):
        level = result.get('level', 'note')
        severity_map = {'error': 'CRITICAL', 'warning': 'HIGH', 'note': 'MEDIUM', 'info': 'LOW'}
        severity = severity_map.get(level, 'UNKNOWN')
        
        findings[tool_name][severity] += 1
        total_findings += 1

# Generate summary
print(f'| Tool | Critical | High | Medium | Low | Total |')
print('|------|----------|------|--------|-----|-------|')

for tool in sorted(findings.keys()):
    critical = findings[tool]['CRITICAL']
    high = findings[tool]['HIGH']
    medium = findings[tool]['MEDIUM']
    low = findings[tool]['LOW']
    tool_total = critical + high + medium + low
    print(f'| {tool} | {critical} | {high} | {medium} | {low} | {tool_total} |')

print(f'| **Total** | {sum(f["CRITICAL"] for f in findings.values())} | {sum(f["HIGH"] for f in findings.values())} | {sum(f["MEDIUM"] for f in findings.values())} | {sum(f["LOW"] for f in findings.values())} | {total_findings} |')

# Check if threshold exceeded
threshold_map = {'LOW': 0, 'MEDIUM': 1, 'HIGH': 2, 'CRITICAL': 3}
threshold = threshold_map.get('${{ env.SEVERITY_THRESHOLD }}', 2)

exceeded = False
for tool in findings:
    if (threshold <= 3 and findings[tool]['CRITICAL'] > 0) or \
       (threshold <= 2 and findings[tool]['HIGH'] > 0) or \
       (threshold <= 1 and findings[tool]['MEDIUM'] > 0) or \
       (threshold <= 0 and findings[tool]['LOW'] > 0):
        exceeded = True
        break

if exceeded:
    print(f'\n⚠️  **WARNING:** Findings exceed severity threshold ({"${{ env.SEVERITY_THRESHOLD }}"})!')
else:
    print(f'\n✅ **PASSED:** No findings exceed severity threshold ({"${{ env.SEVERITY_THRESHOLD }}"}).')

print(f'\n---\n')
" >> security_summary.md
        fi

        # Add license compliance info
        echo "## 📋 License Compliance" >> security_summary.md
        if [ -f "license-reports/licenses.csv" ]; then
          echo "✅ License report generated successfully" >> security_summary.md
          echo "" >> security_summary.md
        else
          echo "❌ License report not available" >> security_summary.md
          echo "" >> security_summary.md
        fi

        # Add container scan information
        echo "## 🐳 Container Security Scans" >> security_summary.md
        echo "" >> security_summary.md
        
        # Check for container scan results
        CONTAINER_TRIVY_FILES=$(find . -name "*_trivy.sarif" -o -name "*_trivy.json" | wc -l)
        CONTAINER_CLAIR_FILES=$(find . -name "*_clair.json" | wc -l)
        CONTAINER_SBOM_FILES=$(find . -name "*_sbom.json" | wc -l)
        
        if [ "$CONTAINER_TRIVY_FILES" -gt 0 ] || [ "$CONTAINER_CLAIR_FILES" -gt 0 ]; then
          echo "### Scan Results" >> security_summary.md
          echo "" >> security_summary.md
          echo "| Scanner | Files Generated | Status |" >> security_summary.md
          echo "|---------|------------------|--------|" >> security_summary.md
          echo "| Trivy | $CONTAINER_TRIVY_FILES | ✅ Completed |" >> security_summary.md
          echo "| Clair | $CONTAINER_CLAIR_FILES | ✅ Completed |" >> security_summary.md
          echo "" >> security_summary.md
          
          echo "### SBOMs Generated" >> security_summary.md
          echo "" >> security_summary.md
          echo "- **Total SBOMs**: $CONTAINER_SBOM_FILES" >> security_summary.md
          echo "- **Format**: CycloneDX JSON" >> security_summary.md
          echo "- **Location**: security-results/sboms/" >> security_summary.md
          echo "" >> security_summary.md
          
          # List scanned images
          echo "### Scanned Images" >> security_summary.md
          echo "" >> security_summary.md
          find . -name "*_trivy.json" -exec basename {} \; | sed 's/_trivy.json$//' | sed 's/_/\//g' | sort | while read image; do
            echo "- \`$image\`" >> security_summary.md
          done
          echo "" >> security_summary.md
        else
          echo "No container security scans were performed (likely due to push-only restriction)." >> security_summary.md
          echo "" >> security_summary.md
        fi
        
        # Add artifact information
        echo "## 📁 Available Artifacts" >> security_summary.md
        echo "" >> security_summary.md
        echo "- 🔒 **security-results**: Combined SARIF reports and security scan outputs" >> security_summary.md
        echo "- 📊 **security-summary**: This summary report" >> security_summary.md
        if [ -d "license-reports" ]; then
          echo "- 📋 **license-reports**: License compliance reports" >> security_summary.md
        fi
        if [ -d "security-results/sboms" ]; then
          echo "- 📦 **container-sbom-***: Individual container SBOMs" >> security_summary.md
          echo "- 🔍 **container-sarif-***: Individual container SARIF results" >> security_summary.md
          echo "- 📋 **container-results-***: Complete container scan results" >> security_summary.md
        fi
        echo "" >> security_summary.md
        echo "---" >> security_summary.md
        echo "*Generated by GitHub Actions Security Workflow*" >> security_summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security_summary.md

    - name: Comment on PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read the security summary
          let summary = '';
          try {
            summary = fs.readFileSync('security_summary.md', 'utf8');
          } catch (error) {
            summary = '❌ Security summary not available';
            console.log('Error reading security_summary.md:', error.message);
          }
          
          // Find existing security comment
          const { data: comments } = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('🔒 Security Scan Summary') && 
            comment.user.login === 'github-actions[bot]'
          );
          
          const commentBody = `${summary}
          
---
*This comment is automatically updated with the latest security scan results.*`;
          
          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              comment_id: existingComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
            console.log('Updated existing security comment');
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
            console.log('Created new security comment');
          }
