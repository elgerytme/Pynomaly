# Buck2 Incremental Testing Strategy
# Smart test selection based on changed files
name: Buck2 Incremental Testing

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]
  push:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  PYTHON_VERSION: "3.11"
  BUCK2_VERSION: "latest"

jobs:
  # =============================================================================
  # CHANGE DETECTION AND TEST SELECTION
  # =============================================================================
  detect-changes:
    name: Detect Changed Packages
    runs-on: ubuntu-latest
    outputs:
      changed-packages: ${{ steps.changes.outputs.packages }}
      test-selection: ${{ steps.changes.outputs.tests }}
      run-all-tests: ${{ steps.changes.outputs.run-all }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect package changes
      id: changes
      run: |
        echo "üîç Detecting changed packages and test requirements..."
        
        # Get changed files
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
        else
          CHANGED_FILES=$(git diff --name-only HEAD~1...HEAD)
        fi
        
        echo "Changed files:"
        echo "$CHANGED_FILES"
        
        # Detect changed packages
        CHANGED_PACKAGES=""
        RUN_ALL_TESTS="false"
        
        # Check for infrastructure changes that require full testing
        if echo "$CHANGED_FILES" | grep -E "(BUCK|\.buckconfig|\.bzl|pyproject\.toml|requirements)" > /dev/null; then
          echo "üèóÔ∏è Infrastructure changes detected - running all tests"
          RUN_ALL_TESTS="true"
          CHANGED_PACKAGES="all"
        else
          # Detect specific package changes
          while IFS= read -r file; do
            if [[ "$file" == src/packages/* ]]; then
              PACKAGE_PATH=$(echo "$file" | cut -d'/' -f1-4)
              if [[ -n "$PACKAGE_PATH" ]]; then
                CHANGED_PACKAGES="$CHANGED_PACKAGES $PACKAGE_PATH"
              fi
            fi
          done <<< "$CHANGED_FILES"
          
          CHANGED_PACKAGES=$(echo "$CHANGED_PACKAGES" | tr ' ' '\n' | sort -u | tr '\n' ' ')
        fi
        
        # Generate test selection
        TEST_SELECTION=""
        if [[ "$RUN_ALL_TESTS" == "true" ]]; then
          TEST_SELECTION="//..."
        else
          for pkg in $CHANGED_PACKAGES; do
            if [[ -n "$pkg" ]]; then
              # Convert package path to Buck2 test target
              TEST_TARGET=$(echo "$pkg" | sed 's|src/packages/||' | sed 's|/|-|g')
              TEST_SELECTION="$TEST_SELECTION //:${TEST_TARGET}-tests"
            fi
          done
        fi
        
        echo "packages=$CHANGED_PACKAGES" >> $GITHUB_OUTPUT
        echo "tests=$TEST_SELECTION" >> $GITHUB_OUTPUT
        echo "run-all=$RUN_ALL_TESTS" >> $GITHUB_OUTPUT
        
        echo "üì¶ Changed packages: $CHANGED_PACKAGES"
        echo "üß™ Test selection: $TEST_SELECTION"

  # =============================================================================
  # INCREMENTAL TESTING EXECUTION
  # =============================================================================
  incremental-tests:
    name: Run Incremental Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.test-selection != ''
    
    strategy:
      matrix:
        test-category: [unit, integration]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Buck2 binary
      uses: actions/cache@v4
      with:
        path: ~/.local/bin/buck2
        key: buck2-${{ runner.os }}-${{ env.BUCK2_VERSION }}

    - name: Install Buck2
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://get.buck2.build/ | bash
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Cache Buck2 test outputs
      uses: actions/cache@v4
      with:
        path: |
          .buck-out
          .buck-cache
        key: buck2-tests-${{ runner.os }}-${{ matrix.test-category }}-${{ hashFiles('BUCK', '**/*.py') }}
        restore-keys: |
          buck2-tests-${{ runner.os }}-${{ matrix.test-category }}-
          buck2-tests-${{ runner.os }}-

    - name: Run incremental tests (${{ matrix.test-category }})
      run: |
        echo "üß™ Running ${{ matrix.test-category }} tests for changed packages..."
        
        if [[ "${{ needs.detect-changes.outputs.run-all }}" == "true" ]]; then
          echo "üîÑ Running all ${{ matrix.test-category }} tests..."
          buck2 test //... \
            --config python.toolchain=system \
            --filter-labels="${{ matrix.test-category }}"
        else
          echo "üéØ Running targeted ${{ matrix.test-category }} tests..."
          TEST_TARGETS="${{ needs.detect-changes.outputs.test-selection }}"
          
          if [[ -n "$TEST_TARGETS" ]]; then
            for target in $TEST_TARGETS; do
              echo "Running tests for: $target"
              buck2 test "$target" \
                --config python.toolchain=system \
                --filter-labels="${{ matrix.test-category }}" || true
            done
          else
            echo "‚úÖ No ${{ matrix.test-category }} tests to run"
          fi
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.test-category }}
        path: |
          .buck-out/log/
          test-results.xml
        retention-days: 3

  # =============================================================================
  # TEST IMPACT ANALYSIS
  # =============================================================================
  test-impact-analysis:
    name: Test Impact Analysis
    runs-on: ubuntu-latest
    needs: [detect-changes, incremental-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Buck2 binary
      uses: actions/cache@v4
      with:
        path: ~/.local/bin/buck2
        key: buck2-${{ runner.os }}-${{ env.BUCK2_VERSION }}

    - name: Install Buck2
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://get.buck2.build/ | bash
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Generate test impact report
      run: |
        echo "üìä Generating test impact analysis..."
        
        # Create impact analysis script
        cat > test_impact_analysis.py << 'EOF'
        import json
        import subprocess
        import sys
        from pathlib import Path
        
        def get_test_coverage_impact():
            """Analyze test coverage impact of changes"""
            try:
                # Get changed files
                result = subprocess.run(
                    ['git', 'diff', '--name-only', 'origin/main...HEAD'],
                    capture_output=True, text=True, check=True
                )
                changed_files = result.stdout.strip().split('\n') if result.stdout.strip() else []
                
                # Analyze impact
                impact_data = {
                    'changed_files': len(changed_files),
                    'affected_packages': len(set(f.split('/')[2] for f in changed_files if f.startswith('src/packages/'))),
                    'python_files_changed': len([f for f in changed_files if f.endswith('.py')]),
                    'test_files_changed': len([f for f in changed_files if 'test' in f and f.endswith('.py')]),
                    'infrastructure_changed': any('BUCK' in f or 'pyproject.toml' in f for f in changed_files),
                    'recommendation': 'full' if any('BUCK' in f for f in changed_files) else 'incremental'
                }
                
                return impact_data
                
            except Exception as e:
                return {'error': str(e)}
        
        if __name__ == '__main__':
            impact = get_test_coverage_impact()
            print(json.dumps(impact, indent=2))
        EOF
        
        python test_impact_analysis.py > test_impact_report.json
        
        echo "üìã Test Impact Report:"
        cat test_impact_report.json
        
        # Generate recommendations
        echo "üéØ Testing Recommendations:"
        if grep -q '"infrastructure_changed": true' test_impact_report.json; then
          echo "  ‚ö†Ô∏è Infrastructure changes detected - recommend full test suite"
        else
          echo "  ‚úÖ Incremental testing sufficient for current changes"
        fi

    - name: Upload impact analysis
      uses: actions/upload-artifact@v4
      with:
        name: test-impact-analysis
        path: test_impact_report.json
        retention-days: 7

  # =============================================================================
  # TEST RESULTS SUMMARY
  # =============================================================================
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, incremental-tests, test-impact-analysis]
    if: always()
    
    steps:
    - name: Generate test summary
      run: |
        echo "# üìä Buck2 Incremental Testing Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Changed Packages" >> $GITHUB_STEP_SUMMARY
        echo "- Packages: ${{ needs.detect-changes.outputs.changed-packages }}" >> $GITHUB_STEP_SUMMARY
        echo "- Tests: ${{ needs.detect-changes.outputs.test-selection }}" >> $GITHUB_STEP_SUMMARY
        echo "- Full test run: ${{ needs.detect-changes.outputs.run-all }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- Unit tests: ${{ needs.incremental-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration tests: ${{ needs.incremental-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Performance Benefits" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Incremental testing reduces CI time by running only affected tests" >> $GITHUB_STEP_SUMMARY
        echo "üöÄ Buck2 caching enables fast rebuilds and test execution" >> $GITHUB_STEP_SUMMARY