name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Quality checks and linting
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[lint,test]

      - name: Run linting
        run: |
          echo "Running code quality checks..."
          ruff check --output-format=github .
          black --check --diff .
          isort --check-only --diff .

      - name: Type checking
        run: |
          mypy src/packages/data/anomaly_detection/src/monorepo_detection

      - name: Security scanning
        run: |
          bandit -r src/packages/data/anomaly_detection/src/monorepo_detection
          safety check

  # Unit and integration tests
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        test-type: [unit, integration]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test,all]

      - name: Run ${{ matrix.test-type }} tests
        run: |
          if [ "${{ matrix.test-type }}" == "unit" ]; then
            pytest tests/unit/ -v --cov=monorepo_detection --cov-report=xml --cov-report=html
          else
            pytest tests/integration/ -v --cov=monorepo_detection --cov-report=xml --cov-report=html
          fi

      - name: Upload coverage reports
        if: matrix.python-version == '3.11' && matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # API documentation generation
  docs:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[docs,api]

      - name: Generate API documentation
        run: |
          python src/development_scripts/scripts/generate_api_docs.py

      - name: Upload API documentation
        uses: actions/upload-artifact@v3
        with:
          name: api-docs
          path: docs/api/generated/

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/api/generated
          destination_dir: api-docs

  # Package health monitoring setup
  health-monitoring:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[monitoring,production]

      - name: Run health checks
        run: |
          python src/development_scripts/scripts/health_check.py

      - name: Generate health report
        run: |
          python -c "
          import json
          import psutil
          import time
          from datetime import datetime
          
          health_data = {
              'timestamp': datetime.now().isoformat(),
              'system': {
                  'cpu_percent': psutil.cpu_percent(interval=1),
                  'memory_percent': psutil.virtual_memory().percent,
                  'disk_usage': psutil.disk_usage('/').percent
              },
              'github': {
                  'workflow': '${{ github.workflow }}',
                  'run_id': '${{ github.run_id }}',
                  'ref': '${{ github.ref }}',
                  'sha': '${{ github.sha }}'
              }
          }
          
          with open('health-report.json', 'w') as f:
              json.dump(health_data, f, indent=2)
          "

      - name: Upload health report
        uses: actions/upload-artifact@v3
        with:
          name: health-report
          path: health-report.json

  # Build and publish Docker images
  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Performance testing
  performance:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[performance-test]

      - name: Run performance tests
        run: |
          pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: benchmark.json

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Release management
  release:
    runs-on: ubuntu-latest
    needs: [lint, test, docs, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Create GitHub Release
        if: startsWith(github.event.head_commit.message, 'Release v')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*
          generate_release_notes: true
          tag_name: ${{ github.event.head_commit.message }}

      - name: Publish to PyPI
        if: startsWith(github.event.head_commit.message, 'Release v')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/*

  # Deployment validation
  validate-deployment:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test]

      - name: Run deployment validation
        run: |
          python src/development_scripts/scripts/validate_deployment.py

      - name: Run smoke tests
        run: |
          python src/development_scripts/scripts/smoke_test.py

      - name: Health check validation
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

  # Notification and reporting
  notify:
    runs-on: ubuntu-latest
    needs: [lint, test, docs, build, security, performance, validate-deployment]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate status report
        run: |
          echo "# CI/CD Pipeline Status Report" > status-report.md
          echo "" >> status-report.md
          echo "**Workflow:** ${{ github.workflow }}" >> status-report.md
          echo "**Run ID:** ${{ github.run_id }}" >> status-report.md
          echo "**Branch:** ${{ github.ref }}" >> status-report.md
          echo "**Commit:** ${{ github.sha }}" >> status-report.md
          echo "**Status:** ${{ job.status }}" >> status-report.md
          echo "" >> status-report.md
          echo "## Job Results" >> status-report.md
          echo "- Lint: ${{ needs.lint.result }}" >> status-report.md
          echo "- Test: ${{ needs.test.result }}" >> status-report.md
          echo "- Docs: ${{ needs.docs.result }}" >> status-report.md
          echo "- Build: ${{ needs.build.result }}" >> status-report.md
          echo "- Security: ${{ needs.security.result }}" >> status-report.md
          echo "- Performance: ${{ needs.performance.result }}" >> status-report.md
          echo "- Deployment Validation: ${{ needs.validate-deployment.result }}" >> status-report.md

      - name: Upload status report
        uses: actions/upload-artifact@v3
        with:
          name: status-report
          path: status-report.md