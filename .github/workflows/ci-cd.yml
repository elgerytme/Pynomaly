name: Pynomaly Production CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install hatch
        hatch env create
    
    - name: Run linting
      run: |
        hatch run lint:ruff check src tests
        hatch run lint:ruff format --check src tests
    
    - name: Run type checking
      run: |
        hatch run typecheck:mypy src
    
    - name: Run security checks
      run: |
        pip install bandit safety
        bandit -r src/ -f json -o security-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Run tests with coverage
      run: |
        hatch run test:pytest --cov=pynomaly --cov-report=xml --cov-report=html --cov-fail-under=25
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          security-report.json
          safety-report.json

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    name: Build Docker Image
    needs: [test, security]
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  deploy-staging:
    name: Deploy to Staging
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.STAGING_KUBECONFIG }}
    
    - name: Deploy to staging Kubernetes
      run: |
        # Replace image tag in Kubernetes manifests
        sed -i "s|image: .*|image: ${{ needs.build.outputs.image-tag }}|g" deployment/infrastructure/kubernetes/staging/*.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f deployment/infrastructure/kubernetes/staging/namespace.yaml
        kubectl apply -f deployment/infrastructure/kubernetes/staging/configmap.yaml
        kubectl apply -f deployment/infrastructure/kubernetes/staging/secret.yaml
        kubectl apply -f deployment/infrastructure/kubernetes/staging/
        
        # Wait for deployment rollout
        kubectl rollout status deployment/pynomaly-api -n pynomaly-staging --timeout=300s
    
    - name: Run smoke tests
      run: |
        # Wait for service to be ready
        kubectl wait --for=condition=ready pod -l app=pynomaly-api -n pynomaly-staging --timeout=300s
        
        # Get service URL
        STAGING_URL=$(kubectl get service pynomaly-api -n pynomaly-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Run basic health check
        curl -f http://${STAGING_URL}/health || exit 1
        echo "✅ Staging deployment successful"

  deploy-production:
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.PRODUCTION_KUBECONFIG }}
    
    - name: Deploy to production Kubernetes
      run: |
        # Replace image tag in Kubernetes manifests
        sed -i "s|image: .*|image: ${{ needs.build.outputs.image-tag }}|g" deployment/infrastructure/kubernetes/production/*.yaml
        
        # Apply Kubernetes manifests with rolling update
        kubectl apply -f deployment/infrastructure/kubernetes/production/namespace.yaml
        kubectl apply -f deployment/infrastructure/kubernetes/production/configmap.yaml
        kubectl apply -f deployment/infrastructure/kubernetes/production/secret.yaml
        kubectl apply -f deployment/infrastructure/kubernetes/production/
        
        # Wait for deployment rollout
        kubectl rollout status deployment/pynomaly-api -n pynomaly-production --timeout=600s
    
    - name: Run production health checks
      run: |
        # Wait for service to be ready
        kubectl wait --for=condition=ready pod -l app=pynomaly-api -n pynomaly-production --timeout=300s
        
        # Run comprehensive health checks
        PRODUCTION_URL=$(kubectl get service pynomaly-api -n pynomaly-production -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Health check
        curl -f https://${PRODUCTION_URL}/health || exit 1
        
        # Readiness check
        curl -f https://${PRODUCTION_URL}/ready || exit 1
        
        # Basic API functionality test
        curl -f https://${PRODUCTION_URL}/api/v1/detectors -H "Accept: application/json" || exit 1
        
        echo "✅ Production deployment successful"
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: |
          Production deployment ${{ job.status }}!
          Image: ${{ needs.build.outputs.image-tag }}
          Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  release:
    name: Create Release
    if: github.event_name == 'release'
    needs: [build, deploy-production]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Python package
      run: |
        python -m pip install --upgrade pip
        pip install hatch
        hatch build
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: dist/
        asset_name: pynomaly-dist.tar.gz
        asset_content_type: application/gzip