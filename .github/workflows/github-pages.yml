name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"

jobs:
  # =============================================================================
  # BUILD WEB FRONTEND
  # =============================================================================
  build:
    name: Build Web Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Node.js dependencies
      run: npm install

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build CSS and JavaScript
      run: |
        npm run build-css
        npm run build-js:optimized

    - name: Generate static dashboard
      run: |
        python scripts/generate_static_dashboard.py

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Create GitHub Pages site
      run: |
        mkdir -p gh-pages
        
        # Copy static assets
        cp -r src/pynomaly/presentation/web/static/* gh-pages/
        
        # Copy generated dashboard
        cp -r static_dashboard/* gh-pages/ 2>/dev/null || true
        
        # Create index.html
        cp docs/github-pages/index.html gh-pages/index.html
        
        # Copy documentation
        mkdir -p gh-pages/docs
        cp -r docs/api gh-pages/docs/
        cp -r docs/deployment gh-pages/docs/
        cp -r docs/user-guide gh-pages/docs/
        
        # Copy artifacts and examples
        mkdir -p gh-pages/artifacts
        cp -r artifacts/* gh-pages/artifacts/ 2>/dev/null || true
        
        # Copy example configurations
        mkdir -p gh-pages/examples
        cp -r examples/* gh-pages/examples/ 2>/dev/null || true

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./gh-pages

  # =============================================================================
  # DEPLOY TO GITHUB PAGES
  # =============================================================================
  deploy:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # =============================================================================
  # POST-DEPLOYMENT VERIFICATION
  # =============================================================================
  verify:
    name: Verify Deployment
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Wait for deployment
      run: sleep 60

    - name: Verify GitHub Pages site
      run: |
        echo "Verifying GitHub Pages deployment..."
        
        # Get the deployed URL
        PAGES_URL="${{ needs.deploy.outputs.page_url }}"
        echo "Testing: $PAGES_URL"
        
        # Basic connectivity test
        curl -f -s "$PAGES_URL" > /dev/null || exit 1
        
        # Test dashboard endpoint
        curl -f -s "$PAGES_URL/dashboard.html" > /dev/null || echo "Dashboard not found (expected)"
        
        # Test API docs
        curl -f -s "$PAGES_URL/docs/api/" > /dev/null || echo "API docs not found"
        
        echo "âœ… GitHub Pages deployment verified successfully"

    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli
        
        # Run Lighthouse CI against deployed site
        lhci autorun --upload.target=temporary-public-storage || echo "Lighthouse CI completed with warnings"

    - name: Generate deployment report
      run: |
        echo "# ðŸš€ GitHub Pages Deployment Report" > deployment-report.md
        echo "" >> deployment-report.md
        echo "**Deployment Date:** $(date)" >> deployment-report.md
        echo "**Commit:** ${{ github.sha }}" >> deployment-report.md
        echo "**Pages URL:** ${{ needs.deploy.outputs.page_url }}" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "## âœ… Deployment Status: SUCCESS" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "### Available Resources:" >> deployment-report.md
        echo "- ðŸ“Š Interactive Dashboard: [View Dashboard](${{ needs.deploy.outputs.page_url }}/dashboard.html)" >> deployment-report.md
        echo "- ðŸ“– API Documentation: [View API Docs](${{ needs.deploy.outputs.page_url }}/docs/api/)" >> deployment-report.md
        echo "- ðŸŽ¯ User Guide: [View User Guide](${{ needs.deploy.outputs.page_url }}/docs/user-guide/)" >> deployment-report.md
        echo "- ðŸ”§ Examples: [View Examples](${{ needs.deploy.outputs.page_url }}/examples/)" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "### Performance Metrics:" >> deployment-report.md
        echo "- Build time: ${{ github.event.head_commit.timestamp }}" >> deployment-report.md
        echo "- Total build artifacts: $(du -sh gh-pages 2>/dev/null || echo 'N/A')" >> deployment-report.md

    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: github-pages-deployment-report
        path: deployment-report.md
        retention-days: 30

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('deployment-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ðŸš€ GitHub Pages Preview\n\n${report}\n\n**Preview URL:** ${{ needs.deploy.outputs.page_url }}`
          });
