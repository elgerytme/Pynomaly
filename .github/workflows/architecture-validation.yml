name: Architecture Validation

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'src/packages/**'
      - '.github/ARCHITECTURE_RULES.yml'
      - 'scripts/validate_architecture.py'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/packages/**'
      - '.github/ARCHITECTURE_RULES.yml'
      - 'scripts/validate_architecture.py'

jobs:
  validate-architecture:
    runs-on: ubuntu-latest
    name: Validate Enterprise vs Domain Architecture
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml
        # Try to install tomllib for Python < 3.11
        pip install tomli || echo "tomli not needed for Python >= 3.11"
    
    - name: Validate Architecture Rules
      run: |
        echo "üèóÔ∏è Validating Enterprise vs Domain Architecture..."
        python scripts/validate_architecture.py
      
    - name: Check Forbidden Directories
      run: |
        echo "üìÅ Checking for obsolete enterprise packages..."
        python scripts/validate_architecture.py --check-directories
    
    - name: Check Import Restrictions  
      run: |
        echo "üì¶ Checking import restrictions..."
        python scripts/validate_architecture.py --check-imports
    
    - name: Check Dependency Restrictions
      run: |
        echo "üîó Checking dependency restrictions..."
        python scripts/validate_architecture.py --check-dependencies
    
    - name: Architecture Report
      if: failure()
      run: |
        echo "‚ùå Architecture validation failed!"
        echo ""
        echo "The configuration-based architecture requires:"
        echo "‚úÖ Core packages = Domain logic ONLY"
        echo "‚úÖ Enterprise packages = Cross-cutting concerns ONLY"  
        echo "‚úÖ Integration packages = Platform connectors ONLY"
        echo "‚úÖ Configuration packages = Composition ONLY"
        echo ""
        echo "üìñ See .github/ARCHITECTURE_RULES.yml for detailed rules"
        echo "üìö See src/packages/ARCHITECTURE.md for architecture guide"
        echo ""
        echo "üö´ Common violations:"
        echo "   - Domain logic in enterprise packages"
        echo "   - Platform integrations in enterprise packages"
        echo "   - Enterprise logic in core packages"
        echo "   - Mixed concerns in packages"

  check-obsolete-packages:
    runs-on: ubuntu-latest
    name: Check for Obsolete Packages
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for obsolete enterprise packages
      run: |
        echo "üîç Checking for obsolete enterprise packages that violate architecture..."
        
        OBSOLETE_FOUND=false
        
        # Check for enterprise_mlops
        if [ -d "src/packages/enterprise/enterprise_mlops" ]; then
          echo "‚ùå Found obsolete package: src/packages/enterprise/enterprise_mlops/"
          echo "   This should be removed - MLOps integrations belong in src/packages/integrations/mlops/"
          OBSOLETE_FOUND=true
        fi
        
        # Check for enterprise_data_platforms  
        if [ -d "src/packages/enterprise/enterprise_data_platforms" ]; then
          echo "‚ùå Found obsolete package: src/packages/enterprise/enterprise_data_platforms/"
          echo "   This should be removed - Data monorepo integrations belong in src/packages/integrations/"
          OBSOLETE_FOUND=true
        fi
        
        # Check for other mixed-concern packages
        for dir in src/packages/enterprise/enterprise_*/; do
          if [ -d "$dir" ]; then
            dirname=$(basename "$dir")
            if [[ "$dirname" == enterprise_* ]]; then
              echo "‚ö†Ô∏è  Potential obsolete package: $dir"
              echo "   Enterprise packages should contain cross-cutting concerns, not domain-specific logic"
              OBSOLETE_FOUND=true
            fi
          fi
        done
        
        if [ "$OBSOLETE_FOUND" = true ]; then
          echo ""
          echo "üèóÔ∏è Architecture Fix Required:"
          echo "   1. Move monorepo integrations to src/packages/integrations/"
          echo "   2. Move domain logic to src/packages/core/"
          echo "   3. Keep only cross-cutting concerns in src/packages/enterprise/"
          echo "   4. Use src/packages/configurations/ to compose services"
          echo ""
          echo "üìö See src/packages/ARCHITECTURE.md for guidance"
          exit 1
        else
          echo "‚úÖ No obsolete enterprise packages found"
        fi

  architecture-documentation:
    runs-on: ubuntu-latest  
    name: Check Architecture Documentation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check required documentation
      run: |
        echo "üìö Checking architecture documentation..."
        
        MISSING_DOCS=false
        
        # Check for architecture guide
        if [ ! -f "src/packages/ARCHITECTURE.md" ]; then
          echo "‚ùå Missing: src/packages/ARCHITECTURE.md"
          MISSING_DOCS=true
        fi
        
        # Check for architecture rules
        if [ ! -f ".github/ARCHITECTURE_RULES.yml" ]; then
          echo "‚ùå Missing: .github/ARCHITECTURE_RULES.yml"
          MISSING_DOCS=true
        fi
        
        # Check for configuration examples
        if [ ! -d "src/packages/configurations" ]; then
          echo "‚ùå Missing: src/packages/configurations/"
          MISSING_DOCS=true
        fi
        
        if [ "$MISSING_DOCS" = true ]; then
          echo ""
          echo "üìñ Required architecture documentation is missing"
          echo "   The configuration-based architecture requires proper documentation"
          exit 1
        else
          echo "‚úÖ All required architecture documentation present"
        fi