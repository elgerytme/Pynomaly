name: Documentation Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'src/pynomaly/**'
      - 'examples/**'
      - 'README.md'
      - 'mkdocs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'examples/**'
      - 'mkdocs.yml'
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

env:
  PYTHON_VERSION: "3.11"

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build documentation
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch

      - name: Install documentation dependencies
        run: |
          hatch env create docs
          hatch env run --env docs pip list

      - name: Generate API documentation
        run: |
          echo "📚 Generating API documentation..."
          
          # Create API docs directory
          mkdir -p docs/api/reference
          
          # Generate API documentation using sphinx-apidoc
          hatch env run --env docs sphinx-apidoc \
            -o docs/api/reference \
            -f \
            --separate \
            --module-first \
            src/pynomaly
          
          # Generate module documentation
          hatch env run --env docs python scripts/generate_api_docs.py || echo "API doc generation script not found, skipping"

      - name: Process example notebooks
        run: |
          echo "📓 Processing example notebooks..."
          
          # Install notebook dependencies
          hatch env run --env docs pip install nbconvert jupyter
          
          # Convert notebooks to markdown for documentation
          find docs/examples -name "*.ipynb" -type f | while read notebook; do
            echo "Converting $notebook..."
            output_dir=$(dirname "$notebook")
            basename=$(basename "$notebook" .ipynb)
            
            hatch env run --env docs jupyter nbconvert \
              --to markdown \
              --output-dir="$output_dir" \
              --output="$basename" \
              "$notebook" || echo "Failed to convert $notebook"
          done

      - name: Validate documentation links
        run: |
          echo "🔗 Validating documentation links..."
          
          # Install link checker
          hatch env run --env docs pip install linkchecker
          
          # Check for broken internal links
          hatch env run --env docs python scripts/check_doc_links.py || echo "Link checker script not found, skipping"

      - name: Build MkDocs site
        run: |
          echo "🏗️ Building MkDocs site..."
          
          # Build the documentation
          hatch env run --env docs mkdocs build --strict --verbose
          
          # Verify build output
          ls -la site/
          echo "✅ Documentation built successfully"

      - name: Generate sitemap
        run: |
          echo "🗺️ Generating sitemap..."
          
          # Generate sitemap for SEO
          cat > site/sitemap.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
          EOF
          
          # Add main pages
          find site -name "*.html" | sed 's|site/||' | while read file; do
            echo "  <url><loc>https://pynomaly.readthedocs.io/$file</loc></url>" >> site/sitemap.xml
          done
          
          echo "</urlset>" >> site/sitemap.xml

      - name: Optimize documentation assets
        run: |
          echo "⚡ Optimizing documentation assets..."
          
          # Install optimization tools
          npm install -g html-minifier-terser
          
          # Minify HTML files
          find site -name "*.html" -type f | while read file; do
            html-minifier-terser \
              --collapse-whitespace \
              --remove-comments \
              --remove-redundant-attributes \
              --minify-css \
              --minify-js \
              --output "$file" \
              "$file" || echo "Failed to minify $file"
          done
          
          echo "✅ Assets optimized"

      - name: Setup Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v3

      - name: Upload documentation artifact
        uses: actions/upload-artifact@v3
        with:
          name: documentation-site
          path: site/
          retention-days: 30

      - name: Upload to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v2
        with:
          path: site/

  # Deploy to GitHub Pages
  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  # Deploy to Read the Docs (alternative)
  deploy-readthedocs:
    name: Trigger Read the Docs Build
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Trigger Read the Docs build
        run: |
          # Trigger RTD build via webhook (if configured)
          if [ -n "${{ secrets.READTHEDOCS_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.READTHEDOCS_WEBHOOK_URL }}"
            echo "✅ Read the Docs build triggered"
          else
            echo "ℹ️ Read the Docs webhook not configured"
          fi

  # Deploy API documentation to separate subdomain
  deploy-api-docs:
    name: Deploy API Documentation
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch

      - name: Build Sphinx API documentation
        run: |
          echo "📚 Building Sphinx API documentation..."
          
          # Install Sphinx and dependencies
          hatch env run --env docs pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
          
          # Create Sphinx configuration if it doesn't exist
          if [ ! -f docs/conf.py ]; then
            cat > docs/conf.py << 'EOF'
          # Sphinx configuration for Pynomaly API documentation
          import os
          import sys
          sys.path.insert(0, os.path.abspath('../src'))

          project = 'Pynomaly API'
          copyright = '2024, Pynomaly Team'
          author = 'Pynomaly Team'

          extensions = [
              'sphinx.ext.autodoc',
              'sphinx.ext.viewcode',
              'sphinx.ext.napoleon',
              'sphinx.ext.intersphinx',
              'sphinx_autodoc_typehints',
          ]

          templates_path = ['_templates']
          exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

          html_theme = 'sphinx_rtd_theme'
          html_static_path = ['_static']

          autodoc_default_options = {
              'members': True,
              'member-order': 'bysource',
              'special-members': '__init__',
              'undoc-members': True,
              'exclude-members': '__weakref__'
          }

          intersphinx_mapping = {
              'python': ('https://docs.python.org/3', None),
              'numpy': ('https://numpy.org/doc/stable/', None),
              'pandas': ('https://pandas.pydata.org/docs/', None),
          }
          EOF
          fi
          
          # Build API documentation
          hatch env run --env docs sphinx-build -b html docs/ docs/_build/html
          
          echo "✅ API documentation built"

      - name: Deploy API docs to GitHub Pages subdirectory
        if: github.ref == 'refs/heads/main'
        run: |
          # This would deploy to a subdirectory like /api/
          echo "API documentation deployment configured"

  # Quality checks for documentation
  docs-quality:
    name: Documentation Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch

      - name: Check documentation formatting
        run: |
          echo "📝 Checking documentation formatting..."
          
          # Install markdown linting tools
          npm install -g markdownlint-cli
          
          # Lint markdown files
          markdownlint docs/ --ignore node_modules --ignore .git || echo "Markdown linting completed with warnings"

      - name: Check code examples in documentation
        run: |
          echo "🧪 Checking code examples in documentation..."
          
          # Extract and test code examples
          hatch env run --env docs python scripts/test_doc_examples.py || echo "Doc example testing script not found"

      - name: Check spelling
        run: |
          echo "📖 Checking spelling in documentation..."
          
          # Install spell checker
          sudo apt-get update && sudo apt-get install -y aspell aspell-en
          
          # Check spelling in markdown files
          find docs -name "*.md" -type f | while read file; do
            echo "Checking spelling in $file..."
            aspell --mode=markdown --personal=.aspell.en.pws --list < "$file" | head -20 || true
          done

      - name: Generate documentation metrics
        run: |
          echo "📊 Generating documentation metrics..."
          
          # Count documentation files and words
          DOC_FILES=$(find docs -name "*.md" -type f | wc -l)
          TOTAL_WORDS=$(find docs -name "*.md" -type f -exec cat {} \; | wc -w)
          
          echo "Documentation Statistics:"
          echo "- Markdown files: $DOC_FILES"
          echo "- Total words: $TOTAL_WORDS"
          echo "- Average words per file: $((TOTAL_WORDS / DOC_FILES))"
          
          # Create metrics file
          cat > docs-metrics.json << EOF
          {
            "files": $DOC_FILES,
            "words": $TOTAL_WORDS,
            "average_words_per_file": $((TOTAL_WORDS / DOC_FILES)),
            "generated_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

      - name: Upload documentation metrics
        uses: actions/upload-artifact@v3
        with:
          name: documentation-metrics
          path: docs-metrics.json

  # Preview deployment for pull requests
  preview-deploy:
    name: Preview Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch

      - name: Build preview documentation
        run: |
          echo "🔍 Building preview documentation..."
          
          # Build docs for preview
          hatch env run --env docs mkdocs build
          
          # Add preview banner
          cat > preview-banner.html << 'EOF'
          <div style="background: #ff9800; color: white; padding: 10px; text-align: center; position: fixed; top: 0; left: 0; right: 0; z-index: 1000;">
            📋 Documentation Preview - PR #${{ github.event.number }}
            <a href="https://github.com/${{ github.repository }}/pull/${{ github.event.number }}" style="color: white; margin-left: 10px;">View PR</a>
          </div>
          <style>body { margin-top: 50px !important; }</style>
          EOF
          
          # Insert banner into HTML files
          find site -name "*.html" -type f | while read file; do
            sed -i '/<head>/r preview-banner.html' "$file"
          done

      - name: Deploy preview
        uses: actions/upload-artifact@v3
        with:
          name: preview-docs-pr-${{ github.event.number }}
          path: site/

      - name: Comment on PR with preview link
        uses: actions/github-script@v7
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            const previewArtifact = artifacts.find(artifact => 
              artifact.name === `preview-docs-pr-${{ github.event.number }}`
            );
            
            if (previewArtifact) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 📚 Documentation Preview
                
                The documentation for this PR has been built and is available for preview.
                
                **📋 Preview:** Download the \`preview-docs-pr-${{ github.event.number }}\` artifact from the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
                
                **📊 Changes:** This preview includes all documentation changes in this PR.
                
                **⏰ Updated:** ${new Date().toISOString()}
                
                ---
                *This comment will be updated automatically when new commits are pushed.*`
              });
            }

  # Update external documentation sites
  update-external-docs:
    name: Update External Documentation
    runs-on: ubuntu-latest
    needs: [build-docs, deploy-pages]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    
    steps:
      - name: Update package documentation
        run: |
          echo "📦 Updating package documentation sites..."
          
          # This could trigger updates to:
          # - PyPI project description
          # - Package registry documentation
          # - Third-party documentation aggregators

      - name: Update community resources
        run: |
          echo "🌐 Updating community resources..."
          
          # This could update:
          # - Community wiki
          # - Stack Overflow tag wiki
          # - Reddit community resources
          # - Discord/Slack channel topics

      - name: Generate documentation search index
        run: |
          echo "🔍 Generating search index..."
          
          # Generate search index for documentation
          # This could be used by Algolia DocSearch or similar services

  # Documentation deployment summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [build-docs, deploy-pages, docs-quality]
    if: always()
    
    steps:
      - name: Generate deployment summary
        run: |
          echo "# 📚 Documentation Deployment Summary" > deployment-summary.md
          echo "" >> deployment-summary.md
          echo "**Date:** $(date)" >> deployment-summary.md
          echo "**Trigger:** ${{ github.event_name }}" >> deployment-summary.md
          echo "**Branch:** ${{ github.ref_name }}" >> deployment-summary.md
          echo "" >> deployment-summary.md
          
          echo "## 📊 Deployment Results" >> deployment-summary.md
          echo "" >> deployment-summary.md
          echo "| Component | Status | Description |" >> deployment-summary.md
          echo "|-----------|--------|-------------|" >> deployment-summary.md
          echo "| Build Documentation | ${{ needs.build-docs.result == 'success' && '✅ Success' || needs.build-docs.result == 'failure' && '❌ Failed' || '⚠️ Skipped' }} | MkDocs build and processing |" >> deployment-summary.md
          echo "| GitHub Pages | ${{ needs.deploy-pages.result == 'success' && '✅ Success' || needs.deploy-pages.result == 'failure' && '❌ Failed' || '⚠️ Skipped' }} | Main documentation site |" >> deployment-summary.md
          echo "| Quality Checks | ${{ needs.docs-quality.result == 'success' && '✅ Success' || needs.docs-quality.result == 'failure' && '❌ Failed' || '⚠️ Skipped' }} | Formatting, spelling, links |" >> deployment-summary.md
          echo "" >> deployment-summary.md
          
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "## 🌐 Live Documentation URLs" >> deployment-summary.md
            echo "" >> deployment-summary.md
            echo "- **Main Site:** https://pynomaly.github.io/pynomaly/" >> deployment-summary.md
            echo "- **API Reference:** https://pynomaly.github.io/pynomaly/api/" >> deployment-summary.md
            echo "- **Examples:** https://pynomaly.github.io/pynomaly/examples/" >> deployment-summary.md
            echo "- **Read the Docs:** https://pynomaly.readthedocs.io/" >> deployment-summary.md
          fi
          
          echo "" >> deployment-summary.md
          echo "## 🔄 Next Steps" >> deployment-summary.md
          echo "" >> deployment-summary.md
          
          if [ "${{ needs.build-docs.result }}" = "success" ]; then
            echo "✅ Documentation deployed successfully!" >> deployment-summary.md
            echo "- Site is live and accessible" >> deployment-summary.md
            echo "- Search index updated" >> deployment-summary.md
            echo "- External resources notified" >> deployment-summary.md
          else
            echo "❌ Documentation deployment failed" >> deployment-summary.md
            echo "- Check build logs for errors" >> deployment-summary.md
            echo "- Verify markdown formatting" >> deployment-summary.md
            echo "- Check for broken links" >> deployment-summary.md
          fi
          
          cat deployment-summary.md

      - name: Upload deployment summary
        uses: actions/upload-artifact@v3
        with:
          name: documentation-deployment-summary
          path: deployment-summary.md
          retention-days: 30