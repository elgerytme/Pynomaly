name: Scheduled Maintenance

on:
  schedule:
    # Run every Monday at 3:00 AM UTC
    - cron: "0 3 * * MON"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  security-events: write
  actions: read

env:
  PYTHON_VERSION: "3.11"

jobs:
  validate:
    name: Structure Validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install rich typer bandit[toml]

    - name: Run structure validator
      run: |
        python scripts/validation/validate_structure.py
      continue-on-error: true
      id: structure-validation

    - name: Run Bandit security scan for SARIF
      run: |
        mkdir -p reports/security
        bandit -r src/ -f sarif -o reports/security/bandit-sarif.json || true
        bandit -r src/ -f json -o reports/security/bandit-report.json || true
        bandit -r src/ -f txt -o reports/security/bandit-report.txt || true

    - name: Upload SARIF to GitHub Security Tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: reports/security/bandit-sarif.json

    - name: Upload validation reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: validation-reports-py${{ matrix.python-version }}
        path: |
          reports/
          structure_validation.json
        retention-days: 30

    - name: Check validation results
      if: always()
      run: |
        if [ "${{ steps.structure-validation.outcome }}" != "success" ]; then
          echo "‚ùå Structure validation failed"
          exit 1
        else
          echo "‚úÖ Structure validation passed"
        fi

  cleanup:
    name: Repository Cleanup
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
      fail-fast: false

    steps:
    - name: Checkout code with write token
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install rich typer

    - name: Configure git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

    - name: Run scheduled cleanup
      run: |
        python scripts/maintenance/schedule_cleanup.py --execute --verbose
      continue-on-error: true
      id: cleanup-execution

    - name: Upload cleanup reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cleanup-reports-py${{ matrix.python-version }}
        path: |
          reports/quality/scheduled_cleanup_report.json
        retention-days: 30

    - name: Check cleanup results
      if: always()
      run: |
        if [ "${{ steps.cleanup-execution.outcome }}" != "success" ]; then
          echo "‚ö†Ô∏è Cleanup execution had issues, but continuing..."
        else
          echo "‚úÖ Cleanup execution completed successfully"
        fi

  maintenance-summary:
    name: Maintenance Summary
    runs-on: ubuntu-latest
    needs: [validate, cleanup]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate maintenance summary
      run: |
        mkdir -p reports/maintenance
        
        echo "# üîß Scheduled Maintenance Summary" > reports/maintenance/maintenance-summary.md
        echo "" >> reports/maintenance/maintenance-summary.md
        echo "**Date:** $(date)" >> reports/maintenance/maintenance-summary.md
        echo "**Workflow:** Scheduled Maintenance" >> reports/maintenance/maintenance-summary.md
        echo "**Trigger:** ${{ github.event_name }}" >> reports/maintenance/maintenance-summary.md
        echo "" >> reports/maintenance/maintenance-summary.md
        
        echo "## üìä Job Results" >> reports/maintenance/maintenance-summary.md
        echo "" >> reports/maintenance/maintenance-summary.md
        echo "| Job | Status | Description |" >> reports/maintenance/maintenance-summary.md
        echo "|-----|--------|-------------|" >> reports/maintenance/maintenance-summary.md
        echo "| Structure Validation | ${{ needs.validate.result == 'success' && '‚úÖ Passed' || needs.validate.result == 'failure' && '‚ùå Failed' || '‚ö†Ô∏è Skipped' }} | Validates project structure and runs security scan |" >> reports/maintenance/maintenance-summary.md
        echo "| Repository Cleanup | ${{ needs.cleanup.result == 'success' && '‚úÖ Passed' || needs.cleanup.result == 'failure' && '‚ùå Failed' || '‚ö†Ô∏è Skipped' }} | Automated cleanup with PR creation |" >> reports/maintenance/maintenance-summary.md
        echo "" >> reports/maintenance/maintenance-summary.md
        
        # Overall status
        if [[ "${{ needs.validate.result }}" == "success" ]]; then
          echo "## üéâ Overall Status: **SUCCESS**" >> reports/maintenance/maintenance-summary.md
          echo "" >> reports/maintenance/maintenance-summary.md
          echo "‚úÖ All maintenance tasks completed successfully!" >> reports/maintenance/maintenance-summary.md
          echo "" >> reports/maintenance/maintenance-summary.md
          echo "### Tasks Completed:" >> reports/maintenance/maintenance-summary.md
          echo "- ‚úÖ Structure validation passed" >> reports/maintenance/maintenance-summary.md
          echo "- ‚úÖ Security scan uploaded to GitHub Security tab" >> reports/maintenance/maintenance-summary.md
          if [[ "${{ needs.cleanup.result }}" == "success" ]]; then
            echo "- ‚úÖ Repository cleanup completed" >> reports/maintenance/maintenance-summary.md
          else
            echo "- ‚ö†Ô∏è Repository cleanup had issues (check logs)" >> reports/maintenance/maintenance-summary.md
          fi
        else
          echo "## ‚ùå Overall Status: **FAILED**" >> reports/maintenance/maintenance-summary.md
          echo "" >> reports/maintenance/maintenance-summary.md
          echo "Some maintenance tasks failed. Please review the logs." >> reports/maintenance/maintenance-summary.md
          echo "" >> reports/maintenance/maintenance-summary.md
          echo "### Issues:" >> reports/maintenance/maintenance-summary.md
          echo "- ‚ùå Structure validation failed" >> reports/maintenance/maintenance-summary.md
          echo "- Please check the validation reports for details" >> reports/maintenance/maintenance-summary.md
        fi
        
        echo "" >> reports/maintenance/maintenance-summary.md
        echo "## üõ†Ô∏è Maintenance Tasks" >> reports/maintenance/maintenance-summary.md
        echo "" >> reports/maintenance/maintenance-summary.md
        echo "This workflow performs the following maintenance tasks:" >> reports/maintenance/maintenance-summary.md
        echo "" >> reports/maintenance/maintenance-summary.md
        echo "### 1. Structure Validation" >> reports/maintenance/maintenance-summary.md
        echo "- Validates project structure against FILE_ORGANIZATION_STANDARDS" >> reports/maintenance/maintenance-summary.md
        echo "- Runs security scan with Bandit" >> reports/maintenance/maintenance-summary.md
        echo "- Uploads SARIF results to GitHub Security tab" >> reports/maintenance/maintenance-summary.md
        echo "- Fails if structure violations are found" >> reports/maintenance/maintenance-summary.md
        echo "" >> reports/maintenance/maintenance-summary.md
        echo "### 2. Repository Cleanup" >> reports/maintenance/maintenance-summary.md
        echo "- Removes temporary files and cache directories" >> reports/maintenance/maintenance-summary.md
        echo "- Cleans up log files and IDE artifacts" >> reports/maintenance/maintenance-summary.md
        echo "- Removes test artifacts and build outputs" >> reports/maintenance/maintenance-summary.md
        echo "- Creates PR if files were moved/deleted" >> reports/maintenance/maintenance-summary.md
        echo "" >> reports/maintenance/maintenance-summary.md
        echo "### 3. Python Matrix Support" >> reports/maintenance/maintenance-summary.md
        echo "- Tests against Python 3.11 and 3.12" >> reports/maintenance/maintenance-summary.md
        echo "- Ensures consistency across Python versions" >> reports/maintenance/maintenance-summary.md
        echo "" >> reports/maintenance/maintenance-summary.md
        echo "---" >> reports/maintenance/maintenance-summary.md
        echo "*Auto-generated by GitHub Actions*" >> reports/maintenance/maintenance-summary.md

    - name: Upload maintenance summary
      uses: actions/upload-artifact@v4
      with:
        name: maintenance-summary
        path: reports/maintenance/
        retention-days: 90

    - name: Set final status
      run: |
        if [[ "${{ needs.validate.result }}" == "success" ]]; then
          echo "‚úÖ Scheduled maintenance completed successfully"
          exit 0
        else
          echo "‚ùå Scheduled maintenance failed - structure validation did not pass"
          exit 1
        fi
