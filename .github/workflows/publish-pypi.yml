name: 📦 Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for publication'
        required: true
        default: 'testpypi'
        type: choice
        options:
        - testpypi
        - pypi
      version_override:
        description: 'Override version (optional, uses git tag by default)'
        required: false
        type: string

env:
  PYTHON_VERSION: "3.11"

jobs:
  validate:
    name: 🔍 Pre-publication Validation
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_publish: ${{ steps.checks.outputs.should_publish }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: ⚡ Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install hatch
        
    - name: 🔢 Get package version
      id: version
      run: |
        if [[ -n "${{ github.event.inputs.version_override }}" ]]; then
          echo "version=${{ github.event.inputs.version_override }}" >> $GITHUB_OUTPUT
        else
          VERSION=$(hatch version)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
        fi
        echo "📦 Package version: ${VERSION}"
        
    - name: 🧪 Run core tests
      run: |
        pip install -e ".[test]"
        python -m pytest src/pynomaly/tests/test_basic_coverage.py -v
        
    - name: 🏗️ Test package build
      run: |
        hatch build --clean
        ls -la dist/
        
    - name: ✅ Validate package metadata
      run: |
        pip install twine
        twine check dist/*
        
    - name: 🎯 Pre-publication checks
      id: checks
      run: |
        # Check if this is a development version
        VERSION="${{ steps.version.outputs.version }}"
        if [[ "$VERSION" == *"dev"* ]] && [[ "${{ github.event.inputs.environment }}" == "pypi" ]]; then
          echo "❌ Cannot publish development version to PyPI"
          echo "should_publish=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Check if we have necessary secrets
        if [[ "${{ github.event.inputs.environment }}" == "pypi" ]] && [[ -z "${{ secrets.PYPI_API_TOKEN }}" ]]; then
          echo "❌ PYPI_API_TOKEN secret not configured"
          echo "should_publish=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        if [[ "${{ github.event.inputs.environment }}" == "testpypi" ]] && [[ -z "${{ secrets.TESTPYPI_API_TOKEN }}" ]]; then
          echo "❌ TESTPYPI_API_TOKEN secret not configured"
          echo "should_publish=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "✅ All pre-publication checks passed"
        echo "should_publish=true" >> $GITHUB_OUTPUT

  build:
    name: 🏗️ Build Package
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_publish == 'true'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: ⚡ Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install hatch
        
    - name: 🏗️ Build package
      run: |
        echo "📦 Building package version: ${{ needs.validate.outputs.version }}"
        hatch build --clean
        
    - name: 📊 Package information
      run: |
        echo "📦 Built packages:"
        ls -la dist/
        echo
        echo "📋 Package contents:"
        for file in dist/*.whl; do
          echo "Contents of $file:"
          python -m zipfile -l "$file" | head -20
          echo "..."
        done
        
    - name: 💾 Store package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package-dist
        path: dist/
        retention-days: 30

  publish:
    name: 🚀 Publish Package
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: needs.validate.outputs.should_publish == 'true'
    
    environment: ${{ github.event.inputs.environment || 'pypi' }}
    
    steps:
    - name: 📥 Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: package-dist
        path: dist/
        
    - name: 🚀 Publish to TestPyPI
      if: github.event.inputs.environment == 'testpypi'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TESTPYPI_API_TOKEN }}
        print-hash: true
        
    - name: 🚀 Publish to PyPI
      if: github.event.inputs.environment == 'pypi' || github.event_name == 'release'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        print-hash: true
        
    - name: 📢 Publication summary
      run: |
        TARGET="${{ github.event.inputs.environment || 'pypi' }}"
        VERSION="${{ needs.validate.outputs.version }}"
        
        echo "🎉 Successfully published pynomaly v${VERSION} to ${TARGET}!"
        echo
        if [[ "$TARGET" == "testpypi" ]]; then
          echo "📦 TestPyPI Package: https://test.pypi.org/project/pynomaly/${VERSION}/"
          echo "📥 Install with: pip install -i https://test.pypi.org/simple/ pynomaly==${VERSION}"
        else
          echo "📦 PyPI Package: https://pypi.org/project/pynomaly/${VERSION}/"
          echo "📥 Install with: pip install pynomaly==${VERSION}"
        fi

  verify:
    name: ✅ Verify Publication
    runs-on: ubuntu-latest
    needs: [validate, publish]
    if: needs.validate.outputs.should_publish == 'true'
    
    steps:
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: ⏳ Wait for package availability
      run: |
        echo "⏳ Waiting for package to become available..."
        sleep 60  # Give PyPI time to process the upload
        
    - name: 📥 Test installation from PyPI
      run: |
        TARGET="${{ github.event.inputs.environment || 'pypi' }}"
        VERSION="${{ needs.validate.outputs.version }}"
        
        if [[ "$TARGET" == "testpypi" ]]; then
          pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ "pynomaly==${VERSION}"
        else
          pip install "pynomaly==${VERSION}"
        fi
        
    - name: 🧪 Test core functionality
      run: |
        python -c "
        import pynomaly
        print(f'✅ Pynomaly version: {pynomaly.__version__}')
        
        # Test core imports
        from pynomaly import create_detector, load_dataset, detect_anomalies
        print('✅ Core functions imported successfully')
        
        # Test basic functionality
        import numpy as np
        import pandas as pd
        
        # Create sample data
        data = pd.DataFrame({
            'feature1': np.random.normal(0, 1, 100),
            'feature2': np.random.normal(0, 1, 100)
        })
        
        # Add a few outliers
        data.loc[95:99, :] = np.random.normal(5, 1, (5, 2))
        
        # Test workflow
        dataset = load_dataset('test', data)
        detector = create_detector('IsolationForest', contamination_rate=0.1)
        result = detect_anomalies(dataset, detector)
        
        print(f'✅ Detected {result.n_anomalies} anomalies out of {len(data)} samples')
        print('🎉 Core functionality test passed!')
        "
        
    - name: 🎉 Verification complete
      run: |
        echo "✅ Package verification completed successfully!"
        echo "🚀 Pynomaly ${{ needs.validate.outputs.version }} is now available for use!"