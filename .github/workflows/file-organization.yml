name: File Organization Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  file-organization:
    name: Validate File Organization
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit
    
    - name: Analyze Project Structure
      id: analyze
      run: |
        python scripts/analyze_project_structure.py
        echo "analysis_completed=true" >> $GITHUB_OUTPUT
      continue-on-error: true
    
    - name: Validate File Organization
      id: validate
      run: |
        python scripts/validate_file_organization.py
        echo "validation_passed=$?" >> $GITHUB_OUTPUT
      continue-on-error: true
    
    - name: Detect Stray Files
      id: detect
      run: |
        python scripts/detect_stray_files.py
        echo "stray_files_found=$?" >> $GITHUB_OUTPUT
      continue-on-error: true
    
    - name: Generate Organization Plan
      if: steps.validate.outputs.validation_passed != '0' || steps.detect.outputs.stray_files_found != '0'
      run: |
        python scripts/organize_files.py --output reports/organization_plan.json
        echo "Organization plan generated"
    
    - name: Upload Organization Reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: file-organization-reports
        path: |
          reports/project_structure_analysis.json
          reports/file_organization_validation.json
          reports/stray_files_detection.json
          reports/organization_plan.json
        retention-days: 30
    
    - name: Comment on PR (Organization Issues)
      if: github.event_name == 'pull_request' && (steps.validate.outputs.validation_passed != '0' || steps.detect.outputs.stray_files_found != '0')
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read validation results
          let validationReport = {};
          let strayFilesReport = {};
          
          try {
            validationReport = JSON.parse(fs.readFileSync('reports/file_organization_validation.json', 'utf8'));
          } catch (e) {
            console.log('No validation report found');
          }
          
          try {
            strayFilesReport = JSON.parse(fs.readFileSync('reports/stray_files_detection.json', 'utf8'));
          } catch (e) {
            console.log('No stray files report found');
          }
          
          // Generate comment
          let comment = '## 🚨 File Organization Issues Detected\n\n';
          
          if (!validationReport.is_valid) {
            comment += '### ❌ Organization Validation Failed\n\n';
            if (validationReport.violations) {
              comment += '**Violations found:**\n';
              validationReport.violations.forEach(violation => {
                comment += `- ${violation}\n`;
              });
              comment += '\n';
            }
            
            if (validationReport.suggestions) {
              comment += '**Recommended actions:**\n';
              validationReport.suggestions.slice(0, 10).forEach(suggestion => {
                comment += `- ${suggestion}\n`;
              });
              if (validationReport.suggestions.length > 10) {
                comment += `- ... and ${validationReport.suggestions.length - 10} more actions\n`;
              }
              comment += '\n';
            }
          }
          
          if (strayFilesReport.total_stray > 0) {
            comment += `### ⚠️ ${strayFilesReport.total_stray} Stray Files Detected\n\n`;
            
            if (strayFilesReport.stray_files) {
              const byCategory = {};
              strayFilesReport.stray_files.forEach(file => {
                if (!byCategory[file.category]) byCategory[file.category] = [];
                byCategory[file.category].push(file);
              });
              
              Object.entries(byCategory).forEach(([category, files]) => {
                comment += `**${category}**: ${files.length} files\n`;
                files.slice(0, 3).forEach(file => {
                  comment += `- \`${file.file}\` → ${file.expected_location}\n`;
                });
                if (files.length > 3) {
                  comment += `- ... and ${files.length - 3} more\n`;
                }
                comment += '\n';
              });
            }
            
            if (strayFilesReport.suggestions) {
              comment += '**Quick fixes:**\n';
              strayFilesReport.suggestions.slice(0, 8).forEach(suggestion => {
                comment += `- ${suggestion}\n`;
              });
              if (strayFilesReport.suggestions.length > 8) {
                comment += `- ... and ${strayFilesReport.suggestions.length - 8} more\n`;
              }
              comment += '\n';
            }
          }
          
          comment += '### 🔧 How to Fix\n\n';
          comment += '1. **Automated organization:**\n';
          comment += '   ```bash\n';
          comment += '   # Dry run (preview changes)\n';
          comment += '   python scripts/organize_files.py\n';
          comment += '   \n';
          comment += '   # Execute organization\n';
          comment += '   python scripts/organize_files.py --execute\n';
          comment += '   ```\n\n';
          comment += '2. **Manual organization:** See [File Organization Standards](docs/development/FILE_ORGANIZATION_STANDARDS.md)\n\n';
          comment += '3. **Install pre-commit hooks:**\n';
          comment += '   ```bash\n';
          comment += '   pre-commit install\n';
          comment += '   ```\n\n';
          comment += '---\n';
          comment += '*This check ensures project maintainability and professional structure. ';
          comment += 'Files must be in appropriate directories according to [project standards](docs/development/FILE_ORGANIZATION_STANDARDS.md).*';
          
          // Post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Comment on PR (Success)
      if: github.event_name == 'pull_request' && steps.validate.outputs.validation_passed == '0' && steps.detect.outputs.stray_files_found == '0'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## ✅ File Organization Validation Passed
          
          All files are properly organized according to project standards!
          
          - ✅ No stray files in root directory
          - ✅ All files in appropriate subdirectories
          - ✅ Repository structure complies with standards
          
          Great job maintaining clean project organization! 🎉`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Set Job Status
      if: always()
      run: |
        if [[ "${{ steps.validate.outputs.validation_passed }}" != "0" ]] || [[ "${{ steps.detect.outputs.stray_files_found }}" != "0" ]]; then
          echo "❌ File organization validation failed"
          exit 1
        else
          echo "✅ File organization validation passed"
          exit 0
        fi

  pre-commit-check:
    name: Pre-commit Hooks Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install pre-commit
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit
    
    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files
      continue-on-error: true
      id: precommit
    
    - name: Upload pre-commit results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: pre-commit-results
        path: .pre-commit-config.yaml
        retention-days: 7

  structure-report:
    name: Generate Structure Report
    runs-on: ubuntu-latest
    needs: [file-organization]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Generate Comprehensive Report
      run: |
        mkdir -p reports
        python scripts/analyze_project_structure.py
        
        # Create summary report
        cat > reports/structure_summary.md << 'EOF'
        # Project Structure Analysis Report
        
        **Generated:** $(date)
        **Branch:** ${{ github.ref_name }}
        **Commit:** ${{ github.sha }}
        
        ## Analysis Results
        
        EOF
        
        if [[ -f "reports/project_structure_analysis.json" ]]; then
          echo "Structure analysis completed successfully" >> reports/structure_summary.md
        else
          echo "⚠️ Structure analysis failed" >> reports/structure_summary.md
        fi
        
        echo "" >> reports/structure_summary.md
        echo "See attached JSON files for detailed analysis." >> reports/structure_summary.md
    
    - name: Upload Structure Report
      uses: actions/upload-artifact@v3
      with:
        name: structure-analysis-report
        path: |
          reports/structure_summary.md
          reports/project_structure_analysis.json
        retention-days: 90