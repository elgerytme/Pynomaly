name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.0.0 or v1.0.0-beta"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

      - name: Check changelog
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [ -f CHANGELOG.md ]; then
            if grep -q "$VERSION" CHANGELOG.md; then
              echo "✅ Changelog entry found for $VERSION"
              # Extract changelog section
              CHANGELOG=$(sed -n "/## $VERSION/,/## /p" CHANGELOG.md | sed '$d')
              echo "changelog<<EOF" >> $GITHUB_OUTPUT
              echo "$CHANGELOG" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "❌ No changelog entry found for $VERSION"
              exit 1
            fi
          else
            echo "❌ CHANGELOG.md not found"
            exit 1
          fi

      - name: Run quality checks
        run: |
          echo "Running pre-release quality checks..."
          ruff check .
          black --check .
          mypy src/packages/data/anomaly_detection/src/anomaly_detection

      - name: Run tests
        run: |
          pytest tests/ -v --cov=anomaly_detection --cov-fail-under=80

  build-artifacts:
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/

  build-docker:
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  generate-documentation:
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[docs,api]

      - name: Generate release documentation
        run: |
          # Generate API documentation
          python src/development_scripts/scripts/generate_api_docs.py
          
          # Generate deployment documentation
          python src/development_scripts/scripts/generate_deployment_docs.py
          
          # Create release notes
          VERSION="${{ needs.validate-release.outputs.version }}"
          cat > RELEASE_NOTES.md << EOF
          # Release Notes - $VERSION
          
          ## What's New
          
          ${{ needs.validate-release.outputs.changelog }}
          
          ## Installation
          
          ### Python Package
          \`\`\`bash
          pip install monorepo==${VERSION#v}
          \`\`\`
          
          ### Docker
          \`\`\`bash
          docker pull ghcr.io/${{ github.repository }}:$VERSION
          \`\`\`
          
          ## Documentation
          
          - [API Documentation](https://anomaly_detection.github.io/anomaly_detection/api-docs/)
          - [User Guide](https://anomaly_detection.github.io/anomaly_detection/)
          - [Deployment Guide](https://anomaly_detection.github.io/anomaly_detection/deployment/)
          
          ## Support
          
          - [GitHub Issues](https://github.com/${{ github.repository }}/issues)
          - [Documentation](https://docs.anomaly_detection.com)
          - Email: support@anomaly_detection.com
          EOF

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-documentation
          path: |
            docs/
            RELEASE_NOTES.md

  create-release:
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts, build-docker, generate-documentation]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/

      - name: Download documentation
        uses: actions/download-artifact@v3
        with:
          name: release-documentation
          path: release-docs/

      - name: Create GitHub Release
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: Release ${{ needs.validate-release.outputs.version }}
          body_path: release-docs/RELEASE_NOTES.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}
          files: |
            dist/*
            release-docs/docs/api/generated/openapi.json
            release-docs/docs/api/generated/openapi.yaml
            release-docs/docs/api/generated/anomaly_detection_api.postman_collection.json

  publish-pypi:
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts, create-release]
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && !github.event.inputs.prerelease)
    environment: pypi
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip install twine
          twine upload dist/*

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [create-release, build-docker]
    if: github.event.inputs.prerelease == 'true' || contains(needs.validate-release.outputs.version, 'beta')
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying ${{ needs.validate-release.outputs.version }} to staging..."
          # Add staging deployment logic here
          echo "✅ Deployed to staging successfully"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [create-release, build-docker, publish-pypi]
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && !github.event.inputs.prerelease)
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying ${{ needs.validate-release.outputs.version }} to production..."
          # Add production deployment logic here
          echo "✅ Deployed to production successfully"

  post-release:
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, publish-pypi]
    if: always()
    steps:
      - name: Generate release report
        run: |
          cat > release-report.md << EOF
          # Release Report
          
          **Version:** ${{ needs.validate-release.outputs.version }}
          **Date:** $(date)
          **Status:** ${{ job.status }}
          
          ## Results
          - Validation: ${{ needs.validate-release.result }}
          - Build: ${{ needs.build-artifacts.result }}
          - Docker: ${{ needs.build-docker.result }}
          - Documentation: ${{ needs.generate-documentation.result }}
          - Release: ${{ needs.create-release.result }}
          - PyPI: ${{ needs.publish-pypi.result }}
          
          ## Links
          - [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }})
          - [PyPI Package](https://pypi.org/project/monorepo/)
          - [Docker Image](https://ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }})
          - [Documentation](https://anomaly_detection.github.io/anomaly_detection/)
          EOF
          
          echo "Release report generated:"
          cat release-report.md

      - name: Upload release report
        uses: actions/upload-artifact@v3
        with:
          name: release-report
          path: release-report.md

      - name: Update version tracking
        if: needs.create-release.result == 'success'
        run: |
          echo "Updating version tracking..."
          # Add version tracking logic here
          echo "✅ Version tracking updated"

  notify-completion:
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, publish-pypi, deploy-production, post-release]
    if: always()
    steps:
      - name: Notify completion
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          if [ "${{ needs.create-release.result }}" == "success" ]; then
            echo "🎉 Release $VERSION completed successfully!"
            echo "📦 Package: https://pypi.org/project/monorepo/"
            echo "🐳 Docker: ghcr.io/${{ github.repository }}:$VERSION"
            echo "📖 Docs: https://anomaly_detection.github.io/anomaly_detection/"
            echo "🔗 Release: https://github.com/${{ github.repository }}/releases/tag/$VERSION"
          else
            echo "❌ Release $VERSION failed!"
          fi