name: Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run full test suite daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.6.1'
  PYNOMALY_ENV: testing
  COVERAGE_THRESHOLD_LINE: 80
  COVERAGE_THRESHOLD_BRANCH: 65

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: |
        poetry install --with dev,security

    - name: Run Bandit Security Scan
      run: |
        poetry run bandit -r src/ -f json -o security-report.json
        poetry run bandit -r src/ --severity-level medium

    - name: Run Safety Dependency Check
      run: |
        poetry run safety check --json --output safety-report.json

    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          security-report.json
          safety-report.json

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-group:
          - domain
          - infrastructure-adapters
          - infrastructure-auth
          - application
          - presentation-api
          - presentation-cli

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: |
        poetry install --with dev,test

    - name: Run Unit Tests with Coverage
      run: |
        case "${{ matrix.test-group }}" in
          "domain")
            poetry run pytest tests/domain/ --cov=src/pynomaly/domain --cov-report=xml:coverage-domain.xml --junitxml=junit-domain.xml -v
            ;;
          "infrastructure-adapters")
            poetry run pytest tests/infrastructure/adapters/ --cov=src/pynomaly/infrastructure/adapters --cov-report=xml:coverage-adapters.xml --junitxml=junit-adapters.xml -v
            ;;
          "infrastructure-auth")
            poetry run pytest tests/infrastructure/auth/ tests/security/ --cov=src/pynomaly/infrastructure/auth --cov-report=xml:coverage-auth.xml --junitxml=junit-auth.xml -v
            ;;
          "application")
            poetry run pytest tests/application/ --cov=src/pynomaly/application --cov-report=xml:coverage-application.xml --junitxml=junit-application.xml -v
            ;;
          "presentation-api")
            poetry run pytest tests/presentation/api/ --cov=src/pynomaly/presentation/api --cov-report=xml:coverage-api.xml --junitxml=junit-api.xml -v
            ;;
          "presentation-cli")
            poetry run pytest tests/presentation/cli/ --cov=src/pynomaly/presentation/cli --cov-report=xml:coverage-cli.xml --junitxml=junit-cli.xml -v
            ;;
        esac

    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-${{ matrix.test-group }}
        path: coverage-*.xml

    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: junit-${{ matrix.test-group }}
        path: junit-*.xml

  branch-coverage-tests:
    name: Branch Coverage Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: |
        poetry install --with dev,test

    - name: Run Branch Coverage Tests
      run: |
        poetry run pytest tests/branch_coverage/ \
          --cov=src/pynomaly \
          --cov-branch \
          --cov-report=xml:coverage-branch.xml \
          --cov-report=html:htmlcov-branch \
          --cov-report=term-missing \
          --cov-fail-under=${{ env.COVERAGE_THRESHOLD_BRANCH }} \
          --junitxml=junit-branch.xml \
          -v

    - name: Check Branch Coverage Threshold
      run: |
        poetry run coverage report --show-missing --fail-under=${{ env.COVERAGE_THRESHOLD_BRANCH }}

    - name: Upload Branch Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: branch-coverage-report
        path: |
          coverage-branch.xml
          htmlcov-branch/
          junit-branch.xml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pynomaly_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: |
        poetry install --with dev,test,integration

    - name: Wait for services
      run: |
        sleep 10

    - name: Run Integration Tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pynomaly_test
        REDIS_URL: redis://localhost:6379/0
        PYNOMALY_TEST_INTEGRATION: true
      run: |
        poetry run pytest tests/integration/ \
          --cov=src/pynomaly \
          --cov-report=xml:coverage-integration.xml \
          --junitxml=junit-integration.xml \
          -v --tb=short

    - name: Upload Integration Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          coverage-integration.xml
          junit-integration.xml

  performance-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: |
        poetry install --with dev,test,performance

    - name: Run Performance Benchmarks
      run: |
        poetry run pytest tests/performance/ \
          --benchmark-only \
          --benchmark-json=benchmark-results.json \
          --benchmark-compare-fail=min:5% \
          -v

    - name: Run Memory Profile Tests
      run: |
        poetry run pytest tests/performance/test_memory_usage.py \
          --memray \
          --junitxml=junit-memory.xml \
          -v

    - name: Upload Performance Results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          benchmark-results.json
          junit-memory.xml
          .memray/

  ml-algorithm-tests:
    name: ML Algorithm Validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        framework: [pyod, sklearn, pytorch, tensorflow, jax]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: |
        poetry install --with dev,test,ml-${{ matrix.framework }}

    - name: Run ML Framework Tests
      run: |
        case "${{ matrix.framework }}" in
          "pyod")
            poetry run pytest tests/infrastructure/adapters/test_pyod_*.py \
              --cov=src/pynomaly/infrastructure/adapters/pyod_adapter.py \
              --junitxml=junit-ml-pyod.xml -v
            ;;
          "sklearn")
            poetry run pytest tests/infrastructure/adapters/test_sklearn_*.py \
              --cov=src/pynomaly/infrastructure/adapters/sklearn_adapter.py \
              --junitxml=junit-ml-sklearn.xml -v
            ;;
          "pytorch")
            poetry run pytest tests/infrastructure/adapters/test_pytorch_*.py \
              --cov=src/pynomaly/infrastructure/adapters/pytorch_adapter.py \
              --junitxml=junit-ml-pytorch.xml -v
            ;;
          "tensorflow")
            poetry run pytest tests/infrastructure/adapters/test_tensorflow_*.py \
              --cov=src/pynomaly/infrastructure/adapters/tensorflow_adapter.py \
              --junitxml=junit-ml-tensorflow.xml -v
            ;;
          "jax")
            poetry run pytest tests/infrastructure/adapters/test_jax_*.py \
              --cov=src/pynomaly/infrastructure/adapters/jax_adapter.py \
              --junitxml=junit-ml-jax.xml -v
            ;;
        esac

    - name: Upload ML Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ml-tests-${{ matrix.framework }}
        path: junit-ml-*.xml

  end-to-end-tests:
    name: End-to-End Workflow Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: |
        poetry install --with dev,test

    - name: Start Pynomaly Server
      run: |
        poetry run uvicorn pynomaly.presentation.api:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        PYNOMALY_ENV: testing

    - name: Run End-to-End Tests
      run: |
        poetry run pytest tests/e2e/ \
          --junitxml=junit-e2e.xml \
          --html=e2e-report.html \
          --self-contained-html \
          -v
      env:
        PYNOMALY_API_URL: http://localhost:8000

    - name: Upload E2E Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          junit-e2e.xml
          e2e-report.html

  coverage-consolidation:
    name: Consolidate Coverage Reports
    needs: [unit-tests, branch-coverage-tests, integration-tests]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: |
        poetry install --with dev,test

    - name: Download all coverage reports
      uses: actions/download-artifact@v3
      with:
        path: coverage-reports/

    - name: Combine coverage reports
      run: |
        poetry run coverage combine coverage-reports/*/coverage-*.xml
        poetry run coverage xml -o coverage-combined.xml
        poetry run coverage html -d htmlcov-combined
        poetry run coverage report --show-missing

    - name: Check Overall Coverage Thresholds
      run: |
        poetry run coverage report --fail-under=${{ env.COVERAGE_THRESHOLD_LINE }}

    - name: Upload Combined Coverage
      uses: actions/upload-artifact@v3
      with:
        name: combined-coverage-report
        path: |
          coverage-combined.xml
          htmlcov-combined/

    - name: Upload to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage-combined.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  test-report-generation:
    name: Generate Test Reports
    needs: [unit-tests, integration-tests, performance-tests, ml-algorithm-tests, end-to-end-tests]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - uses: actions/checkout@v4

    - name: Download all test results
      uses: actions/download-artifact@v3
      with:
        path: test-results/

    - name: Generate comprehensive test report
      run: |
        python scripts/generate_test_report.py \
          --input-dir test-results/ \
          --output-file comprehensive-test-report.html \
          --include-coverage \
          --include-performance \
          --include-security

    - name: Upload Comprehensive Report
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-test-report
        path: comprehensive-test-report.html

    - name: Comment PR with Test Summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const testSummary = fs.readFileSync('test-summary.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: testSummary
          });

  deployment-readiness:
    name: Deployment Readiness Check
    needs: [security-scan, coverage-consolidation, test-report-generation]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Deployment Readiness Assessment
      run: |
        echo "🎯 Deployment Readiness Assessment"
        echo "=================================="
        echo "✅ Security scan completed"
        echo "✅ Coverage thresholds met"
        echo "✅ All test suites passed"
        echo "✅ Performance benchmarks validated"
        echo "✅ ML algorithms verified"
        echo ""
        echo "🚀 READY FOR PRODUCTION DEPLOYMENT"

    - name: Create Deployment Tag
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        TAG_NAME="deploy-ready-${TIMESTAMP}"

        git tag -a "$TAG_NAME" -m "Deployment ready: All tests passed, coverage thresholds met"
        git push origin "$TAG_NAME"
