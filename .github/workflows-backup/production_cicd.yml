name: Production CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.12"

jobs:
  # Quality Gates Stage
  quality_gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.quality_check.outputs.passed }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run comprehensive test suite
      run: |
        echo "Running comprehensive test suite..."
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-fail-under=90
        
    - name: Run security tests
      run: |
        echo "Running security validation tests..."
        python -m pytest tests/security/ -v --tb=short
        
    - name: Run performance tests
      run: |
        echo "Running performance validation tests..."
        python -m pytest tests/performance/ -v --tb=short --maxfail=3
        
    - name: Run infrastructure tests
      run: |
        echo "Running infrastructure tests..."
        python -m pytest tests/infrastructure/ -v --tb=short
        
    - name: Security vulnerability scan
      run: |
        echo "Running security vulnerability scan..."
        pip install safety bandit
        safety check --json --output safety_report.json || true
        bandit -r src/ -f json -o bandit_report.json || true
        
    - name: Code quality analysis
      run: |
        echo "Running code quality analysis..."
        pip install flake8 mypy black isort
        flake8 src/ --max-line-length=100 --extend-ignore=E203,W503
        black --check src/
        isort --check-only src/
        mypy src/ --ignore-missing-imports
        
    - name: Quality gates evaluation
      id: quality_check
      run: |
        echo "Evaluating quality gates..."
        
        # Check test coverage
        coverage report --fail-under=90
        
        # Check security scan results
        if [ -f bandit_report.json ]; then
          HIGH_ISSUES=$(jq '.results | map(select(.issue_severity == "HIGH")) | length' bandit_report.json)
          if [ "$HIGH_ISSUES" -gt 0 ]; then
            echo "Quality gate failed: $HIGH_ISSUES high-severity security issues found"
            exit 1
          fi
        fi
        
        echo "All quality gates passed!"
        echo "passed=true" >> $GITHUB_OUTPUT
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          htmlcov/
          coverage.xml
          safety_report.json
          bandit_report.json

  # Build Stage
  build:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: quality_gates
    if: needs.quality_gates.outputs.should_deploy == 'true'
    
    outputs:
      api_image: ${{ steps.meta.outputs.api_image }}
      worker_image: ${{ steps.meta.outputs.worker_image }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        if [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION=${GITHUB_REF#refs/heads/}
        fi
        
        API_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${VERSION}"
        WORKER_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-worker:${VERSION}"
        
        echo "api_image=${API_IMAGE}" >> $GITHUB_OUTPUT
        echo "worker_image=${WORKER_IMAGE}" >> $GITHUB_OUTPUT
        
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deploy/production/Dockerfile.api
        push: true
        tags: ${{ steps.meta.outputs.api_image }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ github.ref_name }}
          
    - name: Build and push Worker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deploy/production/Dockerfile.worker
        push: true
        tags: ${{ steps.meta.outputs.worker_image }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration Tests Stage
  integration_tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality_gates, build]
    if: needs.quality_gates.outputs.should_deploy == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: pynomaly_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/pynomaly_test
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: testing
      run: |
        echo "Running integration tests..."
        python -m pytest tests/integration/ -v --tb=short
        
    - name: Run end-to-end tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/pynomaly_test
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: testing
      run: |
        echo "Running end-to-end tests..."
        python -m pytest tests/e2e/ -v --tb=short --maxfail=5

  # Staging Deployment
  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality_gates, build, integration_tests]
    if: |
      needs.quality_gates.outputs.should_deploy == 'true' && 
      (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Deploy to staging
      env:
        KUBE_CONFIG: ${{ secrets.STAGING_KUBE_CONFIG }}
        API_IMAGE: ${{ needs.build.outputs.api_image }}
        WORKER_IMAGE: ${{ needs.build.outputs.worker_image }}
      run: |
        echo "Deploying to staging environment..."
        echo "$KUBE_CONFIG" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Deploy using Helm or kubectl
        envsubst < deploy/staging/deployment.yaml | kubectl apply -f -
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/pynomaly-api -n staging --timeout=300s
        kubectl rollout status deployment/pynomaly-worker -n staging --timeout=300s
        
    - name: Run staging health checks
      run: |
        echo "Running staging health checks..."
        python scripts/health_check.py --environment=staging --timeout=300
        
    - name: Run staging smoke tests
      run: |
        echo "Running staging smoke tests..."
        python scripts/smoke_test.py --environment=staging

  # Production Deployment
  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality_gates, build, integration_tests, deploy_staging]
    if: |
      needs.quality_gates.outputs.should_deploy == 'true' && 
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Deploy to production
      env:
        KUBE_CONFIG: ${{ secrets.PRODUCTION_KUBE_CONFIG }}
        API_IMAGE: ${{ needs.build.outputs.api_image }}
        WORKER_IMAGE: ${{ needs.build.outputs.worker_image }}
      run: |
        echo "Deploying to production environment..."
        echo "$KUBE_CONFIG" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Blue-green deployment strategy
        python scripts/deploy/production_deploy.py \
          --version=${{ github.ref_name }} \
          --build-number=${{ github.run_number }} \
          --environment=production
        
    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        python scripts/health_check.py --environment=production --timeout=600
        
    - name: Run production smoke tests
      run: |
        echo "Running production smoke tests..."
        python scripts/smoke_test.py --environment=production
        
    - name: Performance validation
      run: |
        echo "Running performance validation..."
        python scripts/performance_validation.py --environment=production --duration=300

  # Post-deployment monitoring
  post_deployment:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy_production]
    if: always() && needs.deploy_production.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Monitor deployment health
      run: |
        echo "Monitoring deployment health for 10 minutes..."
        python scripts/monitoring/deployment_monitor.py \
          --duration=600 \
          --environment=production \
          --version=${{ github.ref_name }}
          
    - name: Send deployment notification
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: |
          Deployment to production completed!
          Version: ${{ github.ref_name }}
          Status: ${{ job.status }}
          Duration: ${{ steps.deployment.outputs.duration }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback job (manual trigger)
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Rollback production deployment
      env:
        KUBE_CONFIG: ${{ secrets.PRODUCTION_KUBE_CONFIG }}
        PREVIOUS_VERSION: ${{ github.event.inputs.previous_version }}
      run: |
        echo "Rolling back to version: $PREVIOUS_VERSION"
        python scripts/deploy/rollback.py \
          --version=$PREVIOUS_VERSION \
          --environment=production
