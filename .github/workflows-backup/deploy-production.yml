name: Production Deployment Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      image_tag:
        description: 'Docker image tag'
        required: true
        default: 'latest'
      strategy:
        description: 'Deployment strategy'
        required: true
        default: 'rolling'
        type: choice
        options:
          - rolling
          - blue_green
          - canary
          - recreate
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'

jobs:
  validate:
    name: Validate Deployment Request
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      image_tag: ${{ steps.set-env.outputs.image_tag }}
      strategy: ${{ steps.set-env.outputs.strategy }}
      skip_tests: ${{ steps.set-env.outputs.skip_tests }}
    steps:
      - name: Set deployment parameters
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "image_tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "strategy=rolling" >> $GITHUB_OUTPUT
            echo "skip_tests=false" >> $GITHUB_OUTPUT
          else
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "image_tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
            echo "strategy=${{ github.event.inputs.strategy }}" >> $GITHUB_OUTPUT
            echo "skip_tests=${{ github.event.inputs.skip_tests }}" >> $GITHUB_OUTPUT
          fi

      - name: Validate production deployment
        if: ${{ steps.set-env.outputs.environment == 'production' }}
        run: |
          echo "ðŸš¨ Production deployment detected"
          echo "Environment: ${{ steps.set-env.outputs.environment }}"
          echo "Image Tag: ${{ steps.set-env.outputs.image_tag }}"
          echo "Strategy: ${{ steps.set-env.outputs.strategy }}"

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep
          pip install -r requirements.txt

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/ -f txt

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json
          safety check

      - name: Run Semgrep SAST
        run: |
          semgrep --config=auto src/ --json --output=semgrep-report.json
          semgrep --config=auto src/

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: ${{ needs.validate.outputs.skip_tests != 'true' }}
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run linting
        run: |
          ruff check src/ tests/
          black --check src/ tests/
          mypy src/

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --tb=short

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build-image:
    name: Build Container Image
    runs-on: ubuntu-latest
    needs: [validate, build-and-test]
    if: always() && (needs.build-and-test.result == 'success' || needs.validate.outputs.skip_tests == 'true')
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=${{ needs.validate.outputs.image_tag }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=${{ needs.validate.outputs.environment }}
            BUILD_DATE=${{ github.run_id }}
            VCS_REF=${{ github.sha }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  vulnerability-scan:
    name: Container Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-image.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, build-image, vulnerability-scan]
    if: ${{ needs.validate.outputs.environment == 'staging' || (needs.validate.outputs.environment == 'production' && github.ref_type == 'tag') }}
    environment:
      name: staging
      url: https://staging.anomaly_detection.ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deployment dependencies
        run: |
          pip install aiohttp pyyaml

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Set up Kubernetes config
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Deploy to staging
        run: |
          python scripts/deploy/automated_deployment.py \
            --environment staging \
            --image-tag ${{ needs.validate.outputs.image_tag }} \
            --strategy ${{ needs.validate.outputs.strategy }} \
            --namespace anomaly_detection-staging
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Run staging smoke tests
        run: |
          python scripts/smoke_tests.py --environment staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, build-image, vulnerability-scan, deploy-staging]
    if: ${{ needs.validate.outputs.environment == 'production' && (success() || needs.deploy-staging.result == 'skipped') }}
    environment:
      name: production
      url: https://anomaly_detection.ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deployment dependencies
        run: |
          pip install aiohttp pyyaml

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Set up Kubernetes config
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Create GitHub deployment
        id: deployment
        uses: actions/github-script@v6
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Production deployment via GitHub Actions',
              auto_merge: false,
              required_contexts: []
            });
            return deployment.data.id;

      - name: Update deployment status to in_progress
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'in_progress',
              description: 'Deployment in progress'
            });

      - name: Deploy to production
        id: deploy
        run: |
          python scripts/deploy/automated_deployment.py \
            --environment production \
            --image-tag ${{ needs.validate.outputs.image_tag }} \
            --strategy ${{ needs.validate.outputs.strategy }} \
            --namespace anomaly_detection-prod \
            --rollback-on-failure
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          GITHUB_DEPLOYMENT_ID: ${{ steps.deployment.outputs.result }}

      - name: Run production verification tests
        run: |
          python scripts/production_verification.py

      - name: Update deployment status to success
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              description: 'Deployment completed successfully',
              environment_url: 'https://anomaly_detection.ai'
            });

      - name: Update deployment status to failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'failure',
              description: 'Deployment failed'
            });

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [validate, deploy-production]
    if: always() && needs.deploy-production.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update monitoring dashboards
        run: |
          # Update Grafana dashboards
          python scripts/update_monitoring_dashboards.py

      - name: Generate deployment documentation
        run: |
          python scripts/generate_deployment_docs.py \
            --deployment-id ${{ github.run_id }} \
            --environment ${{ needs.validate.outputs.environment }} \
            --image-tag ${{ needs.validate.outputs.image_tag }}

      - name: Update changelog
        run: |
          python scripts/update_changelog.py \
            --version ${{ needs.validate.outputs.image_tag }} \
            --environment ${{ needs.validate.outputs.environment }}

      - name: Create GitHub release
        if: ${{ github.ref_type == 'tag' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Production Deployment
            
            ### Changes
            * Deployed to production environment
            * Image tag: ${{ needs.validate.outputs.image_tag }}
            * Strategy: ${{ needs.validate.outputs.strategy }}
            
            ### Verification
            * All security scans passed
            * All tests passed
            * Production verification completed
            
            For detailed deployment logs, see workflow run #${{ github.run_id }}
          draft: false
          prerelease: false

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment]
    if: always()
    steps:
      - name: Clean up old deployments
        run: |
          echo "Cleaning up old deployments and artifacts"
          # This would typically clean up old container images, deployment artifacts, etc.

      - name: Archive deployment artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: deployment-artifacts-${{ github.run_id }}
          path: |
            reports/
            logs/
          retention-days: 30
