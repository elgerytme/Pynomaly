name: Production Deployment Pipeline

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.6.1'

jobs:
  # Security and Quality Gates
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Bandit security scan
      run: |
        pip install bandit[toml]
        bandit -r src/ -f json -o bandit-results.json
      continue-on-error: true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: |
          trivy-results.sarif
          bandit-results.json

  # Code Quality and Testing
  test-and-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: anomaly_detection_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run pre-commit hooks
      run: |
        poetry run pre-commit run --all-files

    - name: Run type checking
      run: |
        poetry run mypy src/

    - name: Run comprehensive tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/anomaly_detection_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        poetry run python scripts/testing/run_comprehensive_tests.py --type all

    - name: Generate coverage report
      run: |
        poetry run coverage xml
        poetry run coverage html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          reports/
          coverage.xml
          pytest_report.html

  # Performance and Load Testing
  performance-tests:
    runs-on: ubuntu-latest
    needs: [test-and-quality]
    if: github.event_name == 'push' || github.event.inputs.deploy_environment != ''
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry and dependencies
      run: |
        pip install poetry==${{ env.POETRY_VERSION }}
        poetry install --no-interaction

    - name: Run performance benchmarks
      run: |
        poetry run python scripts/testing/run_comprehensive_tests.py --type performance

    - name: Run memory usage tests
      run: |
        poetry run python -m pytest tests/performance/ -v -m memory

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: reports/performance/

  # Build and Registry
  build-and-push:
    runs-on: ubuntu-latest
    needs: [security-scan, test-and-quality]
    if: github.event_name == 'push' || github.event.inputs.deploy_environment != ''
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deploy/docker/Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          PYTHON_VERSION=${{ env.PYTHON_VERSION }}
          POETRY_VERSION=${{ env.POETRY_VERSION }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ steps.meta.outputs.version }}

    - name: Output image
      id: image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

    - name: Run container security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ steps.image.outputs.image }}'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'

  # Infrastructure Validation
  validate-infrastructure:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Validate Kubernetes manifests
      run: |
        kubectl --dry-run=client apply -f deploy/kubernetes/enhanced-production.yaml
        kubectl --dry-run=server apply -f deploy/kubernetes/enhanced-production.yaml

    - name: Lint Helm charts
      run: |
        helm lint deploy/helm/anomaly_detection/

    - name: Validate with kubeval
      run: |
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        ./kubeval deploy/kubernetes/*.yaml

  # Staging Deployment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [validate-infrastructure, performance-tests]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event.inputs.deploy_environment == 'staging')
    environment:
      name: staging
      url: https://staging.anomaly_detection.example.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-west-2 --name anomaly_detection-staging

    - name: Update image in manifests
      run: |
        sed -i 's|image: anomaly_detection:production-.*|image: ${{ needs.build-and-push.outputs.image }}|g' deploy/kubernetes/staging/deployment.yaml

    - name: Deploy to staging
      run: |
        kubectl apply -f deploy/kubernetes/namespace.yaml
        kubectl apply -f deploy/kubernetes/staging/
        kubectl rollout status deployment/anomaly_detection-api -n anomaly_detection-staging --timeout=600s

    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=api -n anomaly_detection-staging --timeout=300s
        poetry install --no-interaction
        poetry run python scripts/testing/run_smoke_tests.py --environment staging

    - name: Run integration tests
      run: |
        export STAGING_URL="https://staging.anomaly_detection.example.com"
        poetry run python scripts/testing/run_integration_tests.py --url $STAGING_URL

  # Production Deployment
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging, build-and-push]
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event.inputs.deploy_environment == 'production')
    environment:
      name: production
      url: https://api.anomaly_detection.example.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-west-2 --name anomaly_detection-production

    - name: Create backup before deployment
      run: |
        kubectl create job backup-$(date +%Y%m%d-%H%M%S) \
          --from=cronjob/database-backup \
          -n anomaly_detection-production

    - name: Update image in manifests
      run: |
        sed -i 's|image: anomaly_detection:production-.*|image: ${{ needs.build-and-push.outputs.image }}|g' deploy/kubernetes/enhanced-production.yaml

    - name: Deploy to production
      run: |
        kubectl apply -f deploy/kubernetes/enhanced-production.yaml
        kubectl rollout status deployment/anomaly_detection-api -n anomaly_detection-production --timeout=900s
        kubectl rollout status deployment/anomaly_detection-worker -n anomaly_detection-production --timeout=900s

    - name: Wait for deployment to be ready
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=api -n anomaly_detection-production --timeout=600s
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=worker -n anomaly_detection-production --timeout=600s

    - name: Run production smoke tests
      run: |
        export PRODUCTION_URL="https://api.anomaly_detection.example.com"
        poetry install --no-interaction
        poetry run python scripts/testing/run_smoke_tests.py --environment production --url $PRODUCTION_URL

    - name: Update monitoring and alerting
      run: |
        kubectl apply -f deploy/kubernetes/monitoring/

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        channel: '#deployments'
        text: |
          ✅ Production deployment successful!
          Image: ${{ needs.build-and-push.outputs.image }}
          Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Post-deployment validation
  post-deployment-tests:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        pip install poetry==${{ env.POETRY_VERSION }}
        poetry install --no-interaction

    - name: Run end-to-end tests
      env:
        PRODUCTION_URL: "https://api.anomaly_detection.example.com"
        API_KEY: ${{ secrets.PRODUCTION_API_KEY }}
      run: |
        poetry run python scripts/testing/run_e2e_tests.py \
          --url $PRODUCTION_URL \
          --api-key $API_KEY \
          --timeout 300

    - name: Run performance monitoring
      run: |
        poetry run python scripts/monitoring/performance_monitor.py \
          --url $PRODUCTION_URL \
          --duration 300 \
          --alert-threshold 2000

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: post-deployment-results
        path: reports/post-deployment/

  # Cleanup and notifications
  cleanup:
    runs-on: ubuntu-latest
    needs: [post-deployment-tests]
    if: always()
    steps:
    - name: Clean up old container images
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME }}
        package-type: 'container'
        min-versions-to-keep: 10
        delete-only-untagged-versions: true

    - name: Notify on failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        channel: '#alerts'
        text: |
          ❌ Production deployment failed!
          Workflow: ${{ github.workflow }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Update deployment status
      run: |
        echo "Deployment completed at $(date)"
        echo "Image: ${{ needs.build-and-push.outputs.image }}"
        echo "Status: ${{ job.status }}"
