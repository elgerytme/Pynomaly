name: Automated Test Coverage Analysis

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - '.github/workflows/automated-test-coverage-analysis.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
  workflow_dispatch:
    inputs:
      run_full_tests:
        description: 'Run full test coverage analysis (slower)'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  test-coverage-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install hatch
        pip install click pytest pytest-cov
        # Install minimal dependencies for analysis
        pip install -e .[minimal,test,lint]

    - name: Make analysis script executable
      run: chmod +x scripts/testing/automated_test_coverage_analysis.py

    - name: Run quick analysis (PR and push)
      if: github.event_name != 'schedule' && github.event.inputs.run_full_tests != 'true'
      run: |
        python scripts/testing/automated_test_coverage_analysis.py \
          --project-root . \
          --output-format both

    - name: Run full analysis (scheduled and manual with full tests)
      if: github.event_name == 'schedule' || github.event.inputs.run_full_tests == 'true'
      run: |
        python scripts/testing/automated_test_coverage_analysis.py \
          --project-root . \
          --output-format both \
          --run-tests

    - name: Upload coverage reports
      if: github.event_name == 'schedule' || github.event.inputs.run_full_tests == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          htmlcov/
          coverage.xml
          coverage.json
        retention-days: 30

    - name: Upload analysis reports
      uses: actions/upload-artifact@v3
      with:
        name: test-coverage-analysis
        path: reports/
        retention-days: 90

    - name: Parse results and set outputs
      id: analysis_results
      run: |
        # Get the latest report file
        LATEST_REPORT=$(ls -t reports/test_coverage_summary_*.json | head -n1)
        
        if [ -f "$LATEST_REPORT" ]; then
          # Extract key metrics using jq
          OVERALL_COVERAGE=$(jq -r '.structure.coverage_ratios.overall // 0' "$LATEST_REPORT")
          CRITICAL_GAPS=$(jq -r '[.gaps[] | select(.priority == "critical")] | length' "$LATEST_REPORT")
          TOTAL_GAPS=$(jq -r '.gaps | length' "$LATEST_REPORT")
          CLI_COVERAGE=$(jq -r '.structure.coverage_ratios.area_cli // 0' "$LATEST_REPORT")
          INFRA_COVERAGE=$(jq -r '.structure.coverage_ratios.layer_infrastructure // 0' "$LATEST_REPORT")
          
          echo "overall_coverage=$OVERALL_COVERAGE" >> $GITHUB_OUTPUT
          echo "critical_gaps=$CRITICAL_GAPS" >> $GITHUB_OUTPUT
          echo "total_gaps=$TOTAL_GAPS" >> $GITHUB_OUTPUT
          echo "cli_coverage=$CLI_COVERAGE" >> $GITHUB_OUTPUT
          echo "infra_coverage=$INFRA_COVERAGE" >> $GITHUB_OUTPUT
          
          # Create summary for PR
          {
            echo "## 📊 Test Coverage Analysis Results"
            echo ""
            echo "| Metric | Value | Status |"
            echo "|--------|-------|--------|"
            echo "| Overall Coverage | ${OVERALL_COVERAGE}% | $([ $(echo "$OVERALL_COVERAGE > 70" | bc) -eq 1 ] && echo "✅" || echo "⚠️") |"
            echo "| CLI Coverage | ${CLI_COVERAGE}% | $([ $(echo "$CLI_COVERAGE > 50" | bc) -eq 1 ] && echo "✅" || echo "❌") |"
            echo "| Infrastructure Coverage | ${INFRA_COVERAGE}% | $([ $(echo "$INFRA_COVERAGE > 60" | bc) -eq 1 ] && echo "✅" || echo "⚠️") |"
            echo "| Critical Gaps | $CRITICAL_GAPS | $([ $CRITICAL_GAPS -eq 0 ] && echo "✅" || echo "❌") |"
            echo "| Total Gaps | $TOTAL_GAPS | $([ $TOTAL_GAPS -lt 5 ] && echo "✅" || echo "⚠️") |"
            echo ""
            
            if [ $CRITICAL_GAPS -gt 0 ]; then
              echo "### ⚠️ Critical Issues Found"
              echo ""
              jq -r '.gaps[] | select(.priority == "critical") | "- **\(.category | ascii_upcase)**: \(.description) (Current: \(.current_coverage)%, Target: \(.target_coverage)%)"' "$LATEST_REPORT"
              echo ""
            fi
            
            echo "### 📈 Recommendations"
            echo ""
            jq -r '.recommendations.critical[]?, .recommendations.high[]?' "$LATEST_REPORT" | head -5 | sed 's/^/- /'
            echo ""
            echo "📋 **Full Report**: [Download Analysis Reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          } > analysis_summary.md
          
          cat analysis_summary.md >> $GITHUB_STEP_SUMMARY
        fi

    - name: Comment on PR
      if: github.event_name == 'pull_request' && steps.analysis_results.outputs.overall_coverage != ''
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('analysis_summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

    - name: Fail on critical coverage issues
      if: steps.analysis_results.outputs.critical_gaps > 0 || steps.analysis_results.outputs.cli_coverage < 20
      run: |
        echo "❌ Critical coverage issues detected:"
        echo "- Critical gaps: ${{ steps.analysis_results.outputs.critical_gaps }}"
        echo "- CLI coverage: ${{ steps.analysis_results.outputs.cli_coverage }}%"
        echo ""
        echo "Please address critical coverage gaps before merging."
        exit 1

  create-issues:
    runs-on: ubuntu-latest
    needs: test-coverage-analysis
    if: github.event_name == 'schedule' && needs.test-coverage-analysis.outputs.critical_gaps > 0
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download analysis reports
      uses: actions/download-artifact@v3
      with:
        name: test-coverage-analysis
        path: reports/

    - name: Create GitHub issues for critical gaps
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Find the latest report
          const reportFiles = fs.readdirSync('reports/')
            .filter(f => f.startsWith('test_coverage_summary_'))
            .sort()
            .reverse();
          
          if (reportFiles.length === 0) {
            console.log('No analysis reports found');
            return;
          }
          
          const reportPath = path.join('reports', reportFiles[0]);
          const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
          
          const criticalGaps = report.gaps.filter(g => g.priority === 'critical');
          
          for (const gap of criticalGaps) {
            const title = `[TEST COVERAGE] Critical gap in ${gap.category} ${gap.type}`;
            const body = `## Critical Test Coverage Gap Detected
          
          **Category**: ${gap.category}
          **Type**: ${gap.type}
          **Current Coverage**: ${gap.current_coverage.toFixed(1)}%
          **Target Coverage**: ${gap.target_coverage}%
          **Gap**: ${gap.gap_percentage.toFixed(1)}%
          
          ### Description
          ${gap.description}
          
          ### Recommendations
          ${gap.recommendations.map(r => `- ${r}`).join('\n')}
          
          ### Priority
          This is a **${gap.priority}** priority issue that should be addressed immediately.
          
          ---
          *This issue was automatically created by the test coverage analysis workflow.*
          *Report generated: ${report.metadata.timestamp}*`;
          
            // Check if issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'test-coverage,critical',
              state: 'open'
            });
            
            const exists = existingIssues.data.some(issue => 
              issue.title.includes(gap.category) && issue.title.includes(gap.type)
            );
            
            if (!exists) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['test-coverage', 'critical', 'automated']
              });
              console.log(`Created issue for ${gap.category} ${gap.type}`);
            } else {
              console.log(`Issue already exists for ${gap.category} ${gap.type}`);
            }
          }
