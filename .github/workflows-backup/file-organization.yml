name: File Organization Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  file-organization:
    name: Validate File Organization
    runs-on: ubuntu-latest
    outputs:
      violations_count: ${{ steps.validate.outputs.violations_count }}
      validation_passed: ${{ steps.validate.outputs.validation_passed }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit

    - name: Analyze Project Structure
      id: analyze
      run: |
        python scripts/analyze_project_structure.py
        echo "analysis_completed=true" >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: Validate File Organization
      id: validate
      run: |
        # Use pyno-org validate for consistency with pre-commit hooks
        if python scripts/pyno_org.py validate; then
          echo "validation_passed=true" >> $GITHUB_OUTPUT
          echo "violations_count=0" >> $GITHUB_OUTPUT
        else
          echo "validation_passed=false" >> $GITHUB_OUTPUT
          # Count violations from output
          violations_count=$(python scripts/pyno_org.py validate 2>&1 | grep -c "^  •" || echo "0")
          echo "violations_count=$violations_count" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true

    - name: Generate Organization Plan
      if: steps.validate.outputs.validation_passed != 'true'
      run: |
        mkdir -p reports
        python scripts/pyno_org.py organize --dry --output reports/organization_plan.json
        echo "Organization plan generated"

    - name: Upload Organization Reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: file-organization-reports
        path: |
          reports/project_structure_analysis.json
          reports/file_organization_validation.json
          reports/stray_files_detection.json
          reports/organization_plan.json
        retention-days: 30

    - name: Comment on PR (Organization Issues)
      if: github.event_name == 'pull_request' && steps.validate.outputs.validation_passed != 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const { execSync } = require('child_process');

          // Get validation results using pyno-org
          let validationOutput = '';
          try {
            execSync('python scripts/pyno_org.py validate', { stdio: 'pipe' });
            validationOutput = 'Validation passed';
          } catch (error) {
            validationOutput = error.stdout.toString();
          }

          // Extract violations and suggestions from output
          const violations = [];
          const suggestions = [];
          
          const lines = validationOutput.split('\n');
          let inViolations = false;
          let inSuggestions = false;
          
          for (const line of lines) {
            if (line.includes('violations:')) {
              inViolations = true;
              inSuggestions = false;
            } else if (line.includes('Suggested fixes:')) {
              inViolations = false;
              inSuggestions = true;
            } else if (line.startsWith('  • ')) {
              if (inViolations) {
                violations.push(line.substring(4));
              } else if (inSuggestions) {
                suggestions.push(line.substring(4));
              }
            }
          }

          // Generate comment
          let comment = '## 🚨 File Organization Issues Detected\n\n';
          comment += `### ❌ Organization Validation Failed (${violations.length} violations)\n\n`;
          
          if (violations.length > 0) {
            comment += '**Violations found:**\n';
            violations.slice(0, 15).forEach(violation => {
              comment += `- ${violation}\n`;
            });
            if (violations.length > 15) {
              comment += `- ... and ${violations.length - 15} more violations\n`;
            }
            comment += '\n';
          }

          if (suggestions.length > 0) {
            comment += '**Recommended actions:**\n';
            suggestions.slice(0, 10).forEach(suggestion => {
              comment += `- ${suggestion}\n`;
            });
            if (suggestions.length > 10) {
              comment += `- ... and ${suggestions.length - 10} more actions\n`;
            }
            comment += '\n';
          }

          comment += '### 🔧 How to Fix\n\n';
          comment += '1. **Automated organization:**\n';
          comment += '   ```bash\n';
          comment += '   # Dry run (preview changes)\n';
          comment += '   python scripts/pyno_org.py organize --dry\n';
          comment += '   \n';
          comment += '   # Execute organization\n';
          comment += '   python scripts/pyno_org.py organize --fix\n';
          comment += '   ```\n\n';
          comment += '2. **Manual organization:** See [File Organization Standards](docs/development/FILE_ORGANIZATION_STANDARDS.md)\n\n';
          comment += '3. **Install pre-commit hooks:**\n';
          comment += '   ```bash\n';
          comment += '   pre-commit install\n';
          comment += '   ```\n\n';
          comment += '---\n';
          comment += '*This check ensures project maintainability and professional structure. ';
          comment += 'Files must be in appropriate directories according to [project standards](docs/development/FILE_ORGANIZATION_STANDARDS.md).*';

          // Post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Comment on PR (Success)
      if: github.event_name == 'pull_request' && steps.validate.outputs.validation_passed == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## ✅ File Organization Validation Passed

          All files are properly organized according to project standards!

          - ✅ No stray files in root directory
          - ✅ All files in appropriate subdirectories
          - ✅ Repository structure complies with standards

          Great job maintaining clean project organization! 🎉`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Set Job Status
      if: always()
      run: |
        if [[ "${{ steps.validate.outputs.validation_passed }}" != "true" ]]; then
          echo "❌ File organization validation failed (${{ steps.validate.outputs.violations_count }} violations)"
          exit 1
        else
          echo "✅ File organization validation passed"
          exit 0
        fi

  pre-commit-check:
    name: Pre-commit Hooks Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pre-commit
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files
      continue-on-error: true
      id: precommit

    - name: Upload pre-commit results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: pre-commit-results
        path: .pre-commit-config.yaml
        retention-days: 7

  structure-report:
    name: Generate Structure Report
    runs-on: ubuntu-latest
    needs: [file-organization]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Generate Comprehensive Report
      run: |
        mkdir -p reports
        python scripts/analyze_project_structure.py

        # Create summary report
        cat > reports/structure_summary.md << 'EOF'
        # Project Structure Analysis Report

        **Generated:** $(date)
        **Branch:** ${{ github.ref_name }}
        **Commit:** ${{ github.sha }}

        ## Analysis Results

        EOF

        if [[ -f "reports/project_structure_analysis.json" ]]; then
          echo "Structure analysis completed successfully" >> reports/structure_summary.md
        else
          echo "⚠️ Structure analysis failed" >> reports/structure_summary.md
        fi

        echo "" >> reports/structure_summary.md
        echo "See attached JSON files for detailed analysis." >> reports/structure_summary.md

    - name: Upload Structure Report
      uses: actions/upload-artifact@v3
      with:
        name: structure-analysis-report
        path: |
          reports/structure_summary.md
          reports/project_structure_analysis.json
        retention-days: 90
