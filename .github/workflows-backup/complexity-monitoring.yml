name: Complexity Monitoring

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHONPATH: ${{ github.workspace }}/src

jobs:
  complexity-analysis:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for trend analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          .venv
        key: ${{ runner.os }}-complexity-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-complexity-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
        poetry install --with dev,test

    - name: Install additional analysis tools
      run: |
        poetry run pip install radon xenon mccabe flake8-cognitive-complexity

    - name: Run complexity monitoring
      id: complexity
      run: |
        echo "Running complexity analysis..."
        poetry run python scripts/run_complexity_monitoring.py \
          --output-format json \
          --output-file complexity_report.json \
          --trend-analysis \
          --baseline-file .github/baselines/complexity_baseline.json

    - name: Generate complexity report
      run: |
        poetry run python scripts/generate_complexity_report.py \
          --input complexity_report.json \
          --format markdown \
          --output complexity_report.md

    - name: Check complexity thresholds
      id: threshold_check
      run: |
        poetry run python scripts/check_complexity_thresholds.py \
          --report complexity_report.json \
          --max-complexity 10 \
          --max-total-lines 100000 \
          --max-avg-complexity 5.0 \
          --fail-on-regression

    - name: Upload complexity report
      uses: actions/upload-artifact@v3
      with:
        name: complexity-report
        path: |
          complexity_report.json
          complexity_report.md
        retention-days: 30

    - name: Comment PR with complexity analysis
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');

          try {
            const report = fs.readFileSync('complexity_report.md', 'utf8');
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Complexity Analysis Report')
            );

            const body = `## üìä Complexity Analysis Report

            ${report}

            ---
            *Generated by automated complexity monitoring*`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
          } catch (error) {
            console.log('Could not post complexity report:', error);
          }

    - name: Update baseline (main branch only)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        mkdir -p .github/baselines
        cp complexity_report.json .github/baselines/complexity_baseline.json
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .github/baselines/complexity_baseline.json
        git diff --staged --quiet || git commit -m "Update complexity baseline [skip ci]"
        git push

    - name: Fail on complexity regression
      if: steps.threshold_check.outputs.failed == 'true'
      run: |
        echo "‚ùå Complexity thresholds exceeded or regression detected"
        echo "üìä Review the complexity report for details"
        exit 1

  quality-gates:
    runs-on: ubuntu-latest
    needs: complexity-analysis
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev,test

    - name: Run quality gates on changed files
      run: |
        echo "Getting changed Python files..."
        CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep '\.py$' | head -10 || true)

        if [ -n "$CHANGED_FILES" ]; then
          echo "Running quality gates on changed files:"
          echo "$CHANGED_FILES"

          for file in $CHANGED_FILES; do
            if [ -f "$file" ]; then
              echo "Validating: $file"
              poetry run python -m anomaly_detection.presentation.cli.quality validate "$file" \
                --threshold 70 \
                --fail-on-critical \
                --verbose || echo "Warning: Quality gate failed for $file"
            fi
          done
        else
          echo "No Python files changed in this PR"
        fi

    - name: Run batch quality validation on new features
      run: |
        echo "Running batch quality validation on src/ directory..."
        poetry run python -m anomaly_detection.presentation.cli.quality batch src/ \
          --pattern "*.py" \
          --threshold 75 \
          --format summary || echo "Warning: Some quality gates failed"

  performance-regression:
    runs-on: ubuntu-latest
    needs: complexity-analysis

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev,test

    - name: Run performance monitoring
      run: |
        echo "Running performance regression tests..."
        poetry run python scripts/performance_regression_check.py \
          --baseline .github/baselines/performance_baseline.json \
          --threshold 20 \
          --output performance_report.json

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance_report.json
        retention-days: 30
