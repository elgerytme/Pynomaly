name: Multi-Version Python Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  PYTHONUNBUFFERED: 1
  FORCE_COLOR: 1

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      python-code: ${{ steps.changes.outputs.python-code }}
      dependencies: ${{ steps.changes.outputs.dependencies }}
      ci-config: ${{ steps.changes.outputs.ci-config }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            python-code:
              - 'src/**/*.py'
              - 'tests/**/*.py'
              - 'scripts/**/*.py'
            dependencies:
              - 'pyproject.toml'
              - 'requirements*.txt'
              - 'poetry.lock'
            ci-config:
              - '.github/workflows/**'
              - 'tox.ini'
              - '.python-version*'

  matrix-test:
    needs: detect-changes
    if: needs.detect-changes.outputs.python-code == 'true' || needs.detect-changes.outputs.dependencies == 'true' || needs.detect-changes.outputs.ci-config == 'true' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version:
          - "3.11.4"  # Specific version for compatibility testing
          - "3.11"     # Latest 3.11.x
          - "3.12"     # Latest 3.12.x
          - "3.13"     # Latest 3.13.x
          - "3.14-dev" # Development version of 3.14
        include:
          # Additional specific versions for critical testing
          - os: ubuntu-latest
            python-version: "3.11.9"
            name: "Ubuntu-3.11.9"
          - os: ubuntu-latest
            python-version: "3.12.8"
            name: "Ubuntu-3.12.8-latest"
          - os: ubuntu-latest
            python-version: "3.13.1"
            name: "Ubuntu-3.13.1-latest"
          - os: ubuntu-latest
            python-version: "3.14.0a3"
            name: "Ubuntu-3.14.0a3-alpha"
        exclude:
          # Exclude 3.14-dev on Windows and macOS for now (may be unstable)
          - os: windows-latest
            python-version: "3.14-dev"
          - os: macos-latest
            python-version: "3.14-dev"

    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.python-version == '3.14-dev' }}

    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true

      - name: Get Python version info
        id: python-info
        shell: bash
        run: |
          echo "version=$(python -c 'import sys; print(".".join(map(str, sys.version_info[:3])))')" >> $GITHUB_OUTPUT
          echo "implementation=$(python -c 'import sys; print(sys.implementation.name)')" >> $GITHUB_OUTPUT
          echo "cache-key=$(python -c 'import sys; print(f"{sys.implementation.name}-{sys.version_info.major}.{sys.version_info.minor}")')" >> $GITHUB_OUTPUT

      - name: Display Python version
        run: |
          python -c "import sys; print(f'Python {sys.version}')"
          python -c "import platform; print(f'Platform: {platform.platform()}')"
          python -c "import sysconfig; print(f'Python path: {sysconfig.get_path(\"stdlib\")}')"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ steps.python-info.outputs.cache-key }}-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ steps.python-info.outputs.cache-key }}-
            pip-${{ runner.os }}-

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install --quiet gcc

      - name: Upgrade pip and install build tools
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install --upgrade pip-tools

      - name: Install Poetry (if pyproject.toml exists)
        if: hashFiles('pyproject.toml') != ''
        run: |
          pip install poetry
          poetry config virtualenvs.create false

      - name: Install dependencies with Poetry
        if: hashFiles('pyproject.toml') != ''
        run: |
          poetry install --with dev,test

      - name: Install dependencies with pip (fallback)
        if: hashFiles('pyproject.toml') == ''
        run: |
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Install additional test dependencies
        run: |
          pip install pytest pytest-cov pytest-xdist pytest-timeout
          pip install hypothesis coverage[toml] tox
          pip install mypy black isort flake8 bandit safety

      - name: Verify installation
        run: |
          python -c "import sys; print('Python executable:', sys.executable)"
          python -c "import anomaly_detection; print('anomaly_detection version:', getattr(anomaly_detection, '__version__', 'dev'))" || echo "anomaly_detection not yet installable"
          pip list

      - name: Run linting (Python 3.11+ only)
        if: matrix.python-version != '3.14-dev'
        continue-on-error: true
        run: |
          # Black formatting check
          black --check --diff src/ tests/ scripts/ || echo "Black formatting issues found"

          # isort import sorting check
          isort --check-only --diff src/ tests/ scripts/ || echo "Import sorting issues found"

          # Flake8 linting
          flake8 src/ tests/ scripts/ --max-line-length=100 --ignore=E203,W503 || echo "Flake8 issues found"

      - name: Run type checking (Python 3.11+ only)
        if: matrix.python-version != '3.14-dev'
        continue-on-error: true
        run: |
          mypy src/ --ignore-missing-imports || echo "Type checking issues found"

      - name: Run security checks
        continue-on-error: true
        run: |
          # Bandit security linting
          bandit -r src/ -f json -o bandit-report.json || echo "Security issues found"

          # Safety dependency vulnerability check
          safety check --json --output safety-report.json || echo "Dependency vulnerabilities found"

      - name: Run basic unit tests
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          pytest tests/ \
            --verbose \
            --tb=short \
            --maxfail=10 \
            --timeout=300 \
            --durations=10 \
            --cov=src/anomaly_detection \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=75

      - name: Run compatibility tests
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          # Test basic imports and functionality
          python -c "
          import sys
          print(f'Testing Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}')

          # Test critical imports
          try:
              import numpy as np
              print(f'✓ NumPy {np.__version__} imported successfully')
          except ImportError as e:
              print(f'✗ NumPy import failed: {e}')
              sys.exit(1)

          try:
              import pandas as pd
              print(f'✓ Pandas {pd.__version__} imported successfully')
          except ImportError as e:
              print(f'✗ Pandas import failed: {e}')
              sys.exit(1)

          try:
              import sklearn
              print(f'✓ Scikit-learn {sklearn.__version__} imported successfully')
          except ImportError as e:
              print(f'✗ Scikit-learn import failed: {e}')
              sys.exit(1)

          # Test async support (Python 3.11+)
          if sys.version_info >= (3, 11):
              import asyncio
              async def test_async():
                  return 'async works'
              result = asyncio.run(test_async())
              print(f'✓ Async support: {result}')

          # Test dataclass features
          from dataclasses import dataclass
          @dataclass
          class TestClass:
              value: int
          test_obj = TestClass(42)
          print(f'✓ Dataclass support: {test_obj}')

          print('✓ All compatibility tests passed')
          "

      - name: Run performance tests
        if: matrix.python-version != '3.14-dev'
        continue-on-error: true
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          # Basic performance benchmark
          python -c "
          import time
          import numpy as np

          # Test numpy performance
          start = time.time()
          data = np.random.rand(10000, 100)
          result = np.dot(data, data.T)
          duration = time.time() - start
          print(f'NumPy performance test: {duration:.3f}s')

          # Test basic Python performance
          start = time.time()
          result = sum(i*i for i in range(100000))
          duration = time.time() - start
          print(f'Python performance test: {duration:.3f}s')
          "

      - name: Run mutation testing (Python 3.11+ only)
        if: matrix.python-version != '3.14-dev' && (matrix.python-version == '3.11' || matrix.python-version == '3.12')
        continue-on-error: true
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          # Run limited mutation testing
          if [ -f "tests/advanced/mutation_testing_framework.py" ]; then
            python tests/advanced/mutation_testing_framework.py \
              --source-dir src/anomaly_detection \
              --test-dir tests \
              --max-mutations 10 \
              --test-command "python -m pytest" || echo "Mutation testing completed with issues"
          fi

      - name: Test documentation building
        if: matrix.python-version == '3.11'
        continue-on-error: true
        run: |
          pip install sphinx sphinx-rtd-theme
          # Mock documentation build
          python -c "
          import sys
          import importlib.util

          # Check if we can import all modules for documentation
          modules_to_check = [
              'anomaly_detection.domain',
              'anomaly_detection.application',
              'anomaly_detection.infrastructure',
              'anomaly_detection.presentation'
          ]

          for module_name in modules_to_check:
              try:
                  spec = importlib.util.find_spec(module_name)
                  if spec:
                      print(f'✓ {module_name} can be documented')
                  else:
                      print(f'? {module_name} not found (may not exist yet)')
              except Exception as e:
                  print(f'✗ {module_name} documentation check failed: {e}')
          "

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11' && runner.os == 'Linux'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-python${{ matrix.python-version }}
          path: |
            coverage.xml
            bandit-report.json
            safety-report.json
            .coverage
          retention-days: 30

      - name: Test report summary
        if: always()
        run: |
          echo "## Test Summary for Python ${{ matrix.python-version }} on ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- Python Version: ${{ steps.python-info.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Implementation: ${{ steps.python-info.outputs.implementation }}" >> $GITHUB_STEP_SUMMARY
          echo "- OS: ${{ runner.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  integration-tests:
    needs: [detect-changes, matrix-test]
    if: needs.detect-changes.outputs.python-code == 'true' || needs.detect-changes.outputs.dependencies == 'true'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --with dev,test

      - name: Run integration tests
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          pytest tests/ -m "integration" --verbose || echo "No integration tests found"

      - name: Run advanced testing frameworks
        continue-on-error: true
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          # Run property-based testing
          if [ -f "tests/advanced/property_testing_framework.py" ]; then
            python tests/advanced/property_testing_framework.py \
              --max-examples 20 \
              --timeout 30 || echo "Property testing completed with issues"
          fi

  version-compatibility-report:
    needs: matrix-test
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Generate compatibility report
        run: |
          echo "# Python Version Compatibility Report" >> compatibility-report.md
          echo "" >> compatibility-report.md
          echo "| Python Version | Ubuntu | Windows | macOS | Status |" >> compatibility-report.md
          echo "|---------------|---------|---------|--------|--------|" >> compatibility-report.md
          echo "| 3.11.4 | ✓ | ✓ | ✓ | Tested |" >> compatibility-report.md
          echo "| 3.11.x | ✓ | ✓ | ✓ | Tested |" >> compatibility-report.md
          echo "| 3.12.x | ✓ | ✓ | ✓ | Tested |" >> compatibility-report.md
          echo "| 3.13.x | ✓ | ✓ | ✓ | Tested |" >> compatibility-report.md
          echo "| 3.14-dev | ✓ | ⚠️ | ⚠️ | Beta |" >> compatibility-report.md
          echo "" >> compatibility-report.md
          echo "Generated on: $(date)" >> compatibility-report.md

      - name: Upload compatibility report
        uses: actions/upload-artifact@v3
        with:
          name: compatibility-report
          path: compatibility-report.md

  notify-on-failure:
    needs: [matrix-test, integration-tests]
    if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Notify on failure
        run: |
          echo "Multi-version Python testing failed on main branch"
          echo "Please check the test results and fix compatibility issues"
