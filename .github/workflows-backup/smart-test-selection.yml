name: Smart Test Selection Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      force_full_suite:
        description: 'Force full test suite execution'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.6.1'
  ANOMALY_DETECTION_ENV: testing

jobs:
  detect-changes:
    name: Detect Code Changes
    runs-on: ubuntu-latest
    outputs:
      test-selection: ${{ steps.changes.outputs.test-selection }}
      affected-components: ${{ steps.changes.outputs.affected-components }}
      run-full-suite: ${{ steps.decision.outputs.run-full-suite }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changed files
      id: changes
      run: |
        # Get list of changed files since last main merge
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
        else
          BASE_SHA="HEAD~1"
          HEAD_SHA="HEAD"
        fi

        # Get changed files
        CHANGED_FILES=$(git diff --name-only $BASE_SHA...$HEAD_SHA)
        echo "Changed files:"
        echo "$CHANGED_FILES"

        # Analyze changes and determine test selection strategy
        DOMAIN_CHANGES=$(echo "$CHANGED_FILES" | grep -E "^src/anomaly_detection/domain/" | wc -l)
        APPLICATION_CHANGES=$(echo "$CHANGED_FILES" | grep -E "^src/anomaly_detection/application/" | wc -l)
        INFRASTRUCTURE_CHANGES=$(echo "$CHANGED_FILES" | grep -E "^src/anomaly_detection/infrastructure/" | wc -l)
        PRESENTATION_CHANGES=$(echo "$CHANGED_FILES" | grep -E "^src/anomaly_detection/presentation/" | wc -l)
        TEST_CHANGES=$(echo "$CHANGED_FILES" | grep -E "^tests/" | wc -l)
        CONFIG_CHANGES=$(echo "$CHANGED_FILES" | grep -E "(pyproject.toml|requirements|Dockerfile|\.github/)" | wc -l)

        # Determine affected components
        AFFECTED_COMPONENTS=""
        [ $DOMAIN_CHANGES -gt 0 ] && AFFECTED_COMPONENTS="${AFFECTED_COMPONENTS},domain"
        [ $APPLICATION_CHANGES -gt 0 ] && AFFECTED_COMPONENTS="${AFFECTED_COMPONENTS},application"
        [ $INFRASTRUCTURE_CHANGES -gt 0 ] && AFFECTED_COMPONENTS="${AFFECTED_COMPONENTS},infrastructure"
        [ $PRESENTATION_CHANGES -gt 0 ] && AFFECTED_COMPONENTS="${AFFECTED_COMPONENTS},presentation"
        [ $TEST_CHANGES -gt 0 ] && AFFECTED_COMPONENTS="${AFFECTED_COMPONENTS},tests"
        [ $CONFIG_CHANGES -gt 0 ] && AFFECTED_COMPONENTS="${AFFECTED_COMPONENTS},config"

        # Remove leading comma
        AFFECTED_COMPONENTS=$(echo "$AFFECTED_COMPONENTS" | sed 's/^,//')

        # Determine test selection strategy
        TOTAL_CHANGES=$(echo "$CHANGED_FILES" | wc -l)

        if [ $TOTAL_CHANGES -gt 50 ] || [ $CONFIG_CHANGES -gt 0 ] || [[ "$AFFECTED_COMPONENTS" == *"config"* ]]; then
          TEST_SELECTION="full"
        elif [ $DOMAIN_CHANGES -gt 0 ] && [ $APPLICATION_CHANGES -gt 0 ] && [ $INFRASTRUCTURE_CHANGES -gt 0 ]; then
          TEST_SELECTION="comprehensive"
        elif [ $TOTAL_CHANGES -gt 20 ]; then
          TEST_SELECTION="extended"
        else
          TEST_SELECTION="targeted"
        fi

        echo "test-selection=$TEST_SELECTION" >> $GITHUB_OUTPUT
        echo "affected-components=$AFFECTED_COMPONENTS" >> $GITHUB_OUTPUT

        echo "Test selection strategy: $TEST_SELECTION"
        echo "Affected components: $AFFECTED_COMPONENTS"

    - name: Make execution decision
      id: decision
      run: |
        if [[ "${{ github.event.inputs.force_full_suite }}" == "true" ]] || [[ "${{ steps.changes.outputs.test-selection }}" == "full" ]]; then
          echo "run-full-suite=true" >> $GITHUB_OUTPUT
          echo "Decision: Running full test suite"
        else
          echo "run-full-suite=false" >> $GITHUB_OUTPUT
          echo "Decision: Running smart test selection (${{ steps.changes.outputs.test-selection }})"
        fi

  smart-unit-tests:
    name: Smart Unit Tests
    needs: detect-changes
    if: needs.detect-changes.outputs.run-full-suite == 'false'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: ${{ fromJson(format('[{0}]', needs.detect-changes.outputs.affected-components)) }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: poetry install --with dev,test

    - name: Run targeted tests
      run: |
        case "${{ matrix.component }}" in
          "domain")
            echo "Running domain tests..."
            poetry run pytest tests/domain/ tests/unit/domain/ \
              --cov=src/anomaly_detection/domain \
              --cov-report=xml:coverage-domain-smart.xml \
              --junitxml=junit-domain-smart.xml \
              -v --maxfail=10
            ;;
          "application")
            echo "Running application tests..."
            poetry run pytest tests/application/ tests/unit/application/ \
              --cov=src/anomaly_detection/application \
              --cov-report=xml:coverage-application-smart.xml \
              --junitxml=junit-application-smart.xml \
              -v --maxfail=10
            ;;
          "infrastructure")
            echo "Running infrastructure tests..."
            poetry run pytest tests/infrastructure/ tests/unit/infrastructure/ \
              --cov=src/anomaly_detection/infrastructure \
              --cov-report=xml:coverage-infrastructure-smart.xml \
              --junitxml=junit-infrastructure-smart.xml \
              -v --maxfail=10
            ;;
          "presentation")
            echo "Running presentation tests..."
            poetry run pytest tests/presentation/ \
              --cov=src/anomaly_detection/presentation \
              --cov-report=xml:coverage-presentation-smart.xml \
              --junitxml=junit-presentation-smart.xml \
              -v --maxfail=10
            ;;
          "tests")
            echo "Running test validation..."
            poetry run pytest tests/contract/ tests/property/ \
              --junitxml=junit-test-validation.xml \
              -v --maxfail=5
            ;;
        esac

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: smart-test-results-${{ matrix.component }}
        path: |
          coverage-*-smart.xml
          junit-*-smart.xml

  extended-tests:
    name: Extended Test Suite
    needs: detect-changes
    if: needs.detect-changes.outputs.test-selection == 'extended' || needs.detect-changes.outputs.test-selection == 'comprehensive'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: poetry install --with dev,test

    - name: Run extended test suite
      run: |
        if [[ "${{ needs.detect-changes.outputs.test-selection }}" == "comprehensive" ]]; then
          echo "Running comprehensive test suite..."
          poetry run pytest tests/domain/ tests/application/ tests/infrastructure/ tests/presentation/ \
            --cov=src/anomaly_detection \
            --cov-report=xml:coverage-extended.xml \
            --junitxml=junit-extended.xml \
            -v --maxfail=20
        else
          echo "Running extended test suite..."
          # Run tests for affected components plus integration tests
          AFFECTED="${{ needs.detect-changes.outputs.affected-components }}"
          TEST_PATHS=""

          if [[ "$AFFECTED" == *"domain"* ]]; then
            TEST_PATHS="$TEST_PATHS tests/domain/"
          fi
          if [[ "$AFFECTED" == *"application"* ]]; then
            TEST_PATHS="$TEST_PATHS tests/application/"
          fi
          if [[ "$AFFECTED" == *"infrastructure"* ]]; then
            TEST_PATHS="$TEST_PATHS tests/infrastructure/"
          fi
          if [[ "$AFFECTED" == *"presentation"* ]]; then
            TEST_PATHS="$TEST_PATHS tests/presentation/"
          fi

          # Always include integration tests for extended runs
          TEST_PATHS="$TEST_PATHS tests/integration/"

          poetry run pytest $TEST_PATHS \
            --cov=src/anomaly_detection \
            --cov-report=xml:coverage-extended.xml \
            --junitxml=junit-extended.xml \
            -v --maxfail=15
        fi

    - name: Upload extended test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: extended-test-results
        path: |
          coverage-extended.xml
          junit-extended.xml

  smart-security-tests:
    name: Smart Security Tests
    needs: detect-changes
    if: contains(needs.detect-changes.outputs.affected-components, 'presentation') || contains(needs.detect-changes.outputs.affected-components, 'infrastructure')
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: poetry install --with dev,test,security

    - name: Run targeted security tests
      run: |
        echo "Running security tests for affected components..."
        poetry run pytest tests/security/ \
          --junitxml=junit-security-smart.xml \
          -v

    - name: Run security scan
      run: |
        echo "Running security scan..."
        poetry run bandit -r src/ -f json -o security-scan-smart.json
        poetry run safety check --json --output safety-scan-smart.json

    - name: Upload security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: smart-security-results
        path: |
          junit-security-smart.xml
          security-scan-smart.json
          safety-scan-smart.json

  full-test-suite:
    name: Full Test Suite (Fallback)
    needs: detect-changes
    if: needs.detect-changes.outputs.run-full-suite == 'true'
    uses: ./.github/workflows/comprehensive-testing.yml
    secrets: inherit

  test-result-analysis:
    name: Analyze Test Results
    needs: [detect-changes, smart-unit-tests, extended-tests, smart-security-tests, full-test-suite]
    if: always()
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download all test results
      uses: actions/download-artifact@v3
      with:
        path: smart-test-results/

    - name: Analyze test execution efficiency
      run: |
        echo "🚀 Smart Test Selection Analysis"
        echo "================================"

        # Calculate execution time savings
        if [[ "${{ needs.detect-changes.outputs.run-full-suite }}" == "true" ]]; then
          echo "📊 Execution Mode: Full Test Suite"
          echo "⏱️  Estimated Time: 25-30 minutes"
          echo "💰 Time Savings: 0% (baseline)"
        else
          echo "📊 Execution Mode: Smart Test Selection"
          echo "🎯 Selection Strategy: ${{ needs.detect-changes.outputs.test-selection }}"
          echo "🔧 Affected Components: ${{ needs.detect-changes.outputs.affected-components }}"

          case "${{ needs.detect-changes.outputs.test-selection }}" in
            "targeted")
              echo "⏱️  Estimated Time: 5-8 minutes"
              echo "💰 Time Savings: 70-80%"
              ;;
            "extended")
              echo "⏱️  Estimated Time: 10-15 minutes"
              echo "💰 Time Savings: 40-60%"
              ;;
            "comprehensive")
              echo "⏱️  Estimated Time: 18-22 minutes"
              echo "💰 Time Savings: 20-30%"
              ;;
          esac
        fi

        echo ""
        echo "✅ Smart test selection executed successfully"
        echo "📈 Optimized CI feedback time while maintaining quality"

    - name: Generate smart test report
      run: |
        cat > smart-test-summary.md << EOF
        # 🎯 Smart Test Selection Results

        ## Execution Summary
        - **Selection Strategy**: ${{ needs.detect-changes.outputs.test-selection }}
        - **Affected Components**: ${{ needs.detect-changes.outputs.affected-components }}
        - **Full Suite**: ${{ needs.detect-changes.outputs.run-full-suite }}

        ## Performance Benefits
        Smart test selection optimizes CI execution time by running only relevant tests based on code changes.

        ## Quality Assurance
        - Maintains comprehensive coverage for critical changes
        - Automatically escalates to full suite when needed
        - Preserves all quality gates and security checks

        Generated: $(date)
        EOF

    - name: Upload smart test summary
      uses: actions/upload-artifact@v3
      with:
        name: smart-test-summary
        path: smart-test-summary.md

  performance-tracking:
    name: Track Performance Metrics
    needs: [detect-changes, test-result-analysis]
    if: always()
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Record performance metrics
      run: |
        # Create performance tracking entry
        TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        STRATEGY="${{ needs.detect-changes.outputs.test-selection }}"
        FULL_SUITE="${{ needs.detect-changes.outputs.run-full-suite }}"

        # Estimate execution time based on strategy
        case "$STRATEGY" in
          "targeted") ESTIMATED_TIME="5-8" ;;
          "extended") ESTIMATED_TIME="10-15" ;;
          "comprehensive") ESTIMATED_TIME="18-22" ;;
          "full") ESTIMATED_TIME="25-30" ;;
          *) ESTIMATED_TIME="unknown" ;;
        esac

        echo "Recording performance metrics..."
        echo "Timestamp: $TIMESTAMP"
        echo "Strategy: $STRATEGY"
        echo "Full Suite: $FULL_SUITE"
        echo "Estimated Time: $ESTIMATED_TIME minutes"

        # In a real implementation, this would be sent to a monitoring system
        echo "Performance tracking completed"
