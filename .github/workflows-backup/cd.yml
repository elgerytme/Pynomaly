name: Continuous Deployment

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

permissions:
  contents: read
  packages: write
  id-token: write

env:
  PYTHON_VERSION: "3.12"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Hatch
      run: |
        python -m pip install --upgrade pip
        pip install hatch

    - name: Run tests
      run: |
        hatch run test:run tests/test_core_functionality.py tests/test_setup.py -v

    - name: Build package
      run: |
        hatch build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deploy/docker/Dockerfile.api
        push: true
        tags: ${{ steps.meta.outputs.tags }}-api
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Web UI image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deploy/docker/Dockerfile.web
        push: true
        tags: ${{ steps.meta.outputs.tags }}-web
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.anomaly_detection.io

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_STAGING }}
        aws-region: us-west-2

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-west-2 --name anomaly_detection-staging

    - name: Deploy to Kubernetes (Staging)
      run: |
        kubectl apply -f deploy/kubernetes/staging/
        kubectl rollout status deployment/anomaly_detection-api -n anomaly_detection-staging
        kubectl rollout status deployment/anomaly_detection-web -n anomaly_detection-staging

    - name: Run smoke tests
      run: |
        # Wait for deployment to be ready
        sleep 30

        # Get staging URL
        STAGING_URL=$(kubectl get ingress anomaly_detection-ingress -n anomaly_detection-staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

        # Run basic health checks
        curl -f "https://${STAGING_URL}/api/health" || exit 1
        curl -f "https://${STAGING_URL}/" || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build]
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://anomaly_detection.io

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_PRODUCTION }}
        aws-region: us-west-2

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-west-2 --name anomaly_detection-production

    - name: Deploy to Kubernetes (Production)
      run: |
        kubectl apply -f deploy/kubernetes/production/
        kubectl rollout status deployment/anomaly_detection-api -n anomaly_detection-production
        kubectl rollout status deployment/anomaly_detection-web -n anomaly_detection-production

    - name: Run production smoke tests
      run: |
        # Wait for deployment to be ready
        sleep 60

        # Get production URL
        PROD_URL=$(kubectl get ingress anomaly_detection-ingress -n anomaly_detection-production -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

        # Run comprehensive health checks
        curl -f "https://${PROD_URL}/api/health" || exit 1
        curl -f "https://${PROD_URL}/api/docs" || exit 1
        curl -f "https://${PROD_URL}/" || exit 1

  publish-package:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'release'
    environment:
      name: pypi
      url: https://pypi.org/project/anomaly_detection/

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Hatch
      run: |
        python -m pip install --upgrade pip
        pip install hatch

    - name: Build package
      run: |
        hatch build

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, publish-package]
    if: always()

    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
