name: üîÑ Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  PYTEST_TIMEOUT: 300
  COVERAGE_MIN: 80

jobs:
  setup:
    name: üöÄ Setup Test Environment
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Generate Cache Key
        id: cache-key
        run: |
          echo "key=deps-${{ runner.os }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}" >> $GITHUB_OUTPUT
      
      - name: Set Test Matrix
        id: set-matrix
        run: |
          echo "matrix={\"python-version\": [\"3.9\", \"3.10\", \"3.11\"], \"os\": [\"ubuntu-latest\", \"windows-latest\", \"macos-latest\"]}" >> $GITHUB_OUTPUT

  security-scan:
    name: üîí Security Scanning
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.cache-key }}
      
      - name: Install Security Tools
        run: |
          pip install safety bandit semgrep
      
      - name: Run Safety Check
        run: |
          safety check --json --output security_report.json || true
      
      - name: Run Bandit Security Scan
        run: |
          bandit -r src/ -f json -o bandit_report.json || true
      
      - name: Run Semgrep Security Scan
        run: |
          semgrep --config=auto --json --output=semgrep_report.json src/ || true
      
      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            security_report.json
            bandit_report.json
            semgrep_report.json

  dependency-scan:
    name: üì¶ Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install pip-audit
        run: |
          pip install pip-audit
      
      - name: Run Dependency Audit
        run: |
          pip-audit --format=json --output=dependency_audit.json || true
      
      - name: Upload Dependency Report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan
          path: dependency_audit.json

  code-quality:
    name: üìä Code Quality Analysis
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.cache-key }}
      
      - name: Install Quality Tools
        run: |
          pip install black isort flake8 mypy pylint radon complexity-report
      
      - name: Run Black Format Check
        run: |
          black --check --diff src/ tests/ || true
      
      - name: Run isort Import Check
        run: |
          isort --check-only --diff src/ tests/ || true
      
      - name: Run Flake8 Linting
        run: |
          flake8 src/ tests/ --format=json --output-file=flake8_report.json || true
      
      - name: Run MyPy Type Check
        run: |
          mypy src/ --json-report mypy_report || true
      
      - name: Run Pylint Analysis
        run: |
          pylint src/ --output-format=json > pylint_report.json || true
      
      - name: Run Complexity Analysis
        run: |
          radon cc src/ --json > complexity_report.json || true
      
      - name: Upload Quality Reports
        uses: actions/upload-artifact@v3
        with:
          name: code-quality-reports
          path: |
            flake8_report.json
            mypy_report/
            pylint_report.json
            complexity_report.json

  unit-tests:
    name: üß™ Unit Tests
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.cache-key }}-${{ matrix.python-version }}-${{ matrix.os }}
      
      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -e .[test]
          pip install pytest pytest-cov pytest-xdist pytest-timeout
      
      - name: Run Unit Tests
        run: |
          pytest tests/unit/ \
            --cov=src/anomaly_detection \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=${{ env.COVERAGE_MIN }} \
            --timeout=${{ env.PYTEST_TIMEOUT }} \
            --junit-xml=junit_unit.xml \
            -v \
            --tb=short
      
      - name: Upload Unit Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results-${{ matrix.python-version }}-${{ matrix.os }}
          path: |
            junit_unit.xml
            coverage.xml
            htmlcov/
      
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unit-tests
          name: unit-${{ matrix.python-version }}-${{ matrix.os }}

  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: anomaly_detection_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.cache-key }}
      
      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -e .[test]
          pip install pytest pytest-cov pytest-asyncio
      
      - name: Run Integration Tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/anomaly_detection_test
          REDIS_URL: redis://localhost:6379
        run: |
          pytest tests/integration/ \
            --cov=src/anomaly_detection \
            --cov-report=xml \
            --cov-append \
            --timeout=${{ env.PYTEST_TIMEOUT }} \
            --junit-xml=junit_integration.xml \
            -v \
            --tb=short
      
      - name: Upload Integration Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: |
            junit_integration.xml
            coverage.xml

  api-tests:
    name: üåê API Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -e .[test]
          pip install requests pytest pytest-asyncio
      
      - name: Start API Server
        run: |
          python -m anomaly_detection.presentation.api.main &
          sleep 10
        env:
          ENVIRONMENT: test
      
      - name: Run API Tests
        run: |
          pytest tests/api/ \
            --timeout=${{ env.PYTEST_TIMEOUT }} \
            --junit-xml=junit_api.xml \
            -v \
            --tb=short
      
      - name: Upload API Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: api-test-results
          path: junit_api.xml

  performance-tests:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -e .[test]
          pip install pytest-benchmark locust
      
      - name: Run Performance Tests
        run: |
          pytest tests/performance/ \
            --benchmark-json=benchmark_results.json \
            --timeout=${{ env.PYTEST_TIMEOUT }} \
            --junit-xml=junit_performance.xml \
            -v \
            --tb=short
      
      - name: Upload Performance Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: |
            junit_performance.xml
            benchmark_results.json

  load-tests:
    name: üìà Load Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -e .[test]
          pip install locust
      
      - name: Start API Server
        run: |
          python -m anomaly_detection.presentation.api.main &
          sleep 10
        env:
          ENVIRONMENT: test
      
      - name: Run Load Tests
        run: |
          locust -f tests/load/locustfile.py \
            --headless \
            --users 10 \
            --spawn-rate 2 \
            --run-time 60s \
            --host http://localhost:8000 \
            --html load_test_report.html \
            --csv load_test_results
      
      - name: Upload Load Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: load-test-results
          path: |
            load_test_report.html
            load_test_results*

  docker-tests:
    name: üê≥ Docker Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker Image
        run: |
          docker build -t anomaly_detection:test .
      
      - name: Run Docker Security Scan
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/app \
            aquasec/trivy:latest image anomaly_detection:test \
            --format json \
            --output docker_security_scan.json || true
      
      - name: Test Docker Container
        run: |
          docker run --rm -d --name anomaly_detection-test -p 8000:8000 anomaly_detection:test
          sleep 10
          curl -f http://localhost:8000/health || exit 1
          docker stop anomaly_detection-test
      
      - name: Upload Docker Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: docker-test-results
          path: docker_security_scan.json

  e2e-tests:
    name: üé≠ End-to-End Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install Python Dependencies
        run: |
          pip install --upgrade pip
          pip install -e .[test]
      
      - name: Install Playwright
        run: |
          pip install playwright
          playwright install chromium
      
      - name: Start Application
        run: |
          python -m anomaly_detection.presentation.api.main &
          sleep 10
        env:
          ENVIRONMENT: test
      
      - name: Run E2E Tests
        run: |
          pytest tests/e2e/ \
            --timeout=${{ env.PYTEST_TIMEOUT }} \
            --junit-xml=junit_e2e.xml \
            -v \
            --tb=short
      
      - name: Upload E2E Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            junit_e2e.xml
            test-results/

  mutation-tests:
    name: üß¨ Mutation Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -e .[test]
          pip install mutmut
      
      - name: Run Mutation Tests
        run: |
          mutmut run --paths-to-mutate src/ --runner "pytest tests/unit/" || true
      
      - name: Generate Mutation Report
        run: |
          mutmut html > mutation_report.html || true
      
      - name: Upload Mutation Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: mutation-test-results
          path: mutation_report.html

  report-generation:
    name: üìä Generate Test Reports
    runs-on: ubuntu-latest
    needs: [
      security-scan,
      dependency-scan,
      code-quality,
      unit-tests,
      integration-tests,
      api-tests,
      performance-tests,
      load-tests,
      docker-tests,
      e2e-tests,
      mutation-tests
    ]
    if: always()
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
      
      - name: Install Report Tools
        run: |
          pip install jinja2 markdown
      
      - name: Generate Comprehensive Report
        run: |
          python scripts/testing/generate_test_report.py
      
      - name: Upload Comprehensive Report
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-test-report
          path: |
            test_report.html
            test_report.json

  notification:
    name: üì¢ Send Notifications
    runs-on: ubuntu-latest
    needs: [report-generation]
    if: always()
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Notify on Success
        if: ${{ needs.report-generation.result == 'success' }}
        run: |
          echo "‚úÖ All tests passed successfully!"
      
      - name: Notify on Failure
        if: ${{ needs.report-generation.result != 'success' }}
        run: |
          echo "‚ùå Some tests failed. Check the reports for details."
      
      - name: Send Slack Notification
        if: ${{ always() && github.event_name != 'pull_request' }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#anomaly_detection-ci'
          text: |
            Testing Pipeline Results:
            - Security Scan: ${{ needs.security-scan.result }}
            - Code Quality: ${{ needs.code-quality.result }}
            - Unit Tests: ${{ needs.unit-tests.result }}
            - Integration Tests: ${{ needs.integration-tests.result }}
            - Performance Tests: ${{ needs.performance-tests.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [notification]
    if: always()
    steps:
      - name: Cleanup Artifacts
        run: |
          echo "Cleaning up temporary artifacts..."
          # Add cleanup logic here if needed
      
      - name: Summary
        run: |
          echo "üéâ Comprehensive testing pipeline completed!"
          echo "Check the artifacts for detailed reports."
