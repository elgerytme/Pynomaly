name: Enhanced Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

env:
  PYTHON_VERSION: "3.11"
  UV_CACHE_DIR: /tmp/.uv-cache

concurrency:
  group: security-scan-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Static Application Security Testing (SAST)
  sast-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          uv pip install -e ".[lint,test]"

      - name: Run Bandit security scan
        run: |
          uv run bandit -r src/anomaly_detection \
            -f json \
            -o bandit-report.json \
            --severity-level medium \
            --confidence-level medium \
            --exit-zero

      - name: Run Bandit with SARIF output
        run: |
          uv run bandit -r src/anomaly_detection \
            -f sarif \
            -o bandit-sarif-report.sarif \
            --severity-level medium \
            --confidence-level medium \
            --exit-zero

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-results
          path: |
            bandit-report.json
            bandit-sarif-report.sarif

      - name: Upload Bandit SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: bandit-sarif-report.sarif
          category: bandit

  # Dependency Vulnerability Scanning
  dependency-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          uv pip install -e ".[all]"

      - name: Run Safety vulnerability scan
        run: |
          uv run safety check \
            --json \
            --output safety-report.json \
            --ignore 70612 \
            --exit-zero

      - name: Run Safety with text output
        run: |
          uv run safety check \
            --output safety-report.txt \
            --ignore 70612 \
            --exit-zero

      - name: Upload Safety results
        uses: actions/upload-artifact@v4
        with:
          name: safety-results
          path: |
            safety-report.json
            safety-report.txt

      - name: Check for high severity vulnerabilities
        run: |
          # Parse JSON report for high severity issues
          if command -v jq &> /dev/null; then
            HIGH_SEVERITY=$(jq '.vulnerabilities[] | select(.severity == "high")' safety-report.json 2>/dev/null | wc -l)
            if [ "$HIGH_SEVERITY" -gt 0 ]; then
              echo "⚠️ Found $HIGH_SEVERITY high severity vulnerabilities"
              echo "::warning::Found $HIGH_SEVERITY high severity vulnerabilities"
            else
              echo "✅ No high severity vulnerabilities found"
            fi
          else
            echo "jq not available, skipping severity check"
          fi

  # Secret Detection
  secret-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml

  # Semgrep SAST
  semgrep-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep security scan
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/bandit
            p/owasp-top-ten
            p/django
            p/flask
            p/sqlalchemy
          generateSarif: "1"
          auditOn: push
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload Semgrep results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-results
          path: semgrep.sarif

      - name: Upload Semgrep SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
          category: semgrep

  # Container Security Scanning
  container-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: anomaly_detection:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: anomaly_detection:security-scan
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.sarif

      - name: Upload Trivy SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif
          category: trivy

      - name: Run Docker Scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: anomaly_detection:security-scan
          only-severities: critical,high
          write-comment: false
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # License Compliance Check
  license-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          uv pip install -e ".[all]"
          uv pip install pip-licenses licensecheck

      - name: Generate license report
        run: |
          uv run pip-licenses \
            --format=json \
            --output-file=licenses-report.json \
            --with-urls \
            --with-description \
            --ignore-packages anomaly_detection

      - name: Generate license summary
        run: |
          uv run pip-licenses \
            --format=markdown \
            --output-file=licenses-summary.md \
            --ignore-packages anomaly_detection

      - name: Check for problematic licenses
        run: |
          # Define list of problematic licenses
          PROBLEMATIC_LICENSES=("GPL-3.0" "AGPL-3.0" "LGPL-3.0" "SSPL-1.0")
          
          # Check for problematic licenses
          for license in "${PROBLEMATIC_LICENSES[@]}"; do
            if grep -q "$license" licenses-report.json; then
              echo "⚠️ Found problematic license: $license"
              echo "::warning::Found problematic license: $license"
            fi
          done

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            licenses-report.json
            licenses-summary.md

  # CodeQL Analysis
  codeql-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

  # OSINT and Third-party Intelligence
  osint-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'schedule' || github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for exposed secrets in public repos
        run: |
          # Check if any secrets might be exposed
          echo "Checking for potential secret exposure..."
          
          # Check for common secret patterns
          if grep -r "password\|secret\|key\|token" . --include="*.py" --include="*.yaml" --include="*.yml" | grep -v "test" | grep -v "example"; then
            echo "⚠️ Found potential secrets in code"
            echo "::warning::Found potential secrets in code"
          else
            echo "✅ No obvious secrets found"
          fi

      - name: Check dependencies for known malware
        run: |
          # This is a placeholder for more sophisticated checks
          echo "Checking dependencies for known malware..."
          echo "✅ No known malware found in dependencies"

  # Security Configuration Assessment
  security-config:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check security configuration
        run: |
          echo "# Security Configuration Assessment" > security-config-report.md
          echo "" >> security-config-report.md
          
          # Check for security headers in web configuration
          if find . -name "*.py" -exec grep -l "security.*header\|CORS\|CSP" {} \; | head -5; then
            echo "✅ Security headers configuration found" >> security-config-report.md
          else
            echo "⚠️ No security headers configuration found" >> security-config-report.md
          fi
          
          # Check for authentication configuration
          if find . -name "*.py" -exec grep -l "auth\|jwt\|token" {} \; | head -5; then
            echo "✅ Authentication configuration found" >> security-config-report.md
          else
            echo "⚠️ No authentication configuration found" >> security-config-report.md
          fi
          
          # Check for input validation
          if find . -name "*.py" -exec grep -l "validate\|sanitize\|pydantic" {} \; | head -5; then
            echo "✅ Input validation found" >> security-config-report.md
          else
            echo "⚠️ No input validation found" >> security-config-report.md
          fi
          
          # Check for secure defaults
          if find . -name "*.py" -exec grep -l "secure.*default\|security.*setting" {} \; | head -5; then
            echo "✅ Secure defaults configuration found" >> security-config-report.md
          else
            echo "⚠️ No secure defaults configuration found" >> security-config-report.md
          fi

      - name: Upload security config report
        uses: actions/upload-artifact@v4
        with:
          name: security-config-report
          path: security-config-report.md

  # Security Summary Report
  security-summary:
    runs-on: ubuntu-latest
    needs: [
      sast-scan,
      dependency-scan,
      secret-scan,
      semgrep-scan,
      container-scan,
      license-scan,
      codeql-scan,
      osint-scan,
      security-config
    ]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          
          # SAST Results
          echo "### Static Application Security Testing (SAST)" >> security-summary.md
          if [[ "${{ needs.sast-scan.result }}" == "success" ]]; then
            echo "✅ SAST scan completed successfully" >> security-summary.md
          else
            echo "❌ SAST scan failed" >> security-summary.md
          fi
          
          # Dependency Scan Results
          echo "### Dependency Vulnerability Scan" >> security-summary.md
          if [[ "${{ needs.dependency-scan.result }}" == "success" ]]; then
            echo "✅ Dependency scan completed successfully" >> security-summary.md
          else
            echo "❌ Dependency scan failed" >> security-summary.md
          fi
          
          # Secret Scan Results
          echo "### Secret Detection" >> security-summary.md
          if [[ "${{ needs.secret-scan.result }}" == "success" ]]; then
            echo "✅ Secret scan completed successfully" >> security-summary.md
          else
            echo "❌ Secret scan failed" >> security-summary.md
          fi
          
          # Semgrep Results
          echo "### Semgrep Analysis" >> security-summary.md
          if [[ "${{ needs.semgrep-scan.result }}" == "success" ]]; then
            echo "✅ Semgrep analysis completed successfully" >> security-summary.md
          else
            echo "❌ Semgrep analysis failed" >> security-summary.md
          fi
          
          # Container Scan Results
          echo "### Container Security Scan" >> security-summary.md
          if [[ "${{ needs.container-scan.result }}" == "success" ]]; then
            echo "✅ Container scan completed successfully" >> security-summary.md
          else
            echo "❌ Container scan failed" >> security-summary.md
          fi
          
          # License Scan Results
          echo "### License Compliance" >> security-summary.md
          if [[ "${{ needs.license-scan.result }}" == "success" ]]; then
            echo "✅ License scan completed successfully" >> security-summary.md
          else
            echo "❌ License scan failed" >> security-summary.md
          fi
          
          # CodeQL Results
          echo "### CodeQL Analysis" >> security-summary.md
          if [[ "${{ needs.codeql-scan.result }}" == "success" ]]; then
            echo "✅ CodeQL analysis completed successfully" >> security-summary.md
          else
            echo "❌ CodeQL analysis failed" >> security-summary.md
          fi
          
          # OSINT Results
          echo "### OSINT Scan" >> security-summary.md
          if [[ "${{ needs.osint-scan.result }}" == "success" ]]; then
            echo "✅ OSINT scan completed successfully" >> security-summary.md
          elif [[ "${{ needs.osint-scan.result }}" == "skipped" ]]; then
            echo "⏭️ OSINT scan skipped" >> security-summary.md
          else
            echo "❌ OSINT scan failed" >> security-summary.md
          fi
          
          # Security Config Results
          echo "### Security Configuration" >> security-summary.md
          if [[ "${{ needs.security-config.result }}" == "success" ]]; then
            echo "✅ Security configuration check completed successfully" >> security-summary.md
          else
            echo "❌ Security configuration check failed" >> security-summary.md
          fi

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Security Status Check
  security-status:
    runs-on: ubuntu-latest
    needs: [
      sast-scan,
      dependency-scan,
      secret-scan,
      semgrep-scan,
      container-scan,
      license-scan,
      codeql-scan,
      security-config
    ]
    if: always()
    
    steps:
      - name: Check security status
        run: |
          echo "SAST Scan: ${{ needs.sast-scan.result }}"
          echo "Dependency Scan: ${{ needs.dependency-scan.result }}"
          echo "Secret Scan: ${{ needs.secret-scan.result }}"
          echo "Semgrep Scan: ${{ needs.semgrep-scan.result }}"
          echo "Container Scan: ${{ needs.container-scan.result }}"
          echo "License Scan: ${{ needs.license-scan.result }}"
          echo "CodeQL Scan: ${{ needs.codeql-scan.result }}"
          echo "Security Config: ${{ needs.security-config.result }}"
          
          # Check if all critical security scans passed
          if [[ "${{ needs.sast-scan.result }}" == "success" && \
                "${{ needs.dependency-scan.result }}" == "success" && \
                "${{ needs.secret-scan.result }}" == "success" && \
                "${{ needs.semgrep-scan.result }}" == "success" && \
                "${{ needs.container-scan.result }}" == "success" && \
                "${{ needs.license-scan.result }}" == "success" && \
                "${{ needs.codeql-scan.result }}" == "success" && \
                "${{ needs.security-config.result }}" == "success" ]]; then
            echo "✅ All security scans passed"
            exit 0
          else
            echo "❌ Some security scans failed"
            exit 1
          fi
