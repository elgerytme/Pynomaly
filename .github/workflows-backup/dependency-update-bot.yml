name: Dependency Update Bot

on:
  schedule:
    - cron: '0 8 * * 1'  # Weekly on Monday at 8 AM UTC
    - cron: '0 8 1 * *'  # Monthly on the 1st at 8 AM UTC
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'minor'
        type: choice
        options:
          - 'patch'
          - 'minor'
          - 'major'
          - 'all'
      create_pr:
        description: 'Create PR for updates'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: "3.11"
  UV_CACHE_DIR: /tmp/.uv-cache
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  # Check for dependency updates
  check-updates:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      has_updates: ${{ steps.check.outputs.has_updates }}
      update_summary: ${{ steps.check.outputs.update_summary }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          uv pip install -e ".[all]"
          uv pip install pip-check-updates

      - name: Check for outdated dependencies
        id: check
        run: |
          echo "Checking for outdated dependencies..."
          
          # Check for outdated packages
          if uv pip list --outdated --format=json > outdated.json; then
            OUTDATED_COUNT=$(jq length outdated.json)
            echo "Found $OUTDATED_COUNT outdated packages"
            
            if [ "$OUTDATED_COUNT" -gt 0 ]; then
              echo "has_updates=true" >> $GITHUB_OUTPUT
              echo "update_summary=Found $OUTDATED_COUNT outdated packages" >> $GITHUB_OUTPUT
            else
              echo "has_updates=false" >> $GITHUB_OUTPUT
              echo "update_summary=No outdated packages found" >> $GITHUB_OUTPUT
            fi
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "update_summary=Failed to check for updates" >> $GITHUB_OUTPUT
          fi

      - name: Upload outdated packages report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: outdated-packages
          path: outdated.json

  # Update dependencies
  update-dependencies:
    runs-on: ubuntu-latest
    needs: check-updates
    if: needs.check-updates.outputs.has_updates == 'true'
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "Dependency Update Bot"
          git config --global user.email "bot@anomaly_detection.io"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Create virtual environment
        run: uv venv

      - name: Create update branch
        run: |
          BRANCH_NAME="dependency-updates-$(date +%Y%m%d)"
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Update pyproject.toml dependencies
        run: |
          # Create a backup of the original pyproject.toml
          cp pyproject.toml pyproject.toml.backup
          
          # Update dependencies based on input type
          UPDATE_TYPE="${{ github.event.inputs.update_type || 'minor' }}"
          
          echo "Updating dependencies with type: $UPDATE_TYPE"
          
          # Install current dependencies
          uv pip install -e ".[all]"
          
          # Generate updated requirements
          uv pip freeze > current_requirements.txt
          
          # For now, we'll do a simple version bump approach
          # In a real scenario, you'd want more sophisticated dependency management
          
          # Update specific dependency groups
          if [[ "$UPDATE_TYPE" == "patch" ]]; then
            echo "Performing patch updates..."
            # Update only patch versions
            uv pip install --upgrade --upgrade-strategy only-if-needed .
          elif [[ "$UPDATE_TYPE" == "minor" ]]; then
            echo "Performing minor updates..."
            # Update patch and minor versions
            uv pip install --upgrade .
          elif [[ "$UPDATE_TYPE" == "major" ]]; then
            echo "Performing major updates..."
            # Update all versions including major
            uv pip install --upgrade --upgrade-strategy eager .
          elif [[ "$UPDATE_TYPE" == "all" ]]; then
            echo "Performing all updates..."
            # Update everything
            uv pip install --upgrade --upgrade-strategy eager .
          fi
          
          # Generate new requirements
          uv pip freeze > updated_requirements.txt
          
          # Show differences
          echo "=== Dependency Changes ==="
          diff current_requirements.txt updated_requirements.txt || true

      - name: Update lock file
        run: |
          # Update uv lock file if it exists
          if [ -f "uv.lock" ]; then
            uv lock --upgrade
          fi

      - name: Run tests with updated dependencies
        run: |
          # Run a subset of tests to ensure basic functionality
          uv run pytest tests/ -m "not integration and not e2e" \
            --maxfail=5 \
            --tb=short \
            -q \
            --timeout=300

      - name: Run security checks
        run: |
          # Run security checks on updated dependencies
          uv run safety check --json --output safety-check.json || true
          uv run bandit -r src/anomaly_detection -f json -o bandit-check.json || true

      - name: Generate update report
        run: |
          echo "# Dependency Update Report" > update-report.md
          echo "" >> update-report.md
          echo "## Summary" >> update-report.md
          echo "- Update type: ${{ github.event.inputs.update_type || 'minor' }}" >> update-report.md
          echo "- Date: $(date)" >> update-report.md
          echo "" >> update-report.md
          
          echo "## Changes" >> update-report.md
          echo "\`\`\`diff" >> update-report.md
          diff current_requirements.txt updated_requirements.txt || true >> update-report.md
          echo "\`\`\`" >> update-report.md
          echo "" >> update-report.md
          
          echo "## Security Check" >> update-report.md
          if [ -f "safety-check.json" ]; then
            VULN_COUNT=$(jq '.vulnerabilities | length' safety-check.json 2>/dev/null || echo "0")
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "⚠️ Found $VULN_COUNT vulnerabilities in updated dependencies" >> update-report.md
            else
              echo "✅ No vulnerabilities found in updated dependencies" >> update-report.md
            fi
          fi
          
          echo "" >> update-report.md
          echo "## Test Results" >> update-report.md
          echo "✅ Basic tests passed with updated dependencies" >> update-report.md

      - name: Commit changes
        run: |
          git add .
          git commit -m "chore: update dependencies - ${{ github.event.inputs.update_type || 'minor' }} updates
          
          - Update type: ${{ github.event.inputs.update_type || 'minor' }}
          - Date: $(date)
          - Automated update by dependency-update-bot"

      - name: Push changes
        run: |
          git push origin "$BRANCH_NAME"

      - name: Create Pull Request
        if: github.event.inputs.create_pr != 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const updateReport = fs.readFileSync('update-report.md', 'utf8');
            
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `chore: dependency updates - ${{ github.event.inputs.update_type || 'minor' }}`,
              head: process.env.BRANCH_NAME,
              base: 'main',
              body: updateReport
            });
            
            console.log(`Created PR #${pr.number}`);
            
            // Add labels
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['dependencies', 'automated', 'bot']
            });

      - name: Upload update artifacts
        uses: actions/upload-artifact@v4
        with:
          name: update-artifacts
          path: |
            update-report.md
            current_requirements.txt
            updated_requirements.txt
            safety-check.json
            bandit-check.json

  # Security-focused updates
  security-updates:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "Security Update Bot"
          git config --global user.email "security-bot@anomaly_detection.io"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          uv pip install -e ".[all]"

      - name: Check for security vulnerabilities
        run: |
          uv run safety check --json --output security-audit.json || true
          
          # Parse vulnerabilities
          if [ -f "security-audit.json" ]; then
            VULN_COUNT=$(jq '.vulnerabilities | length' security-audit.json 2>/dev/null || echo "0")
            echo "Found $VULN_COUNT vulnerabilities"
            
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "SECURITY_UPDATES_NEEDED=true" >> $GITHUB_ENV
            else
              echo "SECURITY_UPDATES_NEEDED=false" >> $GITHUB_ENV
            fi
          fi

      - name: Create security update branch
        if: env.SECURITY_UPDATES_NEEDED == 'true'
        run: |
          BRANCH_NAME="security-updates-$(date +%Y%m%d)"
          git checkout -b "$BRANCH_NAME"
          echo "SECURITY_BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Update vulnerable dependencies
        if: env.SECURITY_UPDATES_NEEDED == 'true'
        run: |
          # Extract vulnerable packages and update them
          if [ -f "security-audit.json" ]; then
            # Get list of vulnerable packages
            jq -r '.vulnerabilities[].package_name' security-audit.json | sort -u > vulnerable_packages.txt
            
            # Update each vulnerable package
            while read -r package; do
              echo "Updating vulnerable package: $package"
              uv pip install --upgrade "$package" || true
            done < vulnerable_packages.txt
          fi

      - name: Verify security fixes
        if: env.SECURITY_UPDATES_NEEDED == 'true'
        run: |
          # Re-run security check
          uv run safety check --json --output security-audit-after.json || true
          
          # Compare before and after
          if [ -f "security-audit-after.json" ]; then
            VULN_COUNT_AFTER=$(jq '.vulnerabilities | length' security-audit-after.json 2>/dev/null || echo "0")
            echo "Vulnerabilities after update: $VULN_COUNT_AFTER"
            
            if [ "$VULN_COUNT_AFTER" -lt "$VULN_COUNT" ]; then
              echo "✅ Security vulnerabilities reduced"
              echo "SECURITY_FIXES_APPLIED=true" >> $GITHUB_ENV
            else
              echo "⚠️ Security vulnerabilities not fully resolved"
              echo "SECURITY_FIXES_APPLIED=false" >> $GITHUB_ENV
            fi
          fi

      - name: Run tests after security updates
        if: env.SECURITY_FIXES_APPLIED == 'true'
        run: |
          uv run pytest tests/ -m "not integration and not e2e" \
            --maxfail=10 \
            --tb=short \
            -q \
            --timeout=300

      - name: Commit security updates
        if: env.SECURITY_FIXES_APPLIED == 'true'
        run: |
          git add .
          git commit -m "fix: security updates - resolve vulnerabilities
          
          - Updated vulnerable dependencies
          - Resolved security issues found by safety check
          - Automated security update by security-update-bot"

      - name: Push security updates
        if: env.SECURITY_FIXES_APPLIED == 'true'
        run: |
          git push origin "$SECURITY_BRANCH_NAME"

      - name: Create Security PR
        if: env.SECURITY_FIXES_APPLIED == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔒 Security updates - resolve vulnerabilities',
              head: process.env.SECURITY_BRANCH_NAME,
              base: 'main',
              body: `## Security Updates

This PR contains security updates to resolve vulnerabilities found by safety check.

### Changes
- Updated vulnerable dependencies
- Resolved security issues
- All tests pass

### Security Scan Results
- Vulnerabilities before: ${process.env.VULN_COUNT}
- Vulnerabilities after: ${process.env.VULN_COUNT_AFTER}

**This is an automated security update. Please review and merge promptly.**
              `
            });
            
            console.log(`Created security PR #${pr.number}`);
            
            // Add labels and mark as high priority
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['security', 'dependencies', 'automated', 'high-priority']
            });

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-artifacts
          path: |
            security-audit.json
            security-audit-after.json
            vulnerable_packages.txt

  # Dependency health check
  dependency-health:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Create virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          uv pip install -e ".[all]"
          uv pip install pip-audit

      - name: Run dependency health check
        run: |
          echo "# Dependency Health Report" > dependency-health.md
          echo "" >> dependency-health.md
          echo "## Overview" >> dependency-health.md
          echo "- Date: $(date)" >> dependency-health.md
          echo "- Python version: ${{ env.PYTHON_VERSION }}" >> dependency-health.md
          echo "" >> dependency-health.md
          
          # Check for outdated packages
          echo "## Outdated Packages" >> dependency-health.md
          if uv pip list --outdated --format=json > outdated.json; then
            OUTDATED_COUNT=$(jq length outdated.json)
            echo "Found $OUTDATED_COUNT outdated packages" >> dependency-health.md
            
            if [ "$OUTDATED_COUNT" -gt 0 ]; then
              echo "| Package | Current | Latest |" >> dependency-health.md
              echo "|---------|---------|---------|" >> dependency-health.md
              jq -r '.[] | "| \(.name) | \(.version) | \(.latest_version) |"' outdated.json >> dependency-health.md
            fi
          fi
          
          echo "" >> dependency-health.md
          
          # Check for vulnerable packages
          echo "## Security Vulnerabilities" >> dependency-health.md
          if uv run safety check --json --output vulns.json; then
            echo "✅ No vulnerabilities found" >> dependency-health.md
          else
            VULN_COUNT=$(jq '.vulnerabilities | length' vulns.json 2>/dev/null || echo "0")
            echo "⚠️ Found $VULN_COUNT vulnerabilities" >> dependency-health.md
            
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "| Package | Vulnerability | Severity |" >> dependency-health.md
              echo "|---------|---------------|----------|" >> dependency-health.md
              jq -r '.vulnerabilities[] | "| \(.package_name) | \(.advisory) | \(.severity // "Unknown") |"' vulns.json >> dependency-health.md
            fi
          fi
          
          echo "" >> dependency-health.md
          
          # Check for license issues
          echo "## License Analysis" >> dependency-health.md
          if uv run pip-licenses --format=json --output-file=licenses.json; then
            echo "✅ License check completed" >> dependency-health.md
            
            # Check for GPL licenses
            GPL_COUNT=$(jq '[.[] | select(.License | contains("GPL"))] | length' licenses.json)
            if [ "$GPL_COUNT" -gt 0 ]; then
              echo "⚠️ Found $GPL_COUNT GPL-licensed packages" >> dependency-health.md
            fi
          fi

      - name: Create issue for health report
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const healthReport = fs.readFileSync('dependency-health.md', 'utf8');
            
            // Check if there's already an open issue for dependency health
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'dependency-health',
              state: 'open'
            });
            
            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Dependency Health Report - ${new Date().toISOString().split('T')[0]}`,
                body: healthReport,
                labels: ['dependency-health', 'maintenance']
              });
            } else {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: healthReport
              });
            }

      - name: Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-health-report
          path: |
            dependency-health.md
            outdated.json
            vulns.json
            licenses.json

  # Summary
  update-summary:
    runs-on: ubuntu-latest
    needs: [check-updates, update-dependencies, security-updates, dependency-health]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "# Dependency Update Summary" > summary.md
          echo "" >> summary.md
          echo "## Results" >> summary.md
          echo "- Check Updates: ${{ needs.check-updates.result }}" >> summary.md
          echo "- Update Dependencies: ${{ needs.update-dependencies.result }}" >> summary.md
          echo "- Security Updates: ${{ needs.security-updates.result }}" >> summary.md
          echo "- Dependency Health: ${{ needs.dependency-health.result }}" >> summary.md
          echo "" >> summary.md
          echo "## Details" >> summary.md
          echo "- Has Updates: ${{ needs.check-updates.outputs.has_updates }}" >> summary.md
          echo "- Update Summary: ${{ needs.check-updates.outputs.update_summary }}" >> summary.md

      - name: Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: update-summary
          path: summary.md
